// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_flixel_animation_FlxAnimation
#define INCLUDED_flixel_animation_FlxAnimation

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
HX_DECLARE_CLASS2(flixel,animation,FlxAnimation)
HX_DECLARE_CLASS2(flixel,animation,FlxAnimationController)
HX_DECLARE_CLASS2(flixel,animation,FlxBaseAnimation)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace flixel{
namespace animation{


class HXCPP_CLASS_ATTRIBUTES FlxAnimation_obj : public  ::flixel::animation::FlxBaseAnimation_obj
{
	public:
		typedef  ::flixel::animation::FlxBaseAnimation_obj super;
		typedef FlxAnimation_obj OBJ_;
		FlxAnimation_obj();

	public:
		enum { _hx_ClassId = 0x7f0ac992 };

		void __construct( ::flixel::animation::FlxAnimationController Parent,::String Name,::Array< int > Frames,hx::Null< int >  __o_FrameRate,hx::Null< bool >  __o_Looped,hx::Null< bool >  __o_FlipX,hx::Null< bool >  __o_FlipY);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.animation.FlxAnimation")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.animation.FlxAnimation"); }
		static hx::ObjectPtr< FlxAnimation_obj > __new( ::flixel::animation::FlxAnimationController Parent,::String Name,::Array< int > Frames,hx::Null< int >  __o_FrameRate,hx::Null< bool >  __o_Looped,hx::Null< bool >  __o_FlipX,hx::Null< bool >  __o_FlipY);
		static hx::ObjectPtr< FlxAnimation_obj > __alloc(hx::Ctx *_hx_ctx, ::flixel::animation::FlxAnimationController Parent,::String Name,::Array< int > Frames,hx::Null< int >  __o_FrameRate,hx::Null< bool >  __o_Looped,hx::Null< bool >  __o_FlipX,hx::Null< bool >  __o_FlipY);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxAnimation_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FlxAnimation","\x52","\x38","\x1d","\x68"); }

		int frameRate;
		int curFrame;
		int numFrames;
		Float delay;
		bool finished;
		bool paused;
		bool looped;
		bool reversed;
		bool flipX;
		bool flipY;
		::Array< int > frames;
		Float _frameTimer;
		void destroy();

		void play(hx::Null< bool >  Force,hx::Null< bool >  Reversed,hx::Null< int >  Frame);
		::Dynamic play_dyn();

		void restart();
		::Dynamic restart_dyn();

		void stop();
		::Dynamic stop_dyn();

		void reset();
		::Dynamic reset_dyn();

		void finish();
		::Dynamic finish_dyn();

		void pause();
		::Dynamic pause_dyn();

		void resume();
		::Dynamic resume_dyn();

		void reverse();
		::Dynamic reverse_dyn();

		void update(Float elapsed);

		 ::flixel::animation::FlxBaseAnimation clone( ::flixel::animation::FlxAnimationController Parent);

		int set_frameRate(int value);
		::Dynamic set_frameRate_dyn();

		int set_curFrame(int Frame);
		::Dynamic set_curFrame_dyn();

		int get_numFrames();
		::Dynamic get_numFrames_dyn();

};

} // end namespace flixel
} // end namespace animation

#endif /* INCLUDED_flixel_animation_FlxAnimation */ 
