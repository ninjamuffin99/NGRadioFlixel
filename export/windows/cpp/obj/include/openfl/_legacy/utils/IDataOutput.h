// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_openfl__legacy_utils_IDataOutput
#define INCLUDED_openfl__legacy_utils_IDataOutput

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS3(openfl,_legacy,utils,IDataOutput)

namespace openfl{
namespace _legacy{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES IDataOutput_obj {
	public:
		typedef hx::Object super;
		HX_DO_INTERFACE_RTTI;

		::String (hx::Object :: *_hx_get_endian)(); 
		static inline ::String get_endian( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( static_cast< ::openfl::_legacy::utils::IDataOutput_obj *>(_hx_.mPtr->_hx_getInterface(0xe503d93b)))->_hx_get_endian)();
		}
		::String (hx::Object :: *_hx_set_endian)(::String value); 
		static inline ::String set_endian( ::Dynamic _hx_,::String value) {
			return (_hx_.mPtr->*( static_cast< ::openfl::_legacy::utils::IDataOutput_obj *>(_hx_.mPtr->_hx_getInterface(0xe503d93b)))->_hx_set_endian)(value);
		}
		void (hx::Object :: *_hx_writeBoolean)(bool value); 
		static inline void writeBoolean( ::Dynamic _hx_,bool value) {
			(_hx_.mPtr->*( static_cast< ::openfl::_legacy::utils::IDataOutput_obj *>(_hx_.mPtr->_hx_getInterface(0xe503d93b)))->_hx_writeBoolean)(value);
		}
		void (hx::Object :: *_hx_writeByte)(int value); 
		static inline void writeByte( ::Dynamic _hx_,int value) {
			(_hx_.mPtr->*( static_cast< ::openfl::_legacy::utils::IDataOutput_obj *>(_hx_.mPtr->_hx_getInterface(0xe503d93b)))->_hx_writeByte)(value);
		}
		void (hx::Object :: *_hx_writeBytes)( ::haxe::io::Bytes bytes,hx::Null< int >  offset,hx::Null< int >  length); 
		static inline void writeBytes( ::Dynamic _hx_, ::haxe::io::Bytes bytes,hx::Null< int >  offset,hx::Null< int >  length) {
			(_hx_.mPtr->*( static_cast< ::openfl::_legacy::utils::IDataOutput_obj *>(_hx_.mPtr->_hx_getInterface(0xe503d93b)))->_hx_writeBytes)(bytes,offset,length);
		}
		void (hx::Object :: *_hx_writeDouble)(Float value); 
		static inline void writeDouble( ::Dynamic _hx_,Float value) {
			(_hx_.mPtr->*( static_cast< ::openfl::_legacy::utils::IDataOutput_obj *>(_hx_.mPtr->_hx_getInterface(0xe503d93b)))->_hx_writeDouble)(value);
		}
		void (hx::Object :: *_hx_writeFloat)(Float value); 
		static inline void writeFloat( ::Dynamic _hx_,Float value) {
			(_hx_.mPtr->*( static_cast< ::openfl::_legacy::utils::IDataOutput_obj *>(_hx_.mPtr->_hx_getInterface(0xe503d93b)))->_hx_writeFloat)(value);
		}
		void (hx::Object :: *_hx_writeInt)(int value); 
		static inline void writeInt( ::Dynamic _hx_,int value) {
			(_hx_.mPtr->*( static_cast< ::openfl::_legacy::utils::IDataOutput_obj *>(_hx_.mPtr->_hx_getInterface(0xe503d93b)))->_hx_writeInt)(value);
		}
		void (hx::Object :: *_hx_writeShort)(int value); 
		static inline void writeShort( ::Dynamic _hx_,int value) {
			(_hx_.mPtr->*( static_cast< ::openfl::_legacy::utils::IDataOutput_obj *>(_hx_.mPtr->_hx_getInterface(0xe503d93b)))->_hx_writeShort)(value);
		}
		void (hx::Object :: *_hx_writeUnsignedInt)(int value); 
		static inline void writeUnsignedInt( ::Dynamic _hx_,int value) {
			(_hx_.mPtr->*( static_cast< ::openfl::_legacy::utils::IDataOutput_obj *>(_hx_.mPtr->_hx_getInterface(0xe503d93b)))->_hx_writeUnsignedInt)(value);
		}
		void (hx::Object :: *_hx_writeUTF)(::String value); 
		static inline void writeUTF( ::Dynamic _hx_,::String value) {
			(_hx_.mPtr->*( static_cast< ::openfl::_legacy::utils::IDataOutput_obj *>(_hx_.mPtr->_hx_getInterface(0xe503d93b)))->_hx_writeUTF)(value);
		}
		void (hx::Object :: *_hx_writeUTFBytes)(::String value); 
		static inline void writeUTFBytes( ::Dynamic _hx_,::String value) {
			(_hx_.mPtr->*( static_cast< ::openfl::_legacy::utils::IDataOutput_obj *>(_hx_.mPtr->_hx_getInterface(0xe503d93b)))->_hx_writeUTFBytes)(value);
		}
};

} // end namespace openfl
} // end namespace _legacy
} // end namespace utils

#endif /* INCLUDED_openfl__legacy_utils_IDataOutput */ 
