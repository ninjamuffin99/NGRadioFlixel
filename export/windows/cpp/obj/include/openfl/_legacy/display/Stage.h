// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_openfl__legacy_display_Stage
#define INCLUDED_openfl__legacy_display_Stage

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS3(openfl,_legacy,display,DisplayObject)
HX_DECLARE_CLASS3(openfl,_legacy,display,DisplayObjectContainer)
HX_DECLARE_CLASS3(openfl,_legacy,display,IBitmapDrawable)
HX_DECLARE_CLASS3(openfl,_legacy,display,InteractiveObject)
HX_DECLARE_CLASS3(openfl,_legacy,display,Sprite)
HX_DECLARE_CLASS3(openfl,_legacy,display,Stage)
HX_DECLARE_CLASS3(openfl,_legacy,display,StageAlign)
HX_DECLARE_CLASS3(openfl,_legacy,display,StageDisplayState)
HX_DECLARE_CLASS3(openfl,_legacy,display,StageQuality)
HX_DECLARE_CLASS3(openfl,_legacy,display,StageScaleMode)
HX_DECLARE_CLASS3(openfl,_legacy,display,TouchInfo)
HX_DECLARE_CLASS3(openfl,_legacy,events,Event)
HX_DECLARE_CLASS3(openfl,_legacy,events,EventDispatcher)
HX_DECLARE_CLASS3(openfl,_legacy,events,IEventDispatcher)
HX_DECLARE_CLASS3(openfl,_legacy,events,MouseEvent)
HX_DECLARE_CLASS3(openfl,_legacy,geom,Point)
HX_DECLARE_CLASS3(openfl,_legacy,geom,Rectangle)
HX_DECLARE_CLASS3(openfl,_legacy,_hx_system,ScreenMode)
HX_DECLARE_CLASS2(openfl,display,Stage3D)

namespace openfl{
namespace _legacy{
namespace display{


class HXCPP_CLASS_ATTRIBUTES Stage_obj : public  ::openfl::_legacy::display::DisplayObjectContainer_obj
{
	public:
		typedef  ::openfl::_legacy::display::DisplayObjectContainer_obj super;
		typedef Stage_obj OBJ_;
		Stage_obj();

	public:
		enum { _hx_ClassId = 0x13f34034 };

		void __construct( ::Dynamic handle,int width,int height);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl._legacy.display.Stage")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl._legacy.display.Stage"); }
		static hx::ObjectPtr< Stage_obj > __new( ::Dynamic handle,int width,int height);
		static hx::ObjectPtr< Stage_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic handle,int width,int height);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Stage_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Stage","\x9e","\xda","\x38","\x17"); }

		static void __boot();
		static Float _hx___earlyWakeup;
		static bool _hx___exiting;
		static int OrientationPortrait;
		static int OrientationPortraitUpsideDown;
		static int OrientationLandscapeRight;
		static int OrientationLandscapeLeft;
		static int OrientationFaceUp;
		static int OrientationFaceDown;
		static int OrientationPortraitAny;
		static int OrientationLandscapeAny;
		static int OrientationAny;
		static int efLeftDown;
		static int efShiftDown;
		static int efCtrlDown;
		static int efAltDown;
		static int efCommandDown;
		static int efLocationRight;
		static int efNoNativeClick;
		static ::Array< ::String > sClickEvents;
		static ::Array< ::String > sDownEvents;
		static ::Array< ::String > sUpEvents;
		static ::Array< ::String > _hx___mouseChanges;
		static ::Array< ::String > _hx___touchChanges;
		static ::Dynamic getOrientation;
		static inline ::Dynamic &getOrientation_dyn() {return getOrientation; }

		static ::Dynamic getNormalOrientation;
		static inline ::Dynamic &getNormalOrientation_dyn() {return getNormalOrientation; }

		static void setFixedOrientation(int orientation);
		static ::Dynamic setFixedOrientation_dyn();

		static ::Dynamic shouldRotateInterface;
		static inline ::Dynamic &shouldRotateInterface_dyn() {return shouldRotateInterface; }

		static  ::Dynamic lime_set_stage_handler;
		static Dynamic lime_set_stage_handler_dyn() { return lime_set_stage_handler;}
		static  ::Dynamic lime_render_stage;
		static Dynamic lime_render_stage_dyn() { return lime_render_stage;}
		static  ::Dynamic lime_stage_get_autos3d;
		static Dynamic lime_stage_get_autos3d_dyn() { return lime_stage_get_autos3d;}
		static  ::Dynamic lime_stage_set_autos3d;
		static Dynamic lime_stage_set_autos3d_dyn() { return lime_stage_set_autos3d;}
		static  ::Dynamic lime_stage_get_focus_id;
		static Dynamic lime_stage_get_focus_id_dyn() { return lime_stage_get_focus_id;}
		static  ::Dynamic lime_stage_set_focus;
		static Dynamic lime_stage_set_focus_dyn() { return lime_stage_set_focus;}
		static  ::Dynamic lime_stage_get_focus_rect;
		static Dynamic lime_stage_get_focus_rect_dyn() { return lime_stage_get_focus_rect;}
		static  ::Dynamic lime_stage_set_focus_rect;
		static Dynamic lime_stage_set_focus_rect_dyn() { return lime_stage_set_focus_rect;}
		static  ::Dynamic lime_stage_is_opengl;
		static Dynamic lime_stage_is_opengl_dyn() { return lime_stage_is_opengl;}
		static  ::Dynamic lime_stage_get_stage_width;
		static Dynamic lime_stage_get_stage_width_dyn() { return lime_stage_get_stage_width;}
		static  ::Dynamic lime_stage_get_stage_height;
		static Dynamic lime_stage_get_stage_height_dyn() { return lime_stage_get_stage_height;}
		static  ::Dynamic lime_stage_get_dpi_scale;
		static Dynamic lime_stage_get_dpi_scale_dyn() { return lime_stage_get_dpi_scale;}
		static  ::Dynamic lime_stage_get_scale_mode;
		static Dynamic lime_stage_get_scale_mode_dyn() { return lime_stage_get_scale_mode;}
		static  ::Dynamic lime_stage_set_scale_mode;
		static Dynamic lime_stage_set_scale_mode_dyn() { return lime_stage_set_scale_mode;}
		static  ::Dynamic lime_stage_get_align;
		static Dynamic lime_stage_get_align_dyn() { return lime_stage_get_align;}
		static  ::Dynamic lime_stage_set_align;
		static Dynamic lime_stage_set_align_dyn() { return lime_stage_set_align;}
		static  ::Dynamic lime_stage_get_quality;
		static Dynamic lime_stage_get_quality_dyn() { return lime_stage_get_quality;}
		static  ::Dynamic lime_stage_set_quality;
		static Dynamic lime_stage_set_quality_dyn() { return lime_stage_set_quality;}
		static  ::Dynamic lime_stage_get_display_state;
		static Dynamic lime_stage_get_display_state_dyn() { return lime_stage_get_display_state;}
		static  ::Dynamic lime_stage_set_display_state;
		static Dynamic lime_stage_set_display_state_dyn() { return lime_stage_set_display_state;}
		static  ::Dynamic lime_stage_set_next_wake;
		static Dynamic lime_stage_set_next_wake_dyn() { return lime_stage_set_next_wake;}
		static  ::Dynamic lime_stage_request_render;
		static  ::Dynamic lime_stage_resize_window;
		static Dynamic lime_stage_resize_window_dyn() { return lime_stage_resize_window;}
		static  ::Dynamic lime_stage_set_resolution;
		static Dynamic lime_stage_set_resolution_dyn() { return lime_stage_set_resolution;}
		static  ::Dynamic lime_stage_set_screenmode;
		static Dynamic lime_stage_set_screenmode_dyn() { return lime_stage_set_screenmode;}
		static  ::Dynamic lime_stage_set_fullscreen;
		static Dynamic lime_stage_set_fullscreen_dyn() { return lime_stage_set_fullscreen;}
		static  ::Dynamic lime_stage_show_cursor;
		static Dynamic lime_stage_show_cursor_dyn() { return lime_stage_show_cursor;}
		static  ::Dynamic lime_stage_set_fixed_orientation;
		static Dynamic lime_stage_set_fixed_orientation_dyn() { return lime_stage_set_fixed_orientation;}
		static  ::Dynamic lime_stage_get_orientation;
		static Dynamic lime_stage_get_orientation_dyn() { return lime_stage_get_orientation;}
		static  ::Dynamic lime_stage_get_normal_orientation;
		static Dynamic lime_stage_get_normal_orientation_dyn() { return lime_stage_get_normal_orientation;}
		bool allowsFullScreen;
		bool active;
		Float dpiScale;
		Float frameRate;
		bool isOpenGL;
		 ::Dynamic onKey;
		Dynamic onKey_dyn() { return onKey;}
		 ::Dynamic onQuit;
		Dynamic onQuit_dyn() { return onQuit;}
		bool pauseWhenDeactivated;
		 ::Dynamic renderRequest;
		Dynamic renderRequest_dyn() { return renderRequest;}
		 ::openfl::_legacy::geom::Rectangle softKeyboardRect;
		::Array< ::Dynamic> stage3Ds;
		int stageHeight;
		int stageWidth;
		 ::haxe::ds::IntMap _hx___joyAxisData;
		 ::openfl::_legacy::geom::Rectangle _hx___dragBounds;
		 ::openfl::_legacy::display::Sprite _hx___dragObject;
		Float _hx___dragOffsetX;
		Float _hx___dragOffsetY;
		::Array< ::Dynamic> _hx___focusOverObjects;
		Float _hx___framePeriod;
		bool _hx___invalid;
		int _hx___lastClickTime;
		::Array< ::Dynamic> _hx___lastDown;
		Float _hx___lastRender;
		::Array< ::Dynamic> _hx___mouseOverObjects;
		Float _hx___nextRender;
		 ::openfl::_legacy::geom::Rectangle _hx___softKeyboardRect;
		 ::haxe::ds::IntMap _hx___touchInfo;
		void invalidate();
		::Dynamic invalidate_dyn();

		virtual void resize(int width,int height);
		::Dynamic resize_dyn();

		void setResolution(int width,int height);
		::Dynamic setResolution_dyn();

		void setScreenMode( ::openfl::_legacy::_hx_system::ScreenMode mode);
		::Dynamic setScreenMode_dyn();

		void setFullscreen(bool full);
		::Dynamic setFullscreen_dyn();

		void showCursor(bool show);
		::Dynamic showCursor_dyn();

		void _hx___checkFocusInOuts( ::Dynamic event,::Array< ::Dynamic> stack);
		::Dynamic _hx___checkFocusInOuts_dyn();

		bool _hx___checkInOuts( ::openfl::_legacy::events::MouseEvent event,::Array< ::Dynamic> stack, ::openfl::_legacy::display::TouchInfo touchInfo);
		::Dynamic _hx___checkInOuts_dyn();

		void _hx___checkRender();
		::Dynamic _hx___checkRender_dyn();

		virtual Float _hx___doProcessStageEvent( ::Dynamic event);
		::Dynamic _hx___doProcessStageEvent_dyn();

		 ::Dynamic _hx___processStageEvent( ::Dynamic event);
		::Dynamic _hx___processStageEvent_dyn();

		void _hx___drag( ::openfl::_legacy::geom::Point mouse);
		::Dynamic _hx___drag_dyn();

		Float _hx___nextFrameDue(Float otherTimers);
		::Dynamic _hx___nextFrameDue_dyn();

		void _hx___onChange( ::Dynamic event);
		::Dynamic _hx___onChange_dyn();

		void _hx___onFocus( ::Dynamic event);
		::Dynamic _hx___onFocus_dyn();

		void _hx___onJoystick( ::Dynamic event,::String type);
		::Dynamic _hx___onJoystick_dyn();

		void _hx___onKey( ::Dynamic event,::String type);
		::Dynamic _hx___onKey_dyn();

		void _hx___onMouse( ::Dynamic event,::String type,bool fromMouse);
		::Dynamic _hx___onMouse_dyn();

		void _hx___onRenderContext(bool active);
		::Dynamic _hx___onRenderContext_dyn();

		void _hx___onResize(Float width,Float height);
		::Dynamic _hx___onResize_dyn();

		void _hx___onSysWM( ::Dynamic event);
		::Dynamic _hx___onSysWM_dyn();

		void _hx___onTouch( ::Dynamic event,::String type, ::openfl::_legacy::display::TouchInfo touchInfo);
		::Dynamic _hx___onTouch_dyn();

		void _hx___pollTimers();
		::Dynamic _hx___pollTimers_dyn();

		virtual void _hx___render(bool sendEnterFrame);
		::Dynamic _hx___render_dyn();

		void _hx___setActive(bool value);
		::Dynamic _hx___setActive_dyn();

		void _hx___startDrag( ::openfl::_legacy::display::Sprite sprite,bool lockCenter, ::openfl::_legacy::geom::Rectangle bounds);
		::Dynamic _hx___startDrag_dyn();

		void _hx___stopDrag( ::openfl::_legacy::display::Sprite sprite);
		::Dynamic _hx___stopDrag_dyn();

		Float _hx___updateNextWake();
		::Dynamic _hx___updateNextWake_dyn();

		 ::openfl::_legacy::display::StageAlign get_align();
		::Dynamic get_align_dyn();

		 ::openfl::_legacy::display::StageAlign set_align( ::openfl::_legacy::display::StageAlign value);
		::Dynamic set_align_dyn();

		int get_color();
		::Dynamic get_color_dyn();

		int set_color(int value);
		::Dynamic set_color_dyn();

		 ::openfl::_legacy::display::StageDisplayState get_displayState();
		::Dynamic get_displayState_dyn();

		 ::openfl::_legacy::display::StageDisplayState set_displayState( ::openfl::_legacy::display::StageDisplayState value);
		::Dynamic set_displayState_dyn();

		Float get_dpiScale();
		::Dynamic get_dpiScale_dyn();

		 ::openfl::_legacy::display::InteractiveObject get_focus();
		::Dynamic get_focus_dyn();

		 ::openfl::_legacy::display::InteractiveObject set_focus( ::openfl::_legacy::display::InteractiveObject value);
		::Dynamic set_focus_dyn();

		Float set_frameRate(Float value);
		::Dynamic set_frameRate_dyn();

		bool get_isOpenGL();
		::Dynamic get_isOpenGL_dyn();

		 ::openfl::_legacy::display::StageQuality get_quality();
		::Dynamic get_quality_dyn();

		 ::openfl::_legacy::display::StageQuality set_quality( ::openfl::_legacy::display::StageQuality value);
		::Dynamic set_quality_dyn();

		 ::openfl::_legacy::display::StageScaleMode get_scaleMode();
		::Dynamic get_scaleMode_dyn();

		 ::openfl::_legacy::display::StageScaleMode set_scaleMode( ::openfl::_legacy::display::StageScaleMode value);
		::Dynamic set_scaleMode_dyn();

		 ::openfl::_legacy::geom::Rectangle get_softKeyboardRect();
		::Dynamic get_softKeyboardRect_dyn();

		 ::openfl::_legacy::display::Stage get_stage();

		bool get_stageFocusRect();
		::Dynamic get_stageFocusRect_dyn();

		bool set_stageFocusRect(bool value);
		::Dynamic set_stageFocusRect_dyn();

		bool get_autos3d();
		::Dynamic get_autos3d_dyn();

		bool set_autos3d(bool value);
		::Dynamic set_autos3d_dyn();

		int get_stageHeight();
		::Dynamic get_stageHeight_dyn();

		int get_stageWidth();
		::Dynamic get_stageWidth_dyn();

};

} // end namespace openfl
} // end namespace _legacy
} // end namespace display

#endif /* INCLUDED_openfl__legacy_display_Stage */ 
