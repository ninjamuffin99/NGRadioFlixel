// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_openfl__legacy_display_Graphics
#define INCLUDED_openfl__legacy_display_Graphics

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(openfl,_legacy,display,BitmapData)
HX_DECLARE_CLASS3(openfl,_legacy,display,CapsStyle)
HX_DECLARE_CLASS3(openfl,_legacy,display,GradientType)
HX_DECLARE_CLASS3(openfl,_legacy,display,Graphics)
HX_DECLARE_CLASS3(openfl,_legacy,display,IBitmapDrawable)
HX_DECLARE_CLASS3(openfl,_legacy,display,IGraphicsData)
HX_DECLARE_CLASS3(openfl,_legacy,display,InterpolationMethod)
HX_DECLARE_CLASS3(openfl,_legacy,display,JointStyle)
HX_DECLARE_CLASS3(openfl,_legacy,display,LineScaleMode)
HX_DECLARE_CLASS3(openfl,_legacy,display,SpreadMethod)
HX_DECLARE_CLASS3(openfl,_legacy,display,Tilesheet)
HX_DECLARE_CLASS3(openfl,_legacy,display,TriangleCulling)
HX_DECLARE_CLASS3(openfl,_legacy,geom,Matrix)

namespace openfl{
namespace _legacy{
namespace display{


class HXCPP_CLASS_ATTRIBUTES Graphics_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Graphics_obj OBJ_;
		Graphics_obj();

	public:
		enum { _hx_ClassId = 0x45527115 };

		void __construct( ::Dynamic handle);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl._legacy.display.Graphics")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl._legacy.display.Graphics"); }
		static hx::ObjectPtr< Graphics_obj > __new( ::Dynamic handle);
		static hx::ObjectPtr< Graphics_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic handle);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Graphics_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Graphics","\xeb","\xb4","\x19","\xec"); }

		static void __boot();
		static int TILE_SCALE;
		static int TILE_ROTATION;
		static int TILE_RGB;
		static int TILE_ALPHA;
		static int TILE_TRANS_2x2;
		static int TILE_RECT;
		static int TILE_ORIGIN;
		static int TILE_SMOOTH;
		static int TILE_BLEND_NORMAL;
		static int TILE_BLEND_ADD;
		static int RGBA(int rgb,hx::Null< int >  alpha);
		static ::Dynamic RGBA_dyn();

		static  ::Dynamic lime_gfx_clear;
		static Dynamic lime_gfx_clear_dyn() { return lime_gfx_clear;}
		static  ::Dynamic lime_gfx_begin_fill;
		static Dynamic lime_gfx_begin_fill_dyn() { return lime_gfx_begin_fill;}
		static  ::Dynamic lime_gfx_begin_bitmap_fill;
		static Dynamic lime_gfx_begin_bitmap_fill_dyn() { return lime_gfx_begin_bitmap_fill;}
		static  ::Dynamic lime_gfx_line_bitmap_fill;
		static Dynamic lime_gfx_line_bitmap_fill_dyn() { return lime_gfx_line_bitmap_fill;}
		static  ::Dynamic lime_gfx_begin_gradient_fill;
		static Dynamic lime_gfx_begin_gradient_fill_dyn() { return lime_gfx_begin_gradient_fill;}
		static  ::Dynamic lime_gfx_line_gradient_fill;
		static Dynamic lime_gfx_line_gradient_fill_dyn() { return lime_gfx_line_gradient_fill;}
		static  ::Dynamic lime_gfx_end_fill;
		static Dynamic lime_gfx_end_fill_dyn() { return lime_gfx_end_fill;}
		static  ::Dynamic lime_gfx_line_style;
		static Dynamic lime_gfx_line_style_dyn() { return lime_gfx_line_style;}
		static  ::Dynamic lime_gfx_move_to;
		static Dynamic lime_gfx_move_to_dyn() { return lime_gfx_move_to;}
		static  ::Dynamic lime_gfx_line_to;
		static Dynamic lime_gfx_line_to_dyn() { return lime_gfx_line_to;}
		static  ::Dynamic lime_gfx_curve_to;
		static Dynamic lime_gfx_curve_to_dyn() { return lime_gfx_curve_to;}
		static  ::Dynamic lime_gfx_arc_to;
		static Dynamic lime_gfx_arc_to_dyn() { return lime_gfx_arc_to;}
		static  ::Dynamic lime_gfx_draw_ellipse;
		static Dynamic lime_gfx_draw_ellipse_dyn() { return lime_gfx_draw_ellipse;}
		static  ::Dynamic lime_gfx_draw_data;
		static Dynamic lime_gfx_draw_data_dyn() { return lime_gfx_draw_data;}
		static  ::Dynamic lime_gfx_draw_datum;
		static Dynamic lime_gfx_draw_datum_dyn() { return lime_gfx_draw_datum;}
		static  ::Dynamic lime_gfx_draw_rect;
		static Dynamic lime_gfx_draw_rect_dyn() { return lime_gfx_draw_rect;}
		static  ::Dynamic lime_gfx_draw_path;
		static Dynamic lime_gfx_draw_path_dyn() { return lime_gfx_draw_path;}
		static  ::Dynamic lime_gfx_draw_tiles;
		static Dynamic lime_gfx_draw_tiles_dyn() { return lime_gfx_draw_tiles;}
		static  ::Dynamic lime_gfx_draw_points;
		static Dynamic lime_gfx_draw_points_dyn() { return lime_gfx_draw_points;}
		static  ::Dynamic lime_gfx_draw_round_rect;
		static Dynamic lime_gfx_draw_round_rect_dyn() { return lime_gfx_draw_round_rect;}
		static  ::Dynamic lime_gfx_draw_triangles;
		static Dynamic lime_gfx_draw_triangles_dyn() { return lime_gfx_draw_triangles;}
		 ::Dynamic _hx___handle;
		void arcTo(Float controlX,Float controlY,Float x,Float y);
		::Dynamic arcTo_dyn();

		void beginBitmapFill( ::openfl::_legacy::display::BitmapData bitmap, ::openfl::_legacy::geom::Matrix matrix,hx::Null< bool >  repeat,hx::Null< bool >  smooth);
		::Dynamic beginBitmapFill_dyn();

		void beginFill(int color,hx::Null< Float >  alpha);
		::Dynamic beginFill_dyn();

		void beginGradientFill( ::openfl::_legacy::display::GradientType type,::cpp::VirtualArray colors,::cpp::VirtualArray alphas,::cpp::VirtualArray ratios, ::openfl::_legacy::geom::Matrix matrix, ::openfl::_legacy::display::SpreadMethod spreadMethod, ::openfl::_legacy::display::InterpolationMethod interpolationMethod,hx::Null< Float >  focalPointRatio);
		::Dynamic beginGradientFill_dyn();

		void clear();
		::Dynamic clear_dyn();

		void copyFrom( ::openfl::_legacy::display::Graphics sourceGraphics);
		::Dynamic copyFrom_dyn();

		void cubicCurveTo(Float controlX1,Float controlY1,Float controlX2,Float controlY2,Float anchorX,Float anchorY);
		::Dynamic cubicCurveTo_dyn();

		void curveTo(Float controlX,Float controlY,Float anchorX,Float anchorY);
		::Dynamic curveTo_dyn();

		void drawCircle(Float x,Float y,Float radius);
		::Dynamic drawCircle_dyn();

		void drawEllipse(Float x,Float y,Float width,Float height);
		::Dynamic drawEllipse_dyn();

		void drawGraphicsData(::Array< ::Dynamic> graphicsData);
		::Dynamic drawGraphicsData_dyn();

		void drawGraphicsDatum( ::openfl::_legacy::display::IGraphicsData graphicsDatum);
		::Dynamic drawGraphicsDatum_dyn();

		void drawPoints(::Array< Float > xy,::Array< int > pointRGBA,hx::Null< int >  defaultRGBA,hx::Null< Float >  size);
		::Dynamic drawPoints_dyn();

		void drawRect(Float x,Float y,Float width,Float height);
		::Dynamic drawRect_dyn();

		void drawRoundRect(Float x,Float y,Float width,Float height,Float radiusX, ::Dynamic radiusY);
		::Dynamic drawRoundRect_dyn();

		void drawRoundRectComplex(Float x,Float y,Float width,Float height,Float topLeftRadius,Float topRightRadius,Float bottomLeftRadius,Float bottomRightRadius);
		::Dynamic drawRoundRectComplex_dyn();

		void drawPath(::Array< int > commands,::Array< Float > data,::String winding);
		::Dynamic drawPath_dyn();

		void drawTiles( ::openfl::_legacy::display::Tilesheet sheet,::Array< Float > data,hx::Null< bool >  smooth,hx::Null< int >  flags,hx::Null< int >  count);
		::Dynamic drawTiles_dyn();

		void drawTriangles(::Array< Float > vertices,::Array< int > indices,::Array< Float > uvtData, ::openfl::_legacy::display::TriangleCulling culling,::Array< int > colors,hx::Null< int >  blendMode);
		::Dynamic drawTriangles_dyn();

		void endFill();
		::Dynamic endFill_dyn();

		void lineBitmapStyle( ::openfl::_legacy::display::BitmapData bitmap, ::openfl::_legacy::geom::Matrix matrix,hx::Null< bool >  repeat,hx::Null< bool >  smooth);
		::Dynamic lineBitmapStyle_dyn();

		void lineGradientStyle( ::openfl::_legacy::display::GradientType type,::cpp::VirtualArray colors,::cpp::VirtualArray alphas,::cpp::VirtualArray ratios, ::openfl::_legacy::geom::Matrix matrix, ::openfl::_legacy::display::SpreadMethod spreadMethod, ::openfl::_legacy::display::InterpolationMethod interpolationMethod,hx::Null< Float >  focalPointRatio);
		::Dynamic lineGradientStyle_dyn();

		void lineStyle( ::Dynamic thickness,hx::Null< int >  color,hx::Null< Float >  alpha,hx::Null< bool >  pixelHinting, ::openfl::_legacy::display::LineScaleMode scaleMode, ::openfl::_legacy::display::CapsStyle caps, ::openfl::_legacy::display::JointStyle joints,hx::Null< Float >  miterLimit);
		::Dynamic lineStyle_dyn();

		void lineTo(Float x,Float y);
		::Dynamic lineTo_dyn();

		void moveTo(Float x,Float y);
		::Dynamic moveTo_dyn();

};

} // end namespace openfl
} // end namespace _legacy
} // end namespace display

#endif /* INCLUDED_openfl__legacy_display_Graphics */ 
