// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_openfl__legacy_display_MovieClip
#define INCLUDED_openfl__legacy_display_MovieClip

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
HX_DECLARE_CLASS3(openfl,_legacy,display,DisplayObject)
HX_DECLARE_CLASS3(openfl,_legacy,display,DisplayObjectContainer)
HX_DECLARE_CLASS3(openfl,_legacy,display,IBitmapDrawable)
HX_DECLARE_CLASS3(openfl,_legacy,display,InteractiveObject)
HX_DECLARE_CLASS3(openfl,_legacy,display,MovieClip)
HX_DECLARE_CLASS3(openfl,_legacy,display,Sprite)
HX_DECLARE_CLASS3(openfl,_legacy,events,EventDispatcher)
HX_DECLARE_CLASS3(openfl,_legacy,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,display,FrameLabel)

namespace openfl{
namespace _legacy{
namespace display{


class HXCPP_CLASS_ATTRIBUTES MovieClip_obj : public  ::openfl::_legacy::display::Sprite_obj
{
	public:
		typedef  ::openfl::_legacy::display::Sprite_obj super;
		typedef MovieClip_obj OBJ_;
		MovieClip_obj();

	public:
		enum { _hx_ClassId = 0x7259cb16 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl._legacy.display.MovieClip")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl._legacy.display.MovieClip"); }
		static hx::ObjectPtr< MovieClip_obj > __new();
		static hx::ObjectPtr< MovieClip_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MovieClip_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		HX_DECLARE_IMPLEMENT_DYNAMIC;
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MovieClip","\x80","\xe2","\xed","\xb9"); }

		int currentFrame;
		::String currentFrameLabel;
		::String currentLabel;
		::Array< ::Dynamic> currentLabels;
		bool enabled;
		int framesLoaded;
		int totalFrames;
		int _hx___currentFrame;
		::String _hx___currentFrameLabel;
		::String _hx___currentLabel;
		::Array< ::Dynamic> _hx___currentLabels;
		int _hx___totalFrames;
		void gotoAndPlay( ::Dynamic frame,::String scene);
		::Dynamic gotoAndPlay_dyn();

		void gotoAndStop( ::Dynamic frame,::String scene);
		::Dynamic gotoAndStop_dyn();

		void nextFrame();
		::Dynamic nextFrame_dyn();

		::String _hx___getType();

		void play();
		::Dynamic play_dyn();

		void prevFrame();
		::Dynamic prevFrame_dyn();

		void stop();
		::Dynamic stop_dyn();

		int get_currentFrame();
		::Dynamic get_currentFrame_dyn();

		::String get_currentFrameLabel();
		::Dynamic get_currentFrameLabel_dyn();

		::String get_currentLabel();
		::Dynamic get_currentLabel_dyn();

		::Array< ::Dynamic> get_currentLabels();
		::Dynamic get_currentLabels_dyn();

		int get_framesLoaded();
		::Dynamic get_framesLoaded_dyn();

		int get_totalFrames();
		::Dynamic get_totalFrames_dyn();

};

} // end namespace openfl
} // end namespace _legacy
} // end namespace display

#endif /* INCLUDED_openfl__legacy_display_MovieClip */ 
