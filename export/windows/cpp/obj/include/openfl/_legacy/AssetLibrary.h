// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_openfl__legacy_AssetLibrary
#define INCLUDED_openfl__legacy_AssetLibrary

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(openfl,_legacy,AssetLibrary)
HX_DECLARE_CLASS2(openfl,_legacy,AssetType)
HX_DECLARE_CLASS3(openfl,_legacy,display,BitmapData)
HX_DECLARE_CLASS3(openfl,_legacy,display,DisplayObject)
HX_DECLARE_CLASS3(openfl,_legacy,display,DisplayObjectContainer)
HX_DECLARE_CLASS3(openfl,_legacy,display,IBitmapDrawable)
HX_DECLARE_CLASS3(openfl,_legacy,display,InteractiveObject)
HX_DECLARE_CLASS3(openfl,_legacy,display,MovieClip)
HX_DECLARE_CLASS3(openfl,_legacy,display,Sprite)
HX_DECLARE_CLASS3(openfl,_legacy,events,EventDispatcher)
HX_DECLARE_CLASS3(openfl,_legacy,events,IEventDispatcher)
HX_DECLARE_CLASS3(openfl,_legacy,media,Sound)
HX_DECLARE_CLASS3(openfl,_legacy,text,Font)
HX_DECLARE_CLASS3(openfl,_legacy,utils,ByteArray)
HX_DECLARE_CLASS3(openfl,_legacy,utils,IDataInput)
HX_DECLARE_CLASS3(openfl,_legacy,utils,IDataOutput)
HX_DECLARE_CLASS3(openfl,_legacy,utils,IMemoryRange)

namespace openfl{
namespace _legacy{


class HXCPP_CLASS_ATTRIBUTES AssetLibrary_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef AssetLibrary_obj OBJ_;
		AssetLibrary_obj();

	public:
		enum { _hx_ClassId = 0x0b1e32b7 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl._legacy.AssetLibrary")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl._legacy.AssetLibrary"); }
		static hx::ObjectPtr< AssetLibrary_obj > __new();
		static hx::ObjectPtr< AssetLibrary_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AssetLibrary_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("AssetLibrary","\x0b","\x4f","\xd4","\x27"); }

		 ::Dynamic eventCallback;
		virtual bool exists(::String id, ::openfl::_legacy::AssetType type);
		::Dynamic exists_dyn();

		virtual  ::openfl::_legacy::display::BitmapData getBitmapData(::String id);
		::Dynamic getBitmapData_dyn();

		virtual  ::openfl::_legacy::utils::ByteArray getBytes(::String id);
		::Dynamic getBytes_dyn();

		virtual  ::openfl::_legacy::text::Font getFont(::String id);
		::Dynamic getFont_dyn();

		 ::openfl::_legacy::display::MovieClip getMovieClip(::String id);
		::Dynamic getMovieClip_dyn();

		virtual  ::openfl::_legacy::media::Sound getMusic(::String id);
		::Dynamic getMusic_dyn();

		virtual ::String getPath(::String id);
		::Dynamic getPath_dyn();

		virtual  ::openfl::_legacy::media::Sound getSound(::String id);
		::Dynamic getSound_dyn();

		virtual ::String getText(::String id);
		::Dynamic getText_dyn();

		virtual bool isLocal(::String id, ::openfl::_legacy::AssetType type);
		::Dynamic isLocal_dyn();

		virtual ::Array< ::String > list( ::openfl::_legacy::AssetType type);
		::Dynamic list_dyn();

		void load( ::Dynamic handler);
		::Dynamic load_dyn();

		virtual void loadBitmapData(::String id, ::Dynamic handler);
		::Dynamic loadBitmapData_dyn();

		virtual void loadBytes(::String id, ::Dynamic handler);
		::Dynamic loadBytes_dyn();

		virtual void loadFont(::String id, ::Dynamic handler);
		::Dynamic loadFont_dyn();

		void loadMovieClip(::String id, ::Dynamic handler);
		::Dynamic loadMovieClip_dyn();

		virtual void loadMusic(::String id, ::Dynamic handler);
		::Dynamic loadMusic_dyn();

		virtual void loadSound(::String id, ::Dynamic handler);
		::Dynamic loadSound_dyn();

		virtual void loadText(::String id, ::Dynamic handler);
		::Dynamic loadText_dyn();

		void unload();
		::Dynamic unload_dyn();

};

} // end namespace openfl
} // end namespace _legacy

#endif /* INCLUDED_openfl__legacy_AssetLibrary */ 
