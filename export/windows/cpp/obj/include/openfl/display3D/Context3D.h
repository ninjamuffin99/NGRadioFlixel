// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_openfl_display3D_Context3D
#define INCLUDED_openfl_display3D_Context3D

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS3(openfl,_legacy,display,BitmapData)
HX_DECLARE_CLASS3(openfl,_legacy,display,DirectRenderer)
HX_DECLARE_CLASS3(openfl,_legacy,display,DisplayObject)
HX_DECLARE_CLASS3(openfl,_legacy,display,IBitmapDrawable)
HX_DECLARE_CLASS3(openfl,_legacy,display,OpenGLView)
HX_DECLARE_CLASS3(openfl,_legacy,events,Event)
HX_DECLARE_CLASS3(openfl,_legacy,events,EventDispatcher)
HX_DECLARE_CLASS3(openfl,_legacy,events,IEventDispatcher)
HX_DECLARE_CLASS3(openfl,_legacy,geom,Rectangle)
HX_DECLARE_CLASS3(openfl,_legacy,gl,GLFramebuffer)
HX_DECLARE_CLASS3(openfl,_legacy,gl,GLObject)
HX_DECLARE_CLASS3(openfl,_legacy,gl,GLRenderbuffer)
HX_DECLARE_CLASS3(openfl,_legacy,utils,ByteArray)
HX_DECLARE_CLASS3(openfl,_legacy,utils,IDataInput)
HX_DECLARE_CLASS3(openfl,_legacy,utils,IDataOutput)
HX_DECLARE_CLASS3(openfl,_legacy,utils,IMemoryRange)
HX_DECLARE_CLASS2(openfl,display3D,Context3D)
HX_DECLARE_CLASS2(openfl,display3D,Context3DBufferUsage)
HX_DECLARE_CLASS2(openfl,display3D,Context3DMipFilter)
HX_DECLARE_CLASS2(openfl,display3D,Context3DProgramType)
HX_DECLARE_CLASS2(openfl,display3D,Context3DTextureFilter)
HX_DECLARE_CLASS2(openfl,display3D,Context3DTextureFormat)
HX_DECLARE_CLASS2(openfl,display3D,Context3DVertexBufferFormat)
HX_DECLARE_CLASS2(openfl,display3D,Context3DWrapMode)
HX_DECLARE_CLASS2(openfl,display3D,IndexBuffer3D)
HX_DECLARE_CLASS2(openfl,display3D,Program3D)
HX_DECLARE_CLASS2(openfl,display3D,VertexBuffer3D)
HX_DECLARE_CLASS3(openfl,display3D,_Context3D,SamplerState)
HX_DECLARE_CLASS3(openfl,display3D,textures,CubeTexture)
HX_DECLARE_CLASS3(openfl,display3D,textures,RectangleTexture)
HX_DECLARE_CLASS3(openfl,display3D,textures,Texture)
HX_DECLARE_CLASS3(openfl,display3D,textures,TextureBase)
HX_DECLARE_CLASS2(openfl,geom,Matrix3D)

namespace openfl{
namespace display3D{


class HXCPP_CLASS_ATTRIBUTES Context3D_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Context3D_obj OBJ_;
		Context3D_obj();

	public:
		enum { _hx_ClassId = 0x6271873d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.display3D.Context3D")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl.display3D.Context3D"); }
		static hx::ObjectPtr< Context3D_obj > __new();
		static hx::ObjectPtr< Context3D_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Context3D_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Context3D","\x40","\x3c","\xcf","\xb8"); }

		static void __boot();
		static int TEXTURE_MAX_ANISOTROPY_EXT;
		static int MAX_SAMPLERS;
		static int MAX_TEXTURE_MAX_ANISOTROPY_EXT;
		static bool anisotropySupportTested;
		static bool supportsAnisotropy;
		static int maxSupportedAnisotropy;
		::String driverInfo;
		bool enableErrorChecking;
		int blendDestinationFactor;
		bool blendEnabled;
		int blendSourceFactor;
		 ::openfl::display3D::Program3D currentProgram;
		bool disposed;
		bool drawing;
		 ::openfl::_legacy::gl::GLFramebuffer framebuffer;
		::Array< ::Dynamic> indexBuffersCreated;
		 ::openfl::_legacy::display::OpenGLView ogl;
		::Array< ::Dynamic> programsCreated;
		 ::openfl::_legacy::gl::GLRenderbuffer renderbuffer;
		::Array< ::Dynamic> samplerParameters;
		 ::openfl::_legacy::geom::Rectangle scrollRect;
		 ::openfl::_legacy::gl::GLRenderbuffer stencilbuffer;
		int stencilCompareMode;
		int stencilRef;
		int stencilReadMask;
		::Array< ::Dynamic> texturesCreated;
		::Array< ::Dynamic> vertexBuffersCreated;
		Float _yFlip;
		bool backBufferDepthAndStencil;
		bool rttDepthAndStencil;
		 ::openfl::_legacy::geom::Rectangle scissorRectangle;
		bool renderToTexture;
		int rttWidth;
		int rttHeight;
		void clear(hx::Null< Float >  red,hx::Null< Float >  green,hx::Null< Float >  blue,hx::Null< Float >  alpha,hx::Null< Float >  depth,hx::Null< int >  stencil,hx::Null< int >  mask);
		::Dynamic clear_dyn();

		void configureBackBuffer(int width,int height,int antiAlias,hx::Null< bool >  enableDepthAndStencil);
		::Dynamic configureBackBuffer_dyn();

		void setBackBufferViewPort( ::Dynamic x, ::Dynamic y, ::Dynamic width, ::Dynamic height);
		::Dynamic setBackBufferViewPort_dyn();

		void updateBackBufferViewPort();
		::Dynamic updateBackBufferViewPort_dyn();

		void updateDepthAndStencilState();
		::Dynamic updateDepthAndStencilState_dyn();

		 ::openfl::display3D::textures::CubeTexture createCubeTexture(int size, ::openfl::display3D::Context3DTextureFormat format,bool optimizeForRenderToTexture,hx::Null< int >  streamingLevels);
		::Dynamic createCubeTexture_dyn();

		 ::openfl::display3D::IndexBuffer3D createIndexBuffer(int numIndices, ::openfl::display3D::Context3DBufferUsage bufferUsage);
		::Dynamic createIndexBuffer_dyn();

		 ::openfl::display3D::Program3D createProgram();
		::Dynamic createProgram_dyn();

		 ::openfl::display3D::textures::RectangleTexture createRectangleTexture(int width,int height, ::openfl::display3D::Context3DTextureFormat format,bool optimizeForRenderToTexture);
		::Dynamic createRectangleTexture_dyn();

		 ::openfl::display3D::textures::Texture createTexture(int width,int height, ::openfl::display3D::Context3DTextureFormat format,bool optimizeForRenderToTexture,hx::Null< int >  streamingLevels);
		::Dynamic createTexture_dyn();

		 ::openfl::display3D::VertexBuffer3D createVertexBuffer(int numVertices,int data32PerVertex, ::openfl::display3D::Context3DBufferUsage bufferUsage);
		::Dynamic createVertexBuffer_dyn();

		void _hx___deleteTexture( ::openfl::display3D::textures::TextureBase texture);
		::Dynamic _hx___deleteTexture_dyn();

		void _hx___deleteVertexBuffer( ::openfl::display3D::VertexBuffer3D buffer);
		::Dynamic _hx___deleteVertexBuffer_dyn();

		void _hx___deleteIndexBuffer( ::openfl::display3D::IndexBuffer3D buffer);
		::Dynamic _hx___deleteIndexBuffer_dyn();

		void _hx___deleteProgram( ::openfl::display3D::Program3D program);
		::Dynamic _hx___deleteProgram_dyn();

		void dispose();
		::Dynamic dispose_dyn();

		void drawToBitmapData( ::openfl::_legacy::display::BitmapData destination);
		::Dynamic drawToBitmapData_dyn();

		void drawTriangles( ::openfl::display3D::IndexBuffer3D indexBuffer,hx::Null< int >  firstIndex,hx::Null< int >  numTriangles);
		::Dynamic drawTriangles_dyn();

		void present();
		::Dynamic present_dyn();

		void removeRenderMethod( ::Dynamic func);
		::Dynamic removeRenderMethod_dyn();

		void setBlendFactors(int sourceFactor,int destinationFactor);
		::Dynamic setBlendFactors_dyn();

		void setColorMask(bool red,bool green,bool blue,bool alpha);
		::Dynamic setColorMask_dyn();

		void setCulling(int triangleFaceToCull);
		::Dynamic setCulling_dyn();

		void setDepthTest(bool depthMask,int passCompareMode);
		::Dynamic setDepthTest_dyn();

		void setGLSLProgramConstantsFromByteArray(::String locationName, ::openfl::_legacy::utils::ByteArray data,hx::Null< int >  byteArrayOffset);
		::Dynamic setGLSLProgramConstantsFromByteArray_dyn();

		void setGLSLProgramConstantsFromMatrix(::String locationName, ::openfl::geom::Matrix3D matrix,hx::Null< bool >  transposedMatrix);
		::Dynamic setGLSLProgramConstantsFromMatrix_dyn();

		void setGLSLProgramConstantsFromVector4(::String locationName,::Array< Float > data,hx::Null< int >  startIndex);
		::Dynamic setGLSLProgramConstantsFromVector4_dyn();

		void setGLSLTextureAt(::String locationName, ::openfl::display3D::textures::TextureBase texture,int textureIndex);
		::Dynamic setGLSLTextureAt_dyn();

		void setGLSLVertexBufferAt(::String locationName, ::openfl::display3D::VertexBuffer3D buffer,hx::Null< int >  bufferOffset, ::openfl::display3D::Context3DVertexBufferFormat format);
		::Dynamic setGLSLVertexBufferAt_dyn();

		void setProgram( ::openfl::display3D::Program3D program3D);
		::Dynamic setProgram_dyn();

		void setProgramConstantsFromByteArray( ::openfl::display3D::Context3DProgramType programType,int firstRegister,int numRegisters, ::openfl::_legacy::utils::ByteArray data,int byteArrayOffset);
		::Dynamic setProgramConstantsFromByteArray_dyn();

		void setProgramConstantsFromMatrix( ::openfl::display3D::Context3DProgramType programType,int firstRegister, ::openfl::geom::Matrix3D matrix,hx::Null< bool >  transposedMatrix);
		::Dynamic setProgramConstantsFromMatrix_dyn();

		void setProgramConstantsFromVector( ::openfl::display3D::Context3DProgramType programType,int firstRegister,::Array< Float > data,hx::Null< int >  numRegisters);
		::Dynamic setProgramConstantsFromVector_dyn();

		void setRenderMethod( ::Dynamic func);
		::Dynamic setRenderMethod_dyn();

		void setRenderToBackBuffer();
		::Dynamic setRenderToBackBuffer_dyn();

		void setRenderToTexture( ::openfl::display3D::textures::TextureBase texture,hx::Null< bool >  enableDepthAndStencil,hx::Null< int >  antiAlias,hx::Null< int >  surfaceSelector);
		::Dynamic setRenderToTexture_dyn();

		void setSamplerStateAt(int sampler, ::openfl::display3D::Context3DWrapMode wrap, ::openfl::display3D::Context3DTextureFilter filter, ::openfl::display3D::Context3DMipFilter mipfilter);
		::Dynamic setSamplerStateAt_dyn();

		void setScissorRectangle( ::openfl::_legacy::geom::Rectangle rectangle);
		::Dynamic setScissorRectangle_dyn();

		void updateScissorRectangle();
		::Dynamic updateScissorRectangle_dyn();

		void setStencilActions( ::Dynamic triangleFace, ::Dynamic compareMode, ::Dynamic actionOnBothPass, ::Dynamic actionOnDepthFail, ::Dynamic actionOnDepthPassStencilFail);
		::Dynamic setStencilActions_dyn();

		void setStencilReferenceValue(int referenceValue,hx::Null< int >  readMask,hx::Null< int >  writeMask);
		::Dynamic setStencilReferenceValue_dyn();

		void setTextureAt(int sampler, ::openfl::display3D::textures::TextureBase texture);
		::Dynamic setTextureAt_dyn();

		void setTextureParameters( ::openfl::display3D::textures::TextureBase texture, ::openfl::display3D::Context3DWrapMode wrap, ::openfl::display3D::Context3DTextureFilter filter, ::openfl::display3D::Context3DMipFilter mipfilter);
		::Dynamic setTextureParameters_dyn();

		void setVertexBufferAt(int index, ::openfl::display3D::VertexBuffer3D buffer,hx::Null< int >  bufferOffset, ::openfl::display3D::Context3DVertexBufferFormat format);
		::Dynamic setVertexBufferAt_dyn();

		::String _hx___getUniformLocationNameFromAgalRegisterIndex( ::openfl::display3D::Context3DProgramType programType,int firstRegister);
		::Dynamic _hx___getUniformLocationNameFromAgalRegisterIndex_dyn();

		void _hx___updateBlendStatus();
		::Dynamic _hx___updateBlendStatus_dyn();

};

} // end namespace openfl
} // end namespace display3D

#endif /* INCLUDED_openfl_display3D_Context3D */ 
