// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawBaseItem
#include <flixel/graphics/tile/FlxDrawBaseItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawItemType
#include <flixel/graphics/tile/FlxDrawItemType.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawTilesItem
#include <flixel/graphics/tile/FlxDrawTilesItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawTrianglesItem
#include <flixel/graphics/tile/FlxDrawTrianglesItem.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxColorTransformUtil
#include <flixel/util/FlxColorTransformUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal1
#include <flixel/util/_FlxSignal/FlxSignal1.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Bitmap
#include <openfl/_legacy/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BlendMode
#include <openfl/_legacy/display/BlendMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_CapsStyle
#include <openfl/_legacy/display/CapsStyle.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Graphics
#include <openfl/_legacy/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_JointStyle
#include <openfl/_legacy/display/JointStyle.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_LineScaleMode
#include <openfl/_legacy/display/LineScaleMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_PixelSnapping
#include <openfl/_legacy/display/PixelSnapping.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_TriangleCulling
#include <openfl/_legacy/display/TriangleCulling.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_filters_BitmapFilter
#include <openfl/_legacy/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_ColorTransform
#include <openfl/_legacy/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Transform
#include <openfl/_legacy/geom/Transform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d1aae230bd422321_43_new,"flixel.FlxCamera","new",0x0e8a9f77,"flixel.FlxCamera.new","flixel/FlxCamera.hx",43,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_455_startQuadBatch,"flixel.FlxCamera","startQuadBatch",0xe17326fa,"flixel.FlxCamera.startQuadBatch","flixel/FlxCamera.hx",455,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_514_startTrianglesBatch,"flixel.FlxCamera","startTrianglesBatch",0xb3a3b828,"flixel.FlxCamera.startTrianglesBatch","flixel/FlxCamera.hx",514,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_532_getNewDrawTrianglesItem,"flixel.FlxCamera","getNewDrawTrianglesItem",0xcd894887,"flixel.FlxCamera.getNewDrawTrianglesItem","flixel/FlxCamera.hx",532,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_573_clearDrawStack,"flixel.FlxCamera","clearDrawStack",0x8d7c5ba0,"flixel.FlxCamera.clearDrawStack","flixel/FlxCamera.hx",573,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_606_render,"flixel.FlxCamera","render",0x1f11e49f,"flixel.FlxCamera.render","flixel/FlxCamera.hx",606,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_618_drawPixels,"flixel.FlxCamera","drawPixels",0x80c6bc1a,"flixel.FlxCamera.drawPixels","flixel/FlxCamera.hx",618,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_650_copyPixels,"flixel.FlxCamera","copyPixels",0xf4c7a68b,"flixel.FlxCamera.copyPixels","flixel/FlxCamera.hx",650,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_695_drawTriangles,"flixel.FlxCamera","drawTriangles",0x78d375de,"flixel.FlxCamera.drawTriangles","flixel/FlxCamera.hx",695,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_783_transformRect,"flixel.FlxCamera","transformRect",0x135ffe87,"flixel.FlxCamera.transformRect","flixel/FlxCamera.hx",783,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_806_transformPoint,"flixel.FlxCamera","transformPoint",0xc072398d,"flixel.FlxCamera.transformPoint","flixel/FlxCamera.hx",806,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_824_transformVector,"flixel.FlxCamera","transformVector",0x43afc0e6,"flixel.FlxCamera.transformVector","flixel/FlxCamera.hx",824,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_839_transformObject,"flixel.FlxCamera","transformObject",0xc1918ee2,"flixel.FlxCamera.transformObject","flixel/FlxCamera.hx",839,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_917_destroy,"flixel.FlxCamera","destroy",0xb607d391,"flixel.FlxCamera.destroy","flixel/FlxCamera.hx",917,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_976_update,"flixel.FlxCamera","update",0xa0edff52,"flixel.FlxCamera.update","flixel/FlxCamera.hx",976,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_998_updateScroll,"flixel.FlxCamera","updateScroll",0x3fd094ff,"flixel.FlxCamera.updateScroll","flixel/FlxCamera.hx",998,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1020_updateFollow,"flixel.FlxCamera","updateFollow",0xf2024e63,"flixel.FlxCamera.updateFollow","flixel/FlxCamera.hx",1020,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1105_updateFlash,"flixel.FlxCamera","updateFlash",0x43f2dcfe,"flixel.FlxCamera.updateFlash","flixel/FlxCamera.hx",1105,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1116_updateFade,"flixel.FlxCamera","updateFade",0xaec3f1ee,"flixel.FlxCamera.updateFade","flixel/FlxCamera.hx",1116,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1141_completeFade,"flixel.FlxCamera","completeFade",0xb02048de,"flixel.FlxCamera.completeFade","flixel/FlxCamera.hx",1141,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1149_updateShake,"flixel.FlxCamera","updateShake",0xbd838614,"flixel.FlxCamera.updateShake","flixel/FlxCamera.hx",1149,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1179_updateFlashSpritePosition,"flixel.FlxCamera","updateFlashSpritePosition",0x5aef376c,"flixel.FlxCamera.updateFlashSpritePosition","flixel/FlxCamera.hx",1179,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1191_updateFlashOffset,"flixel.FlxCamera","updateFlashOffset",0x0e9fbb31,"flixel.FlxCamera.updateFlashOffset","flixel/FlxCamera.hx",1191,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1205_updateScrollRect,"flixel.FlxCamera","updateScrollRect",0xbf58f9c3,"flixel.FlxCamera.updateScrollRect","flixel/FlxCamera.hx",1205,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1230_updateInternalSpritePositions,"flixel.FlxCamera","updateInternalSpritePositions",0x7d5baef6,"flixel.FlxCamera.updateInternalSpritePositions","flixel/FlxCamera.hx",1230,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1272_follow,"flixel.FlxCamera","follow",0x137f0aba,"flixel.FlxCamera.follow","flixel/FlxCamera.hx",1272,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1323_snapToTarget,"flixel.FlxCamera","snapToTarget",0x8eeb1d9f,"flixel.FlxCamera.snapToTarget","flixel/FlxCamera.hx",1323,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1334_focusOn,"flixel.FlxCamera","focusOn",0xd304f1ae,"flixel.FlxCamera.focusOn","flixel/FlxCamera.hx",1334,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1349_flash,"flixel.FlxCamera","flash",0x27663887,"flixel.FlxCamera.flash","flixel/FlxCamera.hx",1349,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1372_fade,"flixel.FlxCamera","fade",0xa5741a85,"flixel.FlxCamera.fade","flixel/FlxCamera.hx",1372,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1400_shake,"flixel.FlxCamera","shake",0xa0f6e19d,"flixel.FlxCamera.shake","flixel/FlxCamera.hx",1400,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1417_stopFX,"flixel.FlxCamera","stopFX",0x29222b1d,"flixel.FlxCamera.stopFX","flixel/FlxCamera.hx",1417,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1429_setFilters,"flixel.FlxCamera","setFilters",0x0e7f1802,"flixel.FlxCamera.setFilters","flixel/FlxCamera.hx",1429,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1439_copyFrom,"flixel.FlxCamera","copyFrom",0x88512948,"flixel.FlxCamera.copyFrom","flixel/FlxCamera.hx",1439,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1470_fill,"flixel.FlxCamera","fill",0xa57a338c,"flixel.FlxCamera.fill","flixel/FlxCamera.hx",1470,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1504_drawFX,"flixel.FlxCamera","drawFX",0xf9beeb9f,"flixel.FlxCamera.drawFX","flixel/FlxCamera.hx",1504,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1541_checkResize,"flixel.FlxCamera","checkResize",0x465b6af3,"flixel.FlxCamera.checkResize","flixel/FlxCamera.hx",1541,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1562_updateBlitMatrix,"flixel.FlxCamera","updateBlitMatrix",0x8e139648,"flixel.FlxCamera.updateBlitMatrix","flixel/FlxCamera.hx",1562,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1577_setSize,"flixel.FlxCamera","setSize",0xa359881a,"flixel.FlxCamera.setSize","flixel/FlxCamera.hx",1577,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1590_setPosition,"flixel.FlxCamera","setPosition",0x5729a882,"flixel.FlxCamera.setPosition","flixel/FlxCamera.hx",1590,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1606_setScrollBoundsRect,"flixel.FlxCamera","setScrollBoundsRect",0xd34a357f,"flixel.FlxCamera.setScrollBoundsRect","flixel/FlxCamera.hx",1606,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1625_setScrollBounds,"flixel.FlxCamera","setScrollBounds",0x4d9242bb,"flixel.FlxCamera.setScrollBounds","flixel/FlxCamera.hx",1625,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1641_setScale,"flixel.FlxCamera","setScale",0x46f35511,"flixel.FlxCamera.setScale","flixel/FlxCamera.hx",1641,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1678_onResize,"flixel.FlxCamera","onResize",0xa8186dfc,"flixel.FlxCamera.onResize","flixel/FlxCamera.hx",1678,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1690_containsPoint,"flixel.FlxCamera","containsPoint",0x2d56eb88,"flixel.FlxCamera.containsPoint","flixel/FlxCamera.hx",1690,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1695_set_followLerp,"flixel.FlxCamera","set_followLerp",0xf2f9b78e,"flixel.FlxCamera.set_followLerp","flixel/FlxCamera.hx",1695,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1699_set_width,"flixel.FlxCamera","set_width",0x2386b8c0,"flixel.FlxCamera.set_width","flixel/FlxCamera.hx",1699,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1714_set_height,"flixel.FlxCamera","set_height",0xa8aa67ed,"flixel.FlxCamera.set_height","flixel/FlxCamera.hx",1714,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1729_set_zoom,"flixel.FlxCamera","set_zoom",0x3f00d599,"flixel.FlxCamera.set_zoom","flixel/FlxCamera.hx",1729,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1736_set_alpha,"flixel.FlxCamera","set_alpha",0x7abaaa18,"flixel.FlxCamera.set_alpha","flixel/FlxCamera.hx",1736,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1750_set_angle,"flixel.FlxCamera","set_angle",0x7c06468d,"flixel.FlxCamera.set_angle","flixel/FlxCamera.hx",1750,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1757_set_color,"flixel.FlxCamera","set_color",0xa380741d,"flixel.FlxCamera.set_color","flixel/FlxCamera.hx",1757,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1791_set_antialiasing,"flixel.FlxCamera","set_antialiasing",0x0f9a3f7a,"flixel.FlxCamera.set_antialiasing","flixel/FlxCamera.hx",1791,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1801_set_x,"flixel.FlxCamera","set_x",0x9f099e32,"flixel.FlxCamera.set_x","flixel/FlxCamera.hx",1801,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1808_set_y,"flixel.FlxCamera","set_y",0x9f099e33,"flixel.FlxCamera.set_y","flixel/FlxCamera.hx",1808,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1815_set_visible,"flixel.FlxCamera","set_visible",0x8f5a1dac,"flixel.FlxCamera.set_visible","flixel/FlxCamera.hx",1815,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1824_calcOffsetX,"flixel.FlxCamera","calcOffsetX",0xcf19c367,"flixel.FlxCamera.calcOffsetX","flixel/FlxCamera.hx",1824,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1831_calcOffsetY,"flixel.FlxCamera","calcOffsetY",0xcf19c368,"flixel.FlxCamera.calcOffsetY","flixel/FlxCamera.hx",1831,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_440_boot,"flixel.FlxCamera","boot",0xa2d9e93b,"flixel.FlxCamera.boot","flixel/FlxCamera.hx",440,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_444_boot,"flixel.FlxCamera","boot",0xa2d9e93b,"flixel.FlxCamera.boot","flixel/FlxCamera.hx",444,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_449_boot,"flixel.FlxCamera","boot",0xa2d9e93b,"flixel.FlxCamera.boot","flixel/FlxCamera.hx",449,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_450_boot,"flixel.FlxCamera","boot",0xa2d9e93b,"flixel.FlxCamera.boot","flixel/FlxCamera.hx",450,0xe7aeb95a)
namespace flixel{

void FlxCamera_obj::__construct(hx::Null< int >  __o_X,hx::Null< int >  __o_Y,hx::Null< int >  __o_Width,hx::Null< int >  __o_Height,hx::Null< Float >  __o_Zoom){
int X = __o_X.Default(0);
int Y = __o_Y.Default(0);
int Width = __o_Width.Default(0);
int Height = __o_Height.Default(0);
Float Zoom = __o_Zoom.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_d1aae230bd422321_43_new)
HXLINE( 408)		this->_helperPoint =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 406)		this->_helperMatrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 386)		 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 386)		_this->x = (int)0;
HXDLIN( 386)		_this->y = (int)0;
HXDLIN( 386)		_this->width = (int)0;
HXDLIN( 386)		_this->height = (int)0;
HXDLIN( 386)		 ::flixel::math::FlxRect rect = _this;
HXDLIN( 386)		rect->_inPool = false;
HXDLIN( 386)		this->_bounds = rect;
HXLINE( 381)		this->_scrollRect =  ::openfl::_legacy::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 361)		this->initialZoom = ((Float)1);
HXLINE( 352)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 352)		point->_inPool = false;
HXDLIN( 352)		this->_point = point;
HXLINE( 348)		this->_fxShakeAxes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXLINE( 340)		this->_fxShakeDuration = ((Float)0);
HXLINE( 336)		this->_fxShakeIntensity = ((Float)0);
HXLINE( 332)		this->_fxFadeAlpha = ((Float)0);
HXLINE( 327)		this->_fxFadeCompleted = true;
HXLINE( 323)		this->_fxFadeComplete = null();
HXLINE( 319)		this->_fxFadeIn = false;
HXLINE( 314)		this->_fxFadeDuration = ((Float)0);
HXLINE( 310)		 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 310)		point1->_inPool = false;
HXDLIN( 310)		this->_scrollTarget = point1;
HXLINE( 302)		this->_fxFadeColor = (int)0;
HXLINE( 298)		this->_fxFlashAlpha = ((Float)0);
HXLINE( 294)		this->_fxFlashComplete = null();
HXLINE( 290)		this->_fxFlashDuration = ((Float)0);
HXLINE( 286)		this->_fxFlashColor = (int)0;
HXLINE( 282)		 ::flixel::math::FlxPoint point2 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 282)		point2->_inPool = false;
HXDLIN( 282)		this->_flashOffset = point2;
HXLINE( 274)		this->_flashPoint =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 260)		this->filtersEnabled = true;
HXLINE( 256)		 ::flixel::math::FlxPoint point3 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 256)		point3->_inPool = false;
HXDLIN( 256)		this->followLead = point3;
HXLINE( 252)		this->antialiasing = false;
HXLINE( 247)		this->color = (int)-1;
HXLINE( 243)		this->angle = ((Float)0);
HXLINE( 239)		this->alpha = ((Float)1);
HXLINE( 234)		this->_useBlitMatrix = false;
HXLINE( 229)		this->_blitMatrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 223)		this->viewHeight = ((Float)0);
HXLINE( 222)		this->viewWidth = ((Float)0);
HXLINE( 217)		this->viewOffsetHeight = ((Float)0);
HXLINE( 216)		this->viewOffsetWidth = ((Float)0);
HXLINE( 210)		this->viewOffsetY = ((Float)0);
HXLINE( 209)		this->viewOffsetX = ((Float)0);
HXLINE( 198)		this->height = (int)0;
HXLINE( 194)		this->width = (int)0;
HXLINE( 181)		this->flashSprite =  ::openfl::_legacy::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 171)		this->useBgAlphaBlending = false;
HXLINE( 136)		 ::flixel::math::FlxPoint point4 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 136)		point4->_inPool = false;
HXDLIN( 136)		this->scroll = point4;
HXLINE( 106)		this->followLerp = ((Float)(int)60 / (Float)::flixel::FlxG_obj::updateFramerate);
HXLINE(  99)		 ::flixel::math::FlxPoint point5 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  99)		point5->_inPool = false;
HXDLIN(  99)		this->targetOffset = point5;
HXLINE(  78)		this->scaleY = ((Float)0);
HXLINE(  73)		this->scaleX = ((Float)0);
HXLINE(  67)		this->y = ((Float)0);
HXLINE(  61)		this->x = ((Float)0);
HXLINE( 864)		super::__construct();
HXLINE( 866)		this->set_x(X);
HXLINE( 867)		this->set_y(Y);
HXLINE( 870)		int _hx_tmp;
HXDLIN( 870)		if ((Width <= (int)0)) {
HXLINE( 870)			_hx_tmp = ::flixel::FlxG_obj::width;
            		}
            		else {
HXLINE( 870)			_hx_tmp = Width;
            		}
HXDLIN( 870)		this->set_width(_hx_tmp);
HXLINE( 871)		int _hx_tmp1;
HXDLIN( 871)		if ((Height <= (int)0)) {
HXLINE( 871)			_hx_tmp1 = ::flixel::FlxG_obj::height;
            		}
            		else {
HXLINE( 871)			_hx_tmp1 = Height;
            		}
HXDLIN( 871)		this->set_height(_hx_tmp1);
HXLINE( 872)		this->_flashRect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,this->width,this->height);
HXLINE( 874)		this->flashSprite->addChild(this->_scrollRect);
HXLINE( 875)		 ::openfl::_legacy::display::Sprite _hx_tmp2 = this->_scrollRect;
HXDLIN( 875)		_hx_tmp2->set_scrollRect( ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null()));
HXLINE( 877)		this->pixelPerfectRender = ::flixel::FlxG_obj::renderBlit;
HXLINE( 879)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 881)			this->screen =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 882)			this->buffer =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,true,(int)0,null());
HXLINE( 883)			this->screen->set_pixels(this->buffer);
HXLINE( 884)			this->screen->origin->set(null(),null());
HXLINE( 885)			this->_flashBitmap =  ::openfl::_legacy::display::Bitmap_obj::__alloc( HX_CTX ,this->buffer,null(),null());
HXLINE( 886)			this->_scrollRect->addChild(this->_flashBitmap);
HXLINE( 887)			this->_fill =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,true,(int)0,null());
            		}
            		else {
HXLINE( 891)			this->canvas =  ::openfl::_legacy::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 892)			this->_scrollRect->addChild(this->canvas);
HXLINE( 895)			this->debugLayer =  ::openfl::_legacy::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 896)			this->_scrollRect->addChild(this->debugLayer);
            		}
HXLINE( 900)		this->set_color((int)-1);
HXLINE( 902)		Float _hx_tmp3;
HXDLIN( 902)		if ((Zoom == (int)0)) {
HXLINE( 902)			_hx_tmp3 = ::flixel::FlxCamera_obj::defaultZoom;
            		}
            		else {
HXLINE( 902)			_hx_tmp3 = Zoom;
            		}
HXDLIN( 902)		this->initialZoom = _hx_tmp3;
HXLINE( 903)		this->set_zoom(Zoom);
HXLINE( 905)		this->updateScrollRect();
HXLINE( 906)		this->updateFlashOffset();
HXLINE( 907)		this->updateFlashSpritePosition();
HXLINE( 908)		this->updateInternalSpritePositions();
HXLINE( 910)		this->bgColor = ::flixel::FlxG_obj::cameras->get_bgColor();
            	}

Dynamic FlxCamera_obj::__CreateEmpty() { return new FlxCamera_obj; }

void *FlxCamera_obj::_hx_vtable = 0;

Dynamic FlxCamera_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxCamera_obj > _hx_result = new FlxCamera_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool FlxCamera_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25a685e0;
	} else {
		return inClassId==(int)0x2e6fb733;
	}
}

 ::flixel::graphics::tile::FlxDrawTilesItem FlxCamera_obj::startQuadBatch( ::flixel::graphics::FlxGraphic graphic,bool colored,hx::Null< bool >  __o_hasColorOffsets, ::openfl::_legacy::display::BlendMode blend,hx::Null< bool >  __o_smooth, ::Dynamic shader){
bool hasColorOffsets = __o_hasColorOffsets.Default(false);
bool smooth = __o_smooth.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_d1aae230bd422321_455_startQuadBatch)
HXLINE( 459)		 ::flixel::graphics::tile::FlxDrawTilesItem itemToReturn = null();
HXLINE( 460)		int blendInt = ::flixel::graphics::tile::FlxDrawBaseItem_obj::blendToInt(blend);
HXLINE( 462)		bool _hx_tmp;
HXDLIN( 462)		bool _hx_tmp1;
HXDLIN( 462)		bool _hx_tmp2;
HXDLIN( 462)		bool _hx_tmp3;
HXDLIN( 462)		bool _hx_tmp4;
HXDLIN( 462)		bool _hx_tmp5;
HXDLIN( 462)		bool _hx_tmp6;
HXDLIN( 462)		if (hx::IsNotNull( this->_currentDrawItem )) {
HXLINE( 462)			_hx_tmp6 = hx::IsEq( this->_currentDrawItem->type,::flixel::graphics::tile::FlxDrawItemType_obj::TILES_dyn() );
            		}
            		else {
HXLINE( 462)			_hx_tmp6 = false;
            		}
HXDLIN( 462)		if (_hx_tmp6) {
HXLINE( 462)			_hx_tmp5 = hx::IsEq( this->_headTiles->graphics,graphic );
            		}
            		else {
HXLINE( 462)			_hx_tmp5 = false;
            		}
HXDLIN( 462)		if (_hx_tmp5) {
HXLINE( 462)			_hx_tmp4 = (this->_headTiles->colored == colored);
            		}
            		else {
HXLINE( 462)			_hx_tmp4 = false;
            		}
HXDLIN( 462)		if (_hx_tmp4) {
HXLINE( 462)			_hx_tmp3 = (this->_headTiles->hasColorOffsets == hasColorOffsets);
            		}
            		else {
HXLINE( 462)			_hx_tmp3 = false;
            		}
HXDLIN( 462)		if (_hx_tmp3) {
HXLINE( 462)			_hx_tmp2 = (this->_headTiles->blending == blendInt);
            		}
            		else {
HXLINE( 462)			_hx_tmp2 = false;
            		}
HXDLIN( 462)		if (_hx_tmp2) {
HXLINE( 462)			_hx_tmp1 = (this->_headTiles->antialiasing == smooth);
            		}
            		else {
HXLINE( 462)			_hx_tmp1 = false;
            		}
HXDLIN( 462)		if (_hx_tmp1) {
HXLINE( 462)			_hx_tmp = hx::IsEq( this->_headTiles->shader,shader );
            		}
            		else {
HXLINE( 462)			_hx_tmp = false;
            		}
HXDLIN( 462)		if (_hx_tmp) {
HXLINE( 470)			return this->_headTiles;
            		}
HXLINE( 473)		if (hx::IsNotNull( ::flixel::FlxCamera_obj::_storageTilesHead )) {
HXLINE( 475)			itemToReturn = ::flixel::FlxCamera_obj::_storageTilesHead;
HXLINE( 476)			 ::flixel::graphics::tile::FlxDrawTilesItem newHead = ( ( ::flixel::graphics::tile::FlxDrawTilesItem)(::flixel::FlxCamera_obj::_storageTilesHead->nextTyped) );
HXLINE( 477)			itemToReturn->reset();
HXLINE( 478)			::flixel::FlxCamera_obj::_storageTilesHead = newHead;
            		}
            		else {
HXLINE( 482)			itemToReturn =  ::flixel::graphics::tile::FlxDrawTilesItem_obj::__alloc( HX_CTX );
            		}
HXLINE( 485)		itemToReturn->graphics = graphic;
HXLINE( 486)		itemToReturn->antialiasing = smooth;
HXLINE( 487)		itemToReturn->colored = colored;
HXLINE( 488)		itemToReturn->hasColorOffsets = hasColorOffsets;
HXLINE( 489)		itemToReturn->blending = blendInt;
HXLINE( 490)		itemToReturn->shader = shader;
HXLINE( 492)		itemToReturn->nextTyped = this->_headTiles;
HXLINE( 493)		this->_headTiles = itemToReturn;
HXLINE( 495)		if (hx::IsNull( this->_headOfDrawStack )) {
HXLINE( 497)			this->_headOfDrawStack = itemToReturn;
            		}
HXLINE( 500)		if (hx::IsNotNull( this->_currentDrawItem )) {
HXLINE( 502)			this->_currentDrawItem->next = itemToReturn;
            		}
HXLINE( 505)		this->_currentDrawItem = itemToReturn;
HXLINE( 507)		return itemToReturn;
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxCamera_obj,startQuadBatch,return )

 ::flixel::graphics::tile::FlxDrawTrianglesItem FlxCamera_obj::startTrianglesBatch( ::flixel::graphics::FlxGraphic graphic,hx::Null< bool >  __o_smoothing,hx::Null< bool >  __o_isColored, ::openfl::_legacy::display::BlendMode blend){
bool smoothing = __o_smoothing.Default(false);
bool isColored = __o_isColored.Default(false);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_514_startTrianglesBatch)
HXLINE( 515)		int blendInt = ::flixel::graphics::tile::FlxDrawBaseItem_obj::blendToInt(blend);
HXLINE( 517)		bool _hx_tmp;
HXDLIN( 517)		bool _hx_tmp1;
HXDLIN( 517)		bool _hx_tmp2;
HXDLIN( 517)		bool _hx_tmp3;
HXDLIN( 517)		bool _hx_tmp4;
HXDLIN( 517)		if (hx::IsNotNull( this->_currentDrawItem )) {
HXLINE( 517)			_hx_tmp4 = hx::IsEq( this->_currentDrawItem->type,::flixel::graphics::tile::FlxDrawItemType_obj::TRIANGLES_dyn() );
            		}
            		else {
HXLINE( 517)			_hx_tmp4 = false;
            		}
HXDLIN( 517)		if (_hx_tmp4) {
HXLINE( 517)			_hx_tmp3 = hx::IsEq( this->_headTriangles->graphics,graphic );
            		}
            		else {
HXLINE( 517)			_hx_tmp3 = false;
            		}
HXDLIN( 517)		if (_hx_tmp3) {
HXLINE( 517)			_hx_tmp2 = (this->_headTriangles->antialiasing == smoothing);
            		}
            		else {
HXLINE( 517)			_hx_tmp2 = false;
            		}
HXDLIN( 517)		if (_hx_tmp2) {
HXLINE( 517)			_hx_tmp1 = (this->_headTriangles->colored == isColored);
            		}
            		else {
HXLINE( 517)			_hx_tmp1 = false;
            		}
HXDLIN( 517)		if (_hx_tmp1) {
HXLINE( 517)			_hx_tmp = (this->_headTriangles->blending == blendInt);
            		}
            		else {
HXLINE( 517)			_hx_tmp = false;
            		}
HXDLIN( 517)		if (_hx_tmp) {
HXLINE( 523)			return this->_headTriangles;
            		}
HXLINE( 526)		return this->getNewDrawTrianglesItem(graphic,smoothing,isColored,blend);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxCamera_obj,startTrianglesBatch,return )

 ::flixel::graphics::tile::FlxDrawTrianglesItem FlxCamera_obj::getNewDrawTrianglesItem( ::flixel::graphics::FlxGraphic graphic,hx::Null< bool >  __o_smoothing,hx::Null< bool >  __o_isColored, ::openfl::_legacy::display::BlendMode blend){
bool smoothing = __o_smoothing.Default(false);
bool isColored = __o_isColored.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_d1aae230bd422321_532_getNewDrawTrianglesItem)
HXLINE( 533)		 ::flixel::graphics::tile::FlxDrawTrianglesItem itemToReturn = null();
HXLINE( 534)		int blendInt = ::flixel::graphics::tile::FlxDrawBaseItem_obj::blendToInt(blend);
HXLINE( 536)		if (hx::IsNotNull( ::flixel::FlxCamera_obj::_storageTrianglesHead )) {
HXLINE( 538)			itemToReturn = ::flixel::FlxCamera_obj::_storageTrianglesHead;
HXLINE( 539)			 ::flixel::graphics::tile::FlxDrawTrianglesItem newHead = ( ( ::flixel::graphics::tile::FlxDrawTrianglesItem)(::flixel::FlxCamera_obj::_storageTrianglesHead->nextTyped) );
HXLINE( 540)			itemToReturn->reset();
HXLINE( 541)			::flixel::FlxCamera_obj::_storageTrianglesHead = newHead;
            		}
            		else {
HXLINE( 545)			itemToReturn =  ::flixel::graphics::tile::FlxDrawTrianglesItem_obj::__alloc( HX_CTX );
            		}
HXLINE( 548)		itemToReturn->graphics = graphic;
HXLINE( 549)		itemToReturn->antialiasing = smoothing;
HXLINE( 550)		itemToReturn->colored = isColored;
HXLINE( 551)		itemToReturn->blending = blendInt;
HXLINE( 553)		itemToReturn->nextTyped = this->_headTriangles;
HXLINE( 554)		this->_headTriangles = itemToReturn;
HXLINE( 556)		if (hx::IsNull( this->_headOfDrawStack )) {
HXLINE( 558)			this->_headOfDrawStack = itemToReturn;
            		}
HXLINE( 561)		if (hx::IsNotNull( this->_currentDrawItem )) {
HXLINE( 563)			this->_currentDrawItem->next = itemToReturn;
            		}
HXLINE( 566)		this->_currentDrawItem = itemToReturn;
HXLINE( 568)		return itemToReturn;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxCamera_obj,getNewDrawTrianglesItem,return )

void FlxCamera_obj::clearDrawStack(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_573_clearDrawStack)
HXLINE( 574)		 ::flixel::graphics::tile::FlxDrawTilesItem currTiles = this->_headTiles;
HXLINE( 575)		 ::flixel::graphics::tile::FlxDrawTilesItem newTilesHead;
HXLINE( 577)		while(hx::IsNotNull( currTiles )){
HXLINE( 579)			newTilesHead = ( ( ::flixel::graphics::tile::FlxDrawTilesItem)(currTiles->nextTyped) );
HXLINE( 580)			currTiles->reset();
HXLINE( 581)			currTiles->nextTyped = ::flixel::FlxCamera_obj::_storageTilesHead;
HXLINE( 582)			::flixel::FlxCamera_obj::_storageTilesHead = currTiles;
HXLINE( 583)			currTiles = newTilesHead;
            		}
HXLINE( 586)		 ::flixel::graphics::tile::FlxDrawTrianglesItem currTriangles = this->_headTriangles;
HXLINE( 587)		 ::flixel::graphics::tile::FlxDrawTrianglesItem newTrianglesHead;
HXLINE( 589)		while(hx::IsNotNull( currTriangles )){
HXLINE( 591)			newTrianglesHead = ( ( ::flixel::graphics::tile::FlxDrawTrianglesItem)(currTriangles->nextTyped) );
HXLINE( 592)			currTriangles->reset();
HXLINE( 593)			currTriangles->nextTyped = ::flixel::FlxCamera_obj::_storageTrianglesHead;
HXLINE( 594)			::flixel::FlxCamera_obj::_storageTrianglesHead = currTriangles;
HXLINE( 595)			currTriangles = newTrianglesHead;
            		}
HXLINE( 598)		this->_currentDrawItem = null();
HXLINE( 599)		this->_headOfDrawStack = null();
HXLINE( 600)		this->_headTiles = null();
HXLINE( 601)		this->_headTriangles = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,clearDrawStack,(void))

void FlxCamera_obj::render(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_606_render)
HXLINE( 607)		 ::flixel::graphics::tile::FlxDrawBaseItem currItem = this->_headOfDrawStack;
HXLINE( 608)		while(hx::IsNotNull( currItem )){
HXLINE( 610)			currItem->render(hx::ObjectPtr<OBJ_>(this));
HXLINE( 611)			currItem = currItem->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,render,(void))

void FlxCamera_obj::drawPixels( ::flixel::graphics::frames::FlxFrame frame, ::openfl::_legacy::display::BitmapData pixels, ::flixel::math::FlxMatrix matrix, ::openfl::_legacy::geom::ColorTransform transform, ::openfl::_legacy::display::BlendMode blend, ::Dynamic __o_smoothing, ::Dynamic shader){
 ::Dynamic smoothing = __o_smoothing.Default(false);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_618_drawPixels)
HXDLIN( 618)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 620)			this->_helperMatrix->copyFrom(matrix);
HXLINE( 622)			if (this->_useBlitMatrix) {
HXLINE( 624)				this->_helperMatrix->concat(this->_blitMatrix);
HXLINE( 625)				bool _hx_tmp;
HXDLIN( 625)				if (!(smoothing)) {
HXLINE( 625)					_hx_tmp = this->antialiasing;
            				}
            				else {
HXLINE( 625)					_hx_tmp = true;
            				}
HXDLIN( 625)				this->buffer->draw(pixels,this->_helperMatrix,null(),null(),null(),_hx_tmp);
            			}
            			else {
HXLINE( 629)				this->_helperMatrix->translate(-(this->viewOffsetX),-(this->viewOffsetY));
HXLINE( 630)				bool _hx_tmp1;
HXDLIN( 630)				if (!(smoothing)) {
HXLINE( 630)					_hx_tmp1 = this->antialiasing;
            				}
            				else {
HXLINE( 630)					_hx_tmp1 = true;
            				}
HXDLIN( 630)				this->buffer->draw(pixels,this->_helperMatrix,null(),blend,null(),_hx_tmp1);
            			}
            		}
            		else {
HXLINE( 635)			bool isColored;
HXDLIN( 635)			if (hx::IsNotNull( transform )) {
HXLINE( 635)				isColored = ::flixel::util::FlxColorTransformUtil_obj::hasRGBMultipliers(transform);
            			}
            			else {
HXLINE( 635)				isColored = false;
            			}
HXLINE( 636)			bool hasColorOffsets;
HXDLIN( 636)			if (hx::IsNotNull( transform )) {
HXLINE( 636)				hasColorOffsets = ::flixel::util::FlxColorTransformUtil_obj::hasRGBAOffsets(transform);
            			}
            			else {
HXLINE( 636)				hasColorOffsets = false;
            			}
HXLINE( 641)			 ::flixel::graphics::tile::FlxDrawTilesItem drawItem = this->startQuadBatch(frame->parent,isColored,hasColorOffsets,blend,smoothing,shader);
HXLINE( 643)			drawItem->addQuad(frame,matrix,transform);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxCamera_obj,drawPixels,(void))

void FlxCamera_obj::copyPixels( ::flixel::graphics::frames::FlxFrame frame, ::openfl::_legacy::display::BitmapData pixels, ::openfl::_legacy::geom::Rectangle sourceRect, ::openfl::_legacy::geom::Point destPoint, ::openfl::_legacy::geom::ColorTransform transform, ::openfl::_legacy::display::BlendMode blend, ::Dynamic __o_smoothing, ::Dynamic shader){
 ::Dynamic smoothing = __o_smoothing.Default(false);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_650_copyPixels)
HXDLIN( 650)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 652)			if (hx::IsNotNull( pixels )) {
HXLINE( 654)				if (this->_useBlitMatrix) {
HXLINE( 656)					this->_helperMatrix->identity();
HXLINE( 657)					this->_helperMatrix->translate(destPoint->x,destPoint->y);
HXLINE( 658)					this->_helperMatrix->concat(this->_blitMatrix);
HXLINE( 659)					bool _hx_tmp;
HXDLIN( 659)					if (!(smoothing)) {
HXLINE( 659)						_hx_tmp = this->antialiasing;
            					}
            					else {
HXLINE( 659)						_hx_tmp = true;
            					}
HXDLIN( 659)					this->buffer->draw(pixels,this->_helperMatrix,null(),null(),null(),_hx_tmp);
            				}
            				else {
HXLINE( 663)					Float destPoint1 = destPoint->x;
HXDLIN( 663)					int _hx_tmp1 = ::Std_obj::_hx_int(this->viewOffsetX);
HXDLIN( 663)					this->_helperPoint->x = (destPoint1 - _hx_tmp1);
HXLINE( 664)					Float destPoint2 = destPoint->y;
HXDLIN( 664)					int _hx_tmp2 = ::Std_obj::_hx_int(this->viewOffsetY);
HXDLIN( 664)					this->_helperPoint->y = (destPoint2 - _hx_tmp2);
HXLINE( 665)					this->buffer->copyPixels(pixels,sourceRect,this->_helperPoint,null(),null(),true);
            				}
            			}
            			else {
HXLINE( 668)				if (hx::IsNotNull( frame )) {
HXLINE( 671)					frame->paint(this->buffer,destPoint,true,null());
            				}
            			}
            		}
            		else {
HXLINE( 676)			this->_helperMatrix->identity();
HXLINE( 677)			 ::flixel::math::FlxMatrix _hx_tmp3 = this->_helperMatrix;
HXDLIN( 677)			Float _hx_tmp4 = (destPoint->x + frame->offset->x);
HXDLIN( 677)			_hx_tmp3->translate(_hx_tmp4,(destPoint->y + frame->offset->y));
HXLINE( 679)			bool isColored;
HXDLIN( 679)			if (hx::IsNotNull( transform )) {
HXLINE( 679)				isColored = ::flixel::util::FlxColorTransformUtil_obj::hasRGBMultipliers(transform);
            			}
            			else {
HXLINE( 679)				isColored = false;
            			}
HXLINE( 680)			bool hasColorOffsets;
HXDLIN( 680)			if (hx::IsNotNull( transform )) {
HXLINE( 680)				hasColorOffsets = ::flixel::util::FlxColorTransformUtil_obj::hasRGBAOffsets(transform);
            			}
            			else {
HXLINE( 680)				hasColorOffsets = false;
            			}
HXLINE( 683)			 ::flixel::graphics::tile::FlxDrawTilesItem drawItem = this->startQuadBatch(frame->parent,isColored,hasColorOffsets,blend,smoothing,shader);
HXLINE( 687)			drawItem->addQuad(frame,this->_helperMatrix,transform);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(FlxCamera_obj,copyPixels,(void))

void FlxCamera_obj::drawTriangles( ::flixel::graphics::FlxGraphic graphic,::Array< Float > vertices,::Array< int > indices,::Array< Float > uvtData,::Array< int > colors, ::flixel::math::FlxPoint position, ::openfl::_legacy::display::BlendMode blend,hx::Null< bool >  __o_repeat,hx::Null< bool >  __o_smoothing){
bool repeat = __o_repeat.Default(false);
bool smoothing = __o_smoothing.Default(false);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_695_drawTriangles)
HXDLIN( 695)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 697)			if (hx::IsNull( position )) {
HXLINE( 698)				position = ::flixel::FlxCamera_obj::renderPoint->set(null(),null());
            			}
HXLINE( 700)			{
HXLINE( 700)				 ::flixel::math::FlxRect _this = this->_bounds;
HXDLIN( 700)				_this->x = (int)0;
HXDLIN( 700)				_this->y = (int)0;
HXDLIN( 700)				_this->width = this->width;
HXDLIN( 700)				_this->height = this->height;
            			}
HXLINE( 702)			int verticesLength = vertices->length;
HXLINE( 703)			int currentVertexPosition = (int)0;
HXLINE( 705)			Float tempX;
HXDLIN( 705)			Float tempY;
HXLINE( 706)			int i = (int)0;
HXLINE( 707)			 ::flixel::math::FlxRect _this1 = ::flixel::FlxCamera_obj::renderRect;
HXDLIN( 707)			_this1->x = (int)0;
HXDLIN( 707)			_this1->y = (int)0;
HXDLIN( 707)			_this1->width = (int)0;
HXDLIN( 707)			_this1->height = (int)0;
HXDLIN( 707)			 ::flixel::math::FlxRect bounds = _this1;
HXLINE( 708)			::flixel::FlxCamera_obj::drawVertices->removeRange((int)0,::flixel::FlxCamera_obj::drawVertices->length);
HXLINE( 710)			while((i < verticesLength)){
HXLINE( 712)				Float position1 = position->x;
HXDLIN( 712)				tempX = (position1 + vertices->__get(i));
HXLINE( 713)				Float position2 = position->y;
HXDLIN( 713)				tempY = (position2 + vertices->__get((i + (int)1)));
HXLINE( 715)				{
HXLINE( 715)					currentVertexPosition = (currentVertexPosition + (int)1);
HXDLIN( 715)					::flixel::FlxCamera_obj::drawVertices[(currentVertexPosition - (int)1)] = tempX;
            				}
HXLINE( 716)				{
HXLINE( 716)					currentVertexPosition = (currentVertexPosition + (int)1);
HXDLIN( 716)					::flixel::FlxCamera_obj::drawVertices[(currentVertexPosition - (int)1)] = tempY;
            				}
HXLINE( 718)				if ((i == (int)0)) {
HXLINE( 720)					bounds->x = tempX;
HXDLIN( 720)					bounds->y = tempY;
HXDLIN( 720)					bounds->width = (int)0;
HXDLIN( 720)					bounds->height = (int)0;
            				}
            				else {
HXLINE( 724)					if ((tempX < bounds->x)) {
HXLINE( 724)						 ::flixel::math::FlxRect bounds1 = bounds;
HXDLIN( 724)						bounds1->width = (bounds1->width + (bounds->x - tempX));
HXDLIN( 724)						bounds->x = tempX;
            					}
HXDLIN( 724)					if ((tempY < bounds->y)) {
HXLINE( 724)						 ::flixel::math::FlxRect bounds2 = bounds;
HXDLIN( 724)						bounds2->height = (bounds2->height + (bounds->y - tempY));
HXDLIN( 724)						bounds->y = tempY;
            					}
HXDLIN( 724)					if ((tempX > (bounds->x + bounds->width))) {
HXLINE( 724)						bounds->width = (tempX - bounds->x);
            					}
HXDLIN( 724)					if ((tempY > (bounds->y + bounds->height))) {
HXLINE( 724)						bounds->height = (tempY - bounds->y);
            					}
            				}
HXLINE( 727)				i = (i + (int)2);
            			}
HXLINE( 730)			if (position->_weak) {
HXLINE( 730)				position->put();
            			}
HXLINE( 732)			 ::flixel::math::FlxRect _this2 = this->_bounds;
HXDLIN( 732)			bool result;
HXDLIN( 732)			bool result1;
HXDLIN( 732)			bool result2;
HXDLIN( 732)			if (((bounds->x + bounds->width) > _this2->x)) {
HXLINE( 732)				Float bounds3 = bounds->x;
HXDLIN( 732)				result2 = (bounds3 < (_this2->x + _this2->width));
            			}
            			else {
HXLINE( 732)				result2 = false;
            			}
HXDLIN( 732)			if (result2) {
HXLINE( 732)				result1 = ((bounds->y + bounds->height) > _this2->y);
            			}
            			else {
HXLINE( 732)				result1 = false;
            			}
HXDLIN( 732)			if (result1) {
HXLINE( 732)				Float bounds4 = bounds->y;
HXDLIN( 732)				result = (bounds4 < (_this2->y + _this2->height));
            			}
            			else {
HXLINE( 732)				result = false;
            			}
HXDLIN( 732)			if (bounds->_weak) {
HXLINE( 732)				if (!(bounds->_inPool)) {
HXLINE( 732)					bounds->_inPool = true;
HXDLIN( 732)					bounds->_weak = false;
HXDLIN( 732)					::flixel::math::FlxRect_obj::_pool->putUnsafe(bounds);
            				}
            			}
HXDLIN( 732)			if (!(result)) {
HXLINE( 734)				::flixel::FlxCamera_obj::drawVertices->removeRange((::flixel::FlxCamera_obj::drawVertices->length - verticesLength),verticesLength);
            			}
            			else {
HXLINE( 738)				::flixel::FlxCamera_obj::trianglesSprite->get_graphics()->clear();
HXLINE( 739)				::flixel::FlxCamera_obj::trianglesSprite->get_graphics()->beginBitmapFill(graphic->bitmap,null(),repeat,smoothing);
HXLINE( 740)				::flixel::FlxCamera_obj::trianglesSprite->get_graphics()->drawTriangles(::flixel::FlxCamera_obj::drawVertices,indices,uvtData,null(),null(),null());
HXLINE( 741)				::flixel::FlxCamera_obj::trianglesSprite->get_graphics()->endFill();
HXLINE( 744)				if (this->_useBlitMatrix) {
HXLINE( 745)					this->_helperMatrix->copyFrom(this->_blitMatrix);
            				}
            				else {
HXLINE( 748)					this->_helperMatrix->identity();
HXLINE( 749)					this->_helperMatrix->translate(-(this->viewOffsetX),-(this->viewOffsetY));
            				}
HXLINE( 752)				this->buffer->draw(::flixel::FlxCamera_obj::trianglesSprite,this->_helperMatrix,null(),null(),null(),null());
HXLINE( 754)				if (::flixel::FlxG_obj::debugger->drawDebug) {
HXLINE( 756)					 ::openfl::_legacy::display::Graphics gfx = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXLINE( 757)					gfx->clear();
HXLINE( 758)					gfx->lineStyle((int)1,(int)-16776961,((Float)0.5),null(),null(),null(),null(),null());
HXLINE( 759)					gfx->drawTriangles(::flixel::FlxCamera_obj::drawVertices,indices,null(),null(),null(),null());
HXLINE( 760)					this->get_camera()->buffer->draw(::flixel::util::FlxSpriteUtil_obj::flashGfxSprite,this->_helperMatrix,null(),null(),null(),null());
            				}
            			}
HXLINE( 766)			if (!(bounds->_inPool)) {
HXLINE( 766)				bounds->_inPool = true;
HXDLIN( 766)				bounds->_weak = false;
HXDLIN( 766)				::flixel::math::FlxRect_obj::_pool->putUnsafe(bounds);
            			}
            		}
            		else {
HXLINE( 770)			{
HXLINE( 770)				 ::flixel::math::FlxRect _this3 = this->_bounds;
HXDLIN( 770)				_this3->x = (int)0;
HXDLIN( 770)				_this3->y = (int)0;
HXDLIN( 770)				_this3->width = this->width;
HXDLIN( 770)				_this3->height = this->height;
            			}
HXLINE( 771)			bool isColored;
HXDLIN( 771)			if (hx::IsNotNull( colors )) {
HXLINE( 771)				isColored = (colors->length != (int)0);
            			}
            			else {
HXLINE( 771)				isColored = false;
            			}
HXLINE( 772)			 ::flixel::graphics::tile::FlxDrawTrianglesItem drawItem = this->startTrianglesBatch(graphic,smoothing,isColored,blend);
HXLINE( 773)			drawItem->addTriangles(vertices,indices,uvtData,colors,position,this->_bounds);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC9(FlxCamera_obj,drawTriangles,(void))

 ::flixel::math::FlxRect FlxCamera_obj::transformRect( ::flixel::math::FlxRect rect){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_783_transformRect)
HXLINE( 784)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 786)			{
HXLINE( 786)				 ::flixel::math::FlxRect rect1 = rect;
HXDLIN( 786)				rect1->x = (rect1->x + -(this->viewOffsetX));
HXDLIN( 786)				 ::flixel::math::FlxRect rect2 = rect;
HXDLIN( 786)				rect2->y = (rect2->y + -(this->viewOffsetY));
            			}
HXLINE( 788)			if (this->_useBlitMatrix) {
HXLINE( 790)				 ::flixel::math::FlxRect rect3 = rect;
HXDLIN( 790)				rect3->x = (rect3->x * this->zoom);
HXLINE( 791)				 ::flixel::math::FlxRect rect4 = rect;
HXDLIN( 791)				rect4->y = (rect4->y * this->zoom);
HXLINE( 792)				 ::flixel::math::FlxRect rect5 = rect;
HXDLIN( 792)				rect5->width = (rect5->width * this->zoom);
HXLINE( 793)				 ::flixel::math::FlxRect rect6 = rect;
HXDLIN( 793)				rect6->height = (rect6->height * this->zoom);
            			}
            		}
HXLINE( 797)		return rect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,transformRect,return )

 ::flixel::math::FlxPoint FlxCamera_obj::transformPoint( ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_806_transformPoint)
HXLINE( 807)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 809)			{
HXLINE( 809)				Float Y = this->viewOffsetY;
HXDLIN( 809)				{
HXLINE( 809)					 ::flixel::math::FlxPoint _g = point;
HXDLIN( 809)					_g->set_x((_g->x - this->viewOffsetX));
            				}
HXDLIN( 809)				{
HXLINE( 809)					 ::flixel::math::FlxPoint _g1 = point;
HXDLIN( 809)					_g1->set_y((_g1->y - Y));
            				}
            			}
HXLINE( 811)			if (this->_useBlitMatrix) {
HXLINE( 812)				point->scale(this->zoom);
            			}
            		}
HXLINE( 815)		return point;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,transformPoint,return )

 ::flixel::math::FlxPoint FlxCamera_obj::transformVector( ::flixel::math::FlxPoint vector){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_824_transformVector)
HXLINE( 825)		bool _hx_tmp;
HXDLIN( 825)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 825)			_hx_tmp = this->_useBlitMatrix;
            		}
            		else {
HXLINE( 825)			_hx_tmp = false;
            		}
HXDLIN( 825)		if (_hx_tmp) {
HXLINE( 826)			vector->scale(this->zoom);
            		}
HXLINE( 828)		return vector;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,transformVector,return )

 ::openfl::_legacy::display::DisplayObject FlxCamera_obj::transformObject( ::openfl::_legacy::display::DisplayObject object){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_839_transformObject)
HXLINE( 840)		{
HXLINE( 840)			 ::openfl::_legacy::display::DisplayObject _g = object;
HXDLIN( 840)			Float _hx_tmp = _g->get_scaleX();
HXDLIN( 840)			_g->set_scaleX((_hx_tmp * this->totalScaleX));
            		}
HXLINE( 841)		{
HXLINE( 841)			 ::openfl::_legacy::display::DisplayObject _g1 = object;
HXDLIN( 841)			Float _hx_tmp1 = _g1->get_scaleY();
HXDLIN( 841)			_g1->set_scaleY((_hx_tmp1 * this->totalScaleY));
            		}
HXLINE( 843)		{
HXLINE( 843)			 ::openfl::_legacy::display::DisplayObject _g2 = object;
HXDLIN( 843)			Float _hx_tmp2 = _g2->get_x();
HXDLIN( 843)			_g2->set_x((_hx_tmp2 - (this->scroll->x * this->totalScaleX)));
            		}
HXLINE( 844)		{
HXLINE( 844)			 ::openfl::_legacy::display::DisplayObject _g3 = object;
HXDLIN( 844)			Float _hx_tmp3 = _g3->get_y();
HXDLIN( 844)			_g3->set_y((_hx_tmp3 - (this->scroll->y * this->totalScaleY)));
            		}
HXLINE( 846)		{
HXLINE( 846)			 ::openfl::_legacy::display::DisplayObject _g4 = object;
HXDLIN( 846)			Float _hx_tmp4 = _g4->get_x();
HXDLIN( 846)			Float _hx_tmp5 = (((Float)0.5) * this->width);
HXDLIN( 846)			_g4->set_x((_hx_tmp4 - ((_hx_tmp5 * (this->scaleX - this->initialZoom)) * ::flixel::FlxG_obj::scaleMode->scale->x)));
            		}
HXLINE( 847)		{
HXLINE( 847)			 ::openfl::_legacy::display::DisplayObject _g5 = object;
HXDLIN( 847)			Float _hx_tmp6 = _g5->get_y();
HXDLIN( 847)			Float _hx_tmp7 = (((Float)0.5) * this->height);
HXDLIN( 847)			_g5->set_y((_hx_tmp6 - ((_hx_tmp7 * (this->scaleY - this->initialZoom)) * ::flixel::FlxG_obj::scaleMode->scale->y)));
            		}
HXLINE( 849)		return object;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,transformObject,return )

void FlxCamera_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_917_destroy)
HXLINE( 918)		::flixel::util::FlxDestroyUtil_obj::removeChild(this->flashSprite,this->_scrollRect);
HXLINE( 920)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 922)			::flixel::util::FlxDestroyUtil_obj::removeChild(this->_scrollRect,this->_flashBitmap);
HXLINE( 923)			this->screen = ( ( ::flixel::FlxSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->screen)) );
HXLINE( 924)			this->buffer = null();
HXLINE( 925)			this->_flashBitmap = null();
HXLINE( 926)			this->_fill = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_fill);
            		}
            		else {
HXLINE( 931)			::flixel::util::FlxDestroyUtil_obj::removeChild(this->_scrollRect,this->debugLayer);
HXLINE( 932)			this->debugLayer = null();
HXLINE( 935)			::flixel::util::FlxDestroyUtil_obj::removeChild(this->_scrollRect,this->canvas);
HXLINE( 936)			if (hx::IsNotNull( this->canvas )) {
HXLINE( 938)				{
HXLINE( 938)					int _g1 = (int)0;
HXDLIN( 938)					int _g = this->canvas->get_numChildren();
HXDLIN( 938)					while((_g1 < _g)){
HXLINE( 938)						_g1 = (_g1 + (int)1);
HXDLIN( 938)						int i = (_g1 - (int)1);
HXLINE( 940)						this->canvas->removeChildAt((int)0);
            					}
            				}
HXLINE( 942)				this->canvas = null();
            			}
HXLINE( 945)			if (hx::IsNotNull( this->_headOfDrawStack )) {
HXLINE( 947)				this->clearDrawStack();
            			}
HXLINE( 950)			this->_blitMatrix = null();
HXLINE( 951)			this->_helperMatrix = null();
HXLINE( 952)			this->_helperPoint = null();
            		}
HXLINE( 955)		this->_bounds = null();
HXLINE( 956)		this->scroll = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->scroll)) );
HXLINE( 957)		this->targetOffset = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->targetOffset)) );
HXLINE( 958)		this->deadzone = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->deadzone)) );
HXLINE( 960)		this->target = null();
HXLINE( 961)		this->flashSprite = null();
HXLINE( 962)		this->_scrollRect = null();
HXLINE( 963)		this->_flashRect = null();
HXLINE( 964)		this->_flashPoint = null();
HXLINE( 965)		this->_fxFlashComplete = null();
HXLINE( 966)		this->_fxFadeComplete = null();
HXLINE( 967)		this->_fxShakeComplete = null();
HXLINE( 969)		this->super::destroy();
            	}


void FlxCamera_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_976_update)
HXLINE( 978)		if (hx::IsNotNull( this->target )) {
HXLINE( 980)			this->updateFollow();
            		}
HXLINE( 983)		this->updateScroll();
HXLINE( 984)		this->updateFlash(elapsed);
HXLINE( 985)		this->updateFade(elapsed);
HXLINE( 987)		::Array< ::Dynamic> _hx_tmp;
HXDLIN( 987)		if (this->filtersEnabled) {
HXLINE( 987)			_hx_tmp = this->_filters;
            		}
            		else {
HXLINE( 987)			_hx_tmp = null();
            		}
HXDLIN( 987)		this->flashSprite->set_filters(_hx_tmp);
HXLINE( 989)		this->updateFlashSpritePosition();
HXLINE( 990)		this->updateShake(elapsed);
            	}


void FlxCamera_obj::updateScroll(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_998_updateScroll)
HXLINE(1000)		Float zoom = ((Float)this->zoom / (Float)::flixel::FlxG_obj::initialZoom);
HXLINE(1002)		 ::Dynamic minX;
HXDLIN(1002)		if (hx::IsNull( this->minScrollX )) {
HXLINE(1002)			minX = null();
            		}
            		else {
HXLINE(1002)			 ::Dynamic minX1 = this->minScrollX;
HXDLIN(1002)			Float minX2 = ((zoom - (int)1) * this->width);
HXDLIN(1002)			minX = (minX1 - ((Float)minX2 / (Float)((int)2 * zoom)));
            		}
HXLINE(1003)		 ::Dynamic maxX;
HXDLIN(1003)		if (hx::IsNull( this->maxScrollX )) {
HXLINE(1003)			maxX = null();
            		}
            		else {
HXLINE(1003)			 ::Dynamic maxX1 = this->maxScrollX;
HXDLIN(1003)			Float maxX2 = ((zoom - (int)1) * this->width);
HXDLIN(1003)			maxX = (maxX1 + ((Float)maxX2 / (Float)((int)2 * zoom)));
            		}
HXLINE(1004)		 ::Dynamic minY;
HXDLIN(1004)		if (hx::IsNull( this->minScrollY )) {
HXLINE(1004)			minY = null();
            		}
            		else {
HXLINE(1004)			 ::Dynamic minY1 = this->minScrollY;
HXDLIN(1004)			Float minY2 = ((zoom - (int)1) * this->height);
HXDLIN(1004)			minY = (minY1 - ((Float)minY2 / (Float)((int)2 * zoom)));
            		}
HXLINE(1005)		 ::Dynamic maxY;
HXDLIN(1005)		if (hx::IsNull( this->maxScrollY )) {
HXLINE(1005)			maxY = null();
            		}
            		else {
HXLINE(1005)			 ::Dynamic maxY1 = this->maxScrollY;
HXDLIN(1005)			Float maxY2 = ((zoom - (int)1) * this->height);
HXDLIN(1005)			maxY = (maxY1 + ((Float)maxY2 / (Float)((int)2 * zoom)));
            		}
HXLINE(1008)		Float Value = this->scroll->x;
HXDLIN(1008)		 ::Dynamic Max;
HXDLIN(1008)		if (hx::IsNotNull( maxX )) {
HXLINE(1008)			Max = (maxX - this->width);
            		}
            		else {
HXLINE(1008)			Max = null();
            		}
HXDLIN(1008)		Float lowerBound;
HXDLIN(1008)		bool lowerBound1;
HXDLIN(1008)		if (hx::IsNotNull( minX )) {
HXLINE(1008)			lowerBound1 = hx::IsLess( Value,minX );
            		}
            		else {
HXLINE(1008)			lowerBound1 = false;
            		}
HXDLIN(1008)		if (lowerBound1) {
HXLINE(1008)			lowerBound = minX;
            		}
            		else {
HXLINE(1008)			lowerBound = Value;
            		}
HXDLIN(1008)		Float _hx_tmp;
HXDLIN(1008)		bool _hx_tmp1;
HXDLIN(1008)		if (hx::IsNotNull( Max )) {
HXLINE(1008)			_hx_tmp1 = hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE(1008)			_hx_tmp1 = false;
            		}
HXDLIN(1008)		if (_hx_tmp1) {
HXLINE(1008)			_hx_tmp = Max;
            		}
            		else {
HXLINE(1008)			_hx_tmp = lowerBound;
            		}
HXDLIN(1008)		this->scroll->set_x(_hx_tmp);
HXLINE(1009)		Float Value1 = this->scroll->y;
HXDLIN(1009)		 ::Dynamic Max1;
HXDLIN(1009)		if (hx::IsNotNull( maxY )) {
HXLINE(1009)			Max1 = (maxY - this->height);
            		}
            		else {
HXLINE(1009)			Max1 = null();
            		}
HXDLIN(1009)		Float lowerBound2;
HXDLIN(1009)		bool lowerBound3;
HXDLIN(1009)		if (hx::IsNotNull( minY )) {
HXLINE(1009)			lowerBound3 = hx::IsLess( Value1,minY );
            		}
            		else {
HXLINE(1009)			lowerBound3 = false;
            		}
HXDLIN(1009)		if (lowerBound3) {
HXLINE(1009)			lowerBound2 = minY;
            		}
            		else {
HXLINE(1009)			lowerBound2 = Value1;
            		}
HXDLIN(1009)		Float _hx_tmp2;
HXDLIN(1009)		bool _hx_tmp3;
HXDLIN(1009)		if (hx::IsNotNull( Max1 )) {
HXLINE(1009)			_hx_tmp3 = hx::IsGreater( lowerBound2,Max1 );
            		}
            		else {
HXLINE(1009)			_hx_tmp3 = false;
            		}
HXDLIN(1009)		if (_hx_tmp3) {
HXLINE(1009)			_hx_tmp2 = Max1;
            		}
            		else {
HXLINE(1009)			_hx_tmp2 = lowerBound2;
            		}
HXDLIN(1009)		this->scroll->set_y(_hx_tmp2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateScroll,(void))

void FlxCamera_obj::updateFollow(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1020_updateFollow)
HXDLIN(1020)		if (hx::IsNull( this->deadzone )) {
HXLINE(1022)			this->target->getMidpoint(this->_point);
HXLINE(1023)			this->_point->addPoint(this->targetOffset);
HXLINE(1024)			{
HXLINE(1024)				 ::flixel::math::FlxPoint point = this->_point;
HXDLIN(1024)				 ::flixel::math::FlxPoint _hx_tmp = this->scroll;
HXDLIN(1024)				Float point1 = point->x;
HXDLIN(1024)				Float _hx_tmp1 = (point1 - (this->width * ((Float)0.5)));
HXDLIN(1024)				Float point2 = point->y;
HXDLIN(1024)				_hx_tmp->set(_hx_tmp1,(point2 - (this->height * ((Float)0.5))));
HXDLIN(1024)				if (point->_weak) {
HXLINE(1024)					point->put();
            				}
            			}
            		}
            		else {
HXLINE(1028)			Float edge;
HXLINE(1029)			Float targetX = (this->target->x + this->targetOffset->x);
HXLINE(1030)			Float targetY = (this->target->y + this->targetOffset->y);
HXLINE(1032)			if (hx::IsEq( this->style,::flixel::FlxCameraFollowStyle_obj::SCREEN_BY_SCREEN_dyn() )) {
HXLINE(1034)				if ((targetX >= (this->scroll->x + this->width))) {
HXLINE(1036)					 ::flixel::math::FlxPoint _g = this->_scrollTarget;
HXDLIN(1036)					_g->set_x((_g->x + this->width));
            				}
            				else {
HXLINE(1038)					if ((targetX < this->scroll->x)) {
HXLINE(1040)						 ::flixel::math::FlxPoint _g1 = this->_scrollTarget;
HXDLIN(1040)						_g1->set_x((_g1->x - this->width));
            					}
            				}
HXLINE(1043)				if ((targetY >= (this->scroll->y + this->height))) {
HXLINE(1045)					 ::flixel::math::FlxPoint _g2 = this->_scrollTarget;
HXDLIN(1045)					_g2->set_y((_g2->y + this->height));
            				}
            				else {
HXLINE(1047)					if ((targetY < this->scroll->y)) {
HXLINE(1049)						 ::flixel::math::FlxPoint _g3 = this->_scrollTarget;
HXDLIN(1049)						_g3->set_y((_g3->y - this->height));
            					}
            				}
            			}
            			else {
HXLINE(1054)				edge = (targetX - this->deadzone->x);
HXLINE(1055)				if ((this->_scrollTarget->x > edge)) {
HXLINE(1057)					this->_scrollTarget->set_x(edge);
            				}
HXLINE(1059)				Float edge1 = (targetX + this->target->get_width());
HXDLIN(1059)				edge = ((edge1 - this->deadzone->x) - this->deadzone->width);
HXLINE(1060)				if ((this->_scrollTarget->x < edge)) {
HXLINE(1062)					this->_scrollTarget->set_x(edge);
            				}
HXLINE(1065)				edge = (targetY - this->deadzone->y);
HXLINE(1066)				if ((this->_scrollTarget->y > edge)) {
HXLINE(1068)					this->_scrollTarget->set_y(edge);
            				}
HXLINE(1070)				Float edge2 = (targetY + this->target->get_height());
HXDLIN(1070)				edge = ((edge2 - this->deadzone->y) - this->deadzone->height);
HXLINE(1071)				if ((this->_scrollTarget->y < edge)) {
HXLINE(1073)					this->_scrollTarget->set_y(edge);
            				}
            			}
HXLINE(1077)			if (::Std_obj::is(this->target,hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE(1079)				if (hx::IsNull( this->_lastTargetPosition )) {
HXLINE(1081)					Float X = this->target->x;
HXDLIN(1081)					Float Y = this->target->y;
HXDLIN(1081)					 ::flixel::math::FlxPoint point3 = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN(1081)					point3->_inPool = false;
HXDLIN(1081)					this->_lastTargetPosition = point3;
            				}
HXLINE(1083)				{
HXLINE(1083)					 ::flixel::math::FlxPoint _g4 = this->_scrollTarget;
HXDLIN(1083)					Float _g5 = _g4->x;
HXDLIN(1083)					_g4->set_x((_g5 + ((this->target->x - this->_lastTargetPosition->x) * this->followLead->x)));
            				}
HXLINE(1084)				{
HXLINE(1084)					 ::flixel::math::FlxPoint _g6 = this->_scrollTarget;
HXDLIN(1084)					Float _g7 = _g6->y;
HXDLIN(1084)					_g6->set_y((_g7 + ((this->target->y - this->_lastTargetPosition->y) * this->followLead->y)));
            				}
HXLINE(1086)				this->_lastTargetPosition->set_x(this->target->x);
HXLINE(1087)				this->_lastTargetPosition->set_y(this->target->y);
            			}
HXLINE(1090)			Float _hx_tmp2 = this->followLerp;
HXDLIN(1090)			if ((_hx_tmp2 >= ((Float)(int)60 / (Float)::flixel::FlxG_obj::updateFramerate))) {
HXLINE(1092)				 ::flixel::math::FlxPoint _this = this->scroll;
HXDLIN(1092)				 ::flixel::math::FlxPoint point4 = this->_scrollTarget;
HXDLIN(1092)				_this->set_x(point4->x);
HXDLIN(1092)				_this->set_y(point4->y);
HXDLIN(1092)				if (point4->_weak) {
HXLINE(1092)					point4->put();
            				}
            			}
            			else {
HXLINE(1096)				{
HXLINE(1096)					 ::flixel::math::FlxPoint _g8 = this->scroll;
HXDLIN(1096)					Float _g9 = _g8->x;
HXDLIN(1096)					_g8->set_x((_g9 + ((Float)(((this->_scrollTarget->x - this->scroll->x) * this->followLerp) * ::flixel::FlxG_obj::updateFramerate) / (Float)(int)60)));
            				}
HXLINE(1097)				{
HXLINE(1097)					 ::flixel::math::FlxPoint _g10 = this->scroll;
HXDLIN(1097)					Float _g11 = _g10->y;
HXDLIN(1097)					_g10->set_y((_g11 + ((Float)(((this->_scrollTarget->y - this->scroll->y) * this->followLerp) * ::flixel::FlxG_obj::updateFramerate) / (Float)(int)60)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateFollow,(void))

void FlxCamera_obj::updateFlash(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1105_updateFlash)
HXDLIN(1105)		if ((this->_fxFlashAlpha > ((Float)0.0))) {
HXLINE(1107)			 ::flixel::FlxCamera _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1107)			_hx_tmp->_fxFlashAlpha = (_hx_tmp->_fxFlashAlpha - ((Float)elapsed / (Float)this->_fxFlashDuration));
HXLINE(1108)			bool _hx_tmp1;
HXDLIN(1108)			if ((this->_fxFlashAlpha <= (int)0)) {
HXLINE(1108)				_hx_tmp1 = hx::IsNotNull( this->_fxFlashComplete );
            			}
            			else {
HXLINE(1108)				_hx_tmp1 = false;
            			}
HXDLIN(1108)			if (_hx_tmp1) {
HXLINE(1110)				this->_fxFlashComplete();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,updateFlash,(void))

void FlxCamera_obj::updateFade(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1116_updateFade)
HXLINE(1117)		if (this->_fxFadeCompleted) {
HXLINE(1118)			return;
            		}
HXLINE(1120)		if (this->_fxFadeIn) {
HXLINE(1122)			 ::flixel::FlxCamera _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1122)			_hx_tmp->_fxFadeAlpha = (_hx_tmp->_fxFadeAlpha - ((Float)elapsed / (Float)this->_fxFadeDuration));
HXLINE(1123)			if ((this->_fxFadeAlpha <= ((Float)0.0))) {
HXLINE(1125)				this->_fxFadeAlpha = ((Float)0.0);
HXLINE(1126)				this->completeFade();
            			}
            		}
            		else {
HXLINE(1131)			 ::flixel::FlxCamera _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1131)			_hx_tmp1->_fxFadeAlpha = (_hx_tmp1->_fxFadeAlpha + ((Float)elapsed / (Float)this->_fxFadeDuration));
HXLINE(1132)			if ((this->_fxFadeAlpha >= ((Float)1.0))) {
HXLINE(1134)				this->_fxFadeAlpha = ((Float)1.0);
HXLINE(1135)				this->completeFade();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,updateFade,(void))

void FlxCamera_obj::completeFade(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1141_completeFade)
HXLINE(1142)		this->_fxFadeCompleted = true;
HXLINE(1143)		if (hx::IsNotNull( this->_fxFadeComplete )) {
HXLINE(1144)			this->_fxFadeComplete();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,completeFade,(void))

void FlxCamera_obj::updateShake(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1149_updateShake)
HXDLIN(1149)		if ((this->_fxShakeDuration > (int)0)) {
HXLINE(1151)			 ::flixel::FlxCamera _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1151)			_hx_tmp->_fxShakeDuration = (_hx_tmp->_fxShakeDuration - elapsed);
HXLINE(1152)			if ((this->_fxShakeDuration <= (int)0)) {
HXLINE(1154)				if (hx::IsNotNull( this->_fxShakeComplete )) {
HXLINE(1156)					this->_fxShakeComplete();
            				}
            			}
            			else {
HXLINE(1161)				if (hx::IsNotEq( this->_fxShakeAxes,::flixel::util::FlxAxes_obj::Y_dyn() )) {
HXLINE(1163)					 ::openfl::_legacy::display::Sprite _g = this->flashSprite;
HXDLIN(1163)					Float _hx_tmp1 = _g->get_x();
HXDLIN(1163)					 ::flixel::math::FlxRandom _hx_tmp2 = ::flixel::FlxG_obj::random;
HXDLIN(1163)					Float _hx_tmp3 = (-(this->_fxShakeIntensity) * this->width);
HXDLIN(1163)					Float _hx_tmp4 = _hx_tmp2->_hx_float(_hx_tmp3,(this->_fxShakeIntensity * this->width),null());
HXDLIN(1163)					_g->set_x((_hx_tmp1 + ((_hx_tmp4 * this->zoom) * ::flixel::FlxG_obj::scaleMode->scale->x)));
            				}
HXLINE(1165)				if (hx::IsNotEq( this->_fxShakeAxes,::flixel::util::FlxAxes_obj::X_dyn() )) {
HXLINE(1167)					 ::openfl::_legacy::display::Sprite _g1 = this->flashSprite;
HXDLIN(1167)					Float _hx_tmp5 = _g1->get_y();
HXDLIN(1167)					 ::flixel::math::FlxRandom _hx_tmp6 = ::flixel::FlxG_obj::random;
HXDLIN(1167)					Float _hx_tmp7 = (-(this->_fxShakeIntensity) * this->height);
HXDLIN(1167)					Float _hx_tmp8 = _hx_tmp6->_hx_float(_hx_tmp7,(this->_fxShakeIntensity * this->height),null());
HXDLIN(1167)					_g1->set_y((_hx_tmp5 + ((_hx_tmp8 * this->zoom) * ::flixel::FlxG_obj::scaleMode->scale->y)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,updateShake,(void))

void FlxCamera_obj::updateFlashSpritePosition(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1179_updateFlashSpritePosition)
HXDLIN(1179)		if (hx::IsNotNull( this->flashSprite )) {
HXLINE(1181)			 ::openfl::_legacy::display::Sprite _hx_tmp = this->flashSprite;
HXDLIN(1181)			_hx_tmp->set_x(((this->x * ::flixel::FlxG_obj::scaleMode->scale->x) + this->_flashOffset->x));
HXLINE(1182)			 ::openfl::_legacy::display::Sprite _hx_tmp1 = this->flashSprite;
HXDLIN(1182)			_hx_tmp1->set_y(((this->y * ::flixel::FlxG_obj::scaleMode->scale->y) + this->_flashOffset->y));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateFlashSpritePosition,(void))

void FlxCamera_obj::updateFlashOffset(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1191_updateFlashOffset)
HXLINE(1192)		 ::flixel::math::FlxPoint _hx_tmp = this->_flashOffset;
HXDLIN(1192)		_hx_tmp->set_x((((this->width * ((Float)0.5)) * ::flixel::FlxG_obj::scaleMode->scale->x) * this->initialZoom));
HXLINE(1193)		 ::flixel::math::FlxPoint _hx_tmp1 = this->_flashOffset;
HXDLIN(1193)		_hx_tmp1->set_y((((this->height * ((Float)0.5)) * ::flixel::FlxG_obj::scaleMode->scale->y) * this->initialZoom));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateFlashOffset,(void))

void FlxCamera_obj::updateScrollRect(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1205_updateScrollRect)
HXLINE(1206)		 ::openfl::_legacy::geom::Rectangle rect;
HXDLIN(1206)		if (hx::IsNotNull( this->_scrollRect )) {
HXLINE(1206)			rect = this->_scrollRect->get_scrollRect();
            		}
            		else {
HXLINE(1206)			rect = null();
            		}
HXLINE(1208)		if (hx::IsNotNull( rect )) {
HXLINE(1210)			rect->x = (rect->y = (int)0);
HXLINE(1212)			rect->width = ((this->width * this->initialZoom) * ::flixel::FlxG_obj::scaleMode->scale->x);
HXLINE(1213)			rect->height = ((this->height * this->initialZoom) * ::flixel::FlxG_obj::scaleMode->scale->y);
HXLINE(1215)			this->_scrollRect->set_scrollRect(rect);
HXLINE(1217)			 ::openfl::_legacy::display::Sprite _hx_tmp = this->_scrollRect;
HXDLIN(1217)			_hx_tmp->set_x((((Float)-0.5) * rect->width));
HXLINE(1218)			 ::openfl::_legacy::display::Sprite _hx_tmp1 = this->_scrollRect;
HXDLIN(1218)			_hx_tmp1->set_y((((Float)-0.5) * rect->height));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateScrollRect,(void))

void FlxCamera_obj::updateInternalSpritePositions(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1230_updateInternalSpritePositions)
HXDLIN(1230)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1232)			if (hx::IsNotNull( this->_flashBitmap )) {
HXLINE(1234)				this->_flashBitmap->set_x((int)0);
HXLINE(1235)				this->_flashBitmap->set_y((int)0);
            			}
            		}
            		else {
HXLINE(1240)			if (hx::IsNotNull( this->canvas )) {
HXLINE(1242)				 ::openfl::_legacy::display::Sprite _hx_tmp = this->canvas;
HXDLIN(1242)				Float _hx_tmp1 = (((Float)-0.5) * this->width);
HXDLIN(1242)				_hx_tmp->set_x(((_hx_tmp1 * (this->scaleX - this->initialZoom)) * ::flixel::FlxG_obj::scaleMode->scale->x));
HXLINE(1243)				 ::openfl::_legacy::display::Sprite _hx_tmp2 = this->canvas;
HXDLIN(1243)				Float _hx_tmp3 = (((Float)-0.5) * this->height);
HXDLIN(1243)				_hx_tmp2->set_y(((_hx_tmp3 * (this->scaleY - this->initialZoom)) * ::flixel::FlxG_obj::scaleMode->scale->y));
HXLINE(1245)				this->canvas->set_scaleX(this->totalScaleX);
HXLINE(1246)				this->canvas->set_scaleY(this->totalScaleY);
HXLINE(1249)				if (hx::IsNotNull( this->debugLayer )) {
HXLINE(1251)					 ::openfl::_legacy::display::Sprite _hx_tmp4 = this->debugLayer;
HXDLIN(1251)					_hx_tmp4->set_x(this->canvas->get_x());
HXLINE(1252)					 ::openfl::_legacy::display::Sprite _hx_tmp5 = this->debugLayer;
HXDLIN(1252)					_hx_tmp5->set_y(this->canvas->get_y());
HXLINE(1254)					this->debugLayer->set_scaleX(this->totalScaleX);
HXLINE(1255)					this->debugLayer->set_scaleY(this->totalScaleY);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateInternalSpritePositions,(void))

void FlxCamera_obj::follow( ::flixel::FlxObject Target, ::flixel::FlxCameraFollowStyle Style, ::Dynamic Lerp){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1272_follow)
HXLINE(1273)		if (hx::IsNull( Style )) {
HXLINE(1274)			Style = ::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn();
            		}
HXLINE(1276)		if (hx::IsNull( Lerp )) {
HXLINE(1277)			Lerp = ((Float)(int)60 / (Float)::flixel::FlxG_obj::updateFramerate);
            		}
HXLINE(1279)		this->style = Style;
HXLINE(1280)		this->target = Target;
HXLINE(1281)		this->set_followLerp(Lerp);
HXLINE(1282)		Float helper;
HXLINE(1283)		Float w = (int)0;
HXLINE(1284)		Float h = (int)0;
HXLINE(1285)		this->_lastTargetPosition = null();
HXLINE(1287)		switch((int)(_hx_getEnumValueIndex(Style))){
            			case (int)0: {
HXLINE(1290)				if (hx::IsNotNull( this->target )) {
HXLINE(1292)					w = this->target->get_width();
HXLINE(1293)					h = this->target->get_height();
            				}
HXLINE(1295)				Float X = ((Float)(this->width - w) / (Float)(int)2);
HXDLIN(1295)				Float Y = ((Float)(this->height - h) / (Float)(int)2);
HXDLIN(1295)				 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1295)				_this->x = X;
HXDLIN(1295)				_this->y = (Y - (h * ((Float)0.25)));
HXDLIN(1295)				_this->width = w;
HXDLIN(1295)				_this->height = h;
HXDLIN(1295)				 ::flixel::math::FlxRect rect = _this;
HXDLIN(1295)				rect->_inPool = false;
HXDLIN(1295)				this->deadzone = rect;
            			}
            			break;
            			case (int)1: {
HXLINE(1298)				Float w1 = ((Float)this->width / (Float)(int)8);
HXLINE(1299)				Float h1 = ((Float)this->height / (Float)(int)3);
HXLINE(1300)				Float X1 = ((Float)(this->width - w1) / (Float)(int)2);
HXDLIN(1300)				Float Y1 = ((Float)(this->height - h1) / (Float)(int)2);
HXDLIN(1300)				 ::flixel::math::FlxRect _this1 = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1300)				_this1->x = X1;
HXDLIN(1300)				_this1->y = (Y1 - (h1 * ((Float)0.25)));
HXDLIN(1300)				_this1->width = w1;
HXDLIN(1300)				_this1->height = h1;
HXDLIN(1300)				 ::flixel::math::FlxRect rect1 = _this1;
HXDLIN(1300)				rect1->_inPool = false;
HXDLIN(1300)				this->deadzone = rect1;
            			}
            			break;
            			case (int)2: {
HXLINE(1303)				helper = ((Float)::Math_obj::max(this->width,this->height) / (Float)(int)4);
HXLINE(1304)				Float X2 = ((Float)(this->width - helper) / (Float)(int)2);
HXDLIN(1304)				Float Y2 = ((Float)(this->height - helper) / (Float)(int)2);
HXDLIN(1304)				 ::flixel::math::FlxRect _this2 = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1304)				_this2->x = X2;
HXDLIN(1304)				_this2->y = Y2;
HXDLIN(1304)				_this2->width = helper;
HXDLIN(1304)				_this2->height = helper;
HXDLIN(1304)				 ::flixel::math::FlxRect rect2 = _this2;
HXDLIN(1304)				rect2->_inPool = false;
HXDLIN(1304)				this->deadzone = rect2;
            			}
            			break;
            			case (int)3: {
HXLINE(1307)				helper = ((Float)::Math_obj::max(this->width,this->height) / (Float)(int)8);
HXLINE(1308)				Float X3 = ((Float)(this->width - helper) / (Float)(int)2);
HXDLIN(1308)				Float Y3 = ((Float)(this->height - helper) / (Float)(int)2);
HXDLIN(1308)				 ::flixel::math::FlxRect _this3 = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1308)				_this3->x = X3;
HXDLIN(1308)				_this3->y = Y3;
HXDLIN(1308)				_this3->width = helper;
HXDLIN(1308)				_this3->height = helper;
HXDLIN(1308)				 ::flixel::math::FlxRect rect3 = _this3;
HXDLIN(1308)				rect3->_inPool = false;
HXDLIN(1308)				this->deadzone = rect3;
            			}
            			break;
            			case (int)4: {
HXLINE(1311)				Float Width = this->width;
HXDLIN(1311)				Float Height = this->height;
HXDLIN(1311)				 ::flixel::math::FlxRect _this4 = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1311)				_this4->x = (int)0;
HXDLIN(1311)				_this4->y = (int)0;
HXDLIN(1311)				_this4->width = Width;
HXDLIN(1311)				_this4->height = Height;
HXDLIN(1311)				 ::flixel::math::FlxRect rect4 = _this4;
HXDLIN(1311)				rect4->_inPool = false;
HXDLIN(1311)				this->deadzone = rect4;
            			}
            			break;
            			case (int)5: {
HXLINE(1314)				this->deadzone = null();
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxCamera_obj,follow,(void))

void FlxCamera_obj::snapToTarget(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1323_snapToTarget)
HXLINE(1324)		this->updateFollow();
HXLINE(1325)		{
HXLINE(1325)			 ::flixel::math::FlxPoint _this = this->scroll;
HXDLIN(1325)			 ::flixel::math::FlxPoint point = this->_scrollTarget;
HXDLIN(1325)			_this->set_x(point->x);
HXDLIN(1325)			_this->set_y(point->y);
HXDLIN(1325)			if (point->_weak) {
HXLINE(1325)				point->put();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,snapToTarget,(void))

void FlxCamera_obj::focusOn( ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1334_focusOn)
HXLINE(1335)		 ::flixel::math::FlxPoint _hx_tmp = this->scroll;
HXDLIN(1335)		Float point1 = point->x;
HXDLIN(1335)		Float _hx_tmp1 = (point1 - (this->width * ((Float)0.5)));
HXDLIN(1335)		Float point2 = point->y;
HXDLIN(1335)		_hx_tmp->set(_hx_tmp1,(point2 - (this->height * ((Float)0.5))));
HXLINE(1336)		if (point->_weak) {
HXLINE(1336)			point->put();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,focusOn,(void))

void FlxCamera_obj::flash(hx::Null< int >  __o_Color,hx::Null< Float >  __o_Duration, ::Dynamic OnComplete,hx::Null< bool >  __o_Force){
int Color = __o_Color.Default(-1);
Float Duration = __o_Duration.Default(1);
bool Force = __o_Force.Default(false);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1349_flash)
HXLINE(1350)		bool _hx_tmp;
HXDLIN(1350)		if (!(Force)) {
HXLINE(1350)			_hx_tmp = (this->_fxFlashAlpha > ((Float)0.0));
            		}
            		else {
HXLINE(1350)			_hx_tmp = false;
            		}
HXDLIN(1350)		if (_hx_tmp) {
HXLINE(1351)			return;
            		}
HXLINE(1353)		this->_fxFlashColor = Color;
HXLINE(1354)		if ((Duration <= (int)0)) {
HXLINE(1355)			Duration = ((Float)0.000001);
            		}
HXLINE(1356)		this->_fxFlashDuration = Duration;
HXLINE(1357)		this->_fxFlashComplete = OnComplete;
HXLINE(1358)		this->_fxFlashAlpha = ((Float)1.0);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxCamera_obj,flash,(void))

void FlxCamera_obj::fade(hx::Null< int >  __o_Color,hx::Null< Float >  __o_Duration,hx::Null< bool >  __o_FadeIn, ::Dynamic OnComplete,hx::Null< bool >  __o_Force){
int Color = __o_Color.Default(-16777216);
Float Duration = __o_Duration.Default(1);
bool FadeIn = __o_FadeIn.Default(false);
bool Force = __o_Force.Default(false);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1372_fade)
HXLINE(1373)		bool _hx_tmp;
HXDLIN(1373)		if (!(this->_fxFadeCompleted)) {
HXLINE(1373)			_hx_tmp = !(Force);
            		}
            		else {
HXLINE(1373)			_hx_tmp = false;
            		}
HXDLIN(1373)		if (_hx_tmp) {
HXLINE(1374)			return;
            		}
HXLINE(1376)		this->_fxFadeColor = Color;
HXLINE(1377)		if ((Duration <= (int)0)) {
HXLINE(1378)			Duration = ((Float)0.000001);
            		}
HXLINE(1380)		this->_fxFadeIn = FadeIn;
HXLINE(1381)		this->_fxFadeDuration = Duration;
HXLINE(1382)		this->_fxFadeComplete = OnComplete;
HXLINE(1384)		Float _hx_tmp1;
HXDLIN(1384)		if (this->_fxFadeIn) {
HXLINE(1384)			_hx_tmp1 = ((Float)0.999999);
            		}
            		else {
HXLINE(1384)			_hx_tmp1 = ((Float)0.000001);
            		}
HXDLIN(1384)		this->_fxFadeAlpha = _hx_tmp1;
HXLINE(1385)		this->_fxFadeCompleted = false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxCamera_obj,fade,(void))

void FlxCamera_obj::shake(hx::Null< Float >  __o_Intensity,hx::Null< Float >  __o_Duration, ::Dynamic OnComplete,hx::Null< bool >  __o_Force, ::flixel::util::FlxAxes Axes){
Float Intensity = __o_Intensity.Default(((Float)0.05));
Float Duration = __o_Duration.Default(((Float)0.5));
bool Force = __o_Force.Default(true);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1400_shake)
HXLINE(1401)		if (hx::IsNull( Axes )) {
HXLINE(1402)			Axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            		}
HXLINE(1404)		bool _hx_tmp;
HXDLIN(1404)		if (!(Force)) {
HXLINE(1404)			_hx_tmp = (this->_fxShakeDuration > (int)0);
            		}
            		else {
HXLINE(1404)			_hx_tmp = false;
            		}
HXDLIN(1404)		if (_hx_tmp) {
HXLINE(1405)			return;
            		}
HXLINE(1407)		this->_fxShakeIntensity = Intensity;
HXLINE(1408)		this->_fxShakeDuration = Duration;
HXLINE(1409)		this->_fxShakeComplete = OnComplete;
HXLINE(1410)		this->_fxShakeAxes = Axes;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxCamera_obj,shake,(void))

void FlxCamera_obj::stopFX(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1417_stopFX)
HXLINE(1418)		this->_fxFlashAlpha = ((Float)0.0);
HXLINE(1419)		this->_fxFadeAlpha = ((Float)0.0);
HXLINE(1420)		this->_fxShakeDuration = (int)0;
HXLINE(1421)		this->updateFlashSpritePosition();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,stopFX,(void))

void FlxCamera_obj::setFilters(::Array< ::Dynamic> filters){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1429_setFilters)
HXDLIN(1429)		this->_filters = filters;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,setFilters,(void))

 ::flixel::FlxCamera FlxCamera_obj::copyFrom( ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1439_copyFrom)
HXLINE(1440)		this->setScrollBounds(Camera->minScrollX,Camera->maxScrollX,Camera->minScrollY,Camera->maxScrollY);
HXLINE(1442)		this->target = Camera->target;
HXLINE(1444)		if (hx::IsNotNull( this->target )) {
HXLINE(1446)			if (hx::IsNull( Camera->deadzone )) {
HXLINE(1448)				this->deadzone = null();
            			}
            			else {
HXLINE(1452)				if (hx::IsNull( this->deadzone )) {
HXLINE(1454)					 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1454)					_this->x = (int)0;
HXDLIN(1454)					_this->y = (int)0;
HXDLIN(1454)					_this->width = (int)0;
HXDLIN(1454)					_this->height = (int)0;
HXDLIN(1454)					 ::flixel::math::FlxRect rect = _this;
HXDLIN(1454)					rect->_inPool = false;
HXDLIN(1454)					this->deadzone = rect;
            				}
HXLINE(1456)				{
HXLINE(1456)					 ::flixel::math::FlxRect _this1 = this->deadzone;
HXDLIN(1456)					 ::flixel::math::FlxRect Rect = Camera->deadzone;
HXDLIN(1456)					_this1->x = Rect->x;
HXDLIN(1456)					_this1->y = Rect->y;
HXDLIN(1456)					_this1->width = Rect->width;
HXDLIN(1456)					_this1->height = Rect->height;
HXDLIN(1456)					if (Rect->_weak) {
HXLINE(1456)						if (!(Rect->_inPool)) {
HXLINE(1456)							Rect->_inPool = true;
HXDLIN(1456)							Rect->_weak = false;
HXDLIN(1456)							::flixel::math::FlxRect_obj::_pool->putUnsafe(Rect);
            						}
            					}
            				}
            			}
            		}
HXLINE(1459)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,copyFrom,return )

void FlxCamera_obj::fill(int Color,hx::Null< bool >  __o_BlendAlpha,hx::Null< Float >  __o_FxAlpha, ::openfl::_legacy::display::Graphics graphics){
bool BlendAlpha = __o_BlendAlpha.Default(true);
Float FxAlpha = __o_FxAlpha.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1470_fill)
HXDLIN(1470)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1472)			if (BlendAlpha) {
HXLINE(1474)				this->_fill->fillRect(this->_flashRect,Color);
HXLINE(1475)				this->buffer->copyPixels(this->_fill,this->_flashRect,this->_flashPoint,null(),null(),BlendAlpha);
            			}
            			else {
HXLINE(1479)				this->buffer->fillRect(this->_flashRect,Color);
            			}
            		}
            		else {
HXLINE(1485)			if ((FxAlpha == (int)0)) {
HXLINE(1486)				return;
            			}
HXLINE(1489)			 ::openfl::_legacy::display::Graphics targetGraphics;
HXDLIN(1489)			if (hx::IsNull( graphics )) {
HXLINE(1489)				targetGraphics = this->canvas->get_graphics();
            			}
            			else {
HXLINE(1489)				targetGraphics = graphics;
            			}
HXLINE(1491)			targetGraphics->beginFill(Color,FxAlpha);
HXLINE(1494)			Float _hx_tmp = (this->viewOffsetX - (int)1);
HXDLIN(1494)			Float _hx_tmp1 = (this->viewOffsetY - (int)1);
HXDLIN(1494)			Float _hx_tmp2 = (this->viewWidth + (int)2);
HXDLIN(1494)			targetGraphics->drawRect(_hx_tmp,_hx_tmp1,_hx_tmp2,(this->viewHeight + (int)2));
HXLINE(1495)			targetGraphics->endFill();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxCamera_obj,fill,(void))

void FlxCamera_obj::drawFX(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1504_drawFX)
HXLINE(1505)		Float alphaComponent;
HXLINE(1508)		if ((this->_fxFlashAlpha > ((Float)0.0))) {
HXLINE(1510)			alphaComponent = ((int)((int)this->_fxFlashColor >> (int)(int)24) & (int)(int)255);
HXLINE(1512)			if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1514)				Float _hx_tmp;
HXDLIN(1514)				if ((alphaComponent <= (int)0)) {
HXLINE(1514)					_hx_tmp = (int)255;
            				}
            				else {
HXLINE(1514)					_hx_tmp = alphaComponent;
            				}
HXDLIN(1514)				int _hx_tmp1 = ((int)::Std_obj::_hx_int((_hx_tmp * this->_fxFlashAlpha)) << (int)(int)24);
HXDLIN(1514)				this->fill((_hx_tmp1 + ((int)this->_fxFlashColor & (int)(int)16777215)),null(),null(),null());
            			}
            			else {
HXLINE(1518)				int _hx_tmp2 = ((int)this->_fxFlashColor & (int)(int)16777215);
HXDLIN(1518)				Float _hx_tmp3;
HXDLIN(1518)				if ((alphaComponent <= (int)0)) {
HXLINE(1518)					_hx_tmp3 = (int)255;
            				}
            				else {
HXLINE(1518)					_hx_tmp3 = alphaComponent;
            				}
HXDLIN(1518)				Float _hx_tmp4 = ((Float)(_hx_tmp3 * this->_fxFlashAlpha) / (Float)(int)255);
HXDLIN(1518)				this->fill(_hx_tmp2,true,_hx_tmp4,this->canvas->get_graphics());
            			}
            		}
HXLINE(1523)		if ((this->_fxFadeAlpha > ((Float)0.0))) {
HXLINE(1525)			alphaComponent = ((int)((int)this->_fxFadeColor >> (int)(int)24) & (int)(int)255);
HXLINE(1527)			if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1529)				Float _hx_tmp5;
HXDLIN(1529)				if ((alphaComponent <= (int)0)) {
HXLINE(1529)					_hx_tmp5 = (int)255;
            				}
            				else {
HXLINE(1529)					_hx_tmp5 = alphaComponent;
            				}
HXDLIN(1529)				int _hx_tmp6 = ((int)::Std_obj::_hx_int((_hx_tmp5 * this->_fxFadeAlpha)) << (int)(int)24);
HXDLIN(1529)				this->fill((_hx_tmp6 + ((int)this->_fxFadeColor & (int)(int)16777215)),null(),null(),null());
            			}
            			else {
HXLINE(1533)				int _hx_tmp7 = ((int)this->_fxFadeColor & (int)(int)16777215);
HXDLIN(1533)				Float _hx_tmp8;
HXDLIN(1533)				if ((alphaComponent <= (int)0)) {
HXLINE(1533)					_hx_tmp8 = (int)255;
            				}
            				else {
HXLINE(1533)					_hx_tmp8 = alphaComponent;
            				}
HXDLIN(1533)				Float _hx_tmp9 = ((Float)(_hx_tmp8 * this->_fxFadeAlpha) / (Float)(int)255);
HXDLIN(1533)				this->fill(_hx_tmp7,true,_hx_tmp9,this->canvas->get_graphics());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,drawFX,(void))

void FlxCamera_obj::checkResize(){
            	HX_GC_STACKFRAME(&_hx_pos_d1aae230bd422321_1541_checkResize)
HXDLIN(1541)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1543)			bool _hx_tmp;
HXDLIN(1543)			int _hx_tmp1 = this->width;
HXDLIN(1543)			if ((_hx_tmp1 == this->buffer->get_width())) {
HXLINE(1543)				int _hx_tmp2 = this->height;
HXDLIN(1543)				_hx_tmp = (_hx_tmp2 != this->buffer->get_height());
            			}
            			else {
HXLINE(1543)				_hx_tmp = true;
            			}
HXDLIN(1543)			if (_hx_tmp) {
HXLINE(1545)				 ::flixel::graphics::FlxGraphic oldBuffer = this->screen->graphic;
HXLINE(1546)				this->buffer =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,true,(int)0,null());
HXLINE(1547)				this->screen->set_pixels(this->buffer);
HXLINE(1548)				this->screen->origin->set(null(),null());
HXLINE(1549)				this->_flashBitmap->set_bitmapData(this->buffer);
HXLINE(1550)				this->_flashRect->width = this->width;
HXLINE(1551)				this->_flashRect->height = this->height;
HXLINE(1552)				this->_fill = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_fill);
HXLINE(1553)				this->_fill =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,true,(int)0,null());
HXLINE(1554)				::flixel::FlxG_obj::bitmap->removeIfNoUse(oldBuffer);
            			}
HXLINE(1557)			{
HXLINE(1557)				this->_blitMatrix->identity();
HXDLIN(1557)				this->_blitMatrix->translate(-(this->viewOffsetX),-(this->viewOffsetY));
HXDLIN(1557)				this->_blitMatrix->scale(this->scaleX,this->scaleY);
HXDLIN(1557)				bool _hx_tmp3;
HXDLIN(1557)				if (!((this->scaleX < this->initialZoom))) {
HXLINE(1557)					_hx_tmp3 = (this->scaleY < this->initialZoom);
            				}
            				else {
HXLINE(1557)					_hx_tmp3 = true;
            				}
HXDLIN(1557)				this->_useBlitMatrix = _hx_tmp3;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,checkResize,(void))

void FlxCamera_obj::updateBlitMatrix(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1562_updateBlitMatrix)
HXLINE(1563)		this->_blitMatrix->identity();
HXLINE(1564)		this->_blitMatrix->translate(-(this->viewOffsetX),-(this->viewOffsetY));
HXLINE(1565)		this->_blitMatrix->scale(this->scaleX,this->scaleY);
HXLINE(1567)		bool _hx_tmp;
HXDLIN(1567)		if (!((this->scaleX < this->initialZoom))) {
HXLINE(1567)			_hx_tmp = (this->scaleY < this->initialZoom);
            		}
            		else {
HXLINE(1567)			_hx_tmp = true;
            		}
HXDLIN(1567)		this->_useBlitMatrix = _hx_tmp;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateBlitMatrix,(void))

void FlxCamera_obj::setSize(int Width,int Height){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1577_setSize)
HXLINE(1578)		this->set_width(Width);
HXLINE(1579)		this->set_height(Height);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxCamera_obj,setSize,(void))

void FlxCamera_obj::setPosition(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1590_setPosition)
HXLINE(1591)		this->set_x(X);
HXLINE(1592)		this->set_y(Y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxCamera_obj,setPosition,(void))

void FlxCamera_obj::setScrollBoundsRect(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Float >  __o_Width,hx::Null< Float >  __o_Height,hx::Null< bool >  __o_UpdateWorld){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
Float Width = __o_Width.Default(0);
Float Height = __o_Height.Default(0);
bool UpdateWorld = __o_UpdateWorld.Default(false);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1606_setScrollBoundsRect)
HXLINE(1607)		if (UpdateWorld) {
HXLINE(1609)			 ::flixel::math::FlxRect _this = ::flixel::FlxG_obj::worldBounds;
HXDLIN(1609)			_this->x = X;
HXDLIN(1609)			_this->y = Y;
HXDLIN(1609)			_this->width = Width;
HXDLIN(1609)			_this->height = Height;
            		}
HXLINE(1612)		this->setScrollBounds(X,(X + Width),Y,(Y + Height));
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxCamera_obj,setScrollBoundsRect,(void))

void FlxCamera_obj::setScrollBounds( ::Dynamic MinX, ::Dynamic MaxX, ::Dynamic MinY, ::Dynamic MaxY){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1625_setScrollBounds)
HXLINE(1626)		this->minScrollX = MinX;
HXLINE(1627)		this->maxScrollX = MaxX;
HXLINE(1628)		this->minScrollY = MinY;
HXLINE(1629)		this->maxScrollY = MaxY;
HXLINE(1630)		this->updateScroll();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxCamera_obj,setScrollBounds,(void))

void FlxCamera_obj::setScale(Float X,Float Y){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1641_setScale)
HXLINE(1642)		this->scaleX = X;
HXLINE(1643)		this->scaleY = Y;
HXLINE(1645)		this->totalScaleX = (this->scaleX * ::flixel::FlxG_obj::scaleMode->scale->x);
HXLINE(1646)		this->totalScaleY = (this->scaleY * ::flixel::FlxG_obj::scaleMode->scale->y);
HXLINE(1648)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1650)			{
HXLINE(1650)				this->_blitMatrix->identity();
HXDLIN(1650)				this->_blitMatrix->translate(-(this->viewOffsetX),-(this->viewOffsetY));
HXDLIN(1650)				this->_blitMatrix->scale(this->scaleX,this->scaleY);
HXDLIN(1650)				bool _hx_tmp;
HXDLIN(1650)				if (!((this->scaleX < this->initialZoom))) {
HXLINE(1650)					_hx_tmp = (this->scaleY < this->initialZoom);
            				}
            				else {
HXLINE(1650)					_hx_tmp = true;
            				}
HXDLIN(1650)				this->_useBlitMatrix = _hx_tmp;
            			}
HXLINE(1652)			if (this->_useBlitMatrix) {
HXLINE(1654)				 ::openfl::_legacy::display::Bitmap _hx_tmp1 = this->_flashBitmap;
HXDLIN(1654)				_hx_tmp1->set_scaleX((this->initialZoom * ::flixel::FlxG_obj::scaleMode->scale->x));
HXLINE(1655)				 ::openfl::_legacy::display::Bitmap _hx_tmp2 = this->_flashBitmap;
HXDLIN(1655)				_hx_tmp2->set_scaleY((this->initialZoom * ::flixel::FlxG_obj::scaleMode->scale->y));
            			}
            			else {
HXLINE(1659)				this->_flashBitmap->set_scaleX(this->totalScaleX);
HXLINE(1660)				this->_flashBitmap->set_scaleY(this->totalScaleY);
            			}
            		}
HXLINE(1664)		{
HXLINE(1664)			Float _hx_tmp3 = (((Float)0.5) * this->width);
HXDLIN(1664)			this->viewOffsetX = ((Float)(_hx_tmp3 * (this->scaleX - this->initialZoom)) / (Float)this->scaleX);
HXDLIN(1664)			this->viewOffsetWidth = (this->width - this->viewOffsetX);
HXDLIN(1664)			int _hx_tmp4 = this->width;
HXDLIN(1664)			this->viewWidth = (_hx_tmp4 - ((int)2 * this->viewOffsetX));
            		}
HXLINE(1665)		{
HXLINE(1665)			Float _hx_tmp5 = (((Float)0.5) * this->height);
HXDLIN(1665)			this->viewOffsetY = ((Float)(_hx_tmp5 * (this->scaleY - this->initialZoom)) / (Float)this->scaleY);
HXDLIN(1665)			this->viewOffsetHeight = (this->height - this->viewOffsetY);
HXDLIN(1665)			int _hx_tmp6 = this->height;
HXDLIN(1665)			this->viewHeight = (_hx_tmp6 - ((int)2 * this->viewOffsetY));
            		}
HXLINE(1667)		this->updateScrollRect();
HXLINE(1668)		this->updateInternalSpritePositions();
HXLINE(1670)		::flixel::FlxG_obj::cameras->cameraResized->dispatch(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxCamera_obj,setScale,(void))

void FlxCamera_obj::onResize(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1678_onResize)
HXLINE(1679)		this->updateFlashOffset();
HXLINE(1680)		this->setScale(this->scaleX,this->scaleY);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,onResize,(void))

bool FlxCamera_obj::containsPoint( ::flixel::math::FlxPoint point,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height){
Float width = __o_width.Default(0);
Float height = __o_height.Default(0);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1690_containsPoint)
HXDLIN(1690)		bool _hx_tmp;
HXDLIN(1690)		bool _hx_tmp1;
HXDLIN(1690)		if (((point->x + width) > this->viewOffsetX)) {
HXDLIN(1690)			_hx_tmp1 = (point->x < this->viewOffsetWidth);
            		}
            		else {
HXDLIN(1690)			_hx_tmp1 = false;
            		}
HXDLIN(1690)		if (_hx_tmp1) {
HXDLIN(1690)			_hx_tmp = ((point->y + height) > this->viewOffsetY);
            		}
            		else {
HXDLIN(1690)			_hx_tmp = false;
            		}
HXDLIN(1690)		if (_hx_tmp) {
HXDLIN(1690)			return (point->y < this->viewOffsetHeight);
            		}
            		else {
HXDLIN(1690)			return false;
            		}
HXDLIN(1690)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxCamera_obj,containsPoint,return )

Float FlxCamera_obj::set_followLerp(Float Value){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1695_set_followLerp)
HXDLIN(1695)		 ::Dynamic Max = ((Float)(int)60 / (Float)::flixel::FlxG_obj::updateFramerate);
HXDLIN(1695)		Float lowerBound;
HXDLIN(1695)		if ((Value < (int)0)) {
HXDLIN(1695)			lowerBound = (int)0;
            		}
            		else {
HXDLIN(1695)			lowerBound = Value;
            		}
HXDLIN(1695)		Float _hx_tmp;
HXDLIN(1695)		bool _hx_tmp1;
HXDLIN(1695)		if (hx::IsNotNull( Max )) {
HXDLIN(1695)			_hx_tmp1 = hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXDLIN(1695)			_hx_tmp1 = false;
            		}
HXDLIN(1695)		if (_hx_tmp1) {
HXDLIN(1695)			_hx_tmp = Max;
            		}
            		else {
HXDLIN(1695)			_hx_tmp = lowerBound;
            		}
HXDLIN(1695)		return (this->followLerp = _hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_followLerp,return )

int FlxCamera_obj::set_width(int Value){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1699_set_width)
HXLINE(1700)		bool _hx_tmp;
HXDLIN(1700)		if ((this->width != Value)) {
HXLINE(1700)			_hx_tmp = (Value > (int)0);
            		}
            		else {
HXLINE(1700)			_hx_tmp = false;
            		}
HXDLIN(1700)		if (_hx_tmp) {
HXLINE(1702)			this->width = Value;
HXLINE(1703)			{
HXLINE(1703)				Float _hx_tmp1 = (((Float)0.5) * this->width);
HXDLIN(1703)				this->viewOffsetX = ((Float)(_hx_tmp1 * (this->scaleX - this->initialZoom)) / (Float)this->scaleX);
HXDLIN(1703)				this->viewOffsetWidth = (this->width - this->viewOffsetX);
HXDLIN(1703)				int _hx_tmp2 = this->width;
HXDLIN(1703)				this->viewWidth = (_hx_tmp2 - ((int)2 * this->viewOffsetX));
            			}
HXLINE(1704)			this->updateFlashOffset();
HXLINE(1705)			this->updateScrollRect();
HXLINE(1706)			this->updateInternalSpritePositions();
HXLINE(1708)			::flixel::FlxG_obj::cameras->cameraResized->dispatch(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1710)		return Value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_width,return )

int FlxCamera_obj::set_height(int Value){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1714_set_height)
HXLINE(1715)		bool _hx_tmp;
HXDLIN(1715)		if ((this->height != Value)) {
HXLINE(1715)			_hx_tmp = (Value > (int)0);
            		}
            		else {
HXLINE(1715)			_hx_tmp = false;
            		}
HXDLIN(1715)		if (_hx_tmp) {
HXLINE(1717)			this->height = Value;
HXLINE(1718)			{
HXLINE(1718)				Float _hx_tmp1 = (((Float)0.5) * this->height);
HXDLIN(1718)				this->viewOffsetY = ((Float)(_hx_tmp1 * (this->scaleY - this->initialZoom)) / (Float)this->scaleY);
HXDLIN(1718)				this->viewOffsetHeight = (this->height - this->viewOffsetY);
HXDLIN(1718)				int _hx_tmp2 = this->height;
HXDLIN(1718)				this->viewHeight = (_hx_tmp2 - ((int)2 * this->viewOffsetY));
            			}
HXLINE(1719)			this->updateFlashOffset();
HXLINE(1720)			this->updateScrollRect();
HXLINE(1721)			this->updateInternalSpritePositions();
HXLINE(1723)			::flixel::FlxG_obj::cameras->cameraResized->dispatch(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1725)		return Value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_height,return )

Float FlxCamera_obj::set_zoom(Float Zoom){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1729_set_zoom)
HXLINE(1730)		Float _hx_tmp;
HXDLIN(1730)		if ((Zoom == (int)0)) {
HXLINE(1730)			_hx_tmp = ::flixel::FlxCamera_obj::defaultZoom;
            		}
            		else {
HXLINE(1730)			_hx_tmp = Zoom;
            		}
HXDLIN(1730)		this->zoom = _hx_tmp;
HXLINE(1731)		this->setScale(this->zoom,this->zoom);
HXLINE(1732)		return this->zoom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_zoom,return )

Float FlxCamera_obj::set_alpha(Float Alpha){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1736_set_alpha)
HXLINE(1737)		Float lowerBound;
HXDLIN(1737)		if ((Alpha < (int)0)) {
HXLINE(1737)			lowerBound = (int)0;
            		}
            		else {
HXLINE(1737)			lowerBound = Alpha;
            		}
HXDLIN(1737)		 ::Dynamic _hx_tmp;
HXDLIN(1737)		if ((lowerBound > (int)1)) {
HXLINE(1737)			_hx_tmp = (int)1;
            		}
            		else {
HXLINE(1737)			_hx_tmp = lowerBound;
            		}
HXDLIN(1737)		this->alpha = _hx_tmp;
HXLINE(1738)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1740)			this->_flashBitmap->set_alpha(Alpha);
            		}
            		else {
HXLINE(1744)			this->canvas->set_alpha(Alpha);
            		}
HXLINE(1746)		return Alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_alpha,return )

Float FlxCamera_obj::set_angle(Float Angle){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1750_set_angle)
HXLINE(1751)		this->angle = Angle;
HXLINE(1752)		this->flashSprite->set_rotation(Angle);
HXLINE(1753)		return Angle;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_angle,return )

int FlxCamera_obj::set_color(int Color){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1757_set_color)
HXLINE(1758)		this->color = Color;
HXLINE(1759)		 ::openfl::_legacy::geom::ColorTransform colorTransform;
HXLINE(1761)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1763)			if (hx::IsNull( this->_flashBitmap )) {
HXLINE(1765)				return Color;
            			}
HXLINE(1767)			colorTransform = this->_flashBitmap->get_transform()->get_colorTransform();
            		}
            		else {
HXLINE(1771)			colorTransform = this->canvas->get_transform()->get_colorTransform();
            		}
HXLINE(1774)		colorTransform->redMultiplier = ((Float)((int)((int)this->color >> (int)(int)16) & (int)(int)255) / (Float)(int)255);
HXLINE(1775)		colorTransform->greenMultiplier = ((Float)((int)((int)this->color >> (int)(int)8) & (int)(int)255) / (Float)(int)255);
HXLINE(1776)		colorTransform->blueMultiplier = ((Float)((int)this->color & (int)(int)255) / (Float)(int)255);
HXLINE(1778)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1780)			this->_flashBitmap->get_transform()->set_colorTransform(colorTransform);
            		}
            		else {
HXLINE(1784)			this->canvas->get_transform()->set_colorTransform(colorTransform);
            		}
HXLINE(1787)		return Color;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_color,return )

bool FlxCamera_obj::set_antialiasing(bool Antialiasing){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1791_set_antialiasing)
HXLINE(1792)		this->antialiasing = Antialiasing;
HXLINE(1793)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1795)			this->_flashBitmap->set_smoothing(Antialiasing);
            		}
HXLINE(1797)		return Antialiasing;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_antialiasing,return )

Float FlxCamera_obj::set_x(Float x){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1801_set_x)
HXLINE(1802)		this->x = x;
HXLINE(1803)		this->updateFlashSpritePosition();
HXLINE(1804)		return x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_x,return )

Float FlxCamera_obj::set_y(Float y){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1808_set_y)
HXLINE(1809)		this->y = y;
HXLINE(1810)		this->updateFlashSpritePosition();
HXLINE(1811)		return y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_y,return )

bool FlxCamera_obj::set_visible(bool visible){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1815_set_visible)
HXLINE(1816)		if (hx::IsNotNull( this->flashSprite )) {
HXLINE(1818)			this->flashSprite->set_visible(visible);
            		}
HXLINE(1820)		return (this->visible = visible);
            	}


void FlxCamera_obj::calcOffsetX(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1824_calcOffsetX)
HXLINE(1825)		Float _hx_tmp = (((Float)0.5) * this->width);
HXDLIN(1825)		this->viewOffsetX = ((Float)(_hx_tmp * (this->scaleX - this->initialZoom)) / (Float)this->scaleX);
HXLINE(1826)		this->viewOffsetWidth = (this->width - this->viewOffsetX);
HXLINE(1827)		int _hx_tmp1 = this->width;
HXDLIN(1827)		this->viewWidth = (_hx_tmp1 - ((int)2 * this->viewOffsetX));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,calcOffsetX,(void))

void FlxCamera_obj::calcOffsetY(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1831_calcOffsetY)
HXLINE(1832)		Float _hx_tmp = (((Float)0.5) * this->height);
HXDLIN(1832)		this->viewOffsetY = ((Float)(_hx_tmp * (this->scaleY - this->initialZoom)) / (Float)this->scaleY);
HXLINE(1833)		this->viewOffsetHeight = (this->height - this->viewOffsetY);
HXLINE(1834)		int _hx_tmp1 = this->height;
HXDLIN(1834)		this->viewHeight = (_hx_tmp1 - ((int)2 * this->viewOffsetY));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,calcOffsetY,(void))

Float FlxCamera_obj::defaultZoom;

::Array< ::Dynamic> FlxCamera_obj::defaultCameras;

 ::flixel::graphics::tile::FlxDrawTilesItem FlxCamera_obj::_storageTilesHead;

 ::flixel::graphics::tile::FlxDrawTrianglesItem FlxCamera_obj::_storageTrianglesHead;

::Array< Float > FlxCamera_obj::drawVertices;

 ::openfl::_legacy::display::Sprite FlxCamera_obj::trianglesSprite;

 ::flixel::math::FlxPoint FlxCamera_obj::renderPoint;

 ::flixel::math::FlxRect FlxCamera_obj::renderRect;


hx::ObjectPtr< FlxCamera_obj > FlxCamera_obj::__new(hx::Null< int >  __o_X,hx::Null< int >  __o_Y,hx::Null< int >  __o_Width,hx::Null< int >  __o_Height,hx::Null< Float >  __o_Zoom) {
	hx::ObjectPtr< FlxCamera_obj > __this = new FlxCamera_obj();
	__this->__construct(__o_X,__o_Y,__o_Width,__o_Height,__o_Zoom);
	return __this;
}

hx::ObjectPtr< FlxCamera_obj > FlxCamera_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_X,hx::Null< int >  __o_Y,hx::Null< int >  __o_Width,hx::Null< int >  __o_Height,hx::Null< Float >  __o_Zoom) {
	FlxCamera_obj *__this = (FlxCamera_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxCamera_obj), true, "flixel.FlxCamera"));
	*(void **)__this = FlxCamera_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,__o_Width,__o_Height,__o_Zoom);
	return __this;
}

FlxCamera_obj::FlxCamera_obj()
{
}

void FlxCamera_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxCamera);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(scaleX,"scaleX");
	HX_MARK_MEMBER_NAME(scaleY,"scaleY");
	HX_MARK_MEMBER_NAME(totalScaleX,"totalScaleX");
	HX_MARK_MEMBER_NAME(totalScaleY,"totalScaleY");
	HX_MARK_MEMBER_NAME(style,"style");
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(targetOffset,"targetOffset");
	HX_MARK_MEMBER_NAME(followLerp,"followLerp");
	HX_MARK_MEMBER_NAME(deadzone,"deadzone");
	HX_MARK_MEMBER_NAME(minScrollX,"minScrollX");
	HX_MARK_MEMBER_NAME(maxScrollX,"maxScrollX");
	HX_MARK_MEMBER_NAME(minScrollY,"minScrollY");
	HX_MARK_MEMBER_NAME(maxScrollY,"maxScrollY");
	HX_MARK_MEMBER_NAME(scroll,"scroll");
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(bgColor,"bgColor");
	HX_MARK_MEMBER_NAME(screen,"screen");
	HX_MARK_MEMBER_NAME(useBgAlphaBlending,"useBgAlphaBlending");
	HX_MARK_MEMBER_NAME(flashSprite,"flashSprite");
	HX_MARK_MEMBER_NAME(pixelPerfectRender,"pixelPerfectRender");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(zoom,"zoom");
	HX_MARK_MEMBER_NAME(viewOffsetX,"viewOffsetX");
	HX_MARK_MEMBER_NAME(viewOffsetY,"viewOffsetY");
	HX_MARK_MEMBER_NAME(viewOffsetWidth,"viewOffsetWidth");
	HX_MARK_MEMBER_NAME(viewOffsetHeight,"viewOffsetHeight");
	HX_MARK_MEMBER_NAME(viewWidth,"viewWidth");
	HX_MARK_MEMBER_NAME(viewHeight,"viewHeight");
	HX_MARK_MEMBER_NAME(_blitMatrix,"_blitMatrix");
	HX_MARK_MEMBER_NAME(_useBlitMatrix,"_useBlitMatrix");
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_MEMBER_NAME(angle,"angle");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(antialiasing,"antialiasing");
	HX_MARK_MEMBER_NAME(followLead,"followLead");
	HX_MARK_MEMBER_NAME(filtersEnabled,"filtersEnabled");
	HX_MARK_MEMBER_NAME(_flashRect,"_flashRect");
	HX_MARK_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_MARK_MEMBER_NAME(_flashOffset,"_flashOffset");
	HX_MARK_MEMBER_NAME(_fxFlashColor,"_fxFlashColor");
	HX_MARK_MEMBER_NAME(_fxFlashDuration,"_fxFlashDuration");
	HX_MARK_MEMBER_NAME(_fxFlashComplete,"_fxFlashComplete");
	HX_MARK_MEMBER_NAME(_fxFlashAlpha,"_fxFlashAlpha");
	HX_MARK_MEMBER_NAME(_fxFadeColor,"_fxFadeColor");
	HX_MARK_MEMBER_NAME(_lastTargetPosition,"_lastTargetPosition");
	HX_MARK_MEMBER_NAME(_scrollTarget,"_scrollTarget");
	HX_MARK_MEMBER_NAME(_fxFadeDuration,"_fxFadeDuration");
	HX_MARK_MEMBER_NAME(_fxFadeIn,"_fxFadeIn");
	HX_MARK_MEMBER_NAME(_fxFadeComplete,"_fxFadeComplete");
	HX_MARK_MEMBER_NAME(_fxFadeCompleted,"_fxFadeCompleted");
	HX_MARK_MEMBER_NAME(_fxFadeAlpha,"_fxFadeAlpha");
	HX_MARK_MEMBER_NAME(_fxShakeIntensity,"_fxShakeIntensity");
	HX_MARK_MEMBER_NAME(_fxShakeDuration,"_fxShakeDuration");
	HX_MARK_MEMBER_NAME(_fxShakeComplete,"_fxShakeComplete");
	HX_MARK_MEMBER_NAME(_fxShakeAxes,"_fxShakeAxes");
	HX_MARK_MEMBER_NAME(_point,"_point");
	HX_MARK_MEMBER_NAME(_filters,"_filters");
	HX_MARK_MEMBER_NAME(initialZoom,"initialZoom");
	HX_MARK_MEMBER_NAME(_fill,"_fill");
	HX_MARK_MEMBER_NAME(_flashBitmap,"_flashBitmap");
	HX_MARK_MEMBER_NAME(_scrollRect,"_scrollRect");
	HX_MARK_MEMBER_NAME(_bounds,"_bounds");
	HX_MARK_MEMBER_NAME(canvas,"canvas");
	HX_MARK_MEMBER_NAME(debugLayer,"debugLayer");
	HX_MARK_MEMBER_NAME(_helperMatrix,"_helperMatrix");
	HX_MARK_MEMBER_NAME(_helperPoint,"_helperPoint");
	HX_MARK_MEMBER_NAME(_currentDrawItem,"_currentDrawItem");
	HX_MARK_MEMBER_NAME(_headOfDrawStack,"_headOfDrawStack");
	HX_MARK_MEMBER_NAME(_headTiles,"_headTiles");
	HX_MARK_MEMBER_NAME(_headTriangles,"_headTriangles");
	 ::flixel::FlxBasic_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxCamera_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(scaleX,"scaleX");
	HX_VISIT_MEMBER_NAME(scaleY,"scaleY");
	HX_VISIT_MEMBER_NAME(totalScaleX,"totalScaleX");
	HX_VISIT_MEMBER_NAME(totalScaleY,"totalScaleY");
	HX_VISIT_MEMBER_NAME(style,"style");
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(targetOffset,"targetOffset");
	HX_VISIT_MEMBER_NAME(followLerp,"followLerp");
	HX_VISIT_MEMBER_NAME(deadzone,"deadzone");
	HX_VISIT_MEMBER_NAME(minScrollX,"minScrollX");
	HX_VISIT_MEMBER_NAME(maxScrollX,"maxScrollX");
	HX_VISIT_MEMBER_NAME(minScrollY,"minScrollY");
	HX_VISIT_MEMBER_NAME(maxScrollY,"maxScrollY");
	HX_VISIT_MEMBER_NAME(scroll,"scroll");
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(bgColor,"bgColor");
	HX_VISIT_MEMBER_NAME(screen,"screen");
	HX_VISIT_MEMBER_NAME(useBgAlphaBlending,"useBgAlphaBlending");
	HX_VISIT_MEMBER_NAME(flashSprite,"flashSprite");
	HX_VISIT_MEMBER_NAME(pixelPerfectRender,"pixelPerfectRender");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(zoom,"zoom");
	HX_VISIT_MEMBER_NAME(viewOffsetX,"viewOffsetX");
	HX_VISIT_MEMBER_NAME(viewOffsetY,"viewOffsetY");
	HX_VISIT_MEMBER_NAME(viewOffsetWidth,"viewOffsetWidth");
	HX_VISIT_MEMBER_NAME(viewOffsetHeight,"viewOffsetHeight");
	HX_VISIT_MEMBER_NAME(viewWidth,"viewWidth");
	HX_VISIT_MEMBER_NAME(viewHeight,"viewHeight");
	HX_VISIT_MEMBER_NAME(_blitMatrix,"_blitMatrix");
	HX_VISIT_MEMBER_NAME(_useBlitMatrix,"_useBlitMatrix");
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
	HX_VISIT_MEMBER_NAME(angle,"angle");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(antialiasing,"antialiasing");
	HX_VISIT_MEMBER_NAME(followLead,"followLead");
	HX_VISIT_MEMBER_NAME(filtersEnabled,"filtersEnabled");
	HX_VISIT_MEMBER_NAME(_flashRect,"_flashRect");
	HX_VISIT_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_VISIT_MEMBER_NAME(_flashOffset,"_flashOffset");
	HX_VISIT_MEMBER_NAME(_fxFlashColor,"_fxFlashColor");
	HX_VISIT_MEMBER_NAME(_fxFlashDuration,"_fxFlashDuration");
	HX_VISIT_MEMBER_NAME(_fxFlashComplete,"_fxFlashComplete");
	HX_VISIT_MEMBER_NAME(_fxFlashAlpha,"_fxFlashAlpha");
	HX_VISIT_MEMBER_NAME(_fxFadeColor,"_fxFadeColor");
	HX_VISIT_MEMBER_NAME(_lastTargetPosition,"_lastTargetPosition");
	HX_VISIT_MEMBER_NAME(_scrollTarget,"_scrollTarget");
	HX_VISIT_MEMBER_NAME(_fxFadeDuration,"_fxFadeDuration");
	HX_VISIT_MEMBER_NAME(_fxFadeIn,"_fxFadeIn");
	HX_VISIT_MEMBER_NAME(_fxFadeComplete,"_fxFadeComplete");
	HX_VISIT_MEMBER_NAME(_fxFadeCompleted,"_fxFadeCompleted");
	HX_VISIT_MEMBER_NAME(_fxFadeAlpha,"_fxFadeAlpha");
	HX_VISIT_MEMBER_NAME(_fxShakeIntensity,"_fxShakeIntensity");
	HX_VISIT_MEMBER_NAME(_fxShakeDuration,"_fxShakeDuration");
	HX_VISIT_MEMBER_NAME(_fxShakeComplete,"_fxShakeComplete");
	HX_VISIT_MEMBER_NAME(_fxShakeAxes,"_fxShakeAxes");
	HX_VISIT_MEMBER_NAME(_point,"_point");
	HX_VISIT_MEMBER_NAME(_filters,"_filters");
	HX_VISIT_MEMBER_NAME(initialZoom,"initialZoom");
	HX_VISIT_MEMBER_NAME(_fill,"_fill");
	HX_VISIT_MEMBER_NAME(_flashBitmap,"_flashBitmap");
	HX_VISIT_MEMBER_NAME(_scrollRect,"_scrollRect");
	HX_VISIT_MEMBER_NAME(_bounds,"_bounds");
	HX_VISIT_MEMBER_NAME(canvas,"canvas");
	HX_VISIT_MEMBER_NAME(debugLayer,"debugLayer");
	HX_VISIT_MEMBER_NAME(_helperMatrix,"_helperMatrix");
	HX_VISIT_MEMBER_NAME(_helperPoint,"_helperPoint");
	HX_VISIT_MEMBER_NAME(_currentDrawItem,"_currentDrawItem");
	HX_VISIT_MEMBER_NAME(_headOfDrawStack,"_headOfDrawStack");
	HX_VISIT_MEMBER_NAME(_headTiles,"_headTiles");
	HX_VISIT_MEMBER_NAME(_headTriangles,"_headTriangles");
	 ::flixel::FlxBasic_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxCamera_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { return hx::Val( zoom ); }
		if (HX_FIELD_EQ(inName,"fade") ) { return hx::Val( fade_dyn() ); }
		if (HX_FIELD_EQ(inName,"fill") ) { return hx::Val( fill_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"style") ) { return hx::Val( style ); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"alpha") ) { return hx::Val( alpha ); }
		if (HX_FIELD_EQ(inName,"angle") ) { return hx::Val( angle ); }
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"_fill") ) { return hx::Val( _fill ); }
		if (HX_FIELD_EQ(inName,"flash") ) { return hx::Val( flash_dyn() ); }
		if (HX_FIELD_EQ(inName,"shake") ) { return hx::Val( shake_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scaleX") ) { return hx::Val( scaleX ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { return hx::Val( scaleY ); }
		if (HX_FIELD_EQ(inName,"target") ) { return hx::Val( target ); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return hx::Val( scroll ); }
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer ); }
		if (HX_FIELD_EQ(inName,"screen") ) { return hx::Val( screen ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"_point") ) { return hx::Val( _point ); }
		if (HX_FIELD_EQ(inName,"canvas") ) { return hx::Val( canvas ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"follow") ) { return hx::Val( follow_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopFX") ) { return hx::Val( stopFX_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawFX") ) { return hx::Val( drawFX_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bgColor") ) { return hx::Val( bgColor ); }
		if (HX_FIELD_EQ(inName,"_bounds") ) { return hx::Val( _bounds ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"focusOn") ) { return hx::Val( focusOn_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSize") ) { return hx::Val( setSize_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deadzone") ) { return hx::Val( deadzone ); }
		if (HX_FIELD_EQ(inName,"_filters") ) { return hx::Val( _filters ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScale") ) { return hx::Val( setScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"onResize") ) { return hx::Val( onResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_zoom") ) { return hx::Val( set_zoom_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"viewWidth") ) { return hx::Val( viewWidth ); }
		if (HX_FIELD_EQ(inName,"_fxFadeIn") ) { return hx::Val( _fxFadeIn ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_angle") ) { return hx::Val( set_angle_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"followLerp") ) { return hx::Val( followLerp ); }
		if (HX_FIELD_EQ(inName,"minScrollX") ) { return hx::Val( minScrollX ); }
		if (HX_FIELD_EQ(inName,"maxScrollX") ) { return hx::Val( maxScrollX ); }
		if (HX_FIELD_EQ(inName,"minScrollY") ) { return hx::Val( minScrollY ); }
		if (HX_FIELD_EQ(inName,"maxScrollY") ) { return hx::Val( maxScrollY ); }
		if (HX_FIELD_EQ(inName,"viewHeight") ) { return hx::Val( viewHeight ); }
		if (HX_FIELD_EQ(inName,"followLead") ) { return hx::Val( followLead ); }
		if (HX_FIELD_EQ(inName,"_flashRect") ) { return hx::Val( _flashRect ); }
		if (HX_FIELD_EQ(inName,"debugLayer") ) { return hx::Val( debugLayer ); }
		if (HX_FIELD_EQ(inName,"_headTiles") ) { return hx::Val( _headTiles ); }
		if (HX_FIELD_EQ(inName,"drawPixels") ) { return hx::Val( drawPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return hx::Val( copyPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateFade") ) { return hx::Val( updateFade_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFilters") ) { return hx::Val( setFilters_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalScaleX") ) { return hx::Val( totalScaleX ); }
		if (HX_FIELD_EQ(inName,"totalScaleY") ) { return hx::Val( totalScaleY ); }
		if (HX_FIELD_EQ(inName,"flashSprite") ) { return hx::Val( flashSprite ); }
		if (HX_FIELD_EQ(inName,"viewOffsetX") ) { return hx::Val( viewOffsetX ); }
		if (HX_FIELD_EQ(inName,"viewOffsetY") ) { return hx::Val( viewOffsetY ); }
		if (HX_FIELD_EQ(inName,"_blitMatrix") ) { return hx::Val( _blitMatrix ); }
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { return hx::Val( _flashPoint ); }
		if (HX_FIELD_EQ(inName,"initialZoom") ) { return hx::Val( initialZoom ); }
		if (HX_FIELD_EQ(inName,"_scrollRect") ) { return hx::Val( _scrollRect ); }
		if (HX_FIELD_EQ(inName,"updateFlash") ) { return hx::Val( updateFlash_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateShake") ) { return hx::Val( updateShake_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkResize") ) { return hx::Val( checkResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPosition") ) { return hx::Val( setPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visible") ) { return hx::Val( set_visible_dyn() ); }
		if (HX_FIELD_EQ(inName,"calcOffsetX") ) { return hx::Val( calcOffsetX_dyn() ); }
		if (HX_FIELD_EQ(inName,"calcOffsetY") ) { return hx::Val( calcOffsetY_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"targetOffset") ) { return hx::Val( targetOffset ); }
		if (HX_FIELD_EQ(inName,"antialiasing") ) { return hx::Val( antialiasing ); }
		if (HX_FIELD_EQ(inName,"_flashOffset") ) { return hx::Val( _flashOffset ); }
		if (HX_FIELD_EQ(inName,"_fxFadeColor") ) { return hx::Val( _fxFadeColor ); }
		if (HX_FIELD_EQ(inName,"_fxFadeAlpha") ) { return hx::Val( _fxFadeAlpha ); }
		if (HX_FIELD_EQ(inName,"_fxShakeAxes") ) { return hx::Val( _fxShakeAxes ); }
		if (HX_FIELD_EQ(inName,"_flashBitmap") ) { return hx::Val( _flashBitmap ); }
		if (HX_FIELD_EQ(inName,"_helperPoint") ) { return hx::Val( _helperPoint ); }
		if (HX_FIELD_EQ(inName,"updateScroll") ) { return hx::Val( updateScroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateFollow") ) { return hx::Val( updateFollow_dyn() ); }
		if (HX_FIELD_EQ(inName,"completeFade") ) { return hx::Val( completeFade_dyn() ); }
		if (HX_FIELD_EQ(inName,"snapToTarget") ) { return hx::Val( snapToTarget_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_fxFlashColor") ) { return hx::Val( _fxFlashColor ); }
		if (HX_FIELD_EQ(inName,"_fxFlashAlpha") ) { return hx::Val( _fxFlashAlpha ); }
		if (HX_FIELD_EQ(inName,"_scrollTarget") ) { return hx::Val( _scrollTarget ); }
		if (HX_FIELD_EQ(inName,"_helperMatrix") ) { return hx::Val( _helperMatrix ); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return hx::Val( drawTriangles_dyn() ); }
		if (HX_FIELD_EQ(inName,"transformRect") ) { return hx::Val( transformRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"containsPoint") ) { return hx::Val( containsPoint_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_useBlitMatrix") ) { return hx::Val( _useBlitMatrix ); }
		if (HX_FIELD_EQ(inName,"filtersEnabled") ) { return hx::Val( filtersEnabled ); }
		if (HX_FIELD_EQ(inName,"_headTriangles") ) { return hx::Val( _headTriangles ); }
		if (HX_FIELD_EQ(inName,"startQuadBatch") ) { return hx::Val( startQuadBatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearDrawStack") ) { return hx::Val( clearDrawStack_dyn() ); }
		if (HX_FIELD_EQ(inName,"transformPoint") ) { return hx::Val( transformPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_followLerp") ) { return hx::Val( set_followLerp_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"viewOffsetWidth") ) { return hx::Val( viewOffsetWidth ); }
		if (HX_FIELD_EQ(inName,"_fxFadeDuration") ) { return hx::Val( _fxFadeDuration ); }
		if (HX_FIELD_EQ(inName,"_fxFadeComplete") ) { return hx::Val( _fxFadeComplete ); }
		if (HX_FIELD_EQ(inName,"transformVector") ) { return hx::Val( transformVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"transformObject") ) { return hx::Val( transformObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScrollBounds") ) { return hx::Val( setScrollBounds_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"viewOffsetHeight") ) { return hx::Val( viewOffsetHeight ); }
		if (HX_FIELD_EQ(inName,"_fxFlashDuration") ) { return hx::Val( _fxFlashDuration ); }
		if (HX_FIELD_EQ(inName,"_fxFlashComplete") ) { return hx::Val( _fxFlashComplete ); }
		if (HX_FIELD_EQ(inName,"_fxFadeCompleted") ) { return hx::Val( _fxFadeCompleted ); }
		if (HX_FIELD_EQ(inName,"_fxShakeDuration") ) { return hx::Val( _fxShakeDuration ); }
		if (HX_FIELD_EQ(inName,"_fxShakeComplete") ) { return hx::Val( _fxShakeComplete ); }
		if (HX_FIELD_EQ(inName,"_currentDrawItem") ) { return hx::Val( _currentDrawItem ); }
		if (HX_FIELD_EQ(inName,"_headOfDrawStack") ) { return hx::Val( _headOfDrawStack ); }
		if (HX_FIELD_EQ(inName,"updateScrollRect") ) { return hx::Val( updateScrollRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateBlitMatrix") ) { return hx::Val( updateBlitMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_antialiasing") ) { return hx::Val( set_antialiasing_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_fxShakeIntensity") ) { return hx::Val( _fxShakeIntensity ); }
		if (HX_FIELD_EQ(inName,"updateFlashOffset") ) { return hx::Val( updateFlashOffset_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"useBgAlphaBlending") ) { return hx::Val( useBgAlphaBlending ); }
		if (HX_FIELD_EQ(inName,"pixelPerfectRender") ) { return hx::Val( pixelPerfectRender ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_lastTargetPosition") ) { return hx::Val( _lastTargetPosition ); }
		if (HX_FIELD_EQ(inName,"startTrianglesBatch") ) { return hx::Val( startTrianglesBatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScrollBoundsRect") ) { return hx::Val( setScrollBoundsRect_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getNewDrawTrianglesItem") ) { return hx::Val( getNewDrawTrianglesItem_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"updateFlashSpritePosition") ) { return hx::Val( updateFlashSpritePosition_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"updateInternalSpritePositions") ) { return hx::Val( updateInternalSpritePositions_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxCamera_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"renderRect") ) { outValue = ( renderRect ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defaultZoom") ) { outValue = ( defaultZoom ); return true; }
		if (HX_FIELD_EQ(inName,"renderPoint") ) { outValue = ( renderPoint ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"drawVertices") ) { outValue = ( drawVertices ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultCameras") ) { outValue = ( defaultCameras ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"trianglesSprite") ) { outValue = ( trianglesSprite ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_storageTilesHead") ) { outValue = ( _storageTilesHead ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_storageTrianglesHead") ) { outValue = ( _storageTrianglesHead ); return true; }
	}
	return false;
}

hx::Val FlxCamera_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue.Cast< Float >()) );x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue.Cast< Float >()) );y=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_zoom(inValue.Cast< Float >()) );zoom=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"style") ) { style=inValue.Cast<  ::flixel::FlxCameraFollowStyle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_width(inValue.Cast< int >()) );width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue.Cast< Float >()) );alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angle") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_angle(inValue.Cast< Float >()) );angle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue.Cast< int >()) );color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fill") ) { _fill=inValue.Cast<  ::openfl::_legacy::display::BitmapData >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scaleX") ) { scaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleY") ) { scaleY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scroll") ) { scroll=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::openfl::_legacy::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"screen") ) { screen=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_height(inValue.Cast< int >()) );height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_point") ) { _point=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canvas") ) { canvas=inValue.Cast<  ::openfl::_legacy::display::Sprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bgColor") ) { bgColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bounds") ) { _bounds=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deadzone") ) { deadzone=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_filters") ) { _filters=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"viewWidth") ) { viewWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeIn") ) { _fxFadeIn=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"followLerp") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_followLerp(inValue.Cast< Float >()) );followLerp=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minScrollX") ) { minScrollX=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollX") ) { maxScrollX=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minScrollY") ) { minScrollY=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollY") ) { maxScrollY=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"viewHeight") ) { viewHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"followLead") ) { followLead=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashRect") ) { _flashRect=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debugLayer") ) { debugLayer=inValue.Cast<  ::openfl::_legacy::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_headTiles") ) { _headTiles=inValue.Cast<  ::flixel::graphics::tile::FlxDrawTilesItem >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalScaleX") ) { totalScaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalScaleY") ) { totalScaleY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flashSprite") ) { flashSprite=inValue.Cast<  ::openfl::_legacy::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"viewOffsetX") ) { viewOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"viewOffsetY") ) { viewOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_blitMatrix") ) { _blitMatrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { _flashPoint=inValue.Cast<  ::openfl::_legacy::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"initialZoom") ) { initialZoom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scrollRect") ) { _scrollRect=inValue.Cast<  ::openfl::_legacy::display::Sprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"targetOffset") ) { targetOffset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"antialiasing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_antialiasing(inValue.Cast< bool >()) );antialiasing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashOffset") ) { _flashOffset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeColor") ) { _fxFadeColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeAlpha") ) { _fxFadeAlpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxShakeAxes") ) { _fxShakeAxes=inValue.Cast<  ::flixel::util::FlxAxes >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashBitmap") ) { _flashBitmap=inValue.Cast<  ::openfl::_legacy::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_helperPoint") ) { _helperPoint=inValue.Cast<  ::openfl::_legacy::geom::Point >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_fxFlashColor") ) { _fxFlashColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFlashAlpha") ) { _fxFlashAlpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scrollTarget") ) { _scrollTarget=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_helperMatrix") ) { _helperMatrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_useBlitMatrix") ) { _useBlitMatrix=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"filtersEnabled") ) { filtersEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_headTriangles") ) { _headTriangles=inValue.Cast<  ::flixel::graphics::tile::FlxDrawTrianglesItem >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"viewOffsetWidth") ) { viewOffsetWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeDuration") ) { _fxFadeDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeComplete") ) { _fxFadeComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"viewOffsetHeight") ) { viewOffsetHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFlashDuration") ) { _fxFlashDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFlashComplete") ) { _fxFlashComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeCompleted") ) { _fxFadeCompleted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxShakeDuration") ) { _fxShakeDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxShakeComplete") ) { _fxShakeComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_currentDrawItem") ) { _currentDrawItem=inValue.Cast<  ::flixel::graphics::tile::FlxDrawBaseItem >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_headOfDrawStack") ) { _headOfDrawStack=inValue.Cast<  ::flixel::graphics::tile::FlxDrawBaseItem >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_fxShakeIntensity") ) { _fxShakeIntensity=inValue.Cast< Float >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"useBgAlphaBlending") ) { useBgAlphaBlending=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pixelPerfectRender") ) { pixelPerfectRender=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_lastTargetPosition") ) { _lastTargetPosition=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxCamera_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"renderRect") ) { renderRect=ioValue.Cast<  ::flixel::math::FlxRect >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defaultZoom") ) { defaultZoom=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"renderPoint") ) { renderPoint=ioValue.Cast<  ::flixel::math::FlxPoint >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"drawVertices") ) { drawVertices=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultCameras") ) { defaultCameras=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"trianglesSprite") ) { trianglesSprite=ioValue.Cast<  ::openfl::_legacy::display::Sprite >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_storageTilesHead") ) { _storageTilesHead=ioValue.Cast<  ::flixel::graphics::tile::FlxDrawTilesItem >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_storageTrianglesHead") ) { _storageTrianglesHead=ioValue.Cast<  ::flixel::graphics::tile::FlxDrawTrianglesItem >(); return true; }
	}
	return false;
}

void FlxCamera_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("scaleX","\x8e","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("scaleY","\x8f","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("totalScaleX","\x72","\xdd","\x5b","\x02"));
	outFields->push(HX_HCSTRING("totalScaleY","\x73","\xdd","\x5b","\x02"));
	outFields->push(HX_HCSTRING("style","\x31","\xa5","\x1d","\x84"));
	outFields->push(HX_HCSTRING("target","\x51","\xf3","\xec","\x86"));
	outFields->push(HX_HCSTRING("targetOffset","\xc4","\xd1","\xc3","\x1c"));
	outFields->push(HX_HCSTRING("followLerp","\x88","\xdc","\x83","\xd9"));
	outFields->push(HX_HCSTRING("deadzone","\xd0","\x12","\x55","\x6d"));
	outFields->push(HX_HCSTRING("minScrollX","\x39","\x80","\x8f","\xf6"));
	outFields->push(HX_HCSTRING("maxScrollX","\x67","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("minScrollY","\x3a","\x80","\x8f","\xf6"));
	outFields->push(HX_HCSTRING("maxScrollY","\x68","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47"));
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	outFields->push(HX_HCSTRING("bgColor","\x5e","\x81","\x83","\xf7"));
	outFields->push(HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47"));
	outFields->push(HX_HCSTRING("useBgAlphaBlending","\x23","\x25","\x12","\xb2"));
	outFields->push(HX_HCSTRING("flashSprite","\xd5","\xe9","\x0d","\xf4"));
	outFields->push(HX_HCSTRING("pixelPerfectRender","\xdd","\x59","\x4f","\x2f"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("zoom","\x13","\xa3","\xf8","\x50"));
	outFields->push(HX_HCSTRING("viewOffsetX","\x80","\x45","\x78","\xb9"));
	outFields->push(HX_HCSTRING("viewOffsetY","\x81","\x45","\x78","\xb9"));
	outFields->push(HX_HCSTRING("viewOffsetWidth","\x0e","\x1f","\x16","\xe1"));
	outFields->push(HX_HCSTRING("viewOffsetHeight","\xdf","\x85","\x94","\xc8"));
	outFields->push(HX_HCSTRING("viewWidth","\x61","\x25","\xf7","\x0a"));
	outFields->push(HX_HCSTRING("viewHeight","\x2c","\x08","\x99","\x43"));
	outFields->push(HX_HCSTRING("_blitMatrix","\x75","\x45","\xab","\xaa"));
	outFields->push(HX_HCSTRING("_useBlitMatrix","\xbe","\x57","\xdc","\x4e"));
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("antialiasing","\xf4","\x16","\xb3","\x48"));
	outFields->push(HX_HCSTRING("followLead","\xad","\xcd","\x83","\xd9"));
	outFields->push(HX_HCSTRING("filtersEnabled","\x06","\x08","\x9b","\x18"));
	outFields->push(HX_HCSTRING("_flashRect","\xb5","\xc2","\xf3","\x5d"));
	outFields->push(HX_HCSTRING("_flashPoint","\x9f","\x1d","\x2a","\xb7"));
	outFields->push(HX_HCSTRING("_flashOffset","\x64","\x53","\xc1","\xf6"));
	outFields->push(HX_HCSTRING("_fxFlashColor","\x64","\x98","\x14","\xdc"));
	outFields->push(HX_HCSTRING("_fxFlashDuration","\xf3","\x7e","\xd1","\x2d"));
	outFields->push(HX_HCSTRING("_fxFlashAlpha","\x5f","\xce","\x4e","\xb3"));
	outFields->push(HX_HCSTRING("_fxFadeColor","\x96","\x44","\xa8","\xb9"));
	outFields->push(HX_HCSTRING("_lastTargetPosition","\x2f","\xd6","\x08","\xc4"));
	outFields->push(HX_HCSTRING("_scrollTarget","\x1d","\xda","\x1d","\xc1"));
	outFields->push(HX_HCSTRING("_fxFadeDuration","\x01","\xfe","\xdd","\x9f"));
	outFields->push(HX_HCSTRING("_fxFadeIn","\xd2","\xda","\xfe","\xa8"));
	outFields->push(HX_HCSTRING("_fxFadeCompleted","\x3e","\x8a","\xd9","\xa9"));
	outFields->push(HX_HCSTRING("_fxFadeAlpha","\x91","\x7a","\xe2","\x90"));
	outFields->push(HX_HCSTRING("_fxShakeIntensity","\x5e","\x86","\x94","\x7a"));
	outFields->push(HX_HCSTRING("_fxShakeDuration","\x09","\x2e","\x72","\x36"));
	outFields->push(HX_HCSTRING("_fxShakeAxes","\x5a","\x79","\xf0","\x5e"));
	outFields->push(HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2"));
	outFields->push(HX_HCSTRING("_filters","\x3c","\xfb","\xfe","\x42"));
	outFields->push(HX_HCSTRING("initialZoom","\xb7","\x71","\x1d","\x2d"));
	outFields->push(HX_HCSTRING("_fill","\x62","\xea","\xcc","\xf6"));
	outFields->push(HX_HCSTRING("_flashBitmap","\xc0","\xcb","\x8d","\x87"));
	outFields->push(HX_HCSTRING("_scrollRect","\xf0","\xa8","\xf0","\xdb"));
	outFields->push(HX_HCSTRING("_bounds","\x14","\x98","\x94","\xd4"));
	outFields->push(HX_HCSTRING("canvas","\xd8","\x54","\x42","\xb8"));
	outFields->push(HX_HCSTRING("debugLayer","\x7e","\x52","\xa4","\x6e"));
	outFields->push(HX_HCSTRING("_helperMatrix","\x2e","\x81","\xce","\xde"));
	outFields->push(HX_HCSTRING("_helperPoint","\x03","\xe6","\x14","\xf8"));
	outFields->push(HX_HCSTRING("_currentDrawItem","\x11","\x6b","\x5a","\x19"));
	outFields->push(HX_HCSTRING("_headOfDrawStack","\xce","\xc5","\x68","\xac"));
	outFields->push(HX_HCSTRING("_headTiles","\x06","\xac","\x50","\xff"));
	outFields->push(HX_HCSTRING("_headTriangles","\xac","\xb3","\x7c","\x97"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxCamera_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,scaleX),HX_HCSTRING("scaleX","\x8e","\xea","\x25","\x3c")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,scaleY),HX_HCSTRING("scaleY","\x8f","\xea","\x25","\x3c")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,totalScaleX),HX_HCSTRING("totalScaleX","\x72","\xdd","\x5b","\x02")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,totalScaleY),HX_HCSTRING("totalScaleY","\x73","\xdd","\x5b","\x02")},
	{hx::fsObject /*::flixel::FlxCameraFollowStyle*/ ,(int)offsetof(FlxCamera_obj,style),HX_HCSTRING("style","\x31","\xa5","\x1d","\x84")},
	{hx::fsObject /*::flixel::FlxObject*/ ,(int)offsetof(FlxCamera_obj,target),HX_HCSTRING("target","\x51","\xf3","\xec","\x86")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxCamera_obj,targetOffset),HX_HCSTRING("targetOffset","\xc4","\xd1","\xc3","\x1c")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,followLerp),HX_HCSTRING("followLerp","\x88","\xdc","\x83","\xd9")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxCamera_obj,deadzone),HX_HCSTRING("deadzone","\xd0","\x12","\x55","\x6d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxCamera_obj,minScrollX),HX_HCSTRING("minScrollX","\x39","\x80","\x8f","\xf6")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxCamera_obj,maxScrollX),HX_HCSTRING("maxScrollX","\x67","\xad","\xfc","\x9a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxCamera_obj,minScrollY),HX_HCSTRING("minScrollY","\x3a","\x80","\x8f","\xf6")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxCamera_obj,maxScrollY),HX_HCSTRING("maxScrollY","\x68","\xad","\xfc","\x9a")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxCamera_obj,scroll),HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47")},
	{hx::fsObject /*::openfl::_legacy::display::BitmapData*/ ,(int)offsetof(FlxCamera_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsInt,(int)offsetof(FlxCamera_obj,bgColor),HX_HCSTRING("bgColor","\x5e","\x81","\x83","\xf7")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(FlxCamera_obj,screen),HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47")},
	{hx::fsBool,(int)offsetof(FlxCamera_obj,useBgAlphaBlending),HX_HCSTRING("useBgAlphaBlending","\x23","\x25","\x12","\xb2")},
	{hx::fsObject /*::openfl::_legacy::display::Sprite*/ ,(int)offsetof(FlxCamera_obj,flashSprite),HX_HCSTRING("flashSprite","\xd5","\xe9","\x0d","\xf4")},
	{hx::fsBool,(int)offsetof(FlxCamera_obj,pixelPerfectRender),HX_HCSTRING("pixelPerfectRender","\xdd","\x59","\x4f","\x2f")},
	{hx::fsInt,(int)offsetof(FlxCamera_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(FlxCamera_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,zoom),HX_HCSTRING("zoom","\x13","\xa3","\xf8","\x50")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,viewOffsetX),HX_HCSTRING("viewOffsetX","\x80","\x45","\x78","\xb9")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,viewOffsetY),HX_HCSTRING("viewOffsetY","\x81","\x45","\x78","\xb9")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,viewOffsetWidth),HX_HCSTRING("viewOffsetWidth","\x0e","\x1f","\x16","\xe1")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,viewOffsetHeight),HX_HCSTRING("viewOffsetHeight","\xdf","\x85","\x94","\xc8")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,viewWidth),HX_HCSTRING("viewWidth","\x61","\x25","\xf7","\x0a")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,viewHeight),HX_HCSTRING("viewHeight","\x2c","\x08","\x99","\x43")},
	{hx::fsObject /*::flixel::math::FlxMatrix*/ ,(int)offsetof(FlxCamera_obj,_blitMatrix),HX_HCSTRING("_blitMatrix","\x75","\x45","\xab","\xaa")},
	{hx::fsBool,(int)offsetof(FlxCamera_obj,_useBlitMatrix),HX_HCSTRING("_useBlitMatrix","\xbe","\x57","\xdc","\x4e")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,alpha),HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,angle),HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22")},
	{hx::fsInt,(int)offsetof(FlxCamera_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsBool,(int)offsetof(FlxCamera_obj,antialiasing),HX_HCSTRING("antialiasing","\xf4","\x16","\xb3","\x48")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxCamera_obj,followLead),HX_HCSTRING("followLead","\xad","\xcd","\x83","\xd9")},
	{hx::fsBool,(int)offsetof(FlxCamera_obj,filtersEnabled),HX_HCSTRING("filtersEnabled","\x06","\x08","\x9b","\x18")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(FlxCamera_obj,_flashRect),HX_HCSTRING("_flashRect","\xb5","\xc2","\xf3","\x5d")},
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(int)offsetof(FlxCamera_obj,_flashPoint),HX_HCSTRING("_flashPoint","\x9f","\x1d","\x2a","\xb7")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxCamera_obj,_flashOffset),HX_HCSTRING("_flashOffset","\x64","\x53","\xc1","\xf6")},
	{hx::fsInt,(int)offsetof(FlxCamera_obj,_fxFlashColor),HX_HCSTRING("_fxFlashColor","\x64","\x98","\x14","\xdc")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxFlashDuration),HX_HCSTRING("_fxFlashDuration","\xf3","\x7e","\xd1","\x2d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxCamera_obj,_fxFlashComplete),HX_HCSTRING("_fxFlashComplete","\x58","\x70","\x0b","\x99")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxFlashAlpha),HX_HCSTRING("_fxFlashAlpha","\x5f","\xce","\x4e","\xb3")},
	{hx::fsInt,(int)offsetof(FlxCamera_obj,_fxFadeColor),HX_HCSTRING("_fxFadeColor","\x96","\x44","\xa8","\xb9")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxCamera_obj,_lastTargetPosition),HX_HCSTRING("_lastTargetPosition","\x2f","\xd6","\x08","\xc4")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxCamera_obj,_scrollTarget),HX_HCSTRING("_scrollTarget","\x1d","\xda","\x1d","\xc1")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxFadeDuration),HX_HCSTRING("_fxFadeDuration","\x01","\xfe","\xdd","\x9f")},
	{hx::fsBool,(int)offsetof(FlxCamera_obj,_fxFadeIn),HX_HCSTRING("_fxFadeIn","\xd2","\xda","\xfe","\xa8")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxCamera_obj,_fxFadeComplete),HX_HCSTRING("_fxFadeComplete","\x66","\xef","\x17","\x0b")},
	{hx::fsBool,(int)offsetof(FlxCamera_obj,_fxFadeCompleted),HX_HCSTRING("_fxFadeCompleted","\x3e","\x8a","\xd9","\xa9")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxFadeAlpha),HX_HCSTRING("_fxFadeAlpha","\x91","\x7a","\xe2","\x90")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxShakeIntensity),HX_HCSTRING("_fxShakeIntensity","\x5e","\x86","\x94","\x7a")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxShakeDuration),HX_HCSTRING("_fxShakeDuration","\x09","\x2e","\x72","\x36")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxCamera_obj,_fxShakeComplete),HX_HCSTRING("_fxShakeComplete","\x6e","\x1f","\xac","\xa1")},
	{hx::fsObject /*::flixel::util::FlxAxes*/ ,(int)offsetof(FlxCamera_obj,_fxShakeAxes),HX_HCSTRING("_fxShakeAxes","\x5a","\x79","\xf0","\x5e")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxCamera_obj,_point),HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxCamera_obj,_filters),HX_HCSTRING("_filters","\x3c","\xfb","\xfe","\x42")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,initialZoom),HX_HCSTRING("initialZoom","\xb7","\x71","\x1d","\x2d")},
	{hx::fsObject /*::openfl::_legacy::display::BitmapData*/ ,(int)offsetof(FlxCamera_obj,_fill),HX_HCSTRING("_fill","\x62","\xea","\xcc","\xf6")},
	{hx::fsObject /*::openfl::_legacy::display::Bitmap*/ ,(int)offsetof(FlxCamera_obj,_flashBitmap),HX_HCSTRING("_flashBitmap","\xc0","\xcb","\x8d","\x87")},
	{hx::fsObject /*::openfl::_legacy::display::Sprite*/ ,(int)offsetof(FlxCamera_obj,_scrollRect),HX_HCSTRING("_scrollRect","\xf0","\xa8","\xf0","\xdb")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxCamera_obj,_bounds),HX_HCSTRING("_bounds","\x14","\x98","\x94","\xd4")},
	{hx::fsObject /*::openfl::_legacy::display::Sprite*/ ,(int)offsetof(FlxCamera_obj,canvas),HX_HCSTRING("canvas","\xd8","\x54","\x42","\xb8")},
	{hx::fsObject /*::openfl::_legacy::display::Sprite*/ ,(int)offsetof(FlxCamera_obj,debugLayer),HX_HCSTRING("debugLayer","\x7e","\x52","\xa4","\x6e")},
	{hx::fsObject /*::flixel::math::FlxMatrix*/ ,(int)offsetof(FlxCamera_obj,_helperMatrix),HX_HCSTRING("_helperMatrix","\x2e","\x81","\xce","\xde")},
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(int)offsetof(FlxCamera_obj,_helperPoint),HX_HCSTRING("_helperPoint","\x03","\xe6","\x14","\xf8")},
	{hx::fsObject /*::flixel::graphics::tile::FlxDrawBaseItem*/ ,(int)offsetof(FlxCamera_obj,_currentDrawItem),HX_HCSTRING("_currentDrawItem","\x11","\x6b","\x5a","\x19")},
	{hx::fsObject /*::flixel::graphics::tile::FlxDrawBaseItem*/ ,(int)offsetof(FlxCamera_obj,_headOfDrawStack),HX_HCSTRING("_headOfDrawStack","\xce","\xc5","\x68","\xac")},
	{hx::fsObject /*::flixel::graphics::tile::FlxDrawTilesItem*/ ,(int)offsetof(FlxCamera_obj,_headTiles),HX_HCSTRING("_headTiles","\x06","\xac","\x50","\xff")},
	{hx::fsObject /*::flixel::graphics::tile::FlxDrawTrianglesItem*/ ,(int)offsetof(FlxCamera_obj,_headTriangles),HX_HCSTRING("_headTriangles","\xac","\xb3","\x7c","\x97")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxCamera_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &FlxCamera_obj::defaultZoom,HX_HCSTRING("defaultZoom","\x74","\x9c","\xb7","\x22")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &FlxCamera_obj::defaultCameras,HX_HCSTRING("defaultCameras","\x6d","\xe3","\x71","\x12")},
	{hx::fsObject /*::flixel::graphics::tile::FlxDrawTilesItem*/ ,(void *) &FlxCamera_obj::_storageTilesHead,HX_HCSTRING("_storageTilesHead","\xe9","\xa8","\x61","\xaf")},
	{hx::fsObject /*::flixel::graphics::tile::FlxDrawTrianglesItem*/ ,(void *) &FlxCamera_obj::_storageTrianglesHead,HX_HCSTRING("_storageTrianglesHead","\x0f","\x09","\x78","\x17")},
	{hx::fsObject /*Array< Float >*/ ,(void *) &FlxCamera_obj::drawVertices,HX_HCSTRING("drawVertices","\x1d","\x4c","\x09","\x40")},
	{hx::fsObject /*::openfl::_legacy::display::Sprite*/ ,(void *) &FlxCamera_obj::trianglesSprite,HX_HCSTRING("trianglesSprite","\x10","\xd3","\x45","\xab")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(void *) &FlxCamera_obj::renderPoint,HX_HCSTRING("renderPoint","\x1a","\xe1","\x40","\x92")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(void *) &FlxCamera_obj::renderRect,HX_HCSTRING("renderRect","\x9a","\x47","\xb1","\xe8")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxCamera_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("scaleX","\x8e","\xea","\x25","\x3c"),
	HX_HCSTRING("scaleY","\x8f","\xea","\x25","\x3c"),
	HX_HCSTRING("totalScaleX","\x72","\xdd","\x5b","\x02"),
	HX_HCSTRING("totalScaleY","\x73","\xdd","\x5b","\x02"),
	HX_HCSTRING("style","\x31","\xa5","\x1d","\x84"),
	HX_HCSTRING("target","\x51","\xf3","\xec","\x86"),
	HX_HCSTRING("targetOffset","\xc4","\xd1","\xc3","\x1c"),
	HX_HCSTRING("followLerp","\x88","\xdc","\x83","\xd9"),
	HX_HCSTRING("deadzone","\xd0","\x12","\x55","\x6d"),
	HX_HCSTRING("minScrollX","\x39","\x80","\x8f","\xf6"),
	HX_HCSTRING("maxScrollX","\x67","\xad","\xfc","\x9a"),
	HX_HCSTRING("minScrollY","\x3a","\x80","\x8f","\xf6"),
	HX_HCSTRING("maxScrollY","\x68","\xad","\xfc","\x9a"),
	HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47"),
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("bgColor","\x5e","\x81","\x83","\xf7"),
	HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47"),
	HX_HCSTRING("useBgAlphaBlending","\x23","\x25","\x12","\xb2"),
	HX_HCSTRING("flashSprite","\xd5","\xe9","\x0d","\xf4"),
	HX_HCSTRING("pixelPerfectRender","\xdd","\x59","\x4f","\x2f"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("zoom","\x13","\xa3","\xf8","\x50"),
	HX_HCSTRING("viewOffsetX","\x80","\x45","\x78","\xb9"),
	HX_HCSTRING("viewOffsetY","\x81","\x45","\x78","\xb9"),
	HX_HCSTRING("viewOffsetWidth","\x0e","\x1f","\x16","\xe1"),
	HX_HCSTRING("viewOffsetHeight","\xdf","\x85","\x94","\xc8"),
	HX_HCSTRING("viewWidth","\x61","\x25","\xf7","\x0a"),
	HX_HCSTRING("viewHeight","\x2c","\x08","\x99","\x43"),
	HX_HCSTRING("_blitMatrix","\x75","\x45","\xab","\xaa"),
	HX_HCSTRING("_useBlitMatrix","\xbe","\x57","\xdc","\x4e"),
	HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"),
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("antialiasing","\xf4","\x16","\xb3","\x48"),
	HX_HCSTRING("followLead","\xad","\xcd","\x83","\xd9"),
	HX_HCSTRING("filtersEnabled","\x06","\x08","\x9b","\x18"),
	HX_HCSTRING("_flashRect","\xb5","\xc2","\xf3","\x5d"),
	HX_HCSTRING("_flashPoint","\x9f","\x1d","\x2a","\xb7"),
	HX_HCSTRING("_flashOffset","\x64","\x53","\xc1","\xf6"),
	HX_HCSTRING("_fxFlashColor","\x64","\x98","\x14","\xdc"),
	HX_HCSTRING("_fxFlashDuration","\xf3","\x7e","\xd1","\x2d"),
	HX_HCSTRING("_fxFlashComplete","\x58","\x70","\x0b","\x99"),
	HX_HCSTRING("_fxFlashAlpha","\x5f","\xce","\x4e","\xb3"),
	HX_HCSTRING("_fxFadeColor","\x96","\x44","\xa8","\xb9"),
	HX_HCSTRING("_lastTargetPosition","\x2f","\xd6","\x08","\xc4"),
	HX_HCSTRING("_scrollTarget","\x1d","\xda","\x1d","\xc1"),
	HX_HCSTRING("_fxFadeDuration","\x01","\xfe","\xdd","\x9f"),
	HX_HCSTRING("_fxFadeIn","\xd2","\xda","\xfe","\xa8"),
	HX_HCSTRING("_fxFadeComplete","\x66","\xef","\x17","\x0b"),
	HX_HCSTRING("_fxFadeCompleted","\x3e","\x8a","\xd9","\xa9"),
	HX_HCSTRING("_fxFadeAlpha","\x91","\x7a","\xe2","\x90"),
	HX_HCSTRING("_fxShakeIntensity","\x5e","\x86","\x94","\x7a"),
	HX_HCSTRING("_fxShakeDuration","\x09","\x2e","\x72","\x36"),
	HX_HCSTRING("_fxShakeComplete","\x6e","\x1f","\xac","\xa1"),
	HX_HCSTRING("_fxShakeAxes","\x5a","\x79","\xf0","\x5e"),
	HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2"),
	HX_HCSTRING("_filters","\x3c","\xfb","\xfe","\x42"),
	HX_HCSTRING("initialZoom","\xb7","\x71","\x1d","\x2d"),
	HX_HCSTRING("_fill","\x62","\xea","\xcc","\xf6"),
	HX_HCSTRING("_flashBitmap","\xc0","\xcb","\x8d","\x87"),
	HX_HCSTRING("_scrollRect","\xf0","\xa8","\xf0","\xdb"),
	HX_HCSTRING("_bounds","\x14","\x98","\x94","\xd4"),
	HX_HCSTRING("canvas","\xd8","\x54","\x42","\xb8"),
	HX_HCSTRING("debugLayer","\x7e","\x52","\xa4","\x6e"),
	HX_HCSTRING("_helperMatrix","\x2e","\x81","\xce","\xde"),
	HX_HCSTRING("_helperPoint","\x03","\xe6","\x14","\xf8"),
	HX_HCSTRING("_currentDrawItem","\x11","\x6b","\x5a","\x19"),
	HX_HCSTRING("_headOfDrawStack","\xce","\xc5","\x68","\xac"),
	HX_HCSTRING("_headTiles","\x06","\xac","\x50","\xff"),
	HX_HCSTRING("_headTriangles","\xac","\xb3","\x7c","\x97"),
	HX_HCSTRING("startQuadBatch","\xb1","\xbc","\x12","\x5e"),
	HX_HCSTRING("startTrianglesBatch","\x11","\x0b","\xb7","\x6e"),
	HX_HCSTRING("getNewDrawTrianglesItem","\xf0","\xc3","\x0a","\x12"),
	HX_HCSTRING("clearDrawStack","\x57","\xf1","\x1b","\x0a"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("drawPixels","\x51","\x6a","\x6d","\xce"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("drawTriangles","\x07","\x44","\x68","\xde"),
	HX_HCSTRING("transformRect","\xb0","\xcc","\xf4","\x78"),
	HX_HCSTRING("transformPoint","\x44","\xcf","\x11","\x3d"),
	HX_HCSTRING("transformVector","\x4f","\x2b","\xb3","\xd2"),
	HX_HCSTRING("transformObject","\x4b","\xf9","\x94","\x50"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateScroll","\xf6","\x7e","\x28","\x47"),
	HX_HCSTRING("updateFollow","\x5a","\x38","\x5a","\xf9"),
	HX_HCSTRING("updateFlash","\xe7","\x9e","\x24","\xe8"),
	HX_HCSTRING("updateFade","\x25","\xa0","\x6a","\xfc"),
	HX_HCSTRING("completeFade","\xd5","\x32","\x78","\xb7"),
	HX_HCSTRING("updateShake","\xfd","\x47","\xb5","\x61"),
	HX_HCSTRING("updateFlashSpritePosition","\x15","\x1f","\x55","\xdf"),
	HX_HCSTRING("updateFlashOffset","\xda","\x51","\x21","\xf5"),
	HX_HCSTRING("updateScrollRect","\x3a","\xab","\x52","\x53"),
	HX_HCSTRING("updateInternalSpritePositions","\x1f","\x1f","\xf9","\x76"),
	HX_HCSTRING("follow","\x71","\x91","\x96","\xf9"),
	HX_HCSTRING("snapToTarget","\x96","\x07","\x43","\x96"),
	HX_HCSTRING("focusOn","\x17","\x4b","\x83","\x41"),
	HX_HCSTRING("flash","\xb0","\x35","\x8c","\x02"),
	HX_HCSTRING("fade","\x7c","\xb5","\xb5","\x43"),
	HX_HCSTRING("shake","\xc6","\xde","\x1c","\x7c"),
	HX_HCSTRING("stopFX","\xd4","\xb1","\x39","\x0f"),
	HX_HCSTRING("setFilters","\x39","\xc6","\x25","\x5c"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("fill","\x83","\xce","\xbb","\x43"),
	HX_HCSTRING("drawFX","\x56","\x72","\xd6","\xdf"),
	HX_HCSTRING("checkResize","\xdc","\x2c","\x8d","\xea"),
	HX_HCSTRING("updateBlitMatrix","\xbf","\x47","\x0d","\x22"),
	HX_HCSTRING("setSize","\x83","\xe1","\xd7","\x11"),
	HX_HCSTRING("setPosition","\x6b","\x6a","\x5b","\xfb"),
	HX_HCSTRING("setScrollBoundsRect","\x68","\x88","\x5d","\x8e"),
	HX_HCSTRING("setScrollBounds","\x24","\xad","\x95","\xdc"),
	HX_HCSTRING("setScale","\x88","\x37","\x03","\x87"),
	HX_HCSTRING("onResize","\x73","\x50","\x28","\xe8"),
	HX_HCSTRING("containsPoint","\xb1","\xb9","\xeb","\x92"),
	HX_HCSTRING("set_followLerp","\x45","\x4d","\x99","\x6f"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("set_zoom","\x10","\xb8","\x10","\x7f"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("set_angle","\x36","\x8c","\xdc","\x49"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("set_antialiasing","\xf1","\xf0","\x93","\xa3"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_visible","\x95","\xdf","\x8b","\x33"),
	HX_HCSTRING("calcOffsetX","\x50","\x85","\x4b","\x73"),
	HX_HCSTRING("calcOffsetY","\x51","\x85","\x4b","\x73"),
	::String(null()) };

static void FlxCamera_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxCamera_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::defaultZoom,"defaultZoom");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::defaultCameras,"defaultCameras");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::_storageTilesHead,"_storageTilesHead");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::_storageTrianglesHead,"_storageTrianglesHead");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::drawVertices,"drawVertices");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::trianglesSprite,"trianglesSprite");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::renderPoint,"renderPoint");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::renderRect,"renderRect");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxCamera_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::defaultZoom,"defaultZoom");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::defaultCameras,"defaultCameras");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::_storageTilesHead,"_storageTilesHead");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::_storageTrianglesHead,"_storageTrianglesHead");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::drawVertices,"drawVertices");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::trianglesSprite,"trianglesSprite");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::renderPoint,"renderPoint");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::renderRect,"renderRect");
};

#endif

hx::Class FlxCamera_obj::__mClass;

static ::String FlxCamera_obj_sStaticFields[] = {
	HX_HCSTRING("defaultZoom","\x74","\x9c","\xb7","\x22"),
	HX_HCSTRING("defaultCameras","\x6d","\xe3","\x71","\x12"),
	HX_HCSTRING("_storageTilesHead","\xe9","\xa8","\x61","\xaf"),
	HX_HCSTRING("_storageTrianglesHead","\x0f","\x09","\x78","\x17"),
	HX_HCSTRING("drawVertices","\x1d","\x4c","\x09","\x40"),
	HX_HCSTRING("trianglesSprite","\x10","\xd3","\x45","\xab"),
	HX_HCSTRING("renderPoint","\x1a","\xe1","\x40","\x92"),
	HX_HCSTRING("renderRect","\x9a","\x47","\xb1","\xe8"),
	::String(null())
};

void FlxCamera_obj::__register()
{
	hx::Object *dummy = new FlxCamera_obj;
	FlxCamera_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.FlxCamera","\x05","\x18","\xe2","\xd7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxCamera_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxCamera_obj::__SetStatic;
	__mClass->mMarkFunc = FlxCamera_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxCamera_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxCamera_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxCamera_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxCamera_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxCamera_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxCamera_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxCamera_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_d1aae230bd422321_440_boot)
HXDLIN( 440)			::Array< Float > this1 = ::Array_obj< Float >::__new();
HXDLIN( 440)			this1->__SetSizeExact(null());
HXDLIN( 440)			return this1;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_440_boot)
HXDLIN( 440)		drawVertices =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d1aae230bd422321_444_boot)
HXDLIN( 444)		trianglesSprite =  ::openfl::_legacy::display::Sprite_obj::__alloc( HX_CTX );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_d1aae230bd422321_449_boot)
HXDLIN( 449)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 449)			point->_inPool = false;
HXDLIN( 449)			return point;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_449_boot)
HXDLIN( 449)		renderPoint =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_d1aae230bd422321_450_boot)
HXDLIN( 450)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 450)			_this->x = (int)0;
HXDLIN( 450)			_this->y = (int)0;
HXDLIN( 450)			_this->width = (int)0;
HXDLIN( 450)			_this->height = (int)0;
HXDLIN( 450)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 450)			rect->_inPool = false;
HXDLIN( 450)			return rect;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_450_boot)
HXDLIN( 450)		renderRect =  ::Dynamic(new _hx_Closure_0())();
            	}
}

} // end namespace flixel
