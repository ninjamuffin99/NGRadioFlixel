// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_effects_postprocess_PostProcess
#include <flixel/effects/postprocess/PostProcess.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxTilesheet
#include <flixel/graphics/tile/FlxTilesheet.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxSwipe
#include <flixel/input/FlxSwipe.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSplash
#include <flixel/system/FlxSplash.h>
#endif
#ifndef INCLUDED_flixel_system_debug_FlxDebugger
#include <flixel/system/debug/FlxDebugger.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_console_Console
#include <flixel/system/debug/console/Console.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_Interaction
#include <flixel/system/debug/interaction/Interaction.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_debug_stats_Stats
#include <flixel/system/debug/stats/Stats.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_InputFrontEnd
#include <flixel/system/frontEnds/InputFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_PluginFrontEnd
#include <flixel/system/frontEnds/PluginFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_VCRFrontEnd
#include <flixel/system/frontEnds/VCRFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSoundTray
#include <flixel/system/ui/FlxSoundTray.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal1
#include <flixel/util/_FlxSignal/FlxSignal1.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal2
#include <flixel/util/_FlxSignal/FlxSignal2.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DirectRenderer
#include <openfl/_legacy/display/DirectRenderer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Graphics
#include <openfl/_legacy/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_MovieClip
#include <openfl/_legacy/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_OpenGLView
#include <openfl/_legacy/display/OpenGLView.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Stage
#include <openfl/_legacy/display/Stage.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_StageAlign
#include <openfl/_legacy/display/StageAlign.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_StageScaleMode
#include <openfl/_legacy/display/StageScaleMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Tilesheet
#include <openfl/_legacy/display/Tilesheet.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_filters_BitmapFilter
#include <openfl/_legacy/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_47_new,"flixel.FlxGame","new",0xde7d5f44,"flixel.FlxGame.new","flixel/FlxGame.hx",47,0x34f39fed)
HX_LOCAL_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_289_setFilters,"flixel.FlxGame","setFilters",0x71579bd5,"flixel.FlxGame.setFilters","flixel/FlxGame.hx",289,0x34f39fed)
HX_LOCAL_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_296_create,"flixel.FlxGame","create",0x90873e98,"flixel.FlxGame.create","flixel/FlxGame.hx",296,0x34f39fed)
HX_LOCAL_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_372_onFocus,"flixel.FlxGame","onFocus",0x6f2bcf1d,"flixel.FlxGame.onFocus","flixel/FlxGame.hx",372,0x34f39fed)
HX_LOCAL_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_416_onFocusLost,"flixel.FlxGame","onFocusLost",0xb7eef7a1,"flixel.FlxGame.onFocusLost","flixel/FlxGame.hx",416,0x34f39fed)
HX_LOCAL_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_452_onResize,"flixel.FlxGame","onResize",0xebfa470f,"flixel.FlxGame.onResize","flixel/FlxGame.hx",452,0x34f39fed)
HX_LOCAL_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_465_resizeGame,"flixel.FlxGame","resizeGame",0xcdcb59a2,"flixel.FlxGame.resizeGame","flixel/FlxGame.hx",465,0x34f39fed)
HX_LOCAL_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_497_onEnterFrame,"flixel.FlxGame","onEnterFrame",0x001b1a90,"flixel.FlxGame.onEnterFrame","flixel/FlxGame.hx",497,0x34f39fed)
HX_LOCAL_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_565_resetGame,"flixel.FlxGame","resetGame",0xde30cf45,"flixel.FlxGame.resetGame","flixel/FlxGame.hx",565,0x34f39fed)
HX_LOCAL_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_601_switchState,"flixel.FlxGame","switchState",0xedf41a61,"flixel.FlxGame.switchState","flixel/FlxGame.hx",601,0x34f39fed)
HX_LOCAL_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_638_gameStart,"flixel.FlxGame","gameStart",0x0d0c34f4,"flixel.FlxGame.gameStart","flixel/FlxGame.hx",638,0x34f39fed)
HX_LOCAL_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_650_step,"flixel.FlxGame","step",0xd28f5fe8,"flixel.FlxGame.step","flixel/FlxGame.hx",650,0x34f39fed)
HX_LOCAL_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_673_handleReplayRequests,"flixel.FlxGame","handleReplayRequests",0xefa2c6ef,"flixel.FlxGame.handleReplayRequests","flixel/FlxGame.hx",673,0x34f39fed)
HX_LOCAL_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_707_update,"flixel.FlxGame","update",0x9b7d5da5,"flixel.FlxGame.update","flixel/FlxGame.hx",707,0x34f39fed)
HX_LOCAL_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_753_updateElapsed,"flixel.FlxGame","updateElapsed",0x372d9117,"flixel.FlxGame.updateElapsed","flixel/FlxGame.hx",753,0x34f39fed)
HX_LOCAL_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_812_updateInput,"flixel.FlxGame","updateInput",0x1a1f4025,"flixel.FlxGame.updateInput","flixel/FlxGame.hx",812,0x34f39fed)
HX_LOCAL_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_831_draw,"flixel.FlxGame","draw",0xc8a3a4a0,"flixel.FlxGame.draw","flixel/FlxGame.hx",831,0x34f39fed)
HX_LOCAL_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_876_getTicks,"flixel.FlxGame","getTicks",0x73d7349c,"flixel.FlxGame.getTicks","flixel/FlxGame.hx",876,0x34f39fed)
HX_LOCAL_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_882___default_getTimer,"flixel.FlxGame","__default_getTimer",0xda03b289,"flixel.FlxGame.__default_getTimer","flixel/FlxGame.hx",882,0x34f39fed)
namespace flixel{

void FlxGame_obj::__construct(hx::Null< int >  __o_GameWidth,hx::Null< int >  __o_GameHeight,hx::Class InitialState,hx::Null< Float >  __o_Zoom,hx::Null< int >  __o_UpdateFramerate,hx::Null< int >  __o_DrawFramerate,hx::Null< bool >  __o_SkipSplash,hx::Null< bool >  __o_StartFullscreen){
int GameWidth = __o_GameWidth.Default(0);
int GameHeight = __o_GameHeight.Default(0);
Float Zoom = __o_Zoom.Default(1);
int UpdateFramerate = __o_UpdateFramerate.Default(60);
int DrawFramerate = __o_DrawFramerate.Default(60);
bool SkipSplash = __o_SkipSplash.Default(false);
bool StartFullscreen = __o_StartFullscreen.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_47_new)
HXLINE( 232)		this->postProcesses = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 228)		this->postProcessLayer =  ::openfl::_legacy::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 204)		this->_resetGame = false;
HXLINE( 194)		this->_startFullscreen = false;
HXLINE( 187)		this->_skipSplash = false;
HXLINE( 173)		this->_customSoundTray = hx::ClassOf< ::flixel::_hx_system::ui::FlxSoundTray >();
HXLINE( 151)		this->_onFocusFiredOnce = false;
HXLINE( 139)		this->_lostFocus = false;
HXLINE( 112)		this->_startTime = (int)0;
HXLINE( 107)		this->_total = (int)0;
HXLINE(  94)		this->_gameJustStarted = false;
HXLINE(  88)		this->filtersEnabled = true;
HXLINE(  84)		this->ticks = (int)0;
HXLINE(  52)		this->focusLostFramerate = (int)10;
HXLINE( 252)		super::__construct();
HXLINE( 255)		this->_startFullscreen = StartFullscreen;
HXLINE( 259)		this->_inputContainer =  ::openfl::_legacy::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 261)		if ((GameWidth == (int)0)) {
HXLINE( 262)			GameWidth = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageWidth();
            		}
HXLINE( 263)		if ((GameHeight == (int)0)) {
HXLINE( 264)			GameHeight = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageHeight();
            		}
HXLINE( 267)		::flixel::FlxG_obj::init(hx::ObjectPtr<OBJ_>(this),GameWidth,GameHeight,Zoom);
HXLINE( 269)		::flixel::FlxG_obj::set_updateFramerate(UpdateFramerate);
HXLINE( 270)		::flixel::FlxG_obj::set_drawFramerate(DrawFramerate);
HXLINE( 271)		this->_accumulator = this->_stepMS;
HXLINE( 272)		this->_skipSplash = SkipSplash;
HXLINE( 279)		hx::Class _hx_tmp;
HXDLIN( 279)		if (hx::IsNull( InitialState )) {
HXLINE( 279)			_hx_tmp = hx::ClassOf< ::flixel::FlxState >();
            		}
            		else {
HXLINE( 279)			_hx_tmp = InitialState;
            		}
HXDLIN( 279)		this->_initialState = _hx_tmp;
HXLINE( 281)		this->addEventListener(::openfl::_legacy::events::Event_obj::ADDED_TO_STAGE,this->create_dyn(),null(),null(),null());
            	}

Dynamic FlxGame_obj::__CreateEmpty() { return new FlxGame_obj; }

void *FlxGame_obj::_hx_vtable = 0;

Dynamic FlxGame_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxGame_obj > _hx_result = new FlxGame_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}

bool FlxGame_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x306ae42a) {
		if (inClassId<=(int)0x25b00754) {
			if (inClassId<=(int)0x1e88cdcf) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x1e88cdcf;
			} else {
				return inClassId==(int)0x25b00754;
			}
		} else {
			return inClassId==(int)0x306ae42a;
		}
	} else {
		if (inClassId<=(int)0x5fcdb6d3) {
			return inClassId==(int)0x3d2d7617 || inClassId==(int)0x5fcdb6d3;
		} else {
			return inClassId==(int)0x771164c8;
		}
	}
}

void FlxGame_obj::setFilters(::Array< ::Dynamic> filters){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_289_setFilters)
HXDLIN( 289)		this->_filters = filters;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGame_obj,setFilters,(void))

void FlxGame_obj::create( ::Dynamic _){
            	HX_GC_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_296_create)
HXLINE( 297)		if (hx::IsNull( this->get_stage() )) {
HXLINE( 298)			return;
            		}
HXLINE( 300)		this->removeEventListener(::openfl::_legacy::events::Event_obj::ADDED_TO_STAGE,this->create_dyn(),null());
HXLINE( 302)		this->_startTime = ( (int)(this->getTimer()) );
HXLINE( 303)		int _hx_tmp = ( (int)(this->getTimer()) );
HXDLIN( 303)		this->_total = (_hx_tmp - this->_startTime);
HXLINE( 306)		::flixel::FlxG_obj::set_fullscreen(this->_startFullscreen);
HXLINE( 310)		this->get_stage()->set_scaleMode(::openfl::_legacy::display::StageScaleMode_obj::NO_SCALE_dyn());
HXLINE( 311)		this->get_stage()->set_align(::openfl::_legacy::display::StageAlign_obj::TOP_LEFT_dyn());
HXLINE( 312)		this->get_stage()->set_frameRate(::flixel::FlxG_obj::drawFramerate);
HXLINE( 314)		this->addChild(this->_inputContainer);
HXLINE( 318)		this->addChild(this->postProcessLayer);
HXLINE( 323)		int _hx_tmp1 = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageWidth();
HXDLIN( 323)		this->debugger =  ::flixel::_hx_system::debug::FlxDebugger_obj::__alloc( HX_CTX ,_hx_tmp1,::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageHeight());
HXLINE( 324)		this->addChild(this->debugger);
HXLINE( 331)		this->soundTray = ( ( ::flixel::_hx_system::ui::FlxSoundTray)(::Type_obj::createInstance(this->_customSoundTray,::cpp::VirtualArray_obj::__new(0))) );
HXLINE( 332)		this->addChild(this->soundTray);
HXLINE( 343)		this->get_stage()->addEventListener(HX_("focusOut",96,6f,5e,11),this->onFocusLost_dyn(),null(),null(),null());
HXLINE( 344)		this->get_stage()->addEventListener(HX_("focusIn",dd,45,83,41),this->onFocus_dyn(),null(),null(),null());
HXLINE( 351)		{
HXLINE( 351)			::flixel::FlxG_obj::signals->preGameReset->dispatch();
HXDLIN( 351)			this->_skipSplash = true;
HXDLIN( 351)			bool _hx_tmp2;
HXDLIN( 351)			if (!(this->_skipSplash)) {
HXLINE( 351)				_hx_tmp2 = hx::IsNotNull( ::flixel::_hx_system::FlxSplash_obj::nextState );
            			}
            			else {
HXLINE( 351)				_hx_tmp2 = true;
            			}
HXDLIN( 351)			if (_hx_tmp2) {
HXLINE( 351)				this->_requestedState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(this->_initialState,::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 351)				if (hx::IsNull( ::flixel::_hx_system::FlxSplash_obj::nextState )) {
HXLINE( 351)					this->_gameJustStarted = true;
            				}
            			}
            			else {
HXLINE( 351)				::flixel::_hx_system::FlxSplash_obj::nextState = this->_initialState;
HXDLIN( 351)				this->_requestedState =  ::flixel::_hx_system::FlxSplash_obj::__alloc( HX_CTX ,null());
HXDLIN( 351)				this->_skipSplash = true;
            			}
HXDLIN( 351)			if (::Std_obj::is(this->_requestedState,hx::ClassOf< ::flixel::FlxSubState >())) {
HXLINE( 351)				HX_STACK_DO_THROW(HX_("You can't set FlxSubState class instance as the state for you game",f2,8e,2c,80));
            			}
HXDLIN( 351)			::flixel::FlxG_obj::reset();
HXDLIN( 351)			::flixel::FlxG_obj::signals->postGameReset->dispatch();
            		}
HXLINE( 352)		this->switchState();
HXLINE( 354)		if ((::flixel::FlxG_obj::updateFramerate < ::flixel::FlxG_obj::drawFramerate)) {
HXLINE( 355)			::flixel::FlxG_obj::log->advanced((HX_("FlxG.updateFramerate: The update framerate shouldn't be smaller",39,e8,61,1d) + HX_(" than the draw framerate, since it can slow down your game.",1a,34,d2,0e)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            		}
HXLINE( 359)		this->get_stage()->addEventListener(::openfl::_legacy::events::Event_obj::ENTER_FRAME,this->onEnterFrame_dyn(),null(),null(),null());
HXLINE( 363)		this->get_stage()->addEventListener(::openfl::_legacy::events::Event_obj::RESIZE,this->onResize_dyn(),null(),null(),null());
HXLINE( 366)		int _hx_tmp3 = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageWidth();
HXDLIN( 366)		this->resizeGame(_hx_tmp3,::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageHeight());
HXLINE( 368)		::openfl::_legacy::Assets_obj::addEventListener(::openfl::_legacy::events::Event_obj::CHANGE,::flixel::FlxG_obj::bitmap->onAssetsReload_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGame_obj,create,(void))

void FlxGame_obj::onFocus( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_372_onFocus)
HXLINE( 380)		if (!(this->_onFocusFiredOnce)) {
HXLINE( 382)			this->_onFocusFiredOnce = true;
HXLINE( 383)			return;
            		}
HXLINE( 392)		this->_lostFocus = false;
HXLINE( 393)		::flixel::FlxG_obj::signals->focusGained->dispatch();
HXLINE( 394)		this->_state->onFocus();
HXLINE( 396)		if (!(::flixel::FlxG_obj::autoPause)) {
HXLINE( 397)			return;
            		}
HXLINE( 405)		this->debugger->stats->onFocus();
HXLINE( 408)		this->get_stage()->set_frameRate(::flixel::FlxG_obj::drawFramerate);
HXLINE( 410)		::flixel::FlxG_obj::sound->onFocus();
HXLINE( 412)		{
HXLINE( 412)			int _g = (int)0;
HXDLIN( 412)			::Array< ::Dynamic> _g1 = ::flixel::FlxG_obj::inputs->list;
HXDLIN( 412)			while((_g < _g1->length)){
HXLINE( 412)				::Dynamic input = _g1->__get(_g);
HXDLIN( 412)				_g = (_g + (int)1);
HXDLIN( 412)				::flixel::input::IFlxInputManager_obj::onFocus(input);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGame_obj,onFocus,(void))

void FlxGame_obj::onFocusLost( ::openfl::_legacy::events::Event event){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_416_onFocusLost)
HXLINE( 427)		this->_lostFocus = true;
HXLINE( 428)		::flixel::FlxG_obj::signals->focusLost->dispatch();
HXLINE( 429)		this->_state->onFocusLost();
HXLINE( 431)		if (!(::flixel::FlxG_obj::autoPause)) {
HXLINE( 432)			return;
            		}
HXLINE( 440)		this->debugger->stats->onFocusLost();
HXLINE( 443)		this->get_stage()->set_frameRate(this->focusLostFramerate);
HXLINE( 445)		::flixel::FlxG_obj::sound->onFocusLost();
HXLINE( 447)		{
HXLINE( 447)			int _g = (int)0;
HXDLIN( 447)			::Array< ::Dynamic> _g1 = ::flixel::FlxG_obj::inputs->list;
HXDLIN( 447)			while((_g < _g1->length)){
HXLINE( 447)				::Dynamic input = _g1->__get(_g);
HXDLIN( 447)				_g = (_g + (int)1);
HXDLIN( 447)				::flixel::input::IFlxInputManager_obj::onFocusLost(input);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGame_obj,onFocusLost,(void))

void FlxGame_obj::onResize( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_452_onResize)
HXLINE( 453)		int width = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageWidth();
HXLINE( 454)		int height = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageHeight();
HXLINE( 457)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 458)			::flixel::FlxG_obj::bitmap->onContext();
            		}
HXLINE( 461)		this->resizeGame(width,height);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGame_obj,onResize,(void))

void FlxGame_obj::resizeGame(int width,int height){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_465_resizeGame)
HXLINE( 466)		::flixel::FlxG_obj::scaleMode->onMeasure(width,height);
HXLINE( 468)		this->_state->onResize(width,height);
HXLINE( 470)		::flixel::FlxG_obj::cameras->resize();
HXLINE( 471)		::flixel::FlxG_obj::signals->gameResized->dispatch(width,height);
HXLINE( 474)		this->debugger->onResize(width,height);
HXLINE( 483)		if (hx::IsNotNull( this->soundTray )) {
HXLINE( 484)			this->soundTray->screenCenter();
            		}
HXLINE( 488)		{
HXLINE( 488)			int _g = (int)0;
HXDLIN( 488)			::Array< ::Dynamic> _g1 = this->postProcesses;
HXDLIN( 488)			while((_g < _g1->length)){
HXLINE( 488)				 ::flixel::effects::postprocess::PostProcess postProcess = _g1->__get(_g).StaticCast<  ::flixel::effects::postprocess::PostProcess >();
HXDLIN( 488)				_g = (_g + (int)1);
HXLINE( 489)				postProcess->rebuild();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGame_obj,resizeGame,(void))

void FlxGame_obj::onEnterFrame( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_497_onEnterFrame)
HXLINE( 498)		int _hx_tmp = ( (int)(this->getTimer()) );
HXDLIN( 498)		this->ticks = (_hx_tmp - this->_startTime);
HXLINE( 499)		this->_elapsedMS = (this->ticks - this->_total);
HXLINE( 500)		this->_total = this->ticks;
HXLINE( 503)		bool _hx_tmp1;
HXDLIN( 503)		if (hx::IsNotNull( this->soundTray )) {
HXLINE( 503)			_hx_tmp1 = this->soundTray->active;
            		}
            		else {
HXLINE( 503)			_hx_tmp1 = false;
            		}
HXDLIN( 503)		if (_hx_tmp1) {
HXLINE( 504)			this->soundTray->update(this->_elapsedMS);
            		}
HXLINE( 507)		bool _hx_tmp2;
HXDLIN( 507)		if (!(!(this->_lostFocus))) {
HXLINE( 507)			_hx_tmp2 = !(::flixel::FlxG_obj::autoPause);
            		}
            		else {
HXLINE( 507)			_hx_tmp2 = true;
            		}
HXDLIN( 507)		if (_hx_tmp2) {
HXLINE( 509)			if (::flixel::FlxG_obj::vcr->paused) {
HXLINE( 511)				if (::flixel::FlxG_obj::vcr->stepRequested) {
HXLINE( 513)					::flixel::FlxG_obj::vcr->stepRequested = false;
            				}
            				else {
HXLINE( 515)					if (hx::IsEq( this->_state,this->_requestedState )) {
HXLINE( 518)						this->debugger->update();
HXLINE( 522)						if (this->debugger->interaction->isActive()) {
HXLINE( 524)							this->draw();
            						}
HXLINE( 527)						return;
            					}
            				}
            			}
HXLINE( 531)			if (::flixel::FlxG_obj::fixedTimestep) {
HXLINE( 533)				 ::flixel::FlxGame _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 533)				_hx_tmp3->_accumulator = (_hx_tmp3->_accumulator + this->_elapsedMS);
HXLINE( 534)				Float _hx_tmp4;
HXDLIN( 534)				if ((this->_accumulator > this->_maxAccumulation)) {
HXLINE( 534)					_hx_tmp4 = this->_maxAccumulation;
            				}
            				else {
HXLINE( 534)					_hx_tmp4 = this->_accumulator;
            				}
HXDLIN( 534)				this->_accumulator = _hx_tmp4;
HXLINE( 536)				while((this->_accumulator >= this->_stepMS)){
HXLINE( 538)					this->step();
HXLINE( 539)					 ::flixel::FlxGame _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 539)					_hx_tmp5->_accumulator = (_hx_tmp5->_accumulator - this->_stepMS);
            				}
            			}
            			else {
HXLINE( 544)				this->step();
            			}
HXLINE( 548)			::flixel::FlxBasic_obj::visibleCount = (int)0;
HXLINE( 551)			this->draw();
HXLINE( 554)			this->debugger->stats->visibleObjects(::flixel::FlxBasic_obj::visibleCount);
HXLINE( 555)			this->debugger->update();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGame_obj,onEnterFrame,(void))

void FlxGame_obj::resetGame(){
            	HX_GC_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_565_resetGame)
HXLINE( 566)		::flixel::FlxG_obj::signals->preGameReset->dispatch();
HXLINE( 569)		this->_skipSplash = true;
HXLINE( 572)		bool _hx_tmp;
HXDLIN( 572)		if (!(this->_skipSplash)) {
HXLINE( 572)			_hx_tmp = hx::IsNotNull( ::flixel::_hx_system::FlxSplash_obj::nextState );
            		}
            		else {
HXLINE( 572)			_hx_tmp = true;
            		}
HXDLIN( 572)		if (_hx_tmp) {
HXLINE( 574)			this->_requestedState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(this->_initialState,::cpp::VirtualArray_obj::__new(0))) );
HXLINE( 575)			if (hx::IsNull( ::flixel::_hx_system::FlxSplash_obj::nextState )) {
HXLINE( 576)				this->_gameJustStarted = true;
            			}
            		}
            		else {
HXLINE( 580)			::flixel::_hx_system::FlxSplash_obj::nextState = this->_initialState;
HXLINE( 581)			this->_requestedState =  ::flixel::_hx_system::FlxSplash_obj::__alloc( HX_CTX ,null());
HXLINE( 582)			this->_skipSplash = true;
            		}
HXLINE( 586)		if (::Std_obj::is(this->_requestedState,hx::ClassOf< ::flixel::FlxSubState >())) {
HXLINE( 587)			HX_STACK_DO_THROW(HX_("You can't set FlxSubState class instance as the state for you game",f2,8e,2c,80));
            		}
HXLINE( 590)		::flixel::FlxG_obj::reset();
HXLINE( 592)		::flixel::FlxG_obj::signals->postGameReset->dispatch();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,resetGame,(void))

void FlxGame_obj::switchState(){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_601_switchState)
HXLINE( 603)		::flixel::FlxG_obj::cameras->reset(null());
HXLINE( 604)		::flixel::FlxG_obj::inputs->onStateSwitch();
HXLINE( 606)		::flixel::FlxG_obj::sound->destroy(null());
HXLINE( 609)		::flixel::FlxG_obj::signals->stateSwitched->dispatch();
HXLINE( 616)		if (hx::IsNotNull( this->_state )) {
HXLINE( 617)			this->_state->destroy();
            		}
HXLINE( 620)		::flixel::FlxG_obj::bitmap->clearCache();
HXLINE( 623)		this->_state = this->_requestedState;
HXLINE( 625)		::flixel::FlxG_obj::signals->preStateCreate->dispatch(this->_state);
HXLINE( 627)		this->_state->create();
HXLINE( 629)		if (this->_gameJustStarted) {
HXLINE( 630)			this->gameStart();
            		}
HXLINE( 633)		::haxe::IMap_obj::set(this->debugger->console->registeredObjects,HX_("state",11,76,0b,84),this->_state);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,switchState,(void))

void FlxGame_obj::gameStart(){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_638_gameStart)
HXLINE( 639)		::flixel::FlxG_obj::signals->gameStarted->dispatch();
HXLINE( 640)		this->_gameJustStarted = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,gameStart,(void))

void FlxGame_obj::step(){
            	HX_GC_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_650_step)
HXLINE( 652)		if (this->_resetGame) {
HXLINE( 654)			{
HXLINE( 654)				::flixel::FlxG_obj::signals->preGameReset->dispatch();
HXDLIN( 654)				this->_skipSplash = true;
HXDLIN( 654)				bool _hx_tmp;
HXDLIN( 654)				if (!(this->_skipSplash)) {
HXLINE( 654)					_hx_tmp = hx::IsNotNull( ::flixel::_hx_system::FlxSplash_obj::nextState );
            				}
            				else {
HXLINE( 654)					_hx_tmp = true;
            				}
HXDLIN( 654)				if (_hx_tmp) {
HXLINE( 654)					this->_requestedState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(this->_initialState,::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 654)					if (hx::IsNull( ::flixel::_hx_system::FlxSplash_obj::nextState )) {
HXLINE( 654)						this->_gameJustStarted = true;
            					}
            				}
            				else {
HXLINE( 654)					::flixel::_hx_system::FlxSplash_obj::nextState = this->_initialState;
HXDLIN( 654)					this->_requestedState =  ::flixel::_hx_system::FlxSplash_obj::__alloc( HX_CTX ,null());
HXDLIN( 654)					this->_skipSplash = true;
            				}
HXDLIN( 654)				if (::Std_obj::is(this->_requestedState,hx::ClassOf< ::flixel::FlxSubState >())) {
HXLINE( 654)					HX_STACK_DO_THROW(HX_("You can't set FlxSubState class instance as the state for you game",f2,8e,2c,80));
            				}
HXDLIN( 654)				::flixel::FlxG_obj::reset();
HXDLIN( 654)				::flixel::FlxG_obj::signals->postGameReset->dispatch();
            			}
HXLINE( 655)			this->_resetGame = false;
            		}
HXLINE( 658)		this->handleReplayRequests();
HXLINE( 662)		::flixel::FlxBasic_obj::activeCount = (int)0;
HXLINE( 665)		this->update();
HXLINE( 668)		this->debugger->stats->activeObjects(::flixel::FlxBasic_obj::activeCount);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,step,(void))

void FlxGame_obj::handleReplayRequests(){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_673_handleReplayRequests)
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,handleReplayRequests,(void))

void FlxGame_obj::update(){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_707_update)
HXLINE( 708)		bool _hx_tmp;
HXDLIN( 708)		if (!(!(this->_state->active))) {
HXLINE( 708)			_hx_tmp = !(this->_state->exists);
            		}
            		else {
HXLINE( 708)			_hx_tmp = true;
            		}
HXDLIN( 708)		if (_hx_tmp) {
HXLINE( 709)			return;
            		}
HXLINE( 711)		if (hx::IsNotEq( this->_state,this->_requestedState )) {
HXLINE( 712)			this->switchState();
            		}
HXLINE( 715)		if (::flixel::FlxG_obj::debugger->visible) {
HXLINE( 716)			int _hx_tmp1 = ( (int)(this->getTimer()) );
HXDLIN( 716)			this->ticks = (_hx_tmp1 - this->_startTime);
            		}
HXLINE( 719)		this->updateElapsed();
HXLINE( 721)		::flixel::FlxG_obj::signals->preUpdate->dispatch();
HXLINE( 723)		this->updateInput();
HXLINE( 726)		if (hx::IsNotNull( this->postProcesses->__get((int)0).StaticCast<  ::flixel::effects::postprocess::PostProcess >() )) {
HXLINE( 727)			this->postProcesses->__get((int)0).StaticCast<  ::flixel::effects::postprocess::PostProcess >()->update(::flixel::FlxG_obj::elapsed);
            		}
HXLINE( 731)		::flixel::FlxG_obj::sound->update(::flixel::FlxG_obj::elapsed);
HXLINE( 733)		{
HXLINE( 733)			Float elapsed = ::flixel::FlxG_obj::elapsed;
HXDLIN( 733)			{
HXLINE( 733)				int _g = (int)0;
HXDLIN( 733)				::Array< ::Dynamic> _g1 = ::flixel::FlxG_obj::plugins->list;
HXDLIN( 733)				while((_g < _g1->length)){
HXLINE( 733)					 ::flixel::FlxBasic plugin = _g1->__get(_g).StaticCast<  ::flixel::FlxBasic >();
HXDLIN( 733)					_g = (_g + (int)1);
HXDLIN( 733)					bool _hx_tmp2;
HXDLIN( 733)					if (plugin->exists) {
HXLINE( 733)						_hx_tmp2 = plugin->active;
            					}
            					else {
HXLINE( 733)						_hx_tmp2 = false;
            					}
HXDLIN( 733)					if (_hx_tmp2) {
HXLINE( 733)						plugin->update(elapsed);
            					}
            				}
            			}
            		}
HXLINE( 735)		this->_state->tryUpdate(::flixel::FlxG_obj::elapsed);
HXLINE( 737)		{
HXLINE( 737)			Float elapsed1 = ::flixel::FlxG_obj::elapsed;
HXDLIN( 737)			{
HXLINE( 737)				int _g2 = (int)0;
HXDLIN( 737)				::Array< ::Dynamic> _g11 = ::flixel::FlxG_obj::cameras->list;
HXDLIN( 737)				while((_g2 < _g11->length)){
HXLINE( 737)					 ::flixel::FlxCamera camera = _g11->__get(_g2).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 737)					_g2 = (_g2 + (int)1);
HXDLIN( 737)					bool _hx_tmp3;
HXDLIN( 737)					bool _hx_tmp4;
HXDLIN( 737)					if (hx::IsNotNull( camera )) {
HXLINE( 737)						_hx_tmp4 = camera->exists;
            					}
            					else {
HXLINE( 737)						_hx_tmp4 = false;
            					}
HXDLIN( 737)					if (_hx_tmp4) {
HXLINE( 737)						_hx_tmp3 = camera->active;
            					}
            					else {
HXLINE( 737)						_hx_tmp3 = false;
            					}
HXDLIN( 737)					if (_hx_tmp3) {
HXLINE( 737)						camera->update(elapsed1);
            					}
            				}
            			}
            		}
HXLINE( 738)		::flixel::FlxG_obj::signals->postUpdate->dispatch();
HXLINE( 741)		 ::flixel::_hx_system::debug::stats::Stats _hx_tmp5 = this->debugger->stats;
HXDLIN( 741)		int _hx_tmp6 = ( (int)(this->getTimer()) );
HXDLIN( 741)		_hx_tmp5->flixelUpdate(((_hx_tmp6 - this->_startTime) - this->ticks));
HXLINE( 745)		::flixel::util::FlxArrayUtil_obj::clearArray(::flixel::FlxG_obj::swipes,null());
HXLINE( 748)		::Array< ::Dynamic> _hx_tmp7;
HXDLIN( 748)		if (this->filtersEnabled) {
HXLINE( 748)			_hx_tmp7 = this->_filters;
            		}
            		else {
HXLINE( 748)			_hx_tmp7 = null();
            		}
HXDLIN( 748)		this->set_filters(_hx_tmp7);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,update,(void))

void FlxGame_obj::updateElapsed(){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_753_updateElapsed)
HXDLIN( 753)		if (::flixel::FlxG_obj::fixedTimestep) {
HXLINE( 755)			::flixel::FlxG_obj::elapsed = (::flixel::FlxG_obj::timeScale * this->_stepSeconds);
            		}
            		else {
HXLINE( 759)			Float _hx_tmp = ::flixel::FlxG_obj::timeScale;
HXDLIN( 759)			::flixel::FlxG_obj::elapsed = (_hx_tmp * ((Float)this->_elapsedMS / (Float)(int)1000));
HXLINE( 761)			Float max = (::flixel::FlxG_obj::maxElapsed * ::flixel::FlxG_obj::timeScale);
HXLINE( 762)			if ((::flixel::FlxG_obj::elapsed > max)) {
HXLINE( 763)				::flixel::FlxG_obj::elapsed = max;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,updateElapsed,(void))

void FlxGame_obj::updateInput(){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_812_updateInput)
HXDLIN( 812)		int _g = (int)0;
HXDLIN( 812)		::Array< ::Dynamic> _g1 = ::flixel::FlxG_obj::inputs->list;
HXDLIN( 812)		while((_g < _g1->length)){
HXDLIN( 812)			::Dynamic input = _g1->__get(_g);
HXDLIN( 812)			_g = (_g + (int)1);
HXDLIN( 812)			::flixel::input::IFlxInputManager_obj::update(input);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,updateInput,(void))

void FlxGame_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_831_draw)
HXLINE( 832)		bool _hx_tmp;
HXDLIN( 832)		if (!(!(this->_state->visible))) {
HXLINE( 832)			_hx_tmp = !(this->_state->exists);
            		}
            		else {
HXLINE( 832)			_hx_tmp = true;
            		}
HXDLIN( 832)		if (_hx_tmp) {
HXLINE( 833)			return;
            		}
HXLINE( 836)		if (::flixel::FlxG_obj::debugger->visible) {
HXLINE( 837)			int _hx_tmp1 = ( (int)(this->getTimer()) );
HXDLIN( 837)			this->ticks = (_hx_tmp1 - this->_startTime);
            		}
HXLINE( 840)		::flixel::FlxG_obj::signals->preDraw->dispatch();
HXLINE( 842)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 843)			::flixel::graphics::tile::FlxTilesheet_obj::_DRAWCALLS = (int)0;
            		}
HXLINE( 846)		if (hx::IsNotNull( this->postProcesses->__get((int)0).StaticCast<  ::flixel::effects::postprocess::PostProcess >() )) {
HXLINE( 847)			this->postProcesses->__get((int)0).StaticCast<  ::flixel::effects::postprocess::PostProcess >()->capture();
            		}
HXLINE( 850)		{
HXLINE( 850)			 ::flixel::_hx_system::frontEnds::CameraFrontEnd _this = ::flixel::FlxG_obj::cameras;
HXDLIN( 850)			{
HXLINE( 850)				int _g = (int)0;
HXDLIN( 850)				::Array< ::Dynamic> _g1 = _this->list;
HXDLIN( 850)				while((_g < _g1->length)){
HXLINE( 850)					 ::flixel::FlxCamera camera = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 850)					_g = (_g + (int)1);
HXDLIN( 850)					bool _hx_tmp2;
HXDLIN( 850)					bool _hx_tmp3;
HXDLIN( 850)					if (hx::IsNotNull( camera )) {
HXLINE( 850)						_hx_tmp3 = !(camera->exists);
            					}
            					else {
HXLINE( 850)						_hx_tmp3 = true;
            					}
HXDLIN( 850)					if (!(_hx_tmp3)) {
HXLINE( 850)						_hx_tmp2 = !(camera->visible);
            					}
            					else {
HXLINE( 850)						_hx_tmp2 = true;
            					}
HXDLIN( 850)					if (_hx_tmp2) {
HXLINE( 850)						continue;
            					}
HXDLIN( 850)					if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 850)						camera->checkResize();
HXDLIN( 850)						if (_this->useBufferLocking) {
HXLINE( 850)							camera->buffer->lock();
            						}
            					}
HXDLIN( 850)					if (::flixel::FlxG_obj::renderTile) {
HXLINE( 850)						camera->clearDrawStack();
HXDLIN( 850)						camera->canvas->get_graphics()->clear();
HXDLIN( 850)						camera->debugLayer->get_graphics()->clear();
            					}
HXDLIN( 850)					if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 850)						camera->fill(camera->bgColor,camera->useBgAlphaBlending,null(),null());
HXDLIN( 850)						camera->screen->dirty = true;
            					}
            					else {
HXLINE( 850)						camera->fill(((int)camera->bgColor & (int)(int)16777215),camera->useBgAlphaBlending,((Float)((int)((int)camera->bgColor >> (int)(int)24) & (int)(int)255) / (Float)(int)255),null());
            					}
            				}
            			}
            		}
HXLINE( 852)		{
HXLINE( 852)			int _g2 = (int)0;
HXDLIN( 852)			::Array< ::Dynamic> _g11 = ::flixel::FlxG_obj::plugins->list;
HXDLIN( 852)			while((_g2 < _g11->length)){
HXLINE( 852)				 ::flixel::FlxBasic plugin = _g11->__get(_g2).StaticCast<  ::flixel::FlxBasic >();
HXDLIN( 852)				_g2 = (_g2 + (int)1);
HXDLIN( 852)				bool _hx_tmp4;
HXDLIN( 852)				if (plugin->exists) {
HXLINE( 852)					_hx_tmp4 = plugin->visible;
            				}
            				else {
HXLINE( 852)					_hx_tmp4 = false;
            				}
HXDLIN( 852)				if (_hx_tmp4) {
HXLINE( 852)					plugin->draw();
            				}
            			}
            		}
HXLINE( 854)		this->_state->draw();
HXLINE( 856)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 858)			if (::flixel::FlxG_obj::renderTile) {
HXLINE( 858)				int _g3 = (int)0;
HXDLIN( 858)				::Array< ::Dynamic> _g12 = ::flixel::FlxG_obj::cameras->list;
HXDLIN( 858)				while((_g3 < _g12->length)){
HXLINE( 858)					 ::flixel::FlxCamera camera1 = _g12->__get(_g3).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 858)					_g3 = (_g3 + (int)1);
HXDLIN( 858)					bool _hx_tmp5;
HXDLIN( 858)					bool _hx_tmp6;
HXDLIN( 858)					if (hx::IsNotNull( camera1 )) {
HXLINE( 858)						_hx_tmp6 = camera1->exists;
            					}
            					else {
HXLINE( 858)						_hx_tmp6 = false;
            					}
HXDLIN( 858)					if (_hx_tmp6) {
HXLINE( 858)						_hx_tmp5 = camera1->visible;
            					}
            					else {
HXLINE( 858)						_hx_tmp5 = false;
            					}
HXDLIN( 858)					if (_hx_tmp5) {
HXLINE( 858)						camera1->render();
            					}
            				}
            			}
HXLINE( 861)			this->debugger->stats->drawCalls(::flixel::graphics::tile::FlxTilesheet_obj::_DRAWCALLS);
            		}
HXLINE( 865)		{
HXLINE( 865)			 ::flixel::_hx_system::frontEnds::CameraFrontEnd _this1 = ::flixel::FlxG_obj::cameras;
HXDLIN( 865)			{
HXLINE( 865)				int _g4 = (int)0;
HXDLIN( 865)				::Array< ::Dynamic> _g13 = _this1->list;
HXDLIN( 865)				while((_g4 < _g13->length)){
HXLINE( 865)					 ::flixel::FlxCamera camera2 = _g13->__get(_g4).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 865)					_g4 = (_g4 + (int)1);
HXDLIN( 865)					bool _hx_tmp7;
HXDLIN( 865)					bool _hx_tmp8;
HXDLIN( 865)					if (hx::IsNotNull( camera2 )) {
HXLINE( 865)						_hx_tmp8 = !(camera2->exists);
            					}
            					else {
HXLINE( 865)						_hx_tmp8 = true;
            					}
HXDLIN( 865)					if (!(_hx_tmp8)) {
HXLINE( 865)						_hx_tmp7 = !(camera2->visible);
            					}
            					else {
HXLINE( 865)						_hx_tmp7 = true;
            					}
HXDLIN( 865)					if (_hx_tmp7) {
HXLINE( 865)						continue;
            					}
HXDLIN( 865)					camera2->drawFX();
HXDLIN( 865)					if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 865)						if (_this1->useBufferLocking) {
HXLINE( 865)							camera2->buffer->unlock(null());
            						}
HXDLIN( 865)						camera2->screen->dirty = true;
            					}
            				}
            			}
            		}
HXLINE( 867)		::flixel::FlxG_obj::signals->postDraw->dispatch();
HXLINE( 870)		 ::flixel::_hx_system::debug::stats::Stats _hx_tmp9 = this->debugger->stats;
HXDLIN( 870)		int _hx_tmp10 = ( (int)(this->getTimer()) );
HXDLIN( 870)		_hx_tmp9->flixelDraw(((_hx_tmp10 - this->_startTime) - this->ticks));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,draw,(void))

int FlxGame_obj::getTicks(){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_876_getTicks)
HXDLIN( 876)		int _hx_tmp = ( (int)(this->getTimer()) );
HXDLIN( 876)		return (_hx_tmp - this->_startTime);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,getTicks,return )

HX_BEGIN_DEFAULT_FUNC(__default_getTimer,FlxGame_obj)
int _hx_run(){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_882___default_getTimer)
HXDLIN( 882)		return ::openfl::_legacy::Lib_obj::getTimer();
            	}
HX_END_LOCAL_FUNC0(return )
HX_END_DEFAULT_FUNC


void FlxGame_obj::__alloc_dynamic_functions(hx::Ctx *_hx_ctx,FlxGame_obj *_hx_obj) {
	if (!_hx_obj->getTimer.mPtr) _hx_obj->getTimer = new __default_getTimer(_hx_obj);
}
hx::ObjectPtr< FlxGame_obj > FlxGame_obj::__new(hx::Null< int >  __o_GameWidth,hx::Null< int >  __o_GameHeight,hx::Class InitialState,hx::Null< Float >  __o_Zoom,hx::Null< int >  __o_UpdateFramerate,hx::Null< int >  __o_DrawFramerate,hx::Null< bool >  __o_SkipSplash,hx::Null< bool >  __o_StartFullscreen) {
	hx::ObjectPtr< FlxGame_obj > __this = new FlxGame_obj();
	__this->__construct(__o_GameWidth,__o_GameHeight,InitialState,__o_Zoom,__o_UpdateFramerate,__o_DrawFramerate,__o_SkipSplash,__o_StartFullscreen);
	return __this;
}

hx::ObjectPtr< FlxGame_obj > FlxGame_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_GameWidth,hx::Null< int >  __o_GameHeight,hx::Class InitialState,hx::Null< Float >  __o_Zoom,hx::Null< int >  __o_UpdateFramerate,hx::Null< int >  __o_DrawFramerate,hx::Null< bool >  __o_SkipSplash,hx::Null< bool >  __o_StartFullscreen) {
	FlxGame_obj *__this = (FlxGame_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxGame_obj), true, "flixel.FlxGame"));
	*(void **)__this = FlxGame_obj::_hx_vtable;
	flixel::FlxGame_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(__o_GameWidth,__o_GameHeight,InitialState,__o_Zoom,__o_UpdateFramerate,__o_DrawFramerate,__o_SkipSplash,__o_StartFullscreen);
	return __this;
}

FlxGame_obj::FlxGame_obj()
{
	getTimer = new __default_getTimer(this);
}

void FlxGame_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxGame);
	HX_MARK_MEMBER_NAME(focusLostFramerate,"focusLostFramerate");
	HX_MARK_MEMBER_NAME(soundTray,"soundTray");
	HX_MARK_MEMBER_NAME(debugger,"debugger");
	HX_MARK_MEMBER_NAME(ticks,"ticks");
	HX_MARK_MEMBER_NAME(filtersEnabled,"filtersEnabled");
	HX_MARK_MEMBER_NAME(_gameJustStarted,"_gameJustStarted");
	HX_MARK_MEMBER_NAME(_initialState,"_initialState");
	HX_MARK_MEMBER_NAME(_state,"_state");
	HX_MARK_MEMBER_NAME(_total,"_total");
	HX_MARK_MEMBER_NAME(_startTime,"_startTime");
	HX_MARK_MEMBER_NAME(_accumulator,"_accumulator");
	HX_MARK_MEMBER_NAME(_elapsedMS,"_elapsedMS");
	HX_MARK_MEMBER_NAME(_stepMS,"_stepMS");
	HX_MARK_MEMBER_NAME(_stepSeconds,"_stepSeconds");
	HX_MARK_MEMBER_NAME(_maxAccumulation,"_maxAccumulation");
	HX_MARK_MEMBER_NAME(_lostFocus,"_lostFocus");
	HX_MARK_MEMBER_NAME(_filters,"_filters");
	HX_MARK_MEMBER_NAME(_onFocusFiredOnce,"_onFocusFiredOnce");
	HX_MARK_MEMBER_NAME(_inputContainer,"_inputContainer");
	HX_MARK_MEMBER_NAME(_customSoundTray,"_customSoundTray");
	HX_MARK_MEMBER_NAME(_skipSplash,"_skipSplash");
	HX_MARK_MEMBER_NAME(_startFullscreen,"_startFullscreen");
	HX_MARK_MEMBER_NAME(_requestedState,"_requestedState");
	HX_MARK_MEMBER_NAME(_resetGame,"_resetGame");
	HX_MARK_MEMBER_NAME(postProcessLayer,"postProcessLayer");
	HX_MARK_MEMBER_NAME(postProcesses,"postProcesses");
	HX_MARK_MEMBER_NAME(getTimer,"getTimer");
	 ::openfl::_legacy::display::DisplayObjectContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxGame_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(focusLostFramerate,"focusLostFramerate");
	HX_VISIT_MEMBER_NAME(soundTray,"soundTray");
	HX_VISIT_MEMBER_NAME(debugger,"debugger");
	HX_VISIT_MEMBER_NAME(ticks,"ticks");
	HX_VISIT_MEMBER_NAME(filtersEnabled,"filtersEnabled");
	HX_VISIT_MEMBER_NAME(_gameJustStarted,"_gameJustStarted");
	HX_VISIT_MEMBER_NAME(_initialState,"_initialState");
	HX_VISIT_MEMBER_NAME(_state,"_state");
	HX_VISIT_MEMBER_NAME(_total,"_total");
	HX_VISIT_MEMBER_NAME(_startTime,"_startTime");
	HX_VISIT_MEMBER_NAME(_accumulator,"_accumulator");
	HX_VISIT_MEMBER_NAME(_elapsedMS,"_elapsedMS");
	HX_VISIT_MEMBER_NAME(_stepMS,"_stepMS");
	HX_VISIT_MEMBER_NAME(_stepSeconds,"_stepSeconds");
	HX_VISIT_MEMBER_NAME(_maxAccumulation,"_maxAccumulation");
	HX_VISIT_MEMBER_NAME(_lostFocus,"_lostFocus");
	HX_VISIT_MEMBER_NAME(_filters,"_filters");
	HX_VISIT_MEMBER_NAME(_onFocusFiredOnce,"_onFocusFiredOnce");
	HX_VISIT_MEMBER_NAME(_inputContainer,"_inputContainer");
	HX_VISIT_MEMBER_NAME(_customSoundTray,"_customSoundTray");
	HX_VISIT_MEMBER_NAME(_skipSplash,"_skipSplash");
	HX_VISIT_MEMBER_NAME(_startFullscreen,"_startFullscreen");
	HX_VISIT_MEMBER_NAME(_requestedState,"_requestedState");
	HX_VISIT_MEMBER_NAME(_resetGame,"_resetGame");
	HX_VISIT_MEMBER_NAME(postProcessLayer,"postProcessLayer");
	HX_VISIT_MEMBER_NAME(postProcesses,"postProcesses");
	HX_VISIT_MEMBER_NAME(getTimer,"getTimer");
	 ::openfl::_legacy::display::DisplayObjectContainer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxGame_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"step") ) { return hx::Val( step_dyn() ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ticks") ) { return hx::Val( ticks ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_state") ) { return hx::Val( _state ); }
		if (HX_FIELD_EQ(inName,"_total") ) { return hx::Val( _total ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_stepMS") ) { return hx::Val( _stepMS ); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return hx::Val( onFocus_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"debugger") ) { return hx::Val( debugger ); }
		if (HX_FIELD_EQ(inName,"_filters") ) { return hx::Val( _filters ); }
		if (HX_FIELD_EQ(inName,"onResize") ) { return hx::Val( onResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTicks") ) { return hx::Val( getTicks_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTimer") ) { return hx::Val( getTimer ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"soundTray") ) { return hx::Val( soundTray ); }
		if (HX_FIELD_EQ(inName,"resetGame") ) { return hx::Val( resetGame_dyn() ); }
		if (HX_FIELD_EQ(inName,"gameStart") ) { return hx::Val( gameStart_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_startTime") ) { return hx::Val( _startTime ); }
		if (HX_FIELD_EQ(inName,"_elapsedMS") ) { return hx::Val( _elapsedMS ); }
		if (HX_FIELD_EQ(inName,"_lostFocus") ) { return hx::Val( _lostFocus ); }
		if (HX_FIELD_EQ(inName,"_resetGame") ) { return hx::Val( _resetGame ); }
		if (HX_FIELD_EQ(inName,"setFilters") ) { return hx::Val( setFilters_dyn() ); }
		if (HX_FIELD_EQ(inName,"resizeGame") ) { return hx::Val( resizeGame_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_skipSplash") ) { return hx::Val( _skipSplash ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return hx::Val( onFocusLost_dyn() ); }
		if (HX_FIELD_EQ(inName,"switchState") ) { return hx::Val( switchState_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateInput") ) { return hx::Val( updateInput_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_accumulator") ) { return hx::Val( _accumulator ); }
		if (HX_FIELD_EQ(inName,"_stepSeconds") ) { return hx::Val( _stepSeconds ); }
		if (HX_FIELD_EQ(inName,"onEnterFrame") ) { return hx::Val( onEnterFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_initialState") ) { return hx::Val( _initialState ); }
		if (HX_FIELD_EQ(inName,"postProcesses") ) { return hx::Val( postProcesses ); }
		if (HX_FIELD_EQ(inName,"updateElapsed") ) { return hx::Val( updateElapsed_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"filtersEnabled") ) { return hx::Val( filtersEnabled ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_inputContainer") ) { return hx::Val( _inputContainer ); }
		if (HX_FIELD_EQ(inName,"_requestedState") ) { return hx::Val( _requestedState ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_gameJustStarted") ) { return hx::Val( _gameJustStarted ); }
		if (HX_FIELD_EQ(inName,"_maxAccumulation") ) { return hx::Val( _maxAccumulation ); }
		if (HX_FIELD_EQ(inName,"_customSoundTray") ) { return hx::Val( _customSoundTray ); }
		if (HX_FIELD_EQ(inName,"_startFullscreen") ) { return hx::Val( _startFullscreen ); }
		if (HX_FIELD_EQ(inName,"postProcessLayer") ) { return hx::Val( postProcessLayer ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_onFocusFiredOnce") ) { return hx::Val( _onFocusFiredOnce ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"focusLostFramerate") ) { return hx::Val( focusLostFramerate ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"handleReplayRequests") ) { return hx::Val( handleReplayRequests_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxGame_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"ticks") ) { ticks=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_state") ) { _state=inValue.Cast<  ::flixel::FlxState >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_total") ) { _total=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_stepMS") ) { _stepMS=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"debugger") ) { debugger=inValue.Cast<  ::flixel::_hx_system::debug::FlxDebugger >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_filters") ) { _filters=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"getTimer") ) { getTimer=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"soundTray") ) { soundTray=inValue.Cast<  ::flixel::_hx_system::ui::FlxSoundTray >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_startTime") ) { _startTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_elapsedMS") ) { _elapsedMS=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lostFocus") ) { _lostFocus=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_resetGame") ) { _resetGame=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_skipSplash") ) { _skipSplash=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_accumulator") ) { _accumulator=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_stepSeconds") ) { _stepSeconds=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_initialState") ) { _initialState=inValue.Cast< hx::Class >(); return inValue; }
		if (HX_FIELD_EQ(inName,"postProcesses") ) { postProcesses=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"filtersEnabled") ) { filtersEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_inputContainer") ) { _inputContainer=inValue.Cast<  ::openfl::_legacy::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_requestedState") ) { _requestedState=inValue.Cast<  ::flixel::FlxState >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_gameJustStarted") ) { _gameJustStarted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_maxAccumulation") ) { _maxAccumulation=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_customSoundTray") ) { _customSoundTray=inValue.Cast< hx::Class >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_startFullscreen") ) { _startFullscreen=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"postProcessLayer") ) { postProcessLayer=inValue.Cast<  ::openfl::_legacy::display::Sprite >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_onFocusFiredOnce") ) { _onFocusFiredOnce=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"focusLostFramerate") ) { focusLostFramerate=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxGame_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("focusLostFramerate","\x11","\xa8","\xf2","\xda"));
	outFields->push(HX_HCSTRING("soundTray","\x65","\x62","\xd1","\x57"));
	outFields->push(HX_HCSTRING("debugger","\x21","\x24","\xeb","\x90"));
	outFields->push(HX_HCSTRING("ticks","\x76","\x2e","\x2e","\x10"));
	outFields->push(HX_HCSTRING("filtersEnabled","\x06","\x08","\x9b","\x18"));
	outFields->push(HX_HCSTRING("_gameJustStarted","\x24","\xcc","\x52","\x15"));
	outFields->push(HX_HCSTRING("_initialState","\xcc","\x09","\x8a","\x2a"));
	outFields->push(HX_HCSTRING("_state","\x52","\xbd","\xf2","\x7f"));
	outFields->push(HX_HCSTRING("_total","\x05","\x9b","\x19","\x10"));
	outFields->push(HX_HCSTRING("_startTime","\x50","\xc1","\x92","\x61"));
	outFields->push(HX_HCSTRING("_accumulator","\x47","\xf7","\xa7","\x3a"));
	outFields->push(HX_HCSTRING("_elapsedMS","\x63","\xde","\xe6","\xb9"));
	outFields->push(HX_HCSTRING("_stepMS","\x51","\xa7","\x14","\x77"));
	outFields->push(HX_HCSTRING("_stepSeconds","\x94","\x66","\xe1","\xd2"));
	outFields->push(HX_HCSTRING("_maxAccumulation","\x8a","\x43","\xd9","\xcd"));
	outFields->push(HX_HCSTRING("_lostFocus","\x15","\x47","\x9b","\xcd"));
	outFields->push(HX_HCSTRING("_filters","\x3c","\xfb","\xfe","\x42"));
	outFields->push(HX_HCSTRING("_onFocusFiredOnce","\x75","\x65","\x64","\xfb"));
	outFields->push(HX_HCSTRING("_inputContainer","\x76","\x08","\x99","\x47"));
	outFields->push(HX_HCSTRING("_customSoundTray","\xf5","\xfe","\x64","\x5b"));
	outFields->push(HX_HCSTRING("_skipSplash","\x65","\x42","\x26","\xfa"));
	outFields->push(HX_HCSTRING("_startFullscreen","\xbe","\x03","\xce","\x18"));
	outFields->push(HX_HCSTRING("_requestedState","\x62","\x56","\x37","\x70"));
	outFields->push(HX_HCSTRING("_resetGame","\x22","\x79","\xed","\xe5"));
	outFields->push(HX_HCSTRING("postProcessLayer","\x62","\xfd","\xc8","\xec"));
	outFields->push(HX_HCSTRING("postProcesses","\x1d","\x84","\xbe","\x80"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxGame_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FlxGame_obj,focusLostFramerate),HX_HCSTRING("focusLostFramerate","\x11","\xa8","\xf2","\xda")},
	{hx::fsObject /*::flixel::_hx_system::ui::FlxSoundTray*/ ,(int)offsetof(FlxGame_obj,soundTray),HX_HCSTRING("soundTray","\x65","\x62","\xd1","\x57")},
	{hx::fsObject /*::flixel::_hx_system::debug::FlxDebugger*/ ,(int)offsetof(FlxGame_obj,debugger),HX_HCSTRING("debugger","\x21","\x24","\xeb","\x90")},
	{hx::fsInt,(int)offsetof(FlxGame_obj,ticks),HX_HCSTRING("ticks","\x76","\x2e","\x2e","\x10")},
	{hx::fsBool,(int)offsetof(FlxGame_obj,filtersEnabled),HX_HCSTRING("filtersEnabled","\x06","\x08","\x9b","\x18")},
	{hx::fsBool,(int)offsetof(FlxGame_obj,_gameJustStarted),HX_HCSTRING("_gameJustStarted","\x24","\xcc","\x52","\x15")},
	{hx::fsObject /*::hx::Class*/ ,(int)offsetof(FlxGame_obj,_initialState),HX_HCSTRING("_initialState","\xcc","\x09","\x8a","\x2a")},
	{hx::fsObject /*::flixel::FlxState*/ ,(int)offsetof(FlxGame_obj,_state),HX_HCSTRING("_state","\x52","\xbd","\xf2","\x7f")},
	{hx::fsInt,(int)offsetof(FlxGame_obj,_total),HX_HCSTRING("_total","\x05","\x9b","\x19","\x10")},
	{hx::fsInt,(int)offsetof(FlxGame_obj,_startTime),HX_HCSTRING("_startTime","\x50","\xc1","\x92","\x61")},
	{hx::fsFloat,(int)offsetof(FlxGame_obj,_accumulator),HX_HCSTRING("_accumulator","\x47","\xf7","\xa7","\x3a")},
	{hx::fsFloat,(int)offsetof(FlxGame_obj,_elapsedMS),HX_HCSTRING("_elapsedMS","\x63","\xde","\xe6","\xb9")},
	{hx::fsFloat,(int)offsetof(FlxGame_obj,_stepMS),HX_HCSTRING("_stepMS","\x51","\xa7","\x14","\x77")},
	{hx::fsFloat,(int)offsetof(FlxGame_obj,_stepSeconds),HX_HCSTRING("_stepSeconds","\x94","\x66","\xe1","\xd2")},
	{hx::fsFloat,(int)offsetof(FlxGame_obj,_maxAccumulation),HX_HCSTRING("_maxAccumulation","\x8a","\x43","\xd9","\xcd")},
	{hx::fsBool,(int)offsetof(FlxGame_obj,_lostFocus),HX_HCSTRING("_lostFocus","\x15","\x47","\x9b","\xcd")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxGame_obj,_filters),HX_HCSTRING("_filters","\x3c","\xfb","\xfe","\x42")},
	{hx::fsBool,(int)offsetof(FlxGame_obj,_onFocusFiredOnce),HX_HCSTRING("_onFocusFiredOnce","\x75","\x65","\x64","\xfb")},
	{hx::fsObject /*::openfl::_legacy::display::Sprite*/ ,(int)offsetof(FlxGame_obj,_inputContainer),HX_HCSTRING("_inputContainer","\x76","\x08","\x99","\x47")},
	{hx::fsObject /*::hx::Class*/ ,(int)offsetof(FlxGame_obj,_customSoundTray),HX_HCSTRING("_customSoundTray","\xf5","\xfe","\x64","\x5b")},
	{hx::fsBool,(int)offsetof(FlxGame_obj,_skipSplash),HX_HCSTRING("_skipSplash","\x65","\x42","\x26","\xfa")},
	{hx::fsBool,(int)offsetof(FlxGame_obj,_startFullscreen),HX_HCSTRING("_startFullscreen","\xbe","\x03","\xce","\x18")},
	{hx::fsObject /*::flixel::FlxState*/ ,(int)offsetof(FlxGame_obj,_requestedState),HX_HCSTRING("_requestedState","\x62","\x56","\x37","\x70")},
	{hx::fsBool,(int)offsetof(FlxGame_obj,_resetGame),HX_HCSTRING("_resetGame","\x22","\x79","\xed","\xe5")},
	{hx::fsObject /*::openfl::_legacy::display::Sprite*/ ,(int)offsetof(FlxGame_obj,postProcessLayer),HX_HCSTRING("postProcessLayer","\x62","\xfd","\xc8","\xec")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxGame_obj,postProcesses),HX_HCSTRING("postProcesses","\x1d","\x84","\xbe","\x80")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxGame_obj,getTimer),HX_HCSTRING("getTimer","\x4f","\xcf","\x0c","\x70")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxGame_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxGame_obj_sMemberFields[] = {
	HX_HCSTRING("focusLostFramerate","\x11","\xa8","\xf2","\xda"),
	HX_HCSTRING("soundTray","\x65","\x62","\xd1","\x57"),
	HX_HCSTRING("debugger","\x21","\x24","\xeb","\x90"),
	HX_HCSTRING("ticks","\x76","\x2e","\x2e","\x10"),
	HX_HCSTRING("filtersEnabled","\x06","\x08","\x9b","\x18"),
	HX_HCSTRING("_gameJustStarted","\x24","\xcc","\x52","\x15"),
	HX_HCSTRING("_initialState","\xcc","\x09","\x8a","\x2a"),
	HX_HCSTRING("_state","\x52","\xbd","\xf2","\x7f"),
	HX_HCSTRING("_total","\x05","\x9b","\x19","\x10"),
	HX_HCSTRING("_startTime","\x50","\xc1","\x92","\x61"),
	HX_HCSTRING("_accumulator","\x47","\xf7","\xa7","\x3a"),
	HX_HCSTRING("_elapsedMS","\x63","\xde","\xe6","\xb9"),
	HX_HCSTRING("_stepMS","\x51","\xa7","\x14","\x77"),
	HX_HCSTRING("_stepSeconds","\x94","\x66","\xe1","\xd2"),
	HX_HCSTRING("_maxAccumulation","\x8a","\x43","\xd9","\xcd"),
	HX_HCSTRING("_lostFocus","\x15","\x47","\x9b","\xcd"),
	HX_HCSTRING("_filters","\x3c","\xfb","\xfe","\x42"),
	HX_HCSTRING("_onFocusFiredOnce","\x75","\x65","\x64","\xfb"),
	HX_HCSTRING("_inputContainer","\x76","\x08","\x99","\x47"),
	HX_HCSTRING("_customSoundTray","\xf5","\xfe","\x64","\x5b"),
	HX_HCSTRING("_skipSplash","\x65","\x42","\x26","\xfa"),
	HX_HCSTRING("_startFullscreen","\xbe","\x03","\xce","\x18"),
	HX_HCSTRING("_requestedState","\x62","\x56","\x37","\x70"),
	HX_HCSTRING("_resetGame","\x22","\x79","\xed","\xe5"),
	HX_HCSTRING("postProcessLayer","\x62","\xfd","\xc8","\xec"),
	HX_HCSTRING("postProcesses","\x1d","\x84","\xbe","\x80"),
	HX_HCSTRING("setFilters","\x39","\xc6","\x25","\x5c"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("onFocus","\x39","\xfe","\xc6","\x9a"),
	HX_HCSTRING("onFocusLost","\xbd","\xe4","\x85","\x41"),
	HX_HCSTRING("onResize","\x73","\x50","\x28","\xe8"),
	HX_HCSTRING("resizeGame","\x06","\x84","\x99","\xb8"),
	HX_HCSTRING("onEnterFrame","\xf4","\xa5","\x93","\xda"),
	HX_HCSTRING("resetGame","\x61","\xfd","\x4a","\x8a"),
	HX_HCSTRING("switchState","\x7d","\x07","\x8b","\x77"),
	HX_HCSTRING("gameStart","\x10","\x63","\x26","\xb9"),
	HX_HCSTRING("step","\x4c","\xe7","\x5b","\x4c"),
	HX_HCSTRING("handleReplayRequests","\x53","\x56","\x6b","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateElapsed","\x33","\xfd","\x2e","\x86"),
	HX_HCSTRING("updateInput","\x41","\x2d","\xb6","\xa3"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("getTicks","\x00","\x3e","\x05","\x70"),
	HX_HCSTRING("getTimer","\x4f","\xcf","\x0c","\x70"),
	::String(null()) };

static void FlxGame_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxGame_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxGame_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxGame_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxGame_obj::__mClass;

void FlxGame_obj::__register()
{
	hx::Object *dummy = new FlxGame_obj;
	FlxGame_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.FlxGame","\x52","\xad","\x0b","\x55");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxGame_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxGame_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxGame_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxGame_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxGame_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxGame_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
