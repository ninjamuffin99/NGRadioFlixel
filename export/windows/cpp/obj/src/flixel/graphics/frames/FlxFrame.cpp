// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_util_LabelValuePair
#include <flixel/util/FlxPool_flixel_util_LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_haxe_ds_ArraySort
#include <haxe/ds/ArraySort.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BlendMode
#include <openfl/_legacy/display/BlendMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_ColorTransform
#include <openfl/_legacy/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_19_new,"flixel.graphics.frames.FlxFrame","new",0x06ad24e4,"flixel.graphics.frames.FlxFrame.new","flixel/graphics/frames/FlxFrame.hx",19,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_115_cacheFrameMatrix,"flixel.graphics.frames.FlxFrame","cacheFrameMatrix",0xffbbac28,"flixel.graphics.frames.FlxFrame.cacheFrameMatrix","flixel/graphics/frames/FlxFrame.hx",115,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_145_prepareBlitMatrix,"flixel.graphics.frames.FlxFrame","prepareBlitMatrix",0xbf3c9041,"flixel.graphics.frames.FlxFrame.prepareBlitMatrix","flixel/graphics/frames/FlxFrame.hx",145,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_178_rotateAndFlip,"flixel.graphics.frames.FlxFrame","rotateAndFlip",0x835ac58d,"flixel.graphics.frames.FlxFrame.rotateAndFlip","flixel/graphics/frames/FlxFrame.hx",178,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_228_prepareTransformedBlitMatrix,"flixel.graphics.frames.FlxFrame","prepareTransformedBlitMatrix",0xc5ea2af6,"flixel.graphics.frames.FlxFrame.prepareTransformedBlitMatrix","flixel/graphics/frames/FlxFrame.hx",228,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_244_prepareMatrix,"flixel.graphics.frames.FlxFrame","prepareMatrix",0xbf883cac,"flixel.graphics.frames.FlxFrame.prepareMatrix","flixel/graphics/frames/FlxFrame.hx",244,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_268_fillBlitMatrix,"flixel.graphics.frames.FlxFrame","fillBlitMatrix",0xa3605eb5,"flixel.graphics.frames.FlxFrame.fillBlitMatrix","flixel/graphics/frames/FlxFrame.hx",268,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_292_paint,"flixel.graphics.frames.FlxFrame","paint",0x0c093522,"flixel.graphics.frames.FlxFrame.paint","flixel/graphics/frames/FlxFrame.hx",292,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_340_paintRotatedAndFlipped,"flixel.graphics.frames.FlxFrame","paintRotatedAndFlipped",0x8f0fb1b2,"flixel.graphics.frames.FlxFrame.paintRotatedAndFlipped","flixel/graphics/frames/FlxFrame.hx",340,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_381_checkInputBitmap,"flixel.graphics.frames.FlxFrame","checkInputBitmap",0x11e1b8ad,"flixel.graphics.frames.FlxFrame.checkInputBitmap","flixel/graphics/frames/FlxFrame.hx",381,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_416_getDrawFrameRect,"flixel.graphics.frames.FlxFrame","getDrawFrameRect",0x7930f1d3,"flixel.graphics.frames.FlxFrame.getDrawFrameRect","flixel/graphics/frames/FlxFrame.hx",416,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_437_subFrameTo,"flixel.graphics.frames.FlxFrame","subFrameTo",0x37199964,"flixel.graphics.frames.FlxFrame.subFrameTo","flixel/graphics/frames/FlxFrame.hx",437,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_525_setBorderTo,"flixel.graphics.frames.FlxFrame","setBorderTo",0x0ba0ebcd,"flixel.graphics.frames.FlxFrame.setBorderTo","flixel/graphics/frames/FlxFrame.hx",525,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_542_clipTo,"flixel.graphics.frames.FlxFrame","clipTo",0x9ecb6267,"flixel.graphics.frames.FlxFrame.clipTo","flixel/graphics/frames/FlxFrame.hx",542,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_627_copyTo,"flixel.graphics.frames.FlxFrame","copyTo",0x5da6728c,"flixel.graphics.frames.FlxFrame.copyTo","flixel/graphics/frames/FlxFrame.hx",627,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_651_destroy,"flixel.graphics.frames.FlxFrame","destroy",0x74fe137e,"flixel.graphics.frames.FlxFrame.destroy","flixel/graphics/frames/FlxFrame.hx",651,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_664_toString,"flixel.graphics.frames.FlxFrame","toString",0x50e09da8,"flixel.graphics.frames.FlxFrame.toString","flixel/graphics/frames/FlxFrame.hx",664,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_669_set_frame,"flixel.graphics.frames.FlxFrame","set_frame",0x789f5014,"flixel.graphics.frames.FlxFrame.set_frame","flixel/graphics/frames/FlxFrame.hx",669,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_33_sort,"flixel.graphics.frames.FlxFrame","sort",0xd428c65a,"flixel.graphics.frames.FlxFrame.sort","flixel/graphics/frames/FlxFrame.hx",33,0x6c7f608b)
HX_LOCAL_STACK_FRAME(_hx_pos_5df8bdd839d6a258_37_sortByName,"flixel.graphics.frames.FlxFrame","sortByName",0xdd6fa5bc,"flixel.graphics.frames.FlxFrame.sortByName","flixel/graphics/frames/FlxFrame.hx",37,0x6c7f608b)
namespace flixel{
namespace graphics{
namespace frames{

void FlxFrame_obj::__construct( ::flixel::graphics::FlxGraphic parent,hx::Null< int >  __o_angle,hx::Null< bool >  __o_flipX,hx::Null< bool >  __o_flipY){
int angle = __o_angle.Default(0);
bool flipX = __o_flipX.Default(false);
bool flipY = __o_flipY.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_5df8bdd839d6a258_19_new)
HXLINE(  24)		this->matrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  23)		this->rect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  22)		this->point2 =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  21)		this->point1 =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  97)		this->parent = parent;
HXLINE(  98)		this->angle = angle;
HXLINE(  99)		this->flipX = flipX;
HXLINE( 100)		this->flipY = flipY;
HXLINE( 102)		this->type = (int)0;
HXLINE( 104)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 104)		point->_inPool = false;
HXDLIN( 104)		this->sourceSize = point;
HXLINE( 105)		 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 105)		point1->_inPool = false;
HXDLIN( 105)		this->offset = point1;
HXLINE( 107)		::Array< Float > this1 = ::Array_obj< Float >::__new((int)6);
HXDLIN( 107)		this->blitMatrix = this1;
HXLINE( 108)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 109)			::Array< Float > this2 = ::Array_obj< Float >::__new((int)6);
HXDLIN( 109)			this->tileMatrix = this2;
            		}
            	}

Dynamic FlxFrame_obj::__CreateEmpty() { return new FlxFrame_obj; }

void *FlxFrame_obj::_hx_vtable = 0;

Dynamic FlxFrame_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxFrame_obj > _hx_result = new FlxFrame_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxFrame_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x76d9a1c8;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_graphics_frames_FlxFrame__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::graphics::frames::FlxFrame_obj::destroy,
};

void *FlxFrame_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_graphics_frames_FlxFrame__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void FlxFrame_obj::cacheFrameMatrix(){
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_115_cacheFrameMatrix)
HXLINE( 116)		{
HXLINE( 116)			 ::flixel::math::FlxMatrix mat = this->matrix;
HXDLIN( 116)			mat->identity();
HXDLIN( 116)			mat->translate(-(this->frame->x),-(this->frame->y));
HXDLIN( 116)			if ((this->angle == (int)90)) {
HXLINE( 116)				mat->setTo(-(mat->b),mat->a,-(mat->d),mat->c,-(mat->ty),mat->tx);
HXDLIN( 116)				mat->translate(this->frame->height,(int)0);
            			}
            			else {
HXLINE( 116)				if ((this->angle == (int)-90)) {
HXLINE( 116)					mat->setTo(mat->b,-(mat->a),mat->d,-(mat->c),mat->ty,-(mat->tx));
HXDLIN( 116)					mat->translate((int)0,this->frame->width);
            				}
            			}
HXDLIN( 116)			mat->translate(this->offset->x,this->offset->y);
            		}
HXLINE( 117)		this->blitMatrix->__unsafe_set((int)0,this->matrix->a);
HXLINE( 118)		this->blitMatrix->__unsafe_set((int)1,this->matrix->b);
HXLINE( 119)		this->blitMatrix->__unsafe_set((int)2,this->matrix->c);
HXLINE( 120)		this->blitMatrix->__unsafe_set((int)3,this->matrix->d);
HXLINE( 121)		this->blitMatrix->__unsafe_set((int)4,this->matrix->tx);
HXLINE( 122)		this->blitMatrix->__unsafe_set((int)5,this->matrix->ty);
HXLINE( 124)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 126)			{
HXLINE( 126)				 ::flixel::math::FlxMatrix mat1 = this->matrix;
HXDLIN( 126)				mat1->identity();
HXDLIN( 126)				if ((this->angle == (int)90)) {
HXLINE( 126)					mat1->setTo(-(mat1->b),mat1->a,-(mat1->d),mat1->c,-(mat1->ty),mat1->tx);
HXDLIN( 126)					mat1->translate(this->frame->height,(int)0);
            				}
            				else {
HXLINE( 126)					if ((this->angle == (int)-90)) {
HXLINE( 126)						mat1->setTo(mat1->b,-(mat1->a),mat1->d,-(mat1->c),mat1->ty,-(mat1->tx));
HXDLIN( 126)						mat1->translate((int)0,this->frame->width);
            					}
            				}
HXDLIN( 126)				mat1->translate(this->offset->x,this->offset->y);
            			}
HXLINE( 127)			this->tileMatrix->__unsafe_set((int)0,this->matrix->a);
HXLINE( 128)			this->tileMatrix->__unsafe_set((int)1,this->matrix->b);
HXLINE( 129)			this->tileMatrix->__unsafe_set((int)2,this->matrix->c);
HXLINE( 130)			this->tileMatrix->__unsafe_set((int)3,this->matrix->d);
HXLINE( 131)			this->tileMatrix->__unsafe_set((int)4,this->matrix->tx);
HXLINE( 132)			this->tileMatrix->__unsafe_set((int)5,this->matrix->ty);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxFrame_obj,cacheFrameMatrix,(void))

 ::flixel::math::FlxMatrix FlxFrame_obj::prepareBlitMatrix( ::flixel::math::FlxMatrix mat,hx::Null< bool >  __o_blit){
bool blit = __o_blit.Default(true);
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_145_prepareBlitMatrix)
HXLINE( 146)		mat->identity();
HXLINE( 148)		if (blit) {
HXLINE( 149)			mat->translate(-(this->frame->x),-(this->frame->y));
            		}
HXLINE( 151)		if ((this->angle == (int)90)) {
HXLINE( 153)			mat->setTo(-(mat->b),mat->a,-(mat->d),mat->c,-(mat->ty),mat->tx);
HXLINE( 154)			mat->translate(this->frame->height,(int)0);
            		}
            		else {
HXLINE( 156)			if ((this->angle == (int)-90)) {
HXLINE( 158)				mat->setTo(mat->b,-(mat->a),mat->d,-(mat->c),mat->ty,-(mat->tx));
HXLINE( 159)				mat->translate((int)0,this->frame->width);
            			}
            		}
HXLINE( 162)		mat->translate(this->offset->x,this->offset->y);
HXLINE( 163)		return mat;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxFrame_obj,prepareBlitMatrix,return )

 ::flixel::math::FlxMatrix FlxFrame_obj::rotateAndFlip( ::flixel::math::FlxMatrix mat,hx::Null< int >  __o_rotation,hx::Null< bool >  __o_flipX,hx::Null< bool >  __o_flipY){
int rotation = __o_rotation.Default(0);
bool flipX = __o_flipX.Default(false);
bool flipY = __o_flipY.Default(false);
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_178_rotateAndFlip)
HXLINE( 179)		int w = ::Std_obj::_hx_int(this->sourceSize->x);
HXLINE( 180)		int h = ::Std_obj::_hx_int(this->sourceSize->y);
HXLINE( 183)		if ((rotation != (int)0)) {
HXLINE( 185)			int t = w;
HXLINE( 186)			w = h;
HXLINE( 187)			h = t;
HXLINE( 189)			if ((rotation == (int)90)) {
HXLINE( 191)				mat->setTo(-(mat->b),mat->a,-(mat->d),mat->c,-(mat->ty),mat->tx);
HXLINE( 192)				mat->translate(this->sourceSize->y,(int)0);
            			}
            			else {
HXLINE( 194)				bool _hx_tmp;
HXDLIN( 194)				if ((rotation != (int)-90)) {
HXLINE( 194)					_hx_tmp = (rotation == (int)-90);
            				}
            				else {
HXLINE( 194)					_hx_tmp = true;
            				}
HXDLIN( 194)				if (_hx_tmp) {
HXLINE( 196)					mat->setTo(mat->b,-(mat->a),mat->d,-(mat->c),mat->ty,-(mat->tx));
HXLINE( 197)					mat->translate((int)0,this->sourceSize->x);
            				}
            			}
            		}
HXLINE( 202)		if (flipX) {
HXLINE( 204)			mat->scale((int)-1,(int)1);
HXLINE( 205)			mat->translate(w,(int)0);
            		}
HXLINE( 208)		if (flipY) {
HXLINE( 210)			mat->scale((int)1,(int)-1);
HXLINE( 211)			mat->translate((int)0,h);
            		}
HXLINE( 214)		return mat;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxFrame_obj,rotateAndFlip,return )

 ::flixel::math::FlxMatrix FlxFrame_obj::prepareTransformedBlitMatrix( ::flixel::math::FlxMatrix mat,hx::Null< int >  __o_rotation,hx::Null< bool >  __o_flipX,hx::Null< bool >  __o_flipY){
int rotation = __o_rotation.Default(0);
bool flipX = __o_flipX.Default(false);
bool flipY = __o_flipY.Default(false);
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_228_prepareTransformedBlitMatrix)
HXLINE( 229)		mat->a = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)0)) );
HXDLIN( 229)		mat->b = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)1)) );
HXDLIN( 229)		mat->c = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)2)) );
HXDLIN( 229)		mat->d = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)3)) );
HXDLIN( 229)		mat->tx = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)4)) );
HXDLIN( 229)		mat->ty = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)5)) );
HXDLIN( 229)		mat = mat;
HXLINE( 230)		int w = ::Std_obj::_hx_int(this->sourceSize->x);
HXDLIN( 230)		int h = ::Std_obj::_hx_int(this->sourceSize->y);
HXDLIN( 230)		if ((rotation != (int)0)) {
HXLINE( 230)			int t = w;
HXDLIN( 230)			w = h;
HXDLIN( 230)			h = t;
HXDLIN( 230)			if ((rotation == (int)90)) {
HXLINE( 230)				mat->setTo(-(mat->b),mat->a,-(mat->d),mat->c,-(mat->ty),mat->tx);
HXDLIN( 230)				mat->translate(this->sourceSize->y,(int)0);
            			}
            			else {
HXLINE( 230)				bool _hx_tmp;
HXDLIN( 230)				if ((rotation != (int)-90)) {
HXLINE( 230)					_hx_tmp = (rotation == (int)-90);
            				}
            				else {
HXLINE( 230)					_hx_tmp = true;
            				}
HXDLIN( 230)				if (_hx_tmp) {
HXLINE( 230)					mat->setTo(mat->b,-(mat->a),mat->d,-(mat->c),mat->ty,-(mat->tx));
HXDLIN( 230)					mat->translate((int)0,this->sourceSize->x);
            				}
            			}
            		}
HXDLIN( 230)		if (flipX) {
HXLINE( 230)			mat->scale((int)-1,(int)1);
HXDLIN( 230)			mat->translate(w,(int)0);
            		}
HXDLIN( 230)		if (flipY) {
HXLINE( 230)			mat->scale((int)1,(int)-1);
HXDLIN( 230)			mat->translate((int)0,h);
            		}
HXDLIN( 230)		return mat;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxFrame_obj,prepareTransformedBlitMatrix,return )

 ::flixel::math::FlxMatrix FlxFrame_obj::prepareMatrix( ::flixel::math::FlxMatrix mat,hx::Null< int >  __o_rotation,hx::Null< bool >  __o_flipX,hx::Null< bool >  __o_flipY){
int rotation = __o_rotation.Default(0);
bool flipX = __o_flipX.Default(false);
bool flipY = __o_flipY.Default(false);
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_244_prepareMatrix)
HXLINE( 245)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 247)			mat->identity();
HXLINE( 248)			return mat;
            		}
HXLINE( 251)		mat->a = ( (Float)(_hx_array_unsafe_get(this->tileMatrix,(int)0)) );
HXLINE( 252)		mat->b = ( (Float)(_hx_array_unsafe_get(this->tileMatrix,(int)1)) );
HXLINE( 253)		mat->c = ( (Float)(_hx_array_unsafe_get(this->tileMatrix,(int)2)) );
HXLINE( 254)		mat->d = ( (Float)(_hx_array_unsafe_get(this->tileMatrix,(int)3)) );
HXLINE( 255)		mat->tx = ( (Float)(_hx_array_unsafe_get(this->tileMatrix,(int)4)) );
HXLINE( 256)		mat->ty = ( (Float)(_hx_array_unsafe_get(this->tileMatrix,(int)5)) );
HXLINE( 258)		bool doFlipX = (flipX != this->flipX);
HXLINE( 259)		bool doFlipY = (flipY != this->flipY);
HXLINE( 261)		bool _hx_tmp;
HXDLIN( 261)		bool _hx_tmp1;
HXDLIN( 261)		if ((rotation == (int)0)) {
HXLINE( 261)			_hx_tmp1 = !(doFlipX);
            		}
            		else {
HXLINE( 261)			_hx_tmp1 = false;
            		}
HXDLIN( 261)		if (_hx_tmp1) {
HXLINE( 261)			_hx_tmp = !(doFlipY);
            		}
            		else {
HXLINE( 261)			_hx_tmp = false;
            		}
HXDLIN( 261)		if (_hx_tmp) {
HXLINE( 262)			return mat;
            		}
HXLINE( 264)		int w = ::Std_obj::_hx_int(this->sourceSize->x);
HXDLIN( 264)		int h = ::Std_obj::_hx_int(this->sourceSize->y);
HXDLIN( 264)		if ((rotation != (int)0)) {
HXLINE( 264)			int t = w;
HXDLIN( 264)			w = h;
HXDLIN( 264)			h = t;
HXDLIN( 264)			if ((rotation == (int)90)) {
HXLINE( 264)				mat->setTo(-(mat->b),mat->a,-(mat->d),mat->c,-(mat->ty),mat->tx);
HXDLIN( 264)				mat->translate(this->sourceSize->y,(int)0);
            			}
            			else {
HXLINE( 264)				bool _hx_tmp2;
HXDLIN( 264)				if ((rotation != (int)-90)) {
HXLINE( 264)					_hx_tmp2 = (rotation == (int)-90);
            				}
            				else {
HXLINE( 264)					_hx_tmp2 = true;
            				}
HXDLIN( 264)				if (_hx_tmp2) {
HXLINE( 264)					mat->setTo(mat->b,-(mat->a),mat->d,-(mat->c),mat->ty,-(mat->tx));
HXDLIN( 264)					mat->translate((int)0,this->sourceSize->x);
            				}
            			}
            		}
HXDLIN( 264)		if (doFlipX) {
HXLINE( 264)			mat->scale((int)-1,(int)1);
HXDLIN( 264)			mat->translate(w,(int)0);
            		}
HXDLIN( 264)		if (doFlipY) {
HXLINE( 264)			mat->scale((int)1,(int)-1);
HXDLIN( 264)			mat->translate((int)0,h);
            		}
HXDLIN( 264)		return mat;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxFrame_obj,prepareMatrix,return )

 ::flixel::math::FlxMatrix FlxFrame_obj::fillBlitMatrix( ::flixel::math::FlxMatrix mat){
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_268_fillBlitMatrix)
HXLINE( 269)		mat->a = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)0)) );
HXLINE( 270)		mat->b = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)1)) );
HXLINE( 271)		mat->c = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)2)) );
HXLINE( 272)		mat->d = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)3)) );
HXLINE( 273)		mat->tx = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)4)) );
HXLINE( 274)		mat->ty = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)5)) );
HXLINE( 275)		return mat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxFrame_obj,fillBlitMatrix,return )

 ::openfl::_legacy::display::BitmapData FlxFrame_obj::paint( ::openfl::_legacy::display::BitmapData bmd, ::openfl::_legacy::geom::Point point,hx::Null< bool >  __o_mergeAlpha,hx::Null< bool >  __o_disposeIfNotEqual){
bool mergeAlpha = __o_mergeAlpha.Default(false);
bool disposeIfNotEqual = __o_disposeIfNotEqual.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_5df8bdd839d6a258_292_paint)
HXLINE( 293)		if (hx::IsNull( point )) {
HXLINE( 295)			point = this->point1;
HXLINE( 296)			point->setTo((int)0,(int)0);
            		}
HXLINE( 299)		 ::openfl::_legacy::display::BitmapData bmd1 = bmd;
HXDLIN( 299)		int w = ::Std_obj::_hx_int(this->sourceSize->x);
HXDLIN( 299)		int h = ::Std_obj::_hx_int(this->sourceSize->y);
HXDLIN( 299)		if (((int)0 != (int)0)) {
HXLINE( 299)			int t = w;
HXDLIN( 299)			w = h;
HXDLIN( 299)			h = t;
            		}
HXDLIN( 299)		bool bmd2;
HXDLIN( 299)		if (hx::IsNotNull( bmd1 )) {
HXLINE( 299)			bmd2 = disposeIfNotEqual;
            		}
            		else {
HXLINE( 299)			bmd2 = false;
            		}
HXDLIN( 299)		if (bmd2) {
HXLINE( 299)			bmd1 = ::flixel::util::FlxDestroyUtil_obj::disposeIfNotEqual(bmd1,w,h);
            		}
HXDLIN( 299)		bool bmd3;
HXDLIN( 299)		if (hx::IsNotNull( bmd1 )) {
HXLINE( 299)			bmd3 = !(mergeAlpha);
            		}
            		else {
HXLINE( 299)			bmd3 = false;
            		}
HXDLIN( 299)		if (bmd3) {
HXLINE( 299)			this->rect->setTo(point->x,point->y,w,h);
HXDLIN( 299)			bmd1->fillRect(this->rect,(int)0);
            		}
            		else {
HXLINE( 299)			if (hx::IsNull( bmd1 )) {
HXLINE( 299)				bmd1 =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,w,h,true,(int)0,null());
            			}
            		}
HXDLIN( 299)		bmd = bmd1;
HXLINE( 301)		if ((this->type == (int)2)) {
HXLINE( 302)			return bmd;
            		}
HXLINE( 304)		if ((this->angle == (int)0)) {
HXLINE( 306)			{
HXLINE( 306)				 ::flixel::math::FlxPoint _this = this->offset;
HXDLIN( 306)				 ::openfl::_legacy::geom::Point FlashPoint = this->point2;
HXDLIN( 306)				if (hx::IsNull( FlashPoint )) {
HXLINE( 306)					FlashPoint =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            				}
HXDLIN( 306)				FlashPoint->x = _this->x;
HXDLIN( 306)				FlashPoint->y = _this->y;
            			}
HXLINE( 307)			 ::openfl::_legacy::geom::Point _hx_tmp = this->point2;
HXDLIN( 307)			_hx_tmp->x = (_hx_tmp->x + point->x);
HXLINE( 308)			 ::openfl::_legacy::geom::Point _hx_tmp1 = this->point2;
HXDLIN( 308)			_hx_tmp1->y = (_hx_tmp1->y + point->y);
HXLINE( 309)			 ::openfl::_legacy::display::BitmapData _hx_tmp2 = this->parent->bitmap;
HXDLIN( 309)			 ::flixel::math::FlxRect _this1 = this->frame;
HXDLIN( 309)			 ::openfl::_legacy::geom::Rectangle FlashRect = this->rect;
HXDLIN( 309)			if (hx::IsNull( FlashRect )) {
HXLINE( 309)				FlashRect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXDLIN( 309)			FlashRect->x = _this1->x;
HXDLIN( 309)			FlashRect->y = _this1->y;
HXDLIN( 309)			FlashRect->width = _this1->width;
HXDLIN( 309)			FlashRect->height = _this1->height;
HXDLIN( 309)			bmd->copyPixels(_hx_tmp2,FlashRect,this->point2,null(),null(),mergeAlpha);
            		}
            		else {
HXLINE( 313)			{
HXLINE( 313)				 ::flixel::math::FlxMatrix mat = this->matrix;
HXDLIN( 313)				mat->a = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)0)) );
HXDLIN( 313)				mat->b = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)1)) );
HXDLIN( 313)				mat->c = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)2)) );
HXDLIN( 313)				mat->d = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)3)) );
HXDLIN( 313)				mat->tx = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)4)) );
HXDLIN( 313)				mat->ty = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)5)) );
            			}
HXLINE( 314)			this->matrix->translate(point->x,point->y);
HXLINE( 315)			 ::flixel::math::FlxMatrix mat1 = this->matrix;
HXDLIN( 315)			Float X = this->frame->x;
HXDLIN( 315)			Float Y = this->frame->y;
HXDLIN( 315)			 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 315)			point1->_inPool = false;
HXDLIN( 315)			 ::flixel::math::FlxPoint point2 = point1;
HXDLIN( 315)			point2->_weak = true;
HXDLIN( 315)			 ::flixel::math::FlxPoint p1 = point2;
HXDLIN( 315)			 ::flixel::math::FlxRect _this2 = this->frame;
HXDLIN( 315)			Float X1 = (_this2->x + _this2->width);
HXDLIN( 315)			 ::flixel::math::FlxRect _this3 = this->frame;
HXDLIN( 315)			Float Y1 = (_this3->y + _this3->height);
HXDLIN( 315)			 ::flixel::math::FlxPoint point3 = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,Y1);
HXDLIN( 315)			point3->_inPool = false;
HXDLIN( 315)			 ::flixel::math::FlxPoint point4 = point3;
HXDLIN( 315)			point4->_weak = true;
HXDLIN( 315)			 ::flixel::math::FlxPoint p2 = point4;
HXDLIN( 315)			{
HXLINE( 315)				Float x1 = (p1->x * mat1->a);
HXDLIN( 315)				Float x11 = ((x1 + (p1->y * mat1->c)) + mat1->tx);
HXDLIN( 315)				Float y1 = (p1->x * mat1->b);
HXDLIN( 315)				Float y11 = ((y1 + (p1->y * mat1->d)) + mat1->ty);
HXDLIN( 315)				p1->set(x11,y11);
            			}
HXDLIN( 315)			{
HXLINE( 315)				Float x12 = (p2->x * mat1->a);
HXDLIN( 315)				Float x13 = ((x12 + (p2->y * mat1->c)) + mat1->tx);
HXDLIN( 315)				Float y12 = (p2->x * mat1->b);
HXDLIN( 315)				Float y13 = ((y12 + (p2->y * mat1->d)) + mat1->ty);
HXDLIN( 315)				p2->set(x13,y13);
            			}
HXDLIN( 315)			 ::flixel::math::FlxRect _this4 = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 315)			_this4->x = (int)0;
HXDLIN( 315)			_this4->y = (int)0;
HXDLIN( 315)			_this4->width = (int)0;
HXDLIN( 315)			_this4->height = (int)0;
HXDLIN( 315)			 ::flixel::math::FlxRect rect = _this4;
HXDLIN( 315)			rect->_inPool = false;
HXDLIN( 315)			 ::flixel::math::FlxRect _this5 = rect;
HXDLIN( 315)			Float minX = ::Math_obj::min(p1->x,p2->x);
HXDLIN( 315)			Float minY = ::Math_obj::min(p1->y,p2->y);
HXDLIN( 315)			Float maxX = ::Math_obj::max(p1->x,p2->x);
HXDLIN( 315)			Float maxY = ::Math_obj::max(p1->y,p2->y);
HXDLIN( 315)			if (p1->_weak) {
HXLINE( 315)				p1->put();
            			}
HXDLIN( 315)			if (p2->_weak) {
HXLINE( 315)				p2->put();
            			}
HXDLIN( 315)			_this5->x = minX;
HXDLIN( 315)			_this5->y = minY;
HXDLIN( 315)			_this5->width = (maxX - minX);
HXDLIN( 315)			_this5->height = (maxY - minY);
HXDLIN( 315)			 ::flixel::math::FlxRect flxRect = _this5;
HXDLIN( 315)			{
HXLINE( 315)				 ::openfl::_legacy::geom::Rectangle FlashRect1 = this->rect;
HXDLIN( 315)				if (hx::IsNull( FlashRect1 )) {
HXLINE( 315)					FlashRect1 =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            				}
HXDLIN( 315)				FlashRect1->x = flxRect->x;
HXDLIN( 315)				FlashRect1->y = flxRect->y;
HXDLIN( 315)				FlashRect1->width = flxRect->width;
HXDLIN( 315)				FlashRect1->height = flxRect->height;
            			}
HXDLIN( 315)			if (!(flxRect->_inPool)) {
HXLINE( 315)				flxRect->_inPool = true;
HXDLIN( 315)				flxRect->_weak = false;
HXDLIN( 315)				::flixel::math::FlxRect_obj::_pool->putUnsafe(flxRect);
            			}
HXDLIN( 315)			 ::openfl::_legacy::geom::Rectangle rect1 = this->rect;
HXLINE( 316)			bmd->draw(this->parent->bitmap,this->matrix,null(),null(),rect1,null());
            		}
HXLINE( 319)		return bmd;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxFrame_obj,paint,return )

 ::openfl::_legacy::display::BitmapData FlxFrame_obj::paintRotatedAndFlipped( ::openfl::_legacy::display::BitmapData bmd, ::openfl::_legacy::geom::Point point,hx::Null< int >  __o_rotation,hx::Null< bool >  __o_flipX,hx::Null< bool >  __o_flipY,hx::Null< bool >  __o_mergeAlpha,hx::Null< bool >  __o_disposeIfNotEqual){
int rotation = __o_rotation.Default(0);
bool flipX = __o_flipX.Default(false);
bool flipY = __o_flipY.Default(false);
bool mergeAlpha = __o_mergeAlpha.Default(false);
bool disposeIfNotEqual = __o_disposeIfNotEqual.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_5df8bdd839d6a258_340_paintRotatedAndFlipped)
HXLINE( 341)		bool _hx_tmp;
HXDLIN( 341)		if ((this->type == (int)2)) {
HXLINE( 341)			_hx_tmp = (rotation == (int)0);
            		}
            		else {
HXLINE( 341)			_hx_tmp = false;
            		}
HXDLIN( 341)		if (_hx_tmp) {
HXLINE( 342)			return this->paint(bmd,point,mergeAlpha,disposeIfNotEqual);
            		}
HXLINE( 344)		if (hx::IsNull( point )) {
HXLINE( 346)			point = this->point2;
HXLINE( 347)			point->setTo((int)0,(int)0);
            		}
HXLINE( 350)		 ::openfl::_legacy::display::BitmapData bmd1 = bmd;
HXDLIN( 350)		int w = ::Std_obj::_hx_int(this->sourceSize->x);
HXDLIN( 350)		int h = ::Std_obj::_hx_int(this->sourceSize->y);
HXDLIN( 350)		if ((rotation != (int)0)) {
HXLINE( 350)			int t = w;
HXDLIN( 350)			w = h;
HXDLIN( 350)			h = t;
            		}
HXDLIN( 350)		bool bmd2;
HXDLIN( 350)		if (hx::IsNotNull( bmd1 )) {
HXLINE( 350)			bmd2 = disposeIfNotEqual;
            		}
            		else {
HXLINE( 350)			bmd2 = false;
            		}
HXDLIN( 350)		if (bmd2) {
HXLINE( 350)			bmd1 = ::flixel::util::FlxDestroyUtil_obj::disposeIfNotEqual(bmd1,w,h);
            		}
HXDLIN( 350)		bool bmd3;
HXDLIN( 350)		if (hx::IsNotNull( bmd1 )) {
HXLINE( 350)			bmd3 = !(mergeAlpha);
            		}
            		else {
HXLINE( 350)			bmd3 = false;
            		}
HXDLIN( 350)		if (bmd3) {
HXLINE( 350)			this->rect->setTo(point->x,point->y,w,h);
HXDLIN( 350)			bmd1->fillRect(this->rect,(int)0);
            		}
            		else {
HXLINE( 350)			if (hx::IsNull( bmd1 )) {
HXLINE( 350)				bmd1 =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,w,h,true,(int)0,null());
            			}
            		}
HXDLIN( 350)		bmd = bmd1;
HXLINE( 352)		if ((this->type == (int)2)) {
HXLINE( 353)			return bmd;
            		}
HXLINE( 355)		bool doFlipX = (flipX != this->flipX);
HXLINE( 356)		bool doFlipY = (flipY != this->flipY);
HXLINE( 358)		this->prepareTransformedBlitMatrix(this->matrix,rotation,doFlipX,doFlipY);
HXLINE( 359)		this->matrix->translate(point->x,point->y);
HXLINE( 360)		 ::flixel::math::FlxMatrix mat = this->matrix;
HXDLIN( 360)		Float X = this->frame->x;
HXDLIN( 360)		Float Y = this->frame->y;
HXDLIN( 360)		 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 360)		point1->_inPool = false;
HXDLIN( 360)		 ::flixel::math::FlxPoint point2 = point1;
HXDLIN( 360)		point2->_weak = true;
HXDLIN( 360)		 ::flixel::math::FlxPoint p1 = point2;
HXDLIN( 360)		 ::flixel::math::FlxRect _this = this->frame;
HXDLIN( 360)		Float X1 = (_this->x + _this->width);
HXDLIN( 360)		 ::flixel::math::FlxRect _this1 = this->frame;
HXDLIN( 360)		Float Y1 = (_this1->y + _this1->height);
HXDLIN( 360)		 ::flixel::math::FlxPoint point3 = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,Y1);
HXDLIN( 360)		point3->_inPool = false;
HXDLIN( 360)		 ::flixel::math::FlxPoint point4 = point3;
HXDLIN( 360)		point4->_weak = true;
HXDLIN( 360)		 ::flixel::math::FlxPoint p2 = point4;
HXDLIN( 360)		{
HXLINE( 360)			Float x1 = (p1->x * mat->a);
HXDLIN( 360)			Float x11 = ((x1 + (p1->y * mat->c)) + mat->tx);
HXDLIN( 360)			Float y1 = (p1->x * mat->b);
HXDLIN( 360)			Float y11 = ((y1 + (p1->y * mat->d)) + mat->ty);
HXDLIN( 360)			p1->set(x11,y11);
            		}
HXDLIN( 360)		{
HXLINE( 360)			Float x12 = (p2->x * mat->a);
HXDLIN( 360)			Float x13 = ((x12 + (p2->y * mat->c)) + mat->tx);
HXDLIN( 360)			Float y12 = (p2->x * mat->b);
HXDLIN( 360)			Float y13 = ((y12 + (p2->y * mat->d)) + mat->ty);
HXDLIN( 360)			p2->set(x13,y13);
            		}
HXDLIN( 360)		 ::flixel::math::FlxRect _this2 = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 360)		_this2->x = (int)0;
HXDLIN( 360)		_this2->y = (int)0;
HXDLIN( 360)		_this2->width = (int)0;
HXDLIN( 360)		_this2->height = (int)0;
HXDLIN( 360)		 ::flixel::math::FlxRect rect = _this2;
HXDLIN( 360)		rect->_inPool = false;
HXDLIN( 360)		 ::flixel::math::FlxRect _this3 = rect;
HXDLIN( 360)		Float minX = ::Math_obj::min(p1->x,p2->x);
HXDLIN( 360)		Float minY = ::Math_obj::min(p1->y,p2->y);
HXDLIN( 360)		Float maxX = ::Math_obj::max(p1->x,p2->x);
HXDLIN( 360)		Float maxY = ::Math_obj::max(p1->y,p2->y);
HXDLIN( 360)		if (p1->_weak) {
HXLINE( 360)			p1->put();
            		}
HXDLIN( 360)		if (p2->_weak) {
HXLINE( 360)			p2->put();
            		}
HXDLIN( 360)		_this3->x = minX;
HXDLIN( 360)		_this3->y = minY;
HXDLIN( 360)		_this3->width = (maxX - minX);
HXDLIN( 360)		_this3->height = (maxY - minY);
HXDLIN( 360)		 ::flixel::math::FlxRect flxRect = _this3;
HXDLIN( 360)		{
HXLINE( 360)			 ::openfl::_legacy::geom::Rectangle FlashRect = this->rect;
HXDLIN( 360)			if (hx::IsNull( FlashRect )) {
HXLINE( 360)				FlashRect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXDLIN( 360)			FlashRect->x = flxRect->x;
HXDLIN( 360)			FlashRect->y = flxRect->y;
HXDLIN( 360)			FlashRect->width = flxRect->width;
HXDLIN( 360)			FlashRect->height = flxRect->height;
            		}
HXDLIN( 360)		if (!(flxRect->_inPool)) {
HXLINE( 360)			flxRect->_inPool = true;
HXDLIN( 360)			flxRect->_weak = false;
HXDLIN( 360)			::flixel::math::FlxRect_obj::_pool->putUnsafe(flxRect);
            		}
HXDLIN( 360)		 ::openfl::_legacy::geom::Rectangle rect1 = this->rect;
HXLINE( 361)		bmd->draw(this->parent->bitmap,this->matrix,null(),null(),rect1,null());
HXLINE( 362)		return bmd;
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxFrame_obj,paintRotatedAndFlipped,return )

 ::openfl::_legacy::display::BitmapData FlxFrame_obj::checkInputBitmap( ::openfl::_legacy::display::BitmapData bmd, ::openfl::_legacy::geom::Point point,hx::Null< int >  __o_rotation,hx::Null< bool >  __o_mergeAlpha,hx::Null< bool >  __o_disposeIfNotEqual){
int rotation = __o_rotation.Default(0);
bool mergeAlpha = __o_mergeAlpha.Default(false);
bool disposeIfNotEqual = __o_disposeIfNotEqual.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_5df8bdd839d6a258_381_checkInputBitmap)
HXLINE( 382)		int w = ::Std_obj::_hx_int(this->sourceSize->x);
HXLINE( 383)		int h = ::Std_obj::_hx_int(this->sourceSize->y);
HXLINE( 385)		if ((rotation != (int)0)) {
HXLINE( 387)			int t = w;
HXLINE( 388)			w = h;
HXLINE( 389)			h = t;
            		}
HXLINE( 392)		bool _hx_tmp;
HXDLIN( 392)		if (hx::IsNotNull( bmd )) {
HXLINE( 392)			_hx_tmp = disposeIfNotEqual;
            		}
            		else {
HXLINE( 392)			_hx_tmp = false;
            		}
HXDLIN( 392)		if (_hx_tmp) {
HXLINE( 393)			bmd = ::flixel::util::FlxDestroyUtil_obj::disposeIfNotEqual(bmd,w,h);
            		}
HXLINE( 395)		bool _hx_tmp1;
HXDLIN( 395)		if (hx::IsNotNull( bmd )) {
HXLINE( 395)			_hx_tmp1 = !(mergeAlpha);
            		}
            		else {
HXLINE( 395)			_hx_tmp1 = false;
            		}
HXDLIN( 395)		if (_hx_tmp1) {
HXLINE( 397)			this->rect->setTo(point->x,point->y,w,h);
HXLINE( 398)			bmd->fillRect(this->rect,(int)0);
            		}
            		else {
HXLINE( 400)			if (hx::IsNull( bmd )) {
HXLINE( 402)				bmd =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,w,h,true,(int)0,null());
            			}
            		}
HXLINE( 405)		return bmd;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxFrame_obj,checkInputBitmap,return )

 ::openfl::_legacy::geom::Rectangle FlxFrame_obj::getDrawFrameRect( ::flixel::math::FlxMatrix mat){
            	HX_GC_STACKFRAME(&_hx_pos_5df8bdd839d6a258_416_getDrawFrameRect)
HXLINE( 417)		Float X = this->frame->x;
HXDLIN( 417)		Float Y = this->frame->y;
HXDLIN( 417)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 417)		point->_inPool = false;
HXDLIN( 417)		 ::flixel::math::FlxPoint point1 = point;
HXDLIN( 417)		point1->_weak = true;
HXDLIN( 417)		 ::flixel::math::FlxPoint p1 = point1;
HXLINE( 418)		 ::flixel::math::FlxRect _this = this->frame;
HXDLIN( 418)		Float X1 = (_this->x + _this->width);
HXDLIN( 418)		 ::flixel::math::FlxRect _this1 = this->frame;
HXDLIN( 418)		Float Y1 = (_this1->y + _this1->height);
HXDLIN( 418)		 ::flixel::math::FlxPoint point2 = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,Y1);
HXDLIN( 418)		point2->_inPool = false;
HXDLIN( 418)		 ::flixel::math::FlxPoint point3 = point2;
HXDLIN( 418)		point3->_weak = true;
HXDLIN( 418)		 ::flixel::math::FlxPoint p2 = point3;
HXLINE( 420)		{
HXLINE( 420)			Float x1 = (p1->x * mat->a);
HXDLIN( 420)			Float x11 = ((x1 + (p1->y * mat->c)) + mat->tx);
HXDLIN( 420)			Float y1 = (p1->x * mat->b);
HXDLIN( 420)			Float y11 = ((y1 + (p1->y * mat->d)) + mat->ty);
HXDLIN( 420)			p1->set(x11,y11);
            		}
HXLINE( 421)		{
HXLINE( 421)			Float x12 = (p2->x * mat->a);
HXDLIN( 421)			Float x13 = ((x12 + (p2->y * mat->c)) + mat->tx);
HXDLIN( 421)			Float y12 = (p2->x * mat->b);
HXDLIN( 421)			Float y13 = ((y12 + (p2->y * mat->d)) + mat->ty);
HXDLIN( 421)			p2->set(x13,y13);
            		}
HXLINE( 423)		 ::flixel::math::FlxRect _this2 = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 423)		_this2->x = (int)0;
HXDLIN( 423)		_this2->y = (int)0;
HXDLIN( 423)		_this2->width = (int)0;
HXDLIN( 423)		_this2->height = (int)0;
HXDLIN( 423)		 ::flixel::math::FlxRect rect = _this2;
HXDLIN( 423)		rect->_inPool = false;
HXDLIN( 423)		 ::flixel::math::FlxRect _this3 = rect;
HXDLIN( 423)		Float minX = ::Math_obj::min(p1->x,p2->x);
HXDLIN( 423)		Float minY = ::Math_obj::min(p1->y,p2->y);
HXDLIN( 423)		Float maxX = ::Math_obj::max(p1->x,p2->x);
HXDLIN( 423)		Float maxY = ::Math_obj::max(p1->y,p2->y);
HXDLIN( 423)		if (p1->_weak) {
HXLINE( 423)			p1->put();
            		}
HXDLIN( 423)		if (p2->_weak) {
HXLINE( 423)			p2->put();
            		}
HXDLIN( 423)		_this3->x = minX;
HXDLIN( 423)		_this3->y = minY;
HXDLIN( 423)		_this3->width = (maxX - minX);
HXDLIN( 423)		_this3->height = (maxY - minY);
HXDLIN( 423)		 ::flixel::math::FlxRect flxRect = _this3;
HXLINE( 424)		{
HXLINE( 424)			 ::openfl::_legacy::geom::Rectangle FlashRect = this->rect;
HXDLIN( 424)			if (hx::IsNull( FlashRect )) {
HXLINE( 424)				FlashRect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXDLIN( 424)			FlashRect->x = flxRect->x;
HXDLIN( 424)			FlashRect->y = flxRect->y;
HXDLIN( 424)			FlashRect->width = flxRect->width;
HXDLIN( 424)			FlashRect->height = flxRect->height;
            		}
HXLINE( 425)		if (!(flxRect->_inPool)) {
HXLINE( 425)			flxRect->_inPool = true;
HXDLIN( 425)			flxRect->_weak = false;
HXDLIN( 425)			::flixel::math::FlxRect_obj::_pool->putUnsafe(flxRect);
            		}
HXLINE( 426)		return this->rect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxFrame_obj,getDrawFrameRect,return )

 ::flixel::graphics::frames::FlxFrame FlxFrame_obj::subFrameTo( ::flixel::math::FlxRect rect, ::flixel::graphics::frames::FlxFrame frameToFill){
            	HX_GC_STACKFRAME(&_hx_pos_5df8bdd839d6a258_437_subFrameTo)
HXLINE( 438)		if (hx::IsNull( frameToFill )) {
HXLINE( 440)			frameToFill =  ::flixel::graphics::frames::FlxFrame_obj::__alloc( HX_CTX ,this->parent,this->angle,null(),null());
            		}
            		else {
HXLINE( 444)			frameToFill->parent = this->parent;
HXLINE( 445)			frameToFill->angle = this->angle;
HXLINE( 446)			frameToFill->set_frame(( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(frameToFill->frame)) ));
            		}
HXLINE( 449)		frameToFill->sourceSize->set(rect->width,rect->height);
HXLINE( 452)		if ((this->type == (int)2)) {
HXLINE( 454)			frameToFill->type = (int)2;
HXLINE( 455)			frameToFill->offset->set((int)0,(int)0);
HXLINE( 456)			return frameToFill;
            		}
HXLINE( 459)		 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 459)		_this->x = (int)0;
HXDLIN( 459)		_this->y = (int)0;
HXDLIN( 459)		_this->width = (int)0;
HXDLIN( 459)		_this->height = (int)0;
HXDLIN( 459)		 ::flixel::math::FlxRect rect1 = _this;
HXDLIN( 459)		rect1->_inPool = false;
HXDLIN( 459)		 ::flixel::math::FlxRect _this1 = rect1;
HXDLIN( 459)		_this1->width = this->frame->width;
HXDLIN( 459)		_this1->height = this->frame->height;
HXDLIN( 459)		 ::flixel::math::FlxRect clippedRect = _this1;
HXLINE( 460)		if ((this->angle != (int)0)) {
HXLINE( 462)			clippedRect->width = this->frame->height;
HXLINE( 463)			clippedRect->height = this->frame->width;
            		}
HXLINE( 466)		Float ox = ::Math_obj::max(this->offset->x,(int)0);
HXLINE( 467)		Float oy = ::Math_obj::max(this->offset->y,(int)0);
HXLINE( 469)		{
HXLINE( 469)			 ::flixel::math::FlxRect rect2 = rect;
HXDLIN( 469)			rect2->x = (rect2->x + -(ox));
HXDLIN( 469)			 ::flixel::math::FlxRect rect3 = rect;
HXDLIN( 469)			rect3->y = (rect3->y + -(oy));
            		}
HXLINE( 470)		 ::flixel::math::FlxRect frameRect = clippedRect->intersection(rect,null());
HXLINE( 471)		clippedRect = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(clippedRect)) );
HXLINE( 472)		{
HXLINE( 472)			 ::flixel::math::FlxRect rect4 = rect;
HXDLIN( 472)			rect4->x = (rect4->x + ox);
HXDLIN( 472)			 ::flixel::math::FlxRect rect5 = rect;
HXDLIN( 472)			rect5->y = (rect5->y + oy);
            		}
HXLINE( 474)		bool _hx_tmp;
HXDLIN( 474)		if ((frameRect->width != (int)0)) {
HXLINE( 474)			_hx_tmp = (frameRect->height == (int)0);
            		}
            		else {
HXLINE( 474)			_hx_tmp = true;
            		}
HXDLIN( 474)		if (_hx_tmp) {
HXLINE( 476)			frameToFill->type = (int)2;
HXLINE( 477)			{
HXLINE( 477)				frameRect->x = (int)0;
HXDLIN( 477)				frameRect->y = (int)0;
HXDLIN( 477)				frameRect->width = (int)0;
HXDLIN( 477)				frameRect->height = (int)0;
            			}
HXLINE( 478)			frameToFill->set_frame(frameRect);
HXLINE( 479)			frameToFill->offset->set((int)0,(int)0);
            		}
            		else {
HXLINE( 483)			frameToFill->type = (int)0;
HXLINE( 484)			 ::flixel::math::FlxPoint _this2 = frameToFill->offset->set(frameRect->x,frameRect->y);
HXDLIN( 484)			Float Y = rect->y;
HXDLIN( 484)			{
HXLINE( 484)				 ::flixel::math::FlxPoint _g = _this2;
HXDLIN( 484)				_g->set_x((_g->x - rect->x));
            			}
HXDLIN( 484)			{
HXLINE( 484)				 ::flixel::math::FlxPoint _g1 = _this2;
HXDLIN( 484)				_g1->set_y((_g1->y - Y));
            			}
HXDLIN( 484)			_this2->addPoint(this->offset);
HXLINE( 486)			Float X = frameRect->x;
HXDLIN( 486)			Float Y1 = frameRect->y;
HXDLIN( 486)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y1);
HXDLIN( 486)			point->_inPool = false;
HXDLIN( 486)			 ::flixel::math::FlxPoint point1 = point;
HXDLIN( 486)			point1->_weak = true;
HXDLIN( 486)			 ::flixel::math::FlxPoint p1 = point1;
HXLINE( 487)			Float X1 = (frameRect->x + frameRect->width);
HXDLIN( 487)			Float Y2 = (frameRect->y + frameRect->height);
HXDLIN( 487)			 ::flixel::math::FlxPoint point2 = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,Y2);
HXDLIN( 487)			point2->_inPool = false;
HXDLIN( 487)			 ::flixel::math::FlxPoint point3 = point2;
HXDLIN( 487)			point3->_weak = true;
HXDLIN( 487)			 ::flixel::math::FlxPoint p2 = point3;
HXLINE( 489)			this->matrix->identity();
HXLINE( 491)			if ((this->angle == (int)-90)) {
HXLINE( 493)				{
HXLINE( 493)					 ::flixel::math::FlxMatrix _this3 = this->matrix;
HXDLIN( 493)					_this3->setTo(-(_this3->b),_this3->a,-(_this3->d),_this3->c,-(_this3->ty),_this3->tx);
            				}
HXLINE( 494)				this->matrix->translate(this->frame->width,(int)0);
            			}
            			else {
HXLINE( 496)				if ((this->angle == (int)90)) {
HXLINE( 498)					{
HXLINE( 498)						 ::flixel::math::FlxMatrix _this4 = this->matrix;
HXDLIN( 498)						_this4->setTo(_this4->b,-(_this4->a),_this4->d,-(_this4->c),_this4->ty,-(_this4->tx));
            					}
HXLINE( 499)					this->matrix->translate((int)0,this->frame->height);
            				}
            			}
HXLINE( 502)			if ((this->angle != (int)0)) {
HXLINE( 504)				{
HXLINE( 504)					 ::openfl::_legacy::geom::Matrix matrix = this->matrix;
HXDLIN( 504)					Float x1 = (p1->x * matrix->a);
HXDLIN( 504)					Float x11 = ((x1 + (p1->y * matrix->c)) + matrix->tx);
HXDLIN( 504)					Float y1 = (p1->x * matrix->b);
HXDLIN( 504)					Float y11 = ((y1 + (p1->y * matrix->d)) + matrix->ty);
HXDLIN( 504)					p1->set(x11,y11);
            				}
HXLINE( 505)				{
HXLINE( 505)					 ::openfl::_legacy::geom::Matrix matrix1 = this->matrix;
HXDLIN( 505)					Float x12 = (p2->x * matrix1->a);
HXDLIN( 505)					Float x13 = ((x12 + (p2->y * matrix1->c)) + matrix1->tx);
HXDLIN( 505)					Float y12 = (p2->x * matrix1->b);
HXDLIN( 505)					Float y13 = ((y12 + (p2->y * matrix1->d)) + matrix1->ty);
HXDLIN( 505)					p2->set(x13,y13);
            				}
            			}
HXLINE( 508)			{
HXLINE( 508)				Float minX = ::Math_obj::min(p1->x,p2->x);
HXDLIN( 508)				Float minY = ::Math_obj::min(p1->y,p2->y);
HXDLIN( 508)				Float maxX = ::Math_obj::max(p1->x,p2->x);
HXDLIN( 508)				Float maxY = ::Math_obj::max(p1->y,p2->y);
HXDLIN( 508)				if (p1->_weak) {
HXLINE( 508)					p1->put();
            				}
HXDLIN( 508)				if (p2->_weak) {
HXLINE( 508)					p2->put();
            				}
HXDLIN( 508)				{
HXLINE( 508)					frameRect->x = minX;
HXDLIN( 508)					frameRect->y = minY;
HXDLIN( 508)					frameRect->width = (maxX - minX);
HXDLIN( 508)					frameRect->height = (maxY - minY);
            				}
            			}
HXLINE( 509)			{
HXLINE( 509)				 ::flixel::math::FlxRect frameRect1 = frameRect;
HXDLIN( 509)				frameRect1->x = (frameRect1->x + this->frame->x);
HXDLIN( 509)				 ::flixel::math::FlxRect frameRect2 = frameRect;
HXDLIN( 509)				frameRect2->y = (frameRect2->y + this->frame->y);
            			}
HXLINE( 510)			frameToFill->set_frame(frameRect);
HXLINE( 511)			frameToFill->cacheFrameMatrix();
            		}
HXLINE( 514)		return frameToFill;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxFrame_obj,subFrameTo,return )

 ::flixel::graphics::frames::FlxFrame FlxFrame_obj::setBorderTo( ::flixel::math::FlxPoint border, ::flixel::graphics::frames::FlxFrame frameToFill){
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_525_setBorderTo)
HXLINE( 526)		Float X = border->x;
HXDLIN( 526)		Float Y = border->y;
HXDLIN( 526)		Float Width = this->sourceSize->x;
HXDLIN( 526)		Float Width1 = (Width - ((int)2 * border->x));
HXDLIN( 526)		Float Height = this->sourceSize->y;
HXDLIN( 526)		Float Height1 = (Height - ((int)2 * border->y));
HXDLIN( 526)		 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 526)		_this->x = X;
HXDLIN( 526)		_this->y = Y;
HXDLIN( 526)		_this->width = Width1;
HXDLIN( 526)		_this->height = Height1;
HXDLIN( 526)		 ::flixel::math::FlxRect rect = _this;
HXDLIN( 526)		rect->_inPool = false;
HXDLIN( 526)		 ::flixel::math::FlxRect rect1 = rect;
HXLINE( 527)		frameToFill = this->subFrameTo(rect1,frameToFill);
HXLINE( 528)		frameToFill->name = this->name;
HXLINE( 529)		rect1 = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(rect1)) );
HXLINE( 530)		return frameToFill;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxFrame_obj,setBorderTo,return )

 ::flixel::graphics::frames::FlxFrame FlxFrame_obj::clipTo( ::flixel::math::FlxRect clip, ::flixel::graphics::frames::FlxFrame clippedFrame){
            	HX_GC_STACKFRAME(&_hx_pos_5df8bdd839d6a258_542_clipTo)
HXLINE( 543)		if (hx::IsNull( clippedFrame )) {
HXLINE( 545)			clippedFrame =  ::flixel::graphics::frames::FlxFrame_obj::__alloc( HX_CTX ,this->parent,this->angle,null(),null());
            		}
            		else {
HXLINE( 549)			clippedFrame->parent = this->parent;
HXLINE( 550)			clippedFrame->angle = this->angle;
HXLINE( 551)			clippedFrame->set_frame(( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(clippedFrame->frame)) ));
            		}
HXLINE( 554)		{
HXLINE( 554)			 ::flixel::math::FlxPoint _this = clippedFrame->sourceSize;
HXDLIN( 554)			 ::flixel::math::FlxPoint point = this->sourceSize;
HXDLIN( 554)			_this->set_x(point->x);
HXDLIN( 554)			_this->set_y(point->y);
HXDLIN( 554)			if (point->_weak) {
HXLINE( 554)				point->put();
            			}
            		}
HXLINE( 555)		clippedFrame->name = this->name;
HXLINE( 558)		if ((this->type == (int)2)) {
HXLINE( 560)			clippedFrame->type = (int)2;
HXLINE( 561)			clippedFrame->offset->set((int)0,(int)0);
HXLINE( 562)			return clippedFrame;
            		}
HXLINE( 565)		 ::flixel::math::FlxRect _this1 = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 565)		_this1->x = (int)0;
HXDLIN( 565)		_this1->y = (int)0;
HXDLIN( 565)		_this1->width = (int)0;
HXDLIN( 565)		_this1->height = (int)0;
HXDLIN( 565)		 ::flixel::math::FlxRect rect = _this1;
HXDLIN( 565)		rect->_inPool = false;
HXDLIN( 565)		 ::flixel::math::FlxRect _this2 = rect;
HXDLIN( 565)		_this2->width = this->frame->width;
HXDLIN( 565)		_this2->height = this->frame->height;
HXDLIN( 565)		 ::flixel::math::FlxRect clippedRect = _this2;
HXLINE( 566)		if ((this->angle != (int)0)) {
HXLINE( 568)			clippedRect->width = this->frame->height;
HXLINE( 569)			clippedRect->height = this->frame->width;
            		}
HXLINE( 572)		{
HXLINE( 572)			 ::flixel::math::FlxRect clip1 = clip;
HXDLIN( 572)			clip1->x = (clip1->x + -(this->offset->x));
HXDLIN( 572)			 ::flixel::math::FlxRect clip2 = clip;
HXDLIN( 572)			clip2->y = (clip2->y + -(this->offset->y));
            		}
HXLINE( 573)		 ::flixel::math::FlxRect frameRect = clippedRect->intersection(clip,null());
HXLINE( 574)		clippedRect = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(clippedRect)) );
HXLINE( 576)		bool _hx_tmp;
HXDLIN( 576)		if ((frameRect->width != (int)0)) {
HXLINE( 576)			_hx_tmp = (frameRect->height == (int)0);
            		}
            		else {
HXLINE( 576)			_hx_tmp = true;
            		}
HXDLIN( 576)		if (_hx_tmp) {
HXLINE( 578)			clippedFrame->type = (int)2;
HXLINE( 579)			{
HXLINE( 579)				frameRect->x = (int)0;
HXDLIN( 579)				frameRect->y = (int)0;
HXDLIN( 579)				frameRect->width = (int)0;
HXDLIN( 579)				frameRect->height = (int)0;
            			}
HXLINE( 580)			clippedFrame->set_frame(frameRect);
HXLINE( 581)			clippedFrame->offset->set((int)0,(int)0);
            		}
            		else {
HXLINE( 585)			clippedFrame->type = (int)0;
HXLINE( 586)			clippedFrame->offset->set(frameRect->x,frameRect->y)->addPoint(this->offset);
HXLINE( 588)			Float X = frameRect->x;
HXDLIN( 588)			Float Y = frameRect->y;
HXDLIN( 588)			 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 588)			point1->_inPool = false;
HXDLIN( 588)			 ::flixel::math::FlxPoint point2 = point1;
HXDLIN( 588)			point2->_weak = true;
HXDLIN( 588)			 ::flixel::math::FlxPoint p1 = point2;
HXLINE( 589)			Float X1 = (frameRect->x + frameRect->width);
HXDLIN( 589)			Float Y1 = (frameRect->y + frameRect->height);
HXDLIN( 589)			 ::flixel::math::FlxPoint point3 = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,Y1);
HXDLIN( 589)			point3->_inPool = false;
HXDLIN( 589)			 ::flixel::math::FlxPoint point4 = point3;
HXDLIN( 589)			point4->_weak = true;
HXDLIN( 589)			 ::flixel::math::FlxPoint p2 = point4;
HXLINE( 591)			this->matrix->identity();
HXLINE( 593)			if ((this->angle == (int)-90)) {
HXLINE( 595)				{
HXLINE( 595)					 ::flixel::math::FlxMatrix _this3 = this->matrix;
HXDLIN( 595)					_this3->setTo(-(_this3->b),_this3->a,-(_this3->d),_this3->c,-(_this3->ty),_this3->tx);
            				}
HXLINE( 596)				this->matrix->translate(this->frame->width,(int)0);
            			}
            			else {
HXLINE( 598)				if ((this->angle == (int)90)) {
HXLINE( 600)					{
HXLINE( 600)						 ::flixel::math::FlxMatrix _this4 = this->matrix;
HXDLIN( 600)						_this4->setTo(_this4->b,-(_this4->a),_this4->d,-(_this4->c),_this4->ty,-(_this4->tx));
            					}
HXLINE( 601)					this->matrix->translate((int)0,this->frame->height);
            				}
            			}
HXLINE( 604)			if ((this->angle != (int)0)) {
HXLINE( 606)				{
HXLINE( 606)					 ::openfl::_legacy::geom::Matrix matrix = this->matrix;
HXDLIN( 606)					Float x1 = (p1->x * matrix->a);
HXDLIN( 606)					Float x11 = ((x1 + (p1->y * matrix->c)) + matrix->tx);
HXDLIN( 606)					Float y1 = (p1->x * matrix->b);
HXDLIN( 606)					Float y11 = ((y1 + (p1->y * matrix->d)) + matrix->ty);
HXDLIN( 606)					p1->set(x11,y11);
            				}
HXLINE( 607)				{
HXLINE( 607)					 ::openfl::_legacy::geom::Matrix matrix1 = this->matrix;
HXDLIN( 607)					Float x12 = (p2->x * matrix1->a);
HXDLIN( 607)					Float x13 = ((x12 + (p2->y * matrix1->c)) + matrix1->tx);
HXDLIN( 607)					Float y12 = (p2->x * matrix1->b);
HXDLIN( 607)					Float y13 = ((y12 + (p2->y * matrix1->d)) + matrix1->ty);
HXDLIN( 607)					p2->set(x13,y13);
            				}
            			}
HXLINE( 610)			{
HXLINE( 610)				Float minX = ::Math_obj::min(p1->x,p2->x);
HXDLIN( 610)				Float minY = ::Math_obj::min(p1->y,p2->y);
HXDLIN( 610)				Float maxX = ::Math_obj::max(p1->x,p2->x);
HXDLIN( 610)				Float maxY = ::Math_obj::max(p1->y,p2->y);
HXDLIN( 610)				if (p1->_weak) {
HXLINE( 610)					p1->put();
            				}
HXDLIN( 610)				if (p2->_weak) {
HXLINE( 610)					p2->put();
            				}
HXDLIN( 610)				{
HXLINE( 610)					frameRect->x = minX;
HXDLIN( 610)					frameRect->y = minY;
HXDLIN( 610)					frameRect->width = (maxX - minX);
HXDLIN( 610)					frameRect->height = (maxY - minY);
            				}
            			}
HXLINE( 611)			{
HXLINE( 611)				 ::flixel::math::FlxRect frameRect1 = frameRect;
HXDLIN( 611)				frameRect1->x = (frameRect1->x + this->frame->x);
HXDLIN( 611)				 ::flixel::math::FlxRect frameRect2 = frameRect;
HXDLIN( 611)				frameRect2->y = (frameRect2->y + this->frame->y);
            			}
HXLINE( 612)			clippedFrame->set_frame(frameRect);
HXLINE( 613)			clippedFrame->cacheFrameMatrix();
            		}
HXLINE( 616)		{
HXLINE( 616)			 ::flixel::math::FlxRect clip3 = clip;
HXDLIN( 616)			clip3->x = (clip3->x + this->offset->x);
HXDLIN( 616)			 ::flixel::math::FlxRect clip4 = clip;
HXDLIN( 616)			clip4->y = (clip4->y + this->offset->y);
            		}
HXLINE( 617)		return clippedFrame;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxFrame_obj,clipTo,return )

 ::flixel::graphics::frames::FlxFrame FlxFrame_obj::copyTo( ::flixel::graphics::frames::FlxFrame clone){
            	HX_GC_STACKFRAME(&_hx_pos_5df8bdd839d6a258_627_copyTo)
HXLINE( 628)		if (hx::IsNull( clone )) {
HXLINE( 630)			clone =  ::flixel::graphics::frames::FlxFrame_obj::__alloc( HX_CTX ,this->parent,this->angle,null(),null());
            		}
            		else {
HXLINE( 634)			clone->parent = this->parent;
HXLINE( 635)			clone->angle = this->angle;
HXLINE( 636)			clone->set_frame(( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(clone->frame)) ));
            		}
HXLINE( 639)		{
HXLINE( 639)			 ::flixel::math::FlxPoint _this = clone->offset;
HXDLIN( 639)			 ::flixel::math::FlxPoint point = this->offset;
HXDLIN( 639)			_this->set_x(point->x);
HXDLIN( 639)			_this->set_y(point->y);
HXDLIN( 639)			if (point->_weak) {
HXLINE( 639)				point->put();
            			}
            		}
HXLINE( 640)		clone->flipX = this->flipX;
HXLINE( 641)		clone->flipY = this->flipY;
HXLINE( 642)		{
HXLINE( 642)			 ::flixel::math::FlxPoint _this1 = clone->sourceSize;
HXDLIN( 642)			 ::flixel::math::FlxPoint point1 = this->sourceSize;
HXDLIN( 642)			_this1->set_x(point1->x);
HXDLIN( 642)			_this1->set_y(point1->y);
HXDLIN( 642)			if (point1->_weak) {
HXLINE( 642)				point1->put();
            			}
            		}
HXLINE( 643)		 ::flixel::math::FlxRect _this2 = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 643)		_this2->x = (int)0;
HXDLIN( 643)		_this2->y = (int)0;
HXDLIN( 643)		_this2->width = (int)0;
HXDLIN( 643)		_this2->height = (int)0;
HXDLIN( 643)		 ::flixel::math::FlxRect rect = _this2;
HXDLIN( 643)		rect->_inPool = false;
HXDLIN( 643)		 ::flixel::math::FlxRect _this3 = rect;
HXDLIN( 643)		 ::flixel::math::FlxRect Rect = this->frame;
HXDLIN( 643)		_this3->x = Rect->x;
HXDLIN( 643)		_this3->y = Rect->y;
HXDLIN( 643)		_this3->width = Rect->width;
HXDLIN( 643)		_this3->height = Rect->height;
HXDLIN( 643)		if (Rect->_weak) {
HXLINE( 643)			if (!(Rect->_inPool)) {
HXLINE( 643)				Rect->_inPool = true;
HXDLIN( 643)				Rect->_weak = false;
HXDLIN( 643)				::flixel::math::FlxRect_obj::_pool->putUnsafe(Rect);
            			}
            		}
HXDLIN( 643)		clone->set_frame(_this3);
HXLINE( 644)		clone->type = this->type;
HXLINE( 645)		clone->name = this->name;
HXLINE( 646)		clone->cacheFrameMatrix();
HXLINE( 647)		return clone;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxFrame_obj,copyTo,return )

void FlxFrame_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_651_destroy)
HXLINE( 652)		this->name = null();
HXLINE( 653)		this->parent = null();
HXLINE( 654)		this->sourceSize = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->sourceSize)) );
HXLINE( 655)		this->offset = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->offset)) );
HXLINE( 656)		this->set_frame(( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->frame)) ));
HXLINE( 657)		this->uv = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->uv)) );
HXLINE( 658)		this->blitMatrix = null();
HXLINE( 659)		this->tileMatrix = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxFrame_obj,destroy,(void))

::String FlxFrame_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_664_toString)
HXLINE( 665)		 ::Dynamic value = this->name;
HXDLIN( 665)		 ::flixel::util::LabelValuePair _this = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 665)		_this->label = HX_("name",4b,72,ff,48);
HXDLIN( 665)		_this->value = value;
HXLINE( 664)		return ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(1)->init(0,_this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxFrame_obj,toString,return )

 ::flixel::math::FlxRect FlxFrame_obj::set_frame( ::flixel::math::FlxRect value){
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_669_set_frame)
HXLINE( 670)		if (hx::IsNotNull( value )) {
HXLINE( 672)			if (hx::IsNull( this->uv )) {
HXLINE( 673)				 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 673)				_this->x = (int)0;
HXDLIN( 673)				_this->y = (int)0;
HXDLIN( 673)				_this->width = (int)0;
HXDLIN( 673)				_this->height = (int)0;
HXDLIN( 673)				 ::flixel::math::FlxRect rect = _this;
HXDLIN( 673)				rect->_inPool = false;
HXDLIN( 673)				this->uv = rect;
            			}
HXLINE( 675)			{
HXLINE( 675)				 ::flixel::math::FlxRect _this1 = this->uv;
HXDLIN( 675)				Float Width = ((Float)(value->x + value->width) / (Float)this->parent->width);
HXDLIN( 675)				Float Height = ((Float)(value->y + value->height) / (Float)this->parent->height);
HXDLIN( 675)				_this1->x = ((Float)value->x / (Float)this->parent->width);
HXDLIN( 675)				_this1->y = ((Float)value->y / (Float)this->parent->height);
HXDLIN( 675)				_this1->width = Width;
HXDLIN( 675)				_this1->height = Height;
            			}
            		}
HXLINE( 678)		return (this->frame = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxFrame_obj,set_frame,return )

void FlxFrame_obj::sort(::Array< ::Dynamic> frames,int prefixLength,int postfixLength){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,int,a4,int,a3) HXARGC(2)
            		int _hx_run( ::flixel::graphics::frames::FlxFrame a1, ::flixel::graphics::frames::FlxFrame a2){
            			HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_33_sort)
HXDLIN(  33)			return ::flixel::graphics::frames::FlxFrame_obj::sortByName(a1,a2,a3,a4);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_33_sort)
HXDLIN(  33)		int a3 = prefixLength;
HXDLIN(  33)		int a4 = postfixLength;
HXDLIN(  33)		::haxe::ds::ArraySort_obj::sort(frames, ::Dynamic(new _hx_Closure_0(a4,a3)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxFrame_obj,sort,(void))

int FlxFrame_obj::sortByName( ::flixel::graphics::frames::FlxFrame frame1, ::flixel::graphics::frames::FlxFrame frame2,int prefixLength,int postfixLength){
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_37_sortByName)
HXLINE(  38)		::String name1 = frame1->name;
HXLINE(  39)		::String name2 = frame2->name;
HXLINE(  40)		 ::Dynamic num1 = ::Std_obj::parseInt(name1.substring(prefixLength,(name1.length - postfixLength)));
HXLINE(  41)		 ::Dynamic num2 = ::Std_obj::parseInt(name2.substring(prefixLength,(name2.length - postfixLength)));
HXLINE(  42)		if (hx::IsNull( num1 )) {
HXLINE(  43)			num1 = (int)0;
            		}
HXLINE(  44)		if (hx::IsNull( num2 )) {
HXLINE(  45)			num2 = (int)0;
            		}
HXLINE(  47)		return (num1 - num2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxFrame_obj,sortByName,return )


hx::ObjectPtr< FlxFrame_obj > FlxFrame_obj::__new( ::flixel::graphics::FlxGraphic parent,hx::Null< int >  __o_angle,hx::Null< bool >  __o_flipX,hx::Null< bool >  __o_flipY) {
	hx::ObjectPtr< FlxFrame_obj > __this = new FlxFrame_obj();
	__this->__construct(parent,__o_angle,__o_flipX,__o_flipY);
	return __this;
}

hx::ObjectPtr< FlxFrame_obj > FlxFrame_obj::__alloc(hx::Ctx *_hx_ctx, ::flixel::graphics::FlxGraphic parent,hx::Null< int >  __o_angle,hx::Null< bool >  __o_flipX,hx::Null< bool >  __o_flipY) {
	FlxFrame_obj *__this = (FlxFrame_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxFrame_obj), true, "flixel.graphics.frames.FlxFrame"));
	*(void **)__this = FlxFrame_obj::_hx_vtable;
	__this->__construct(parent,__o_angle,__o_flipX,__o_flipY);
	return __this;
}

FlxFrame_obj::FlxFrame_obj()
{
}

void FlxFrame_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxFrame);
	HX_MARK_MEMBER_NAME(point1,"point1");
	HX_MARK_MEMBER_NAME(point2,"point2");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(matrix,"matrix");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(frame,"frame");
	HX_MARK_MEMBER_NAME(uv,"uv");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(angle,"angle");
	HX_MARK_MEMBER_NAME(flipX,"flipX");
	HX_MARK_MEMBER_NAME(flipY,"flipY");
	HX_MARK_MEMBER_NAME(sourceSize,"sourceSize");
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(tileMatrix,"tileMatrix");
	HX_MARK_MEMBER_NAME(blitMatrix,"blitMatrix");
	HX_MARK_END_CLASS();
}

void FlxFrame_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(point1,"point1");
	HX_VISIT_MEMBER_NAME(point2,"point2");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(matrix,"matrix");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(frame,"frame");
	HX_VISIT_MEMBER_NAME(uv,"uv");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(angle,"angle");
	HX_VISIT_MEMBER_NAME(flipX,"flipX");
	HX_VISIT_MEMBER_NAME(flipY,"flipY");
	HX_VISIT_MEMBER_NAME(sourceSize,"sourceSize");
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(tileMatrix,"tileMatrix");
	HX_VISIT_MEMBER_NAME(blitMatrix,"blitMatrix");
}

hx::Val FlxFrame_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"uv") ) { return hx::Val( uv ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect ); }
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { return hx::Val( frame ); }
		if (HX_FIELD_EQ(inName,"angle") ) { return hx::Val( angle ); }
		if (HX_FIELD_EQ(inName,"flipX") ) { return hx::Val( flipX ); }
		if (HX_FIELD_EQ(inName,"flipY") ) { return hx::Val( flipY ); }
		if (HX_FIELD_EQ(inName,"paint") ) { return hx::Val( paint_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"point1") ) { return hx::Val( point1 ); }
		if (HX_FIELD_EQ(inName,"point2") ) { return hx::Val( point2 ); }
		if (HX_FIELD_EQ(inName,"matrix") ) { return hx::Val( matrix ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"offset") ) { return hx::Val( offset ); }
		if (HX_FIELD_EQ(inName,"clipTo") ) { return hx::Val( clipTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyTo") ) { return hx::Val( copyTo_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_frame") ) { return hx::Val( set_frame_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sourceSize") ) { return hx::Val( sourceSize ); }
		if (HX_FIELD_EQ(inName,"tileMatrix") ) { return hx::Val( tileMatrix ); }
		if (HX_FIELD_EQ(inName,"blitMatrix") ) { return hx::Val( blitMatrix ); }
		if (HX_FIELD_EQ(inName,"subFrameTo") ) { return hx::Val( subFrameTo_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setBorderTo") ) { return hx::Val( setBorderTo_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"rotateAndFlip") ) { return hx::Val( rotateAndFlip_dyn() ); }
		if (HX_FIELD_EQ(inName,"prepareMatrix") ) { return hx::Val( prepareMatrix_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fillBlitMatrix") ) { return hx::Val( fillBlitMatrix_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"cacheFrameMatrix") ) { return hx::Val( cacheFrameMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkInputBitmap") ) { return hx::Val( checkInputBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDrawFrameRect") ) { return hx::Val( getDrawFrameRect_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"prepareBlitMatrix") ) { return hx::Val( prepareBlitMatrix_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"paintRotatedAndFlipped") ) { return hx::Val( paintRotatedAndFlipped_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"prepareTransformedBlitMatrix") ) { return hx::Val( prepareTransformedBlitMatrix_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxFrame_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sort") ) { outValue = sort_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sortByName") ) { outValue = sortByName_dyn(); return true; }
	}
	return false;
}

hx::Val FlxFrame_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"uv") ) { uv=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frame(inValue.Cast<  ::flixel::math::FlxRect >()) );frame=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angle") ) { angle=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipX") ) { flipX=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipY") ) { flipY=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"point1") ) { point1=inValue.Cast<  ::openfl::_legacy::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"point2") ) { point2=inValue.Cast<  ::openfl::_legacy::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"matrix") ) { matrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::flixel::graphics::FlxGraphic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sourceSize") ) { sourceSize=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tileMatrix") ) { tileMatrix=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blitMatrix") ) { blitMatrix=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxFrame_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("point1","\xe1","\x11","\x2e","\xf7"));
	outFields->push(HX_HCSTRING("point2","\xe2","\x11","\x2e","\xf7"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"));
	outFields->push(HX_HCSTRING("uv","\x61","\x66","\x00","\x00"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"));
	outFields->push(HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02"));
	outFields->push(HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02"));
	outFields->push(HX_HCSTRING("sourceSize","\x3c","\x87","\xb7","\x74"));
	outFields->push(HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("tileMatrix","\x0f","\x0c","\x5f","\x20"));
	outFields->push(HX_HCSTRING("blitMatrix","\x56","\x78","\x21","\xd8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxFrame_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(int)offsetof(FlxFrame_obj,point1),HX_HCSTRING("point1","\xe1","\x11","\x2e","\xf7")},
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(int)offsetof(FlxFrame_obj,point2),HX_HCSTRING("point2","\xe2","\x11","\x2e","\xf7")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(FlxFrame_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsObject /*::flixel::math::FlxMatrix*/ ,(int)offsetof(FlxFrame_obj,matrix),HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb")},
	{hx::fsString,(int)offsetof(FlxFrame_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxFrame_obj,frame),HX_HCSTRING("frame","\x2d","\x78","\x83","\x06")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxFrame_obj,uv),HX_HCSTRING("uv","\x61","\x66","\x00","\x00")},
	{hx::fsObject /*::flixel::graphics::FlxGraphic*/ ,(int)offsetof(FlxFrame_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsInt,(int)offsetof(FlxFrame_obj,angle),HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22")},
	{hx::fsBool,(int)offsetof(FlxFrame_obj,flipX),HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02")},
	{hx::fsBool,(int)offsetof(FlxFrame_obj,flipY),HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxFrame_obj,sourceSize),HX_HCSTRING("sourceSize","\x3c","\x87","\xb7","\x74")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxFrame_obj,offset),HX_HCSTRING("offset","\x93","\x97","\x3f","\x60")},
	{hx::fsInt,(int)offsetof(FlxFrame_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(FlxFrame_obj,tileMatrix),HX_HCSTRING("tileMatrix","\x0f","\x0c","\x5f","\x20")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(FlxFrame_obj,blitMatrix),HX_HCSTRING("blitMatrix","\x56","\x78","\x21","\xd8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxFrame_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxFrame_obj_sMemberFields[] = {
	HX_HCSTRING("point1","\xe1","\x11","\x2e","\xf7"),
	HX_HCSTRING("point2","\xe2","\x11","\x2e","\xf7"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"),
	HX_HCSTRING("uv","\x61","\x66","\x00","\x00"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02"),
	HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02"),
	HX_HCSTRING("sourceSize","\x3c","\x87","\xb7","\x74"),
	HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("tileMatrix","\x0f","\x0c","\x5f","\x20"),
	HX_HCSTRING("blitMatrix","\x56","\x78","\x21","\xd8"),
	HX_HCSTRING("cacheFrameMatrix","\x2c","\x83","\xfa","\x88"),
	HX_HCSTRING("prepareBlitMatrix","\xbd","\xdc","\xf9","\x4c"),
	HX_HCSTRING("rotateAndFlip","\x09","\x24","\xe1","\x45"),
	HX_HCSTRING("prepareTransformedBlitMatrix","\xfa","\x77","\x91","\xf4"),
	HX_HCSTRING("prepareMatrix","\x28","\x9b","\x0e","\x82"),
	HX_HCSTRING("fillBlitMatrix","\xb9","\xac","\x6c","\x16"),
	HX_HCSTRING("paint","\x9e","\xb7","\x4e","\xbd"),
	HX_HCSTRING("paintRotatedAndFlipped","\xb6","\xa3","\xdf","\xc7"),
	HX_HCSTRING("checkInputBitmap","\xb1","\x8f","\x20","\x9b"),
	HX_HCSTRING("getDrawFrameRect","\xd7","\xc8","\x6f","\x02"),
	HX_HCSTRING("subFrameTo","\x68","\x95","\xdd","\xc4"),
	HX_HCSTRING("setBorderTo","\x49","\x73","\x59","\x89"),
	HX_HCSTRING("clipTo","\x6b","\x0c","\x58","\x0a"),
	HX_HCSTRING("copyTo","\x90","\x1c","\x33","\xc9"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("set_frame","\x90","\xc0","\x7d","\x2d"),
	::String(null()) };

static void FlxFrame_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxFrame_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxFrame_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxFrame_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxFrame_obj::__mClass;

static ::String FlxFrame_obj_sStaticFields[] = {
	HX_HCSTRING("sort","\x5e","\x27","\x58","\x4c"),
	HX_HCSTRING("sortByName","\xc0","\xa1","\x33","\x6b"),
	::String(null())
};

void FlxFrame_obj::__register()
{
	hx::Object *dummy = new FlxFrame_obj;
	FlxFrame_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.graphics.frames.FlxFrame","\xf2","\x22","\x40","\x51");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxFrame_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxFrame_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxFrame_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxFrame_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxFrame_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxFrame_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxFrame_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxFrame_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace graphics
} // end namespace frames
