// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSoundTray
#include <flixel/system/ui/FlxSoundTray.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetType
#include <openfl/_legacy/AssetType.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_media_Sound
#include <openfl/_legacy/media/Sound.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2d161672f440721c_15_new,"flixel.system.frontEnds.SoundFrontEnd","new",0x71610699,"flixel.system.frontEnds.SoundFrontEnd.new","flixel/system/frontEnds/SoundFrontEnd.hx",15,0x9ba4fb18)
static const int _hx_array_data_7ea9c627_1[] = {
	(int)48,(int)96,
};
static const int _hx_array_data_7ea9c627_2[] = {
	(int)189,(int)109,
};
static const int _hx_array_data_7ea9c627_3[] = {
	(int)187,(int)107,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2d161672f440721c_82_playMusic,"flixel.system.frontEnds.SoundFrontEnd","playMusic",0x3360250a,"flixel.system.frontEnds.SoundFrontEnd.playMusic","flixel/system/frontEnds/SoundFrontEnd.hx",82,0x9ba4fb18)
HX_LOCAL_STACK_FRAME(_hx_pos_2d161672f440721c_113_load,"flixel.system.frontEnds.SoundFrontEnd","load",0xc239d5cd,"flixel.system.frontEnds.SoundFrontEnd.load","flixel/system/frontEnds/SoundFrontEnd.hx",113,0x9ba4fb18)
HX_LOCAL_STACK_FRAME(_hx_pos_2d161672f440721c_150_cache,"flixel.system.frontEnds.SoundFrontEnd","cache",0xf88690bb,"flixel.system.frontEnds.SoundFrontEnd.cache","flixel/system/frontEnds/SoundFrontEnd.hx",150,0x9ba4fb18)
HX_LOCAL_STACK_FRAME(_hx_pos_2d161672f440721c_166_cacheAll,"flixel.system.frontEnds.SoundFrontEnd","cacheAll",0x49c00726,"flixel.system.frontEnds.SoundFrontEnd.cacheAll","flixel/system/frontEnds/SoundFrontEnd.hx",166,0x9ba4fb18)
HX_LOCAL_STACK_FRAME(_hx_pos_2d161672f440721c_184_play,"flixel.system.frontEnds.SoundFrontEnd","play",0xc4dc699b,"flixel.system.frontEnds.SoundFrontEnd.play","flixel/system/frontEnds/SoundFrontEnd.hx",184,0x9ba4fb18)
HX_LOCAL_STACK_FRAME(_hx_pos_2d161672f440721c_209_stream,"flixel.system.frontEnds.SoundFrontEnd","stream",0xdd72c7e7,"flixel.system.frontEnds.SoundFrontEnd.stream","flixel/system/frontEnds/SoundFrontEnd.hx",209,0x9ba4fb18)
HX_LOCAL_STACK_FRAME(_hx_pos_2d161672f440721c_216_pause,"flixel.system.frontEnds.SoundFrontEnd","pause",0x74c9cd6f,"flixel.system.frontEnds.SoundFrontEnd.pause","flixel/system/frontEnds/SoundFrontEnd.hx",216,0x9ba4fb18)
HX_LOCAL_STACK_FRAME(_hx_pos_2d161672f440721c_235_resume,"flixel.system.frontEnds.SoundFrontEnd","resume",0xd4ca1d14,"flixel.system.frontEnds.SoundFrontEnd.resume","flixel/system/frontEnds/SoundFrontEnd.hx",235,0x9ba4fb18)
HX_LOCAL_STACK_FRAME(_hx_pos_2d161672f440721c_256_destroy,"flixel.system.frontEnds.SoundFrontEnd","destroy",0x153d73b3,"flixel.system.frontEnds.SoundFrontEnd.destroy","flixel/system/frontEnds/SoundFrontEnd.hx",256,0x9ba4fb18)
HX_LOCAL_STACK_FRAME(_hx_pos_2d161672f440721c_276_toggleMuted,"flixel.system.frontEnds.SoundFrontEnd","toggleMuted",0xe215de70,"flixel.system.frontEnds.SoundFrontEnd.toggleMuted","flixel/system/frontEnds/SoundFrontEnd.hx",276,0x9ba4fb18)
HX_LOCAL_STACK_FRAME(_hx_pos_2d161672f440721c_291_changeVolume,"flixel.system.frontEnds.SoundFrontEnd","changeVolume",0x51b19e11,"flixel.system.frontEnds.SoundFrontEnd.changeVolume","flixel/system/frontEnds/SoundFrontEnd.hx",291,0x9ba4fb18)
HX_LOCAL_STACK_FRAME(_hx_pos_2d161672f440721c_303_showSoundTray,"flixel.system.frontEnds.SoundFrontEnd","showSoundTray",0x0761fd21,"flixel.system.frontEnds.SoundFrontEnd.showSoundTray","flixel/system/frontEnds/SoundFrontEnd.hx",303,0x9ba4fb18)
HX_LOCAL_STACK_FRAME(_hx_pos_2d161672f440721c_320_update,"flixel.system.frontEnds.SoundFrontEnd","update",0x534b3970,"flixel.system.frontEnds.SoundFrontEnd.update","flixel/system/frontEnds/SoundFrontEnd.hx",320,0x9ba4fb18)
HX_LOCAL_STACK_FRAME(_hx_pos_2d161672f440721c_339_onFocusLost,"flixel.system.frontEnds.SoundFrontEnd","onFocusLost",0xeb797bf6,"flixel.system.frontEnds.SoundFrontEnd.onFocusLost","flixel/system/frontEnds/SoundFrontEnd.hx",339,0x9ba4fb18)
HX_LOCAL_STACK_FRAME(_hx_pos_2d161672f440721c_356_onFocus,"flixel.system.frontEnds.SoundFrontEnd","onFocus",0x8b7e44f2,"flixel.system.frontEnds.SoundFrontEnd.onFocus","flixel/system/frontEnds/SoundFrontEnd.hx",356,0x9ba4fb18)
HX_LOCAL_STACK_FRAME(_hx_pos_2d161672f440721c_375_loadSavedPrefs,"flixel.system.frontEnds.SoundFrontEnd","loadSavedPrefs",0xc70de056,"flixel.system.frontEnds.SoundFrontEnd.loadSavedPrefs","flixel/system/frontEnds/SoundFrontEnd.hx",375,0x9ba4fb18)
HX_LOCAL_STACK_FRAME(_hx_pos_2d161672f440721c_388_set_volume,"flixel.system.frontEnds.SoundFrontEnd","set_volume",0x2e392afe,"flixel.system.frontEnds.SoundFrontEnd.set_volume","flixel/system/frontEnds/SoundFrontEnd.hx",388,0x9ba4fb18)
namespace flixel{
namespace _hx_system{
namespace frontEnds{

void SoundFrontEnd_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_2d161672f440721c_15_new)
HXLINE(  71)		this->volume = ((Float)1);
HXLINE(  67)		this->list =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  62)		this->defaultSoundGroup =  ::flixel::_hx_system::FlxSoundGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  58)		this->defaultMusicGroup =  ::flixel::_hx_system::FlxSoundGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  53)		this->soundTrayEnabled = true;
HXLINE(  46)		this->muteKeys = ::Array_obj< int >::fromData( _hx_array_data_7ea9c627_1,2);
HXLINE(  41)		this->volumeDownKeys = ::Array_obj< int >::fromData( _hx_array_data_7ea9c627_2,2);
HXLINE(  36)		this->volumeUpKeys = ::Array_obj< int >::fromData( _hx_array_data_7ea9c627_3,2);
HXLINE(  24)		this->muted = false;
HXLINE( 312)		this->loadSavedPrefs();
            	}

Dynamic SoundFrontEnd_obj::__CreateEmpty() { return new SoundFrontEnd_obj; }

void *SoundFrontEnd_obj::_hx_vtable = 0;

Dynamic SoundFrontEnd_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SoundFrontEnd_obj > _hx_result = new SoundFrontEnd_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SoundFrontEnd_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6fb763eb;
}

void SoundFrontEnd_obj::playMusic( ::Dynamic Music,hx::Null< Float >  __o_Volume,hx::Null< bool >  __o_Looped, ::flixel::_hx_system::FlxSoundGroup Group){
Float Volume = __o_Volume.Default(1);
bool Looped = __o_Looped.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_2d161672f440721c_82_playMusic)
HXLINE(  83)		if (hx::IsNull( this->music )) {
HXLINE(  85)			this->music =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(  87)			if (this->music->active) {
HXLINE(  89)				 ::flixel::_hx_system::FlxSound _this = this->music;
HXDLIN(  89)				_this->cleanup(_this->autoDestroy,true);
            			}
            		}
HXLINE(  92)		this->music->loadEmbedded(Music,Looped,null(),null());
HXLINE(  93)		this->music->set_volume(Volume);
HXLINE(  94)		this->music->persist = true;
HXLINE(  95)		 ::flixel::_hx_system::FlxSoundGroup _hx_tmp;
HXDLIN(  95)		if (hx::IsNull( Group )) {
HXLINE(  95)			_hx_tmp = this->defaultMusicGroup;
            		}
            		else {
HXLINE(  95)			_hx_tmp = Group;
            		}
HXDLIN(  95)		this->music->set_group(_hx_tmp);
HXLINE(  96)		this->music->play(null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC4(SoundFrontEnd_obj,playMusic,(void))

 ::flixel::_hx_system::FlxSound SoundFrontEnd_obj::load( ::Dynamic EmbeddedSound,hx::Null< Float >  __o_Volume,hx::Null< bool >  __o_Looped, ::flixel::_hx_system::FlxSoundGroup Group,hx::Null< bool >  __o_AutoDestroy,hx::Null< bool >  __o_AutoPlay,::String URL, ::Dynamic OnComplete){
Float Volume = __o_Volume.Default(1);
bool Looped = __o_Looped.Default(false);
bool AutoDestroy = __o_AutoDestroy.Default(false);
bool AutoPlay = __o_AutoPlay.Default(false);
            	HX_STACKFRAME(&_hx_pos_2d161672f440721c_113_load)
HXLINE( 114)		bool _hx_tmp;
HXDLIN( 114)		if (hx::IsNull( EmbeddedSound )) {
HXLINE( 114)			_hx_tmp = hx::IsNull( URL );
            		}
            		else {
HXLINE( 114)			_hx_tmp = false;
            		}
HXDLIN( 114)		if (_hx_tmp) {
HXLINE( 116)			::flixel::FlxG_obj::log->advanced(HX_("FlxG.loadSound() requires either\nan embedded sound or a URL to work.",4f,8f,a4,ef),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 117)			return null();
            		}
HXLINE( 120)		 ::flixel::_hx_system::FlxSound sound = this->list->recycle(hx::ClassOf< ::flixel::_hx_system::FlxSound >(),null(),null(),null()).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE( 122)		if (hx::IsNotNull( EmbeddedSound )) {
HXLINE( 124)			sound->loadEmbedded(EmbeddedSound,Looped,AutoDestroy,OnComplete);
            		}
            		else {
HXLINE( 128)			sound->loadStream(URL,Looped,AutoDestroy,OnComplete);
            		}
HXLINE( 131)		sound->set_volume(Volume);
HXLINE( 133)		if (AutoPlay) {
HXLINE( 135)			sound->play(null(),null(),null());
            		}
HXLINE( 138)		 ::flixel::_hx_system::FlxSoundGroup _hx_tmp1;
HXDLIN( 138)		if (hx::IsNull( Group )) {
HXLINE( 138)			_hx_tmp1 = this->defaultSoundGroup;
            		}
            		else {
HXLINE( 138)			_hx_tmp1 = Group;
            		}
HXDLIN( 138)		sound->set_group(_hx_tmp1);
HXLINE( 139)		return sound;
            	}


HX_DEFINE_DYNAMIC_FUNC8(SoundFrontEnd_obj,load,return )

 ::openfl::_legacy::media::Sound SoundFrontEnd_obj::cache(::String EmbeddedSound){
            	HX_STACKFRAME(&_hx_pos_2d161672f440721c_150_cache)
HXLINE( 152)		bool _hx_tmp;
HXDLIN( 152)		if (!(::openfl::_legacy::Assets_obj::exists(EmbeddedSound,::openfl::_legacy::AssetType_obj::SOUND_dyn()))) {
HXLINE( 152)			_hx_tmp = ::openfl::_legacy::Assets_obj::exists(EmbeddedSound,::openfl::_legacy::AssetType_obj::MUSIC_dyn());
            		}
            		else {
HXLINE( 152)			_hx_tmp = true;
            		}
HXDLIN( 152)		if (_hx_tmp) {
HXLINE( 154)			return ::openfl::_legacy::Assets_obj::getSound(EmbeddedSound,true);
            		}
HXLINE( 155)		::flixel::FlxG_obj::log->advanced(((HX_("Could not find a Sound asset with an ID of '",6f,0e,1e,66) + EmbeddedSound) + HX_("'.",27,22,00,00)),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXLINE( 156)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundFrontEnd_obj,cache,return )

void SoundFrontEnd_obj::cacheAll(){
            	HX_STACKFRAME(&_hx_pos_2d161672f440721c_166_cacheAll)
HXDLIN( 166)		int _g = (int)0;
HXDLIN( 166)		::Array< ::String > _g1 = ::openfl::_legacy::Assets_obj::list(::openfl::_legacy::AssetType_obj::SOUND_dyn());
HXDLIN( 166)		while((_g < _g1->length)){
HXDLIN( 166)			::String id = _g1->__get(_g);
HXDLIN( 166)			_g = (_g + (int)1);
HXLINE( 168)			bool _hx_tmp;
HXDLIN( 168)			if (!(::openfl::_legacy::Assets_obj::exists(id,::openfl::_legacy::AssetType_obj::SOUND_dyn()))) {
HXLINE( 168)				_hx_tmp = ::openfl::_legacy::Assets_obj::exists(id,::openfl::_legacy::AssetType_obj::MUSIC_dyn());
            			}
            			else {
HXLINE( 168)				_hx_tmp = true;
            			}
HXDLIN( 168)			if (_hx_tmp) {
HXLINE( 168)				::openfl::_legacy::Assets_obj::getSound(id,true);
            			}
            			else {
HXLINE( 168)				::flixel::FlxG_obj::log->advanced(((HX_("Could not find a Sound asset with an ID of '",6f,0e,1e,66) + id) + HX_("'.",27,22,00,00)),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundFrontEnd_obj,cacheAll,(void))

 ::flixel::_hx_system::FlxSound SoundFrontEnd_obj::play( ::Dynamic EmbeddedSound,hx::Null< Float >  __o_Volume,hx::Null< bool >  __o_Looped, ::flixel::_hx_system::FlxSoundGroup Group,hx::Null< bool >  __o_AutoDestroy, ::Dynamic OnComplete){
Float Volume = __o_Volume.Default(1);
bool Looped = __o_Looped.Default(false);
bool AutoDestroy = __o_AutoDestroy.Default(true);
            	HX_STACKFRAME(&_hx_pos_2d161672f440721c_184_play)
HXLINE( 185)		if (::Std_obj::is(EmbeddedSound,hx::ClassOf< ::String >())) {
HXLINE( 187)			 ::openfl::_legacy::media::Sound EmbeddedSound1;
HXDLIN( 187)			bool EmbeddedSound2;
HXDLIN( 187)			if (!(::openfl::_legacy::Assets_obj::exists(( (::String)(EmbeddedSound) ),::openfl::_legacy::AssetType_obj::SOUND_dyn()))) {
HXLINE( 187)				EmbeddedSound2 = ::openfl::_legacy::Assets_obj::exists(( (::String)(EmbeddedSound) ),::openfl::_legacy::AssetType_obj::MUSIC_dyn());
            			}
            			else {
HXLINE( 187)				EmbeddedSound2 = true;
            			}
HXDLIN( 187)			if (EmbeddedSound2) {
HXLINE( 187)				EmbeddedSound1 = ::openfl::_legacy::Assets_obj::getSound(( (::String)(EmbeddedSound) ),true);
            			}
            			else {
HXLINE( 187)				::flixel::FlxG_obj::log->advanced(((HX_("Could not find a Sound asset with an ID of '",6f,0e,1e,66) + EmbeddedSound) + HX_("'.",27,22,00,00)),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXDLIN( 187)				EmbeddedSound1 = null();
            			}
HXDLIN( 187)			EmbeddedSound = EmbeddedSound1;
            		}
HXLINE( 189)		 ::flixel::_hx_system::FlxSound sound = this->list->recycle(hx::ClassOf< ::flixel::_hx_system::FlxSound >(),null(),null(),null()).StaticCast<  ::flixel::_hx_system::FlxSound >()->loadEmbedded(EmbeddedSound,Looped,AutoDestroy,OnComplete);
HXLINE( 190)		sound->set_volume(Volume);
HXLINE( 191)		 ::flixel::_hx_system::FlxSoundGroup _hx_tmp;
HXDLIN( 191)		if (hx::IsNull( Group )) {
HXLINE( 191)			_hx_tmp = this->defaultSoundGroup;
            		}
            		else {
HXLINE( 191)			_hx_tmp = Group;
            		}
HXDLIN( 191)		sound->set_group(_hx_tmp);
HXLINE( 192)		return sound->play(null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC6(SoundFrontEnd_obj,play,return )

 ::flixel::_hx_system::FlxSound SoundFrontEnd_obj::stream(::String URL,hx::Null< Float >  __o_Volume,hx::Null< bool >  __o_Looped, ::flixel::_hx_system::FlxSoundGroup Group,hx::Null< bool >  __o_AutoDestroy, ::Dynamic OnComplete){
Float Volume = __o_Volume.Default(1);
bool Looped = __o_Looped.Default(false);
bool AutoDestroy = __o_AutoDestroy.Default(true);
            	HX_STACKFRAME(&_hx_pos_2d161672f440721c_209_stream)
HXDLIN( 209)		return this->load(null(),Volume,Looped,null(),AutoDestroy,true,URL,OnComplete);
            	}


HX_DEFINE_DYNAMIC_FUNC6(SoundFrontEnd_obj,stream,return )

void SoundFrontEnd_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_2d161672f440721c_216_pause)
HXLINE( 217)		bool _hx_tmp;
HXDLIN( 217)		bool _hx_tmp1;
HXDLIN( 217)		if (hx::IsNotNull( this->music )) {
HXLINE( 217)			_hx_tmp1 = this->music->exists;
            		}
            		else {
HXLINE( 217)			_hx_tmp1 = false;
            		}
HXDLIN( 217)		if (_hx_tmp1) {
HXLINE( 217)			_hx_tmp = this->music->active;
            		}
            		else {
HXLINE( 217)			_hx_tmp = false;
            		}
HXDLIN( 217)		if (_hx_tmp) {
HXLINE( 219)			this->music->pause();
            		}
HXLINE( 222)		{
HXLINE( 222)			int _g = (int)0;
HXDLIN( 222)			::Array< ::Dynamic> _g1 = this->list->members;
HXDLIN( 222)			while((_g < _g1->length)){
HXLINE( 222)				 ::flixel::_hx_system::FlxSound sound = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXDLIN( 222)				_g = (_g + (int)1);
HXLINE( 224)				bool _hx_tmp2;
HXDLIN( 224)				bool _hx_tmp3;
HXDLIN( 224)				if (hx::IsNotNull( sound )) {
HXLINE( 224)					_hx_tmp3 = sound->exists;
            				}
            				else {
HXLINE( 224)					_hx_tmp3 = false;
            				}
HXDLIN( 224)				if (_hx_tmp3) {
HXLINE( 224)					_hx_tmp2 = sound->active;
            				}
            				else {
HXLINE( 224)					_hx_tmp2 = false;
            				}
HXDLIN( 224)				if (_hx_tmp2) {
HXLINE( 226)					sound->pause();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundFrontEnd_obj,pause,(void))

void SoundFrontEnd_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_2d161672f440721c_235_resume)
HXLINE( 236)		bool _hx_tmp;
HXDLIN( 236)		if (hx::IsNotNull( this->music )) {
HXLINE( 236)			_hx_tmp = this->music->exists;
            		}
            		else {
HXLINE( 236)			_hx_tmp = false;
            		}
HXDLIN( 236)		if (_hx_tmp) {
HXLINE( 238)			this->music->resume();
            		}
HXLINE( 241)		{
HXLINE( 241)			int _g = (int)0;
HXDLIN( 241)			::Array< ::Dynamic> _g1 = this->list->members;
HXDLIN( 241)			while((_g < _g1->length)){
HXLINE( 241)				 ::flixel::_hx_system::FlxSound sound = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXDLIN( 241)				_g = (_g + (int)1);
HXLINE( 243)				bool _hx_tmp1;
HXDLIN( 243)				if (hx::IsNotNull( sound )) {
HXLINE( 243)					_hx_tmp1 = sound->exists;
            				}
            				else {
HXLINE( 243)					_hx_tmp1 = false;
            				}
HXDLIN( 243)				if (_hx_tmp1) {
HXLINE( 245)					sound->resume();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundFrontEnd_obj,resume,(void))

void SoundFrontEnd_obj::destroy(hx::Null< bool >  __o_ForceDestroy){
bool ForceDestroy = __o_ForceDestroy.Default(false);
            	HX_STACKFRAME(&_hx_pos_2d161672f440721c_256_destroy)
HXLINE( 257)		bool _hx_tmp;
HXDLIN( 257)		if (hx::IsNotNull( this->music )) {
HXLINE( 257)			if (!(ForceDestroy)) {
HXLINE( 257)				_hx_tmp = !(this->music->persist);
            			}
            			else {
HXLINE( 257)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 257)			_hx_tmp = false;
            		}
HXDLIN( 257)		if (_hx_tmp) {
HXLINE( 259)			this->music->destroy();
HXLINE( 260)			this->music = null();
            		}
HXLINE( 263)		{
HXLINE( 263)			int _g = (int)0;
HXDLIN( 263)			::Array< ::Dynamic> _g1 = this->list->members;
HXDLIN( 263)			while((_g < _g1->length)){
HXLINE( 263)				 ::flixel::_hx_system::FlxSound sound = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXDLIN( 263)				_g = (_g + (int)1);
HXLINE( 265)				bool _hx_tmp1;
HXDLIN( 265)				if (hx::IsNotNull( sound )) {
HXLINE( 265)					if (!(ForceDestroy)) {
HXLINE( 265)						_hx_tmp1 = !(sound->persist);
            					}
            					else {
HXLINE( 265)						_hx_tmp1 = true;
            					}
            				}
            				else {
HXLINE( 265)					_hx_tmp1 = false;
            				}
HXDLIN( 265)				if (_hx_tmp1) {
HXLINE( 267)					sound->destroy();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundFrontEnd_obj,destroy,(void))

void SoundFrontEnd_obj::toggleMuted(){
            	HX_STACKFRAME(&_hx_pos_2d161672f440721c_276_toggleMuted)
HXLINE( 277)		this->muted = !(this->muted);
HXLINE( 279)		if (hx::IsNotNull( this->volumeHandler )) {
HXLINE( 281)			Float _hx_tmp;
HXDLIN( 281)			if (this->muted) {
HXLINE( 281)				_hx_tmp = (int)0;
            			}
            			else {
HXLINE( 281)				_hx_tmp = this->volume;
            			}
HXDLIN( 281)			this->volumeHandler(_hx_tmp);
            		}
HXLINE( 284)		this->showSoundTray();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundFrontEnd_obj,toggleMuted,(void))

void SoundFrontEnd_obj::changeVolume(Float Amount){
            	HX_STACKFRAME(&_hx_pos_2d161672f440721c_291_changeVolume)
HXLINE( 292)		this->muted = false;
HXLINE( 293)		{
HXLINE( 293)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 293)			_g->set_volume((_g->volume + Amount));
            		}
HXLINE( 294)		this->showSoundTray();
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundFrontEnd_obj,changeVolume,(void))

void SoundFrontEnd_obj::showSoundTray(){
            	HX_STACKFRAME(&_hx_pos_2d161672f440721c_303_showSoundTray)
HXDLIN( 303)		bool _hx_tmp;
HXDLIN( 303)		if (hx::IsNotNull( ::flixel::FlxG_obj::game->soundTray )) {
HXDLIN( 303)			_hx_tmp = this->soundTrayEnabled;
            		}
            		else {
HXDLIN( 303)			_hx_tmp = false;
            		}
HXDLIN( 303)		if (_hx_tmp) {
HXLINE( 305)			::flixel::FlxG_obj::game->soundTray->show(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundFrontEnd_obj,showSoundTray,(void))

void SoundFrontEnd_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_2d161672f440721c_320_update)
HXLINE( 321)		bool _hx_tmp;
HXDLIN( 321)		if (hx::IsNotNull( this->music )) {
HXLINE( 321)			_hx_tmp = this->music->active;
            		}
            		else {
HXLINE( 321)			_hx_tmp = false;
            		}
HXDLIN( 321)		if (_hx_tmp) {
HXLINE( 322)			this->music->update(elapsed);
            		}
HXLINE( 324)		bool _hx_tmp1;
HXDLIN( 324)		if (hx::IsNotNull( this->list )) {
HXLINE( 324)			_hx_tmp1 = this->list->active;
            		}
            		else {
HXLINE( 324)			_hx_tmp1 = false;
            		}
HXDLIN( 324)		if (_hx_tmp1) {
HXLINE( 325)			this->list->update(elapsed);
            		}
HXLINE( 328)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(this->muteKeys,(int)-1)) {
HXLINE( 329)			this->toggleMuted();
            		}
            		else {
HXLINE( 330)			if (::flixel::FlxG_obj::keys->checkKeyArrayState(this->volumeUpKeys,(int)-1)) {
HXLINE( 331)				this->changeVolume(((Float)0.1));
            			}
            			else {
HXLINE( 332)				if (::flixel::FlxG_obj::keys->checkKeyArrayState(this->volumeDownKeys,(int)-1)) {
HXLINE( 333)					this->changeVolume(((Float)-0.1));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundFrontEnd_obj,update,(void))

void SoundFrontEnd_obj::onFocusLost(){
            	HX_STACKFRAME(&_hx_pos_2d161672f440721c_339_onFocusLost)
HXLINE( 340)		if (hx::IsNotNull( this->music )) {
HXLINE( 342)			this->music->onFocusLost();
            		}
HXLINE( 345)		{
HXLINE( 345)			int _g = (int)0;
HXDLIN( 345)			::Array< ::Dynamic> _g1 = this->list->members;
HXDLIN( 345)			while((_g < _g1->length)){
HXLINE( 345)				 ::flixel::_hx_system::FlxSound sound = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXDLIN( 345)				_g = (_g + (int)1);
HXLINE( 347)				if (hx::IsNotNull( sound )) {
HXLINE( 349)					sound->onFocusLost();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundFrontEnd_obj,onFocusLost,(void))

void SoundFrontEnd_obj::onFocus(){
            	HX_STACKFRAME(&_hx_pos_2d161672f440721c_356_onFocus)
HXLINE( 357)		if (hx::IsNotNull( this->music )) {
HXLINE( 359)			this->music->onFocus();
            		}
HXLINE( 362)		{
HXLINE( 362)			int _g = (int)0;
HXDLIN( 362)			::Array< ::Dynamic> _g1 = this->list->members;
HXDLIN( 362)			while((_g < _g1->length)){
HXLINE( 362)				 ::flixel::_hx_system::FlxSound sound = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXDLIN( 362)				_g = (_g + (int)1);
HXLINE( 364)				if (hx::IsNotNull( sound )) {
HXLINE( 366)					sound->onFocus();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundFrontEnd_obj,onFocus,(void))

void SoundFrontEnd_obj::loadSavedPrefs(){
            	HX_STACKFRAME(&_hx_pos_2d161672f440721c_375_loadSavedPrefs)
HXLINE( 376)		if (hx::IsNotNull(  ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("volume",da,29,53,5f),hx::paccDynamic)) )) {
HXLINE( 378)			this->set_volume(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("volume",da,29,53,5f),hx::paccDynamic)) ));
            		}
HXLINE( 381)		if (hx::IsNotNull(  ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("mute",d9,6e,65,48),hx::paccDynamic)) )) {
HXLINE( 383)			this->muted = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("mute",d9,6e,65,48),hx::paccDynamic)) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundFrontEnd_obj,loadSavedPrefs,(void))

Float SoundFrontEnd_obj::set_volume(Float Volume){
            	HX_STACKFRAME(&_hx_pos_2d161672f440721c_388_set_volume)
HXLINE( 389)		Float lowerBound;
HXDLIN( 389)		if ((Volume < (int)0)) {
HXLINE( 389)			lowerBound = (int)0;
            		}
            		else {
HXLINE( 389)			lowerBound = Volume;
            		}
HXDLIN( 389)		 ::Dynamic Volume1;
HXDLIN( 389)		if ((lowerBound > (int)1)) {
HXLINE( 389)			Volume1 = (int)1;
            		}
            		else {
HXLINE( 389)			Volume1 = lowerBound;
            		}
HXDLIN( 389)		Volume = Volume1;
HXLINE( 391)		if (hx::IsNotNull( this->volumeHandler )) {
HXLINE( 393)			Float param;
HXDLIN( 393)			if (this->muted) {
HXLINE( 393)				param = (int)0;
            			}
            			else {
HXLINE( 393)				param = Volume;
            			}
HXLINE( 394)			this->volumeHandler(param);
            		}
HXLINE( 396)		return (this->volume = Volume);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundFrontEnd_obj,set_volume,return )


hx::ObjectPtr< SoundFrontEnd_obj > SoundFrontEnd_obj::__new() {
	hx::ObjectPtr< SoundFrontEnd_obj > __this = new SoundFrontEnd_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SoundFrontEnd_obj > SoundFrontEnd_obj::__alloc(hx::Ctx *_hx_ctx) {
	SoundFrontEnd_obj *__this = (SoundFrontEnd_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SoundFrontEnd_obj), true, "flixel.system.frontEnds.SoundFrontEnd"));
	*(void **)__this = SoundFrontEnd_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SoundFrontEnd_obj::SoundFrontEnd_obj()
{
}

void SoundFrontEnd_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SoundFrontEnd);
	HX_MARK_MEMBER_NAME(music,"music");
	HX_MARK_MEMBER_NAME(muted,"muted");
	HX_MARK_MEMBER_NAME(volumeHandler,"volumeHandler");
	HX_MARK_MEMBER_NAME(volumeUpKeys,"volumeUpKeys");
	HX_MARK_MEMBER_NAME(volumeDownKeys,"volumeDownKeys");
	HX_MARK_MEMBER_NAME(muteKeys,"muteKeys");
	HX_MARK_MEMBER_NAME(soundTrayEnabled,"soundTrayEnabled");
	HX_MARK_MEMBER_NAME(defaultMusicGroup,"defaultMusicGroup");
	HX_MARK_MEMBER_NAME(defaultSoundGroup,"defaultSoundGroup");
	HX_MARK_MEMBER_NAME(list,"list");
	HX_MARK_MEMBER_NAME(volume,"volume");
	HX_MARK_END_CLASS();
}

void SoundFrontEnd_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(music,"music");
	HX_VISIT_MEMBER_NAME(muted,"muted");
	HX_VISIT_MEMBER_NAME(volumeHandler,"volumeHandler");
	HX_VISIT_MEMBER_NAME(volumeUpKeys,"volumeUpKeys");
	HX_VISIT_MEMBER_NAME(volumeDownKeys,"volumeDownKeys");
	HX_VISIT_MEMBER_NAME(muteKeys,"muteKeys");
	HX_VISIT_MEMBER_NAME(soundTrayEnabled,"soundTrayEnabled");
	HX_VISIT_MEMBER_NAME(defaultMusicGroup,"defaultMusicGroup");
	HX_VISIT_MEMBER_NAME(defaultSoundGroup,"defaultSoundGroup");
	HX_VISIT_MEMBER_NAME(list,"list");
	HX_VISIT_MEMBER_NAME(volume,"volume");
}

hx::Val SoundFrontEnd_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { return hx::Val( list ); }
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn() ); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"music") ) { return hx::Val( music ); }
		if (HX_FIELD_EQ(inName,"muted") ) { return hx::Val( muted ); }
		if (HX_FIELD_EQ(inName,"cache") ) { return hx::Val( cache_dyn() ); }
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"volume") ) { return hx::Val( volume ); }
		if (HX_FIELD_EQ(inName,"stream") ) { return hx::Val( stream_dyn() ); }
		if (HX_FIELD_EQ(inName,"resume") ) { return hx::Val( resume_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return hx::Val( onFocus_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"muteKeys") ) { return hx::Val( muteKeys ); }
		if (HX_FIELD_EQ(inName,"cacheAll") ) { return hx::Val( cacheAll_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playMusic") ) { return hx::Val( playMusic_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"set_volume") ) { return hx::Val( set_volume_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"toggleMuted") ) { return hx::Val( toggleMuted_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return hx::Val( onFocusLost_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"volumeUpKeys") ) { return hx::Val( volumeUpKeys ); }
		if (HX_FIELD_EQ(inName,"changeVolume") ) { return hx::Val( changeVolume_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"volumeHandler") ) { return hx::Val( volumeHandler ); }
		if (HX_FIELD_EQ(inName,"showSoundTray") ) { return hx::Val( showSoundTray_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"volumeDownKeys") ) { return hx::Val( volumeDownKeys ); }
		if (HX_FIELD_EQ(inName,"loadSavedPrefs") ) { return hx::Val( loadSavedPrefs_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"soundTrayEnabled") ) { return hx::Val( soundTrayEnabled ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultMusicGroup") ) { return hx::Val( defaultMusicGroup ); }
		if (HX_FIELD_EQ(inName,"defaultSoundGroup") ) { return hx::Val( defaultSoundGroup ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SoundFrontEnd_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { list=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"music") ) { music=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"muted") ) { muted=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_volume(inValue.Cast< Float >()) );volume=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"muteKeys") ) { muteKeys=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"volumeUpKeys") ) { volumeUpKeys=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"volumeHandler") ) { volumeHandler=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"volumeDownKeys") ) { volumeDownKeys=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"soundTrayEnabled") ) { soundTrayEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultMusicGroup") ) { defaultMusicGroup=inValue.Cast<  ::flixel::_hx_system::FlxSoundGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultSoundGroup") ) { defaultSoundGroup=inValue.Cast<  ::flixel::_hx_system::FlxSoundGroup >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SoundFrontEnd_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("music","\xa5","\xd0","\x5a","\x10"));
	outFields->push(HX_HCSTRING("muted","\x6b","\x8f","\x5b","\x10"));
	outFields->push(HX_HCSTRING("volumeUpKeys","\x69","\xbb","\xf5","\x23"));
	outFields->push(HX_HCSTRING("volumeDownKeys","\x70","\x2f","\x58","\x0b"));
	outFields->push(HX_HCSTRING("muteKeys","\x6d","\x5d","\x88","\x16"));
	outFields->push(HX_HCSTRING("soundTrayEnabled","\x9c","\x10","\x68","\xe0"));
	outFields->push(HX_HCSTRING("defaultMusicGroup","\x7b","\x94","\xd9","\xa0"));
	outFields->push(HX_HCSTRING("defaultSoundGroup","\x11","\x80","\x9b","\xd9"));
	outFields->push(HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"));
	outFields->push(HX_HCSTRING("volume","\xda","\x29","\x53","\x5f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SoundFrontEnd_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(SoundFrontEnd_obj,music),HX_HCSTRING("music","\xa5","\xd0","\x5a","\x10")},
	{hx::fsBool,(int)offsetof(SoundFrontEnd_obj,muted),HX_HCSTRING("muted","\x6b","\x8f","\x5b","\x10")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(SoundFrontEnd_obj,volumeHandler),HX_HCSTRING("volumeHandler","\x10","\xfd","\x6f","\x5d")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(SoundFrontEnd_obj,volumeUpKeys),HX_HCSTRING("volumeUpKeys","\x69","\xbb","\xf5","\x23")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(SoundFrontEnd_obj,volumeDownKeys),HX_HCSTRING("volumeDownKeys","\x70","\x2f","\x58","\x0b")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(SoundFrontEnd_obj,muteKeys),HX_HCSTRING("muteKeys","\x6d","\x5d","\x88","\x16")},
	{hx::fsBool,(int)offsetof(SoundFrontEnd_obj,soundTrayEnabled),HX_HCSTRING("soundTrayEnabled","\x9c","\x10","\x68","\xe0")},
	{hx::fsObject /*::flixel::_hx_system::FlxSoundGroup*/ ,(int)offsetof(SoundFrontEnd_obj,defaultMusicGroup),HX_HCSTRING("defaultMusicGroup","\x7b","\x94","\xd9","\xa0")},
	{hx::fsObject /*::flixel::_hx_system::FlxSoundGroup*/ ,(int)offsetof(SoundFrontEnd_obj,defaultSoundGroup),HX_HCSTRING("defaultSoundGroup","\x11","\x80","\x9b","\xd9")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(SoundFrontEnd_obj,list),HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47")},
	{hx::fsFloat,(int)offsetof(SoundFrontEnd_obj,volume),HX_HCSTRING("volume","\xda","\x29","\x53","\x5f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SoundFrontEnd_obj_sStaticStorageInfo = 0;
#endif

static ::String SoundFrontEnd_obj_sMemberFields[] = {
	HX_HCSTRING("music","\xa5","\xd0","\x5a","\x10"),
	HX_HCSTRING("muted","\x6b","\x8f","\x5b","\x10"),
	HX_HCSTRING("volumeHandler","\x10","\xfd","\x6f","\x5d"),
	HX_HCSTRING("volumeUpKeys","\x69","\xbb","\xf5","\x23"),
	HX_HCSTRING("volumeDownKeys","\x70","\x2f","\x58","\x0b"),
	HX_HCSTRING("muteKeys","\x6d","\x5d","\x88","\x16"),
	HX_HCSTRING("soundTrayEnabled","\x9c","\x10","\x68","\xe0"),
	HX_HCSTRING("defaultMusicGroup","\x7b","\x94","\xd9","\xa0"),
	HX_HCSTRING("defaultSoundGroup","\x11","\x80","\x9b","\xd9"),
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("volume","\xda","\x29","\x53","\x5f"),
	HX_HCSTRING("playMusic","\x11","\xfe","\x3e","\x31"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("cache","\x42","\x9a","\x14","\x41"),
	HX_HCSTRING("cacheAll","\xff","\x6b","\x19","\x9a"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("stream","\x80","\x14","\x2d","\x11"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("resume","\xad","\x69","\x84","\x08"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("toggleMuted","\x37","\x47","\x22","\x38"),
	HX_HCSTRING("changeVolume","\x6a","\xe3","\x80","\x46"),
	HX_HCSTRING("showSoundTray","\xa8","\x65","\xef","\x47"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("onFocusLost","\xbd","\xe4","\x85","\x41"),
	HX_HCSTRING("onFocus","\x39","\xfe","\xc6","\x9a"),
	HX_HCSTRING("loadSavedPrefs","\xef","\xed","\x3b","\x02"),
	HX_HCSTRING("set_volume","\x17","\x38","\x58","\x53"),
	::String(null()) };

static void SoundFrontEnd_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SoundFrontEnd_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SoundFrontEnd_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SoundFrontEnd_obj::__mClass,"__mClass");
};

#endif

hx::Class SoundFrontEnd_obj::__mClass;

void SoundFrontEnd_obj::__register()
{
	hx::Object *dummy = new SoundFrontEnd_obj;
	SoundFrontEnd_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.frontEnds.SoundFrontEnd","\x27","\xc6","\xa9","\x7e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SoundFrontEnd_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SoundFrontEnd_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SoundFrontEnd_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SoundFrontEnd_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SoundFrontEnd_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SoundFrontEnd_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace frontEnds
