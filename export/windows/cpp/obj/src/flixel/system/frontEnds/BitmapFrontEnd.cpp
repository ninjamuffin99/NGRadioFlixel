// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_IAssetCache
#include <openfl/_legacy/IAssetCache.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_gl_GL
#include <openfl/_legacy/gl/GL.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_19_new,"flixel.system.frontEnds.BitmapFrontEnd","new",0x0f2331ed,"flixel.system.frontEnds.BitmapFrontEnd.new","flixel/system/frontEnds/BitmapFrontEnd.hx",19,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_48_onAssetsReload,"flixel.system.frontEnds.BitmapFrontEnd","onAssetsReload",0x7811d38e,"flixel.system.frontEnds.BitmapFrontEnd.onAssetsReload","flixel/system/frontEnds/BitmapFrontEnd.hx",48,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_64_onContext,"flixel.system.frontEnds.BitmapFrontEnd","onContext",0x0e82d7dd,"flixel.system.frontEnds.BitmapFrontEnd.onContext","flixel/system/frontEnds/BitmapFrontEnd.hx",64,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_81_dumpCache,"flixel.system.frontEnds.BitmapFrontEnd","dumpCache",0xf899b9bb,"flixel.system.frontEnds.BitmapFrontEnd.dumpCache","flixel/system/frontEnds/BitmapFrontEnd.hx",81,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_98_undumpCache,"flixel.system.frontEnds.BitmapFrontEnd","undumpCache",0xfe6eed82,"flixel.system.frontEnds.BitmapFrontEnd.undumpCache","flixel/system/frontEnds/BitmapFrontEnd.hx",98,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_117_checkCache,"flixel.system.frontEnds.BitmapFrontEnd","checkCache",0xe81c366d,"flixel.system.frontEnds.BitmapFrontEnd.checkCache","flixel/system/frontEnds/BitmapFrontEnd.hx",117,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_132_create,"flixel.system.frontEnds.BitmapFrontEnd","create",0xd385bb8f,"flixel.system.frontEnds.BitmapFrontEnd.create","flixel/system/frontEnds/BitmapFrontEnd.hx",132,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_147_add,"flixel.system.frontEnds.BitmapFrontEnd","add",0x0f1953ae,"flixel.system.frontEnds.BitmapFrontEnd.add","flixel/system/frontEnds/BitmapFrontEnd.hx",147,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_168_addGraphic,"flixel.system.frontEnds.BitmapFrontEnd","addGraphic",0x72a9209a,"flixel.system.frontEnds.BitmapFrontEnd.addGraphic","flixel/system/frontEnds/BitmapFrontEnd.hx",168,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_180_get,"flixel.system.frontEnds.BitmapFrontEnd","get",0x0f1de223,"flixel.system.frontEnds.BitmapFrontEnd.get","flixel/system/frontEnds/BitmapFrontEnd.hx",180,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_190_findKeyForBitmap,"flixel.system.frontEnds.BitmapFrontEnd","findKeyForBitmap",0x03085a65,"flixel.system.frontEnds.BitmapFrontEnd.findKeyForBitmap","flixel/system/frontEnds/BitmapFrontEnd.hx",190,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_207_getKeyForClass,"flixel.system.frontEnds.BitmapFrontEnd","getKeyForClass",0x26696fcb,"flixel.system.frontEnds.BitmapFrontEnd.getKeyForClass","flixel/system/frontEnds/BitmapFrontEnd.hx",207,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_219_generateKey,"flixel.system.frontEnds.BitmapFrontEnd","generateKey",0xe3b3c7f7,"flixel.system.frontEnds.BitmapFrontEnd.generateKey","flixel/system/frontEnds/BitmapFrontEnd.hx",219,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_237_getUniqueKey,"flixel.system.frontEnds.BitmapFrontEnd","getUniqueKey",0x2898506b,"flixel.system.frontEnds.BitmapFrontEnd.getUniqueKey","flixel/system/frontEnds/BitmapFrontEnd.hx",237,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_268_getKeyWithSpacesAndBorders,"flixel.system.frontEnds.BitmapFrontEnd","getKeyWithSpacesAndBorders",0x04327ebf,"flixel.system.frontEnds.BitmapFrontEnd.getKeyWithSpacesAndBorders","flixel/system/frontEnds/BitmapFrontEnd.hx",268,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_292_remove,"flixel.system.frontEnds.BitmapFrontEnd","remove",0x5bfef0d7,"flixel.system.frontEnds.BitmapFrontEnd.remove","flixel/system/frontEnds/BitmapFrontEnd.hx",292,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_305_removeByKey,"flixel.system.frontEnds.BitmapFrontEnd","removeByKey",0x593bffb1,"flixel.system.frontEnds.BitmapFrontEnd.removeByKey","flixel/system/frontEnds/BitmapFrontEnd.hx",305,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_317_removeIfNoUse,"flixel.system.frontEnds.BitmapFrontEnd","removeIfNoUse",0x6b036552,"flixel.system.frontEnds.BitmapFrontEnd.removeIfNoUse","flixel/system/frontEnds/BitmapFrontEnd.hx",317,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_326_clearCache,"flixel.system.frontEnds.BitmapFrontEnd","clearCache",0xad367388,"flixel.system.frontEnds.BitmapFrontEnd.clearCache","flixel/system/frontEnds/BitmapFrontEnd.hx",326,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_346_removeKey,"flixel.system.frontEnds.BitmapFrontEnd","removeKey",0xe84d3108,"flixel.system.frontEnds.BitmapFrontEnd.removeKey","flixel/system/frontEnds/BitmapFrontEnd.hx",346,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_357_reset,"flixel.system.frontEnds.BitmapFrontEnd","reset",0xd15ce89c,"flixel.system.frontEnds.BitmapFrontEnd.reset","flixel/system/frontEnds/BitmapFrontEnd.hx",357,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_380_clearUnused,"flixel.system.frontEnds.BitmapFrontEnd","clearUnused",0x9cfedd10,"flixel.system.frontEnds.BitmapFrontEnd.clearUnused","flixel/system/frontEnds/BitmapFrontEnd.hx",380,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_393_get_maxTextureSize,"flixel.system.frontEnds.BitmapFrontEnd","get_maxTextureSize",0x8d42ecd4,"flixel.system.frontEnds.BitmapFrontEnd.get_maxTextureSize","flixel/system/frontEnds/BitmapFrontEnd.hx",393,0x91a05ae2)
HX_LOCAL_STACK_FRAME(_hx_pos_c7913b0c5b2fbcc7_398_get_whitePixel,"flixel.system.frontEnds.BitmapFrontEnd","get_whitePixel",0xa476cef9,"flixel.system.frontEnds.BitmapFrontEnd.get_whitePixel","flixel/system/frontEnds/BitmapFrontEnd.hx",398,0x91a05ae2)
namespace flixel{
namespace _hx_system{
namespace frontEnds{

void BitmapFrontEnd_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_19_new)
HXLINE(  39)		this->_lastUniqueKeyIndex = (int)0;
HXLINE(  43)		this->reset();
            	}

Dynamic BitmapFrontEnd_obj::__CreateEmpty() { return new BitmapFrontEnd_obj; }

void *BitmapFrontEnd_obj::_hx_vtable = 0;

Dynamic BitmapFrontEnd_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapFrontEnd_obj > _hx_result = new BitmapFrontEnd_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BitmapFrontEnd_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x11d32537;
}

void BitmapFrontEnd_obj::onAssetsReload( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_48_onAssetsReload)
HXDLIN(  48)		 ::Dynamic key = this->_cache->keys();
HXDLIN(  48)		while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN(  48)			::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(  50)			 ::flixel::graphics::FlxGraphic obj = this->_cache->get(key1).StaticCast<  ::flixel::graphics::FlxGraphic >();
HXLINE(  51)			bool _hx_tmp;
HXDLIN(  51)			if (hx::IsNotNull( obj )) {
HXLINE(  51)				if (hx::IsNull( obj->assetsClass )) {
HXLINE(  51)					_hx_tmp = hx::IsNotNull( obj->assetsKey );
            				}
            				else {
HXLINE(  51)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(  51)				_hx_tmp = false;
            			}
HXDLIN(  51)			if (_hx_tmp) {
HXLINE(  53)				obj->onAssetsReload();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFrontEnd_obj,onAssetsReload,(void))

void BitmapFrontEnd_obj::onContext(){
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_64_onContext)
HXDLIN(  64)		 ::Dynamic key = this->_cache->keys();
HXDLIN(  64)		while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN(  64)			::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(  66)			 ::flixel::graphics::FlxGraphic obj = this->_cache->get(key1).StaticCast<  ::flixel::graphics::FlxGraphic >();
HXLINE(  67)			bool _hx_tmp;
HXDLIN(  67)			if (hx::IsNotNull( obj )) {
HXLINE(  67)				_hx_tmp = obj->isDumped;
            			}
            			else {
HXLINE(  67)				_hx_tmp = false;
            			}
HXDLIN(  67)			if (_hx_tmp) {
HXLINE(  69)				obj->onContext();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFrontEnd_obj,onContext,(void))

void BitmapFrontEnd_obj::dumpCache(){
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_81_dumpCache)
HXDLIN(  81)		 ::Dynamic key = this->_cache->keys();
HXDLIN(  81)		while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN(  81)			::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(  83)			 ::flixel::graphics::FlxGraphic obj = this->_cache->get(key1).StaticCast<  ::flixel::graphics::FlxGraphic >();
HXLINE(  84)			bool _hx_tmp;
HXDLIN(  84)			if (hx::IsNotNull( obj )) {
HXLINE(  84)				if (hx::IsNull( obj->assetsClass )) {
HXLINE(  84)					_hx_tmp = hx::IsNotNull( obj->assetsKey );
            				}
            				else {
HXLINE(  84)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(  84)				_hx_tmp = false;
            			}
HXDLIN(  84)			if (_hx_tmp) {
HXLINE(  86)				obj->dump();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFrontEnd_obj,dumpCache,(void))

void BitmapFrontEnd_obj::undumpCache(){
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_98_undumpCache)
HXDLIN(  98)		 ::Dynamic key = this->_cache->keys();
HXDLIN(  98)		while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN(  98)			::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 100)			 ::flixel::graphics::FlxGraphic obj = this->_cache->get(key1).StaticCast<  ::flixel::graphics::FlxGraphic >();
HXLINE( 101)			bool _hx_tmp;
HXDLIN( 101)			if (hx::IsNotNull( obj )) {
HXLINE( 101)				_hx_tmp = obj->isDumped;
            			}
            			else {
HXLINE( 101)				_hx_tmp = false;
            			}
HXDLIN( 101)			if (_hx_tmp) {
HXLINE( 103)				obj->undump();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFrontEnd_obj,undumpCache,(void))

bool BitmapFrontEnd_obj::checkCache(::String Key){
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_117_checkCache)
HXDLIN( 117)		return hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(this->_cache,Key)) ) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFrontEnd_obj,checkCache,return )

 ::flixel::graphics::FlxGraphic BitmapFrontEnd_obj::create(int Width,int Height,int Color,hx::Null< bool >  __o_Unique,::String Key){
bool Unique = __o_Unique.Default(false);
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_132_create)
HXDLIN( 132)		return ::flixel::graphics::FlxGraphic_obj::fromRectangle(Width,Height,Color,Unique,Key);
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapFrontEnd_obj,create,return )

 ::flixel::graphics::FlxGraphic BitmapFrontEnd_obj::add( ::Dynamic Graphic,hx::Null< bool >  __o_Unique,::String Key){
bool Unique = __o_Unique.Default(false);
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_147_add)
HXLINE( 148)		if (::Std_obj::is(Graphic,hx::ClassOf< ::flixel::graphics::FlxGraphic >())) {
HXLINE( 150)			return ::flixel::graphics::FlxGraphic_obj::fromGraphic(( ( ::flixel::graphics::FlxGraphic)(Graphic) ),Unique,Key);
            		}
            		else {
HXLINE( 152)			if (::Std_obj::is(Graphic,hx::ClassOf< ::openfl::_legacy::display::BitmapData >())) {
HXLINE( 154)				return ::flixel::graphics::FlxGraphic_obj::fromBitmapData(( ( ::openfl::_legacy::display::BitmapData)(Graphic) ),Unique,Key,null());
            			}
            		}
HXLINE( 158)		return ::flixel::graphics::FlxGraphic_obj::fromAssetKey(::Std_obj::string(Graphic),Unique,Key,null());
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapFrontEnd_obj,add,return )

 ::flixel::graphics::FlxGraphic BitmapFrontEnd_obj::addGraphic( ::flixel::graphics::FlxGraphic graphic){
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_168_addGraphic)
HXLINE( 169)		this->_cache->set(graphic->key,graphic);
HXLINE( 170)		return graphic;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFrontEnd_obj,addGraphic,return )

 ::flixel::graphics::FlxGraphic BitmapFrontEnd_obj::get(::String key){
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_180_get)
HXDLIN( 180)		return this->_cache->get(key).StaticCast<  ::flixel::graphics::FlxGraphic >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFrontEnd_obj,get,return )

::String BitmapFrontEnd_obj::findKeyForBitmap( ::openfl::_legacy::display::BitmapData bmd){
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_190_findKeyForBitmap)
HXLINE( 191)		{
HXLINE( 191)			 ::Dynamic key = this->_cache->keys();
HXDLIN( 191)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 191)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 193)				if (hx::IsEq( this->_cache->get(key1).StaticCast<  ::flixel::graphics::FlxGraphic >()->bitmap,bmd )) {
HXLINE( 194)					return key1;
            				}
            			}
            		}
HXLINE( 196)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFrontEnd_obj,findKeyForBitmap,return )

::String BitmapFrontEnd_obj::getKeyForClass(hx::Class source){
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_207_getKeyForClass)
HXDLIN( 207)		return ::Type_obj::getClassName(source);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFrontEnd_obj,getKeyForClass,return )

::String BitmapFrontEnd_obj::generateKey(::String systemKey,::String userKey,hx::Null< bool >  __o_unique){
bool unique = __o_unique.Default(false);
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_219_generateKey)
HXLINE( 220)		::String key = userKey;
HXLINE( 221)		if (hx::IsNull( key )) {
HXLINE( 222)			key = systemKey;
            		}
HXLINE( 224)		bool _hx_tmp;
HXDLIN( 224)		if (!(unique)) {
HXLINE( 224)			_hx_tmp = hx::IsNull( key );
            		}
            		else {
HXLINE( 224)			_hx_tmp = true;
            		}
HXDLIN( 224)		if (_hx_tmp) {
HXLINE( 225)			key = this->getUniqueKey(key);
            		}
HXLINE( 227)		return key;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapFrontEnd_obj,generateKey,return )

::String BitmapFrontEnd_obj::getUniqueKey(::String baseKey){
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_237_getUniqueKey)
HXLINE( 238)		if (hx::IsNull( baseKey )) {
HXLINE( 239)			baseKey = HX_("pixels",2d,ef,a9,8c);
            		}
HXLINE( 241)		if (hx::IsNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(this->_cache,baseKey)) ) )) {
HXLINE( 242)			return baseKey;
            		}
HXLINE( 244)		int i = this->_lastUniqueKeyIndex;
HXLINE( 245)		::String uniqueKey;
HXLINE( 246)		while(true){
HXLINE( 248)			i = (i + (int)1);
HXLINE( 249)			uniqueKey = (baseKey + i);
HXLINE( 246)			if (!(hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(this->_cache,uniqueKey)) ) ))) {
HXLINE( 246)				goto _hx_goto_18;
            			}
            		}
            		_hx_goto_18:;
HXLINE( 253)		this->_lastUniqueKeyIndex = i;
HXLINE( 254)		return uniqueKey;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFrontEnd_obj,getUniqueKey,return )

::String BitmapFrontEnd_obj::getKeyWithSpacesAndBorders(::String baseKey, ::flixel::math::FlxPoint frameSize, ::flixel::math::FlxPoint frameSpacing, ::flixel::math::FlxPoint frameBorder, ::flixel::math::FlxRect region){
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_268_getKeyWithSpacesAndBorders)
HXLINE( 269)		::String result = baseKey;
HXLINE( 271)		if (hx::IsNotNull( region )) {
HXLINE( 272)			result = (result + (((((((HX_("_Region:",27,96,a5,81) + region->x) + HX_("_",5f,00,00,00)) + region->y) + HX_("_",5f,00,00,00)) + region->width) + HX_("_",5f,00,00,00)) + region->height));
            		}
HXLINE( 274)		if (hx::IsNotNull( frameSize )) {
HXLINE( 275)			result = (result + (((HX_("_FrameSize:",2b,0e,3a,29) + frameSize->x) + HX_("_",5f,00,00,00)) + frameSize->y));
            		}
HXLINE( 277)		if (hx::IsNotNull( frameSpacing )) {
HXLINE( 278)			result = (result + (((HX_("_Spaces:",0e,b0,c1,98) + frameSpacing->x) + HX_("_",5f,00,00,00)) + frameSpacing->y));
            		}
HXLINE( 280)		if (hx::IsNotNull( frameBorder )) {
HXLINE( 281)			result = (result + (((HX_("_Border:",2f,83,f2,39) + frameBorder->x) + HX_("_",5f,00,00,00)) + frameBorder->y));
            		}
HXLINE( 283)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapFrontEnd_obj,getKeyWithSpacesAndBorders,return )

void BitmapFrontEnd_obj::remove( ::flixel::graphics::FlxGraphic graphic){
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_292_remove)
HXDLIN( 292)		if (hx::IsNotNull( graphic )) {
HXLINE( 294)			{
HXLINE( 294)				::String key = graphic->key;
HXDLIN( 294)				if (hx::IsNotNull( key )) {
HXLINE( 294)					::openfl::_legacy::IAssetCache_obj::removeBitmapData(::openfl::_legacy::Assets_obj::cache,key);
HXDLIN( 294)					::haxe::IMap_obj::remove(this->_cache,key);
            				}
            			}
HXLINE( 295)			graphic->destroy();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFrontEnd_obj,remove,(void))

void BitmapFrontEnd_obj::removeByKey(::String key){
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_305_removeByKey)
HXDLIN( 305)		if (hx::IsNotNull( key )) {
HXLINE( 307)			 ::flixel::graphics::FlxGraphic obj = ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(this->_cache,key)) );
HXLINE( 308)			if (hx::IsNotNull( key )) {
HXLINE( 308)				::openfl::_legacy::IAssetCache_obj::removeBitmapData(::openfl::_legacy::Assets_obj::cache,key);
HXDLIN( 308)				::haxe::IMap_obj::remove(this->_cache,key);
            			}
HXLINE( 310)			if (hx::IsNotNull( obj )) {
HXLINE( 311)				obj->destroy();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFrontEnd_obj,removeByKey,(void))

void BitmapFrontEnd_obj::removeIfNoUse( ::flixel::graphics::FlxGraphic graphic){
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_317_removeIfNoUse)
HXDLIN( 317)		bool _hx_tmp;
HXDLIN( 317)		bool _hx_tmp1;
HXDLIN( 317)		if (hx::IsNotNull( graphic )) {
HXDLIN( 317)			_hx_tmp1 = (graphic->get_useCount() == (int)0);
            		}
            		else {
HXDLIN( 317)			_hx_tmp1 = false;
            		}
HXDLIN( 317)		if (_hx_tmp1) {
HXDLIN( 317)			_hx_tmp = !(graphic->persist);
            		}
            		else {
HXDLIN( 317)			_hx_tmp = false;
            		}
HXDLIN( 317)		if (_hx_tmp) {
HXLINE( 318)			this->remove(graphic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFrontEnd_obj,removeIfNoUse,(void))

void BitmapFrontEnd_obj::clearCache(){
            	HX_GC_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_326_clearCache)
HXLINE( 327)		if (hx::IsNull( this->_cache )) {
HXLINE( 329)			this->_cache =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 330)			return;
            		}
HXLINE( 333)		{
HXLINE( 333)			 ::Dynamic key = this->_cache->keys();
HXDLIN( 333)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 333)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 335)				 ::flixel::graphics::FlxGraphic obj = ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(this->_cache,key1)) );
HXLINE( 336)				bool _hx_tmp;
HXDLIN( 336)				bool _hx_tmp1;
HXDLIN( 336)				if (hx::IsNotNull( obj )) {
HXLINE( 336)					_hx_tmp1 = !(obj->persist);
            				}
            				else {
HXLINE( 336)					_hx_tmp1 = false;
            				}
HXDLIN( 336)				if (_hx_tmp1) {
HXLINE( 336)					_hx_tmp = (obj->get_useCount() <= (int)0);
            				}
            				else {
HXLINE( 336)					_hx_tmp = false;
            				}
HXDLIN( 336)				if (_hx_tmp) {
HXLINE( 338)					if (hx::IsNotNull( key1 )) {
HXLINE( 338)						::openfl::_legacy::IAssetCache_obj::removeBitmapData(::openfl::_legacy::Assets_obj::cache,key1);
HXDLIN( 338)						::haxe::IMap_obj::remove(this->_cache,key1);
            					}
HXLINE( 339)					obj->destroy();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFrontEnd_obj,clearCache,(void))

void BitmapFrontEnd_obj::removeKey(::String key){
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_346_removeKey)
HXDLIN( 346)		if (hx::IsNotNull( key )) {
HXLINE( 348)			::openfl::_legacy::IAssetCache_obj::removeBitmapData(::openfl::_legacy::Assets_obj::cache,key);
HXLINE( 349)			this->_cache->remove(key);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFrontEnd_obj,removeKey,(void))

void BitmapFrontEnd_obj::reset(){
            	HX_GC_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_357_reset)
HXLINE( 358)		if (hx::IsNull( this->_cache )) {
HXLINE( 360)			this->_cache =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 361)			return;
            		}
HXLINE( 364)		{
HXLINE( 364)			 ::Dynamic key = this->_cache->keys();
HXDLIN( 364)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 364)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 366)				 ::flixel::graphics::FlxGraphic obj = ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(this->_cache,key1)) );
HXLINE( 367)				if (hx::IsNotNull( key1 )) {
HXLINE( 367)					::openfl::_legacy::IAssetCache_obj::removeBitmapData(::openfl::_legacy::Assets_obj::cache,key1);
HXDLIN( 367)					::haxe::IMap_obj::remove(this->_cache,key1);
            				}
HXLINE( 369)				if (hx::IsNotNull( obj )) {
HXLINE( 370)					obj->destroy();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFrontEnd_obj,reset,(void))

void BitmapFrontEnd_obj::clearUnused(){
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_380_clearUnused)
HXDLIN( 380)		 ::Dynamic key = this->_cache->keys();
HXDLIN( 380)		while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 380)			::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 382)			 ::flixel::graphics::FlxGraphic obj = this->_cache->get(key1).StaticCast<  ::flixel::graphics::FlxGraphic >();
HXLINE( 383)			bool _hx_tmp;
HXDLIN( 383)			bool _hx_tmp1;
HXDLIN( 383)			bool _hx_tmp2;
HXDLIN( 383)			if (hx::IsNotNull( obj )) {
HXLINE( 383)				_hx_tmp2 = (obj->get_useCount() <= (int)0);
            			}
            			else {
HXLINE( 383)				_hx_tmp2 = false;
            			}
HXDLIN( 383)			if (_hx_tmp2) {
HXLINE( 383)				_hx_tmp1 = !(obj->persist);
            			}
            			else {
HXLINE( 383)				_hx_tmp1 = false;
            			}
HXDLIN( 383)			if (_hx_tmp1) {
HXLINE( 383)				_hx_tmp = obj->get_destroyOnNoUse();
            			}
            			else {
HXLINE( 383)				_hx_tmp = false;
            			}
HXDLIN( 383)			if (_hx_tmp) {
HXLINE( 385)				this->removeByKey(key1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFrontEnd_obj,clearUnused,(void))

int BitmapFrontEnd_obj::get_maxTextureSize(){
            	HX_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_393_get_maxTextureSize)
HXDLIN( 393)		return ( (int)(::openfl::_legacy::gl::GL_obj::lime_gl_get_parameter((int)3379)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFrontEnd_obj,get_maxTextureSize,return )

 ::flixel::graphics::frames::FlxFrame BitmapFrontEnd_obj::get_whitePixel(){
            	HX_GC_STACKFRAME(&_hx_pos_c7913b0c5b2fbcc7_398_get_whitePixel)
HXLINE( 399)		if (hx::IsNull( this->_whitePixel )) {
HXLINE( 401)			 ::openfl::_legacy::display::BitmapData bd =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,(int)10,(int)10,true,(int)-1,null());
HXLINE( 402)			 ::flixel::graphics::FlxGraphic graphic = ::flixel::FlxG_obj::bitmap->add(bd,true,HX_("whitePixels",b6,92,ba,9e));
HXLINE( 403)			graphic->persist = true;
HXLINE( 404)			this->_whitePixel = graphic->get_imageFrame()->get_frame();
            		}
HXLINE( 407)		return this->_whitePixel;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFrontEnd_obj,get_whitePixel,return )


hx::ObjectPtr< BitmapFrontEnd_obj > BitmapFrontEnd_obj::__new() {
	hx::ObjectPtr< BitmapFrontEnd_obj > __this = new BitmapFrontEnd_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< BitmapFrontEnd_obj > BitmapFrontEnd_obj::__alloc(hx::Ctx *_hx_ctx) {
	BitmapFrontEnd_obj *__this = (BitmapFrontEnd_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BitmapFrontEnd_obj), true, "flixel.system.frontEnds.BitmapFrontEnd"));
	*(void **)__this = BitmapFrontEnd_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BitmapFrontEnd_obj::BitmapFrontEnd_obj()
{
}

void BitmapFrontEnd_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapFrontEnd);
	HX_MARK_MEMBER_NAME(_cache,"_cache");
	HX_MARK_MEMBER_NAME(_whitePixel,"_whitePixel");
	HX_MARK_MEMBER_NAME(_lastUniqueKeyIndex,"_lastUniqueKeyIndex");
	HX_MARK_END_CLASS();
}

void BitmapFrontEnd_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_cache,"_cache");
	HX_VISIT_MEMBER_NAME(_whitePixel,"_whitePixel");
	HX_VISIT_MEMBER_NAME(_lastUniqueKeyIndex,"_lastUniqueKeyIndex");
}

hx::Val BitmapFrontEnd_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_cache") ) { return hx::Val( _cache ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onContext") ) { return hx::Val( onContext_dyn() ); }
		if (HX_FIELD_EQ(inName,"dumpCache") ) { return hx::Val( dumpCache_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeKey") ) { return hx::Val( removeKey_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"whitePixel") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_whitePixel() ); }
		if (HX_FIELD_EQ(inName,"checkCache") ) { return hx::Val( checkCache_dyn() ); }
		if (HX_FIELD_EQ(inName,"addGraphic") ) { return hx::Val( addGraphic_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearCache") ) { return hx::Val( clearCache_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_whitePixel") ) { return hx::Val( _whitePixel ); }
		if (HX_FIELD_EQ(inName,"undumpCache") ) { return hx::Val( undumpCache_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateKey") ) { return hx::Val( generateKey_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeByKey") ) { return hx::Val( removeByKey_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearUnused") ) { return hx::Val( clearUnused_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getUniqueKey") ) { return hx::Val( getUniqueKey_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"removeIfNoUse") ) { return hx::Val( removeIfNoUse_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"maxTextureSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maxTextureSize() ); }
		if (HX_FIELD_EQ(inName,"onAssetsReload") ) { return hx::Val( onAssetsReload_dyn() ); }
		if (HX_FIELD_EQ(inName,"getKeyForClass") ) { return hx::Val( getKeyForClass_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_whitePixel") ) { return hx::Val( get_whitePixel_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"findKeyForBitmap") ) { return hx::Val( findKeyForBitmap_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_maxTextureSize") ) { return hx::Val( get_maxTextureSize_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_lastUniqueKeyIndex") ) { return hx::Val( _lastUniqueKeyIndex ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"getKeyWithSpacesAndBorders") ) { return hx::Val( getKeyWithSpacesAndBorders_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BitmapFrontEnd_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_cache") ) { _cache=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_whitePixel") ) { _whitePixel=inValue.Cast<  ::flixel::graphics::frames::FlxFrame >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_lastUniqueKeyIndex") ) { _lastUniqueKeyIndex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BitmapFrontEnd_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("maxTextureSize","\xf8","\xa6","\x7c","\x0a"));
	outFields->push(HX_HCSTRING("whitePixel","\x1d","\xa7","\xf7","\x19"));
	outFields->push(HX_HCSTRING("_cache","\x83","\xe1","\xfb","\x3c"));
	outFields->push(HX_HCSTRING("_whitePixel","\x3c","\x74","\x81","\xec"));
	outFields->push(HX_HCSTRING("_lastUniqueKeyIndex","\x39","\xd6","\x77","\xaa"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapFrontEnd_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(BitmapFrontEnd_obj,_cache),HX_HCSTRING("_cache","\x83","\xe1","\xfb","\x3c")},
	{hx::fsObject /*::flixel::graphics::frames::FlxFrame*/ ,(int)offsetof(BitmapFrontEnd_obj,_whitePixel),HX_HCSTRING("_whitePixel","\x3c","\x74","\x81","\xec")},
	{hx::fsInt,(int)offsetof(BitmapFrontEnd_obj,_lastUniqueKeyIndex),HX_HCSTRING("_lastUniqueKeyIndex","\x39","\xd6","\x77","\xaa")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BitmapFrontEnd_obj_sStaticStorageInfo = 0;
#endif

static ::String BitmapFrontEnd_obj_sMemberFields[] = {
	HX_HCSTRING("_cache","\x83","\xe1","\xfb","\x3c"),
	HX_HCSTRING("_whitePixel","\x3c","\x74","\x81","\xec"),
	HX_HCSTRING("_lastUniqueKeyIndex","\x39","\xd6","\x77","\xaa"),
	HX_HCSTRING("onAssetsReload","\xfb","\x33","\x88","\x63"),
	HX_HCSTRING("onContext","\x90","\x4e","\x22","\xf1"),
	HX_HCSTRING("dumpCache","\x6e","\x30","\x39","\xdb"),
	HX_HCSTRING("undumpCache","\xf5","\xb6","\xdf","\x60"),
	HX_HCSTRING("checkCache","\x5a","\x9c","\x04","\x51"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("addGraphic","\x87","\x86","\x91","\xdb"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("findKeyForBitmap","\x12","\x70","\x29","\x81"),
	HX_HCSTRING("getKeyForClass","\x38","\xd0","\xdf","\x11"),
	HX_HCSTRING("generateKey","\x6a","\x91","\x24","\x46"),
	HX_HCSTRING("getUniqueKey","\x98","\xcb","\xd7","\xe8"),
	HX_HCSTRING("getKeyWithSpacesAndBorders","\xac","\x4e","\xae","\x2a"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("removeByKey","\x24","\xc9","\xac","\xbb"),
	HX_HCSTRING("removeIfNoUse","\x85","\xb1","\x4f","\xe2"),
	HX_HCSTRING("clearCache","\x75","\xd9","\x1e","\x16"),
	HX_HCSTRING("removeKey","\xbb","\xa7","\xec","\xca"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("clearUnused","\x83","\xa6","\x6f","\xff"),
	HX_HCSTRING("get_maxTextureSize","\xc1","\x87","\x16","\xa6"),
	HX_HCSTRING("get_whitePixel","\x66","\x2f","\xed","\x8f"),
	::String(null()) };

static void BitmapFrontEnd_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapFrontEnd_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapFrontEnd_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapFrontEnd_obj::__mClass,"__mClass");
};

#endif

hx::Class BitmapFrontEnd_obj::__mClass;

void BitmapFrontEnd_obj::__register()
{
	hx::Object *dummy = new BitmapFrontEnd_obj;
	BitmapFrontEnd_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.frontEnds.BitmapFrontEnd","\x7b","\xb7","\xf6","\x16");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BitmapFrontEnd_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapFrontEnd_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapFrontEnd_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapFrontEnd_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapFrontEnd_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapFrontEnd_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace frontEnds
