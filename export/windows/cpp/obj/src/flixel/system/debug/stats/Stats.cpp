// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxLinkedList
#include <flixel/system/FlxLinkedList.h>
#endif
#ifndef INCLUDED_flixel_system_FlxQuadTree
#include <flixel/system/FlxQuadTree.h>
#endif
#ifndef INCLUDED_flixel_system_debug_DebuggerUtil
#include <flixel/system/debug/DebuggerUtil.h>
#endif
#ifndef INCLUDED_flixel_system_debug_GraphicStats
#include <flixel/system/debug/GraphicStats.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_stats_Stats
#include <flixel/system/debug/stats/Stats.h>
#endif
#ifndef INCLUDED_flixel_system_debug_stats_StatsGraph
#include <flixel/system/debug/stats/StatsGraph.h>
#endif
#ifndef INCLUDED_flixel_system_debug_stats__Stats_GraphicMaximizeButton
#include <flixel/system/debug/stats/_Stats/GraphicMaximizeButton.h>
#endif
#ifndef INCLUDED_flixel_system_debug_stats__Stats_GraphicMinimizeButton
#include <flixel/system/debug/stats/_Stats/GraphicMinimizeButton.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSystemButton
#include <flixel/system/ui/FlxSystemButton.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Bitmap
#include <openfl/_legacy/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl__legacy_system_System
#include <openfl/_legacy/system/System.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextField
#include <openfl/_legacy/text/TextField.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a2cdb8120663480d_28_new,"flixel.system.debug.stats.Stats","new",0xd5f45fda,"flixel.system.debug.stats.Stats.new","flixel/system/debug/stats/Stats.hx",28,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_173_start,"flixel.system.debug.stats.Stats","start",0x6e8a565c,"flixel.system.debug.stats.Stats.start","flixel/system/debug/stats/Stats.hx",173,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_186_stop,"flixel.system.debug.stats.Stats","stop",0x6338eb48,"flixel.system.debug.stats.Stats.stop","flixel/system/debug/stats/Stats.hx",186,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_193_destroy,"flixel.system.debug.stats.Stats","destroy",0xd5fd0174,"flixel.system.debug.stats.Stats.destroy","flixel/system/debug/stats/Stats.hx",193,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_233_update,"flixel.system.debug.stats.Stats","update",0xcb8c5ecf,"flixel.system.debug.stats.Stats.update","flixel/system/debug/stats/Stats.hx",233,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_308_updateTexts,"flixel.system.debug.stats.Stats","updateTexts",0xc9854dd7,"flixel.system.debug.stats.Stats.updateTexts","flixel/system/debug/stats/Stats.hx",308,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_324_divide,"flixel.system.debug.stats.Stats","divide",0x0399083f,"flixel.system.debug.stats.Stats.divide","flixel/system/debug/stats/Stats.hx",324,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_335_currentFps,"flixel.system.debug.stats.Stats","currentFps",0x555240f6,"flixel.system.debug.stats.Stats.currentFps","flixel/system/debug/stats/Stats.hx",335,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_343_intervalTime,"flixel.system.debug.stats.Stats","intervalTime",0x37fba938,"flixel.system.debug.stats.Stats.intervalTime","flixel/system/debug/stats/Stats.hx",343,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_351_currentMem,"flixel.system.debug.stats.Stats","currentMem",0x55578722,"flixel.system.debug.stats.Stats.currentMem","flixel/system/debug/stats/Stats.hx",351,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_360_flixelUpdate,"flixel.system.debug.stats.Stats","flixelUpdate",0xda311acb,"flixel.system.debug.stats.Stats.flixelUpdate","flixel/system/debug/stats/Stats.hx",360,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_372_flixelDraw,"flixel.system.debug.stats.Stats","flixelDraw",0xdc09ac46,"flixel.system.debug.stats.Stats.flixelDraw","flixel/system/debug/stats/Stats.hx",372,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_384_activeObjects,"flixel.system.debug.stats.Stats","activeObjects",0xffa11fa8,"flixel.system.debug.stats.Stats.activeObjects","flixel/system/debug/stats/Stats.hx",384,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_396_visibleObjects,"flixel.system.debug.stats.Stats","visibleObjects",0x48c7f948,"flixel.system.debug.stats.Stats.visibleObjects","flixel/system/debug/stats/Stats.hx",396,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_408_drawCalls,"flixel.system.debug.stats.Stats","drawCalls",0x25570e6b,"flixel.system.debug.stats.Stats.drawCalls","flixel/system/debug/stats/Stats.hx",408,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_419_onFocus,"flixel.system.debug.stats.Stats","onFocus",0x4c3dd2b3,"flixel.system.debug.stats.Stats.onFocus","flixel/system/debug/stats/Stats.hx",419,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_427_onFocusLost,"flixel.system.debug.stats.Stats","onFocusLost",0x17d97e37,"flixel.system.debug.stats.Stats.onFocusLost","flixel/system/debug/stats/Stats.hx",427,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_431_toggleSize,"flixel.system.debug.stats.Stats","toggleSize",0x72339a3b,"flixel.system.debug.stats.Stats.toggleSize","flixel/system/debug/stats/Stats.hx",431,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_454_updateSize,"flixel.system.debug.stats.Stats","updateSize",0x93323f30,"flixel.system.debug.stats.Stats.updateSize","flixel/system/debug/stats/Stats.hx",454,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_33_boot,"flixel.system.debug.stats.Stats","boot",0x57f87f78,"flixel.system.debug.stats.Stats.boot","flixel/system/debug/stats/Stats.hx",33,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_37_boot,"flixel.system.debug.stats.Stats","boot",0x57f87f78,"flixel.system.debug.stats.Stats.boot","flixel/system/debug/stats/Stats.hx",37,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_41_boot,"flixel.system.debug.stats.Stats","boot",0x57f87f78,"flixel.system.debug.stats.Stats.boot","flixel/system/debug/stats/Stats.hx",41,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_43_boot,"flixel.system.debug.stats.Stats","boot",0x57f87f78,"flixel.system.debug.stats.Stats.boot","flixel/system/debug/stats/Stats.hx",43,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_44_boot,"flixel.system.debug.stats.Stats","boot",0x57f87f78,"flixel.system.debug.stats.Stats.boot","flixel/system/debug/stats/Stats.hx",44,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_45_boot,"flixel.system.debug.stats.Stats","boot",0x57f87f78,"flixel.system.debug.stats.Stats.boot","flixel/system/debug/stats/Stats.hx",45,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_46_boot,"flixel.system.debug.stats.Stats","boot",0x57f87f78,"flixel.system.debug.stats.Stats.boot","flixel/system/debug/stats/Stats.hx",46,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_48_boot,"flixel.system.debug.stats.Stats","boot",0x57f87f78,"flixel.system.debug.stats.Stats.boot","flixel/system/debug/stats/Stats.hx",48,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_49_boot,"flixel.system.debug.stats.Stats","boot",0x57f87f78,"flixel.system.debug.stats.Stats.boot","flixel/system/debug/stats/Stats.hx",49,0xc15f23b8)
HX_LOCAL_STACK_FRAME(_hx_pos_a2cdb8120663480d_50_boot,"flixel.system.debug.stats.Stats","boot",0x57f87f78,"flixel.system.debug.stats.Stats.boot","flixel/system/debug/stats/Stats.hx",50,0xc15f23b8)
namespace flixel{
namespace _hx_system{
namespace debug{
namespace stats{

void Stats_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_a2cdb8120663480d_28_new)
HXLINE(  89)		this->_paused = true;
HXLINE(  87)		this->_activeObjectMarker = (int)0;
HXLINE(  86)		this->_activeObject = ::Array_obj< int >::__new(0);
HXLINE(  84)		this->_visibleObjectMarker = (int)0;
HXLINE(  83)		this->_visibleObject = ::Array_obj< int >::__new(0);
HXLINE(  81)		this->_drawCallsMarker = (int)0;
HXLINE(  80)		this->_drawCalls = ::Array_obj< int >::__new(0);
HXLINE(  78)		this->_drawMarker = (int)0;
HXLINE(  77)		this->_draw = ::Array_obj< int >::__new(0);
HXLINE(  75)		this->_updateMarker = (int)0;
HXLINE(  74)		this->_update = ::Array_obj< int >::__new(0);
HXLINE(  72)		this->_updateTimer = (int)0;
HXLINE(  71)		this->_lastTime = (int)0;
HXLINE(  69)		this->drawCallsCount = (int)0;
HXLINE(  68)		this->drawTime = (int)0;
HXLINE(  67)		this->updateTime = (int)0;
HXLINE(  66)		this->activeCount = (int)0;
HXLINE(  65)		this->visibleCount = (int)0;
HXLINE(  64)		this->flashPlayerFramerate = ((Float)0);
HXLINE(  55)		this->_itvTime = (int)0;
HXLINE(  98)		super::__construct(HX_("Stats",ff,e5,38,17), ::flixel::_hx_system::debug::GraphicStats_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()),(int)0,(int)0,false,null(),null());
HXLINE( 100)		if ((::flixel::_hx_system::debug::stats::Stats_obj::MIN_HEIGHT == (int)0)) {
HXLINE( 102)			if (!(::flixel::FlxG_obj::renderTile)) {
HXLINE( 103)				::flixel::_hx_system::debug::stats::Stats_obj::MIN_HEIGHT = (int)185;
            			}
            			else {
HXLINE( 105)				::flixel::_hx_system::debug::stats::Stats_obj::MIN_HEIGHT = (int)200;
            			}
            		}
HXLINE( 108)		this->minSize->y = ::flixel::_hx_system::debug::stats::Stats_obj::MIN_HEIGHT;
HXLINE( 109)		this->resize((int)160,::flixel::_hx_system::debug::stats::Stats_obj::MIN_HEIGHT);
HXLINE( 111)		this->start();
HXLINE( 113)		this->_update = ::Array_obj< int >::__new(0);
HXLINE( 114)		this->_draw = ::Array_obj< int >::__new(0);
HXLINE( 115)		this->_activeObject = ::Array_obj< int >::__new(0);
HXLINE( 116)		this->_visibleObject = ::Array_obj< int >::__new(0);
HXLINE( 118)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 120)			this->_drawCalls = ::Array_obj< int >::__new(0);
            		}
HXLINE( 123)		int gutter = (int)5;
HXLINE( 124)		int graphX = gutter;
HXLINE( 125)		int graphY = (::Std_obj::_hx_int(this->_header->get_height()) + gutter);
HXLINE( 126)		int graphHeight = (int)40;
HXLINE( 127)		int graphWidth = (int)140;
HXLINE( 129)		this->fpsGraph =  ::flixel::_hx_system::debug::stats::StatsGraph_obj::__alloc( HX_CTX ,graphX,graphY,graphWidth,graphHeight,(int)-6881536,HX_("fps",e9,c7,4d,00),null(),null());
HXLINE( 130)		this->addChild(this->fpsGraph);
HXLINE( 131)		this->fpsGraph->maxValue = ::flixel::FlxG_obj::drawFramerate;
HXLINE( 132)		this->fpsGraph->minValue = (int)0;
HXLINE( 134)		graphY = ((::Std_obj::_hx_int(this->_header->get_height()) + graphHeight) + (int)20);
HXLINE( 136)		this->memoryGraph =  ::flixel::_hx_system::debug::stats::StatsGraph_obj::__alloc( HX_CTX ,graphX,graphY,graphWidth,graphHeight,(int)-16737025,HX_("MB",55,43,00,00),null(),null());
HXLINE( 137)		this->addChild(this->memoryGraph);
HXLINE( 139)		graphY = (::Std_obj::_hx_int(this->_header->get_height()) + gutter);
HXLINE( 140)		graphX = (graphX + ((gutter + graphWidth) + (int)20));
HXLINE( 141)		graphWidth = (graphWidth - (int)10);
HXLINE( 143)		this->updateTimeGraph =  ::flixel::_hx_system::debug::stats::StatsGraph_obj::__alloc( HX_CTX ,graphX,graphY,graphWidth,graphHeight,(int)-2305024,HX_("ms",66,5f,00,00),(int)35,HX_("Update",29,fa,99,bb));
HXLINE( 144)		this->updateTimeGraph->set_visible(false);
HXLINE( 145)		this->addChild(this->updateTimeGraph);
HXLINE( 147)		graphY = ((::Std_obj::_hx_int(this->_header->get_height()) + graphHeight) + (int)20);
HXLINE( 149)		this->drawTimeGraph =  ::flixel::_hx_system::debug::stats::StatsGraph_obj::__alloc( HX_CTX ,graphX,graphY,graphWidth,graphHeight,(int)-5898236,HX_("ms",66,5f,00,00),(int)35,HX_("Draw",24,58,49,2d));
HXLINE( 150)		this->drawTimeGraph->set_visible(false);
HXLINE( 151)		this->addChild(this->drawTimeGraph);
HXLINE( 153)		this->addChild((this->_leftTextField = ::flixel::_hx_system::debug::DebuggerUtil_obj::createTextField(gutter,((graphHeight * (int)2) + (int)45),(int)-1426063361,(int)11)));
HXLINE( 154)		this->addChild((this->_rightTextField = ::flixel::_hx_system::debug::DebuggerUtil_obj::createTextField((gutter + (int)70),((graphHeight * (int)2) + (int)45),(int)-1,(int)11)));
HXLINE( 156)		 ::openfl::_legacy::text::TextField _hx_tmp = this->_leftTextField;
HXDLIN( 156)		_hx_tmp->set_multiline(this->_rightTextField->set_multiline(true));
HXLINE( 157)		 ::openfl::_legacy::text::TextField _hx_tmp1 = this->_leftTextField;
HXDLIN( 157)		_hx_tmp1->set_wordWrap(this->_rightTextField->set_wordWrap(true));
HXLINE( 159)		 ::openfl::_legacy::text::TextField _hx_tmp2 = this->_leftTextField;
HXDLIN( 159)		::String _hx_tmp3;
HXDLIN( 159)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 159)			_hx_tmp3 = HX_("\nDrawTiles:",e3,86,4d,5f);
            		}
            		else {
HXLINE( 159)			_hx_tmp3 = HX_("",00,00,00,00);
            		}
HXDLIN( 159)		_hx_tmp2->set_text(((HX_("Update: \nDraw:",9b,e1,5f,a0) + _hx_tmp3) + HX_("\nQuadTrees: \nLists:",e5,f7,d0,58)));
HXLINE( 161)		this->_toggleSizeButton =  ::flixel::_hx_system::ui::FlxSystemButton_obj::__alloc( HX_CTX , ::flixel::_hx_system::debug::stats::_Stats::GraphicMaximizeButton_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()),this->toggleSize_dyn(),null());
HXLINE( 162)		this->_toggleSizeButton->set_alpha(((Float)0.8));
HXLINE( 163)		this->addChild(this->_toggleSizeButton);
HXLINE( 165)		this->updateSize();
            	}

Dynamic Stats_obj::__CreateEmpty() { return new Stats_obj; }

void *Stats_obj::_hx_vtable = 0;

Dynamic Stats_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Stats_obj > _hx_result = new Stats_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Stats_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3d2d7617) {
		if (inClassId<=(int)0x25b00754) {
			if (inClassId<=(int)0x1e88cdcf) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x1e88cdcf;
			} else {
				return inClassId==(int)0x25b00754;
			}
		} else {
			return inClassId==(int)0x306ae42a || inClassId==(int)0x3d2d7617;
		}
	} else {
		if (inClassId<=(int)0x619ca9b8) {
			return inClassId==(int)0x5fcdb6d3 || inClassId==(int)0x619ca9b8;
		} else {
			return inClassId==(int)0x775426a8;
		}
	}
}

void Stats_obj::start(){
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_173_start)
HXDLIN( 173)		if (this->_paused) {
HXLINE( 175)			this->_paused = false;
HXLINE( 176)			this->_itvTime = ::flixel::FlxG_obj::game->ticks;
HXLINE( 177)			this->_frameCount = (int)0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stats_obj,start,(void))

void Stats_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_186_stop)
HXDLIN( 186)		this->_paused = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stats_obj,stop,(void))

void Stats_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_193_destroy)
HXLINE( 194)		if (hx::IsNotNull( this->fpsGraph )) {
HXLINE( 196)			this->fpsGraph->destroy();
HXLINE( 197)			this->removeChild(this->fpsGraph);
            		}
HXLINE( 199)		this->fpsGraph = null();
HXLINE( 201)		if (hx::IsNotNull( this->memoryGraph )) {
HXLINE( 203)			this->removeChild(this->memoryGraph);
            		}
HXLINE( 205)		this->memoryGraph = null();
HXLINE( 207)		if (hx::IsNotNull( this->_leftTextField )) {
HXLINE( 209)			this->removeChild(this->_leftTextField);
            		}
HXLINE( 211)		this->_leftTextField = null();
HXLINE( 213)		if (hx::IsNotNull( this->_rightTextField )) {
HXLINE( 215)			this->removeChild(this->_rightTextField);
            		}
HXLINE( 217)		this->_rightTextField = null();
HXLINE( 219)		this->_update = null();
HXLINE( 220)		this->_draw = null();
HXLINE( 221)		this->_activeObject = null();
HXLINE( 222)		this->_visibleObject = null();
HXLINE( 223)		this->_drawCalls = null();
HXLINE( 225)		this->super::destroy();
            	}


void Stats_obj::update(){
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_233_update)
HXLINE( 234)		if (this->_paused) {
HXLINE( 236)			return;
            		}
HXLINE( 238)		int time = (this->_currentTime = ::flixel::FlxG_obj::game->ticks);
HXLINE( 240)		int elapsed = (time - this->_lastTime);
HXLINE( 242)		if ((elapsed > (int)250)) {
HXLINE( 244)			elapsed = (int)250;
            		}
HXLINE( 246)		this->_lastTime = time;
HXLINE( 248)		 ::flixel::_hx_system::debug::stats::Stats _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 248)		_hx_tmp->_updateTimer = (_hx_tmp->_updateTimer + elapsed);
HXLINE( 250)		this->_frameCount++;
HXLINE( 252)		if ((this->_updateTimer > (int)250)) {
HXLINE( 254)			 ::flixel::_hx_system::debug::stats::StatsGraph _hx_tmp1 = this->fpsGraph;
HXDLIN( 254)			int _hx_tmp2 = this->_frameCount;
HXDLIN( 254)			_hx_tmp1->update(((Float)_hx_tmp2 / (Float)((Float)(this->_currentTime - this->_itvTime) / (Float)(int)1000)));
HXLINE( 255)			 ::flixel::_hx_system::debug::stats::StatsGraph _hx_tmp3 = this->memoryGraph;
HXDLIN( 255)			_hx_tmp3->update(((Float)((Float)::openfl::_legacy::_hx_system::System_obj::get_totalMemory() / (Float)(int)1024) / (Float)(int)1000));
HXLINE( 256)			this->updateTexts();
HXLINE( 258)			this->_frameCount = (int)0;
HXLINE( 259)			this->_itvTime = this->_currentTime;
HXLINE( 261)			this->updateTime = (int)0;
HXLINE( 262)			{
HXLINE( 262)				int _g1 = (int)0;
HXDLIN( 262)				int _g = this->_updateMarker;
HXDLIN( 262)				while((_g1 < _g)){
HXLINE( 262)					_g1 = (_g1 + (int)1);
HXDLIN( 262)					int i = (_g1 - (int)1);
HXLINE( 264)					 ::flixel::_hx_system::debug::stats::Stats _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 264)					_hx_tmp4->updateTime = (_hx_tmp4->updateTime + this->_update->__get(i));
            				}
            			}
HXLINE( 267)			{
HXLINE( 267)				int _g11 = (int)0;
HXDLIN( 267)				int _g2 = this->_activeObjectMarker;
HXDLIN( 267)				while((_g11 < _g2)){
HXLINE( 267)					_g11 = (_g11 + (int)1);
HXDLIN( 267)					int i1 = (_g11 - (int)1);
HXLINE( 269)					 ::flixel::_hx_system::debug::stats::Stats _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 269)					_hx_tmp5->activeCount = (_hx_tmp5->activeCount + this->_activeObject->__get(i1));
            				}
            			}
HXLINE( 271)			this->activeCount = ::Std_obj::_hx_int(this->divide(this->activeCount,this->_activeObjectMarker));
HXLINE( 273)			this->drawTime = (int)0;
HXLINE( 274)			{
HXLINE( 274)				int _g12 = (int)0;
HXDLIN( 274)				int _g3 = this->_drawMarker;
HXDLIN( 274)				while((_g12 < _g3)){
HXLINE( 274)					_g12 = (_g12 + (int)1);
HXDLIN( 274)					int i2 = (_g12 - (int)1);
HXLINE( 276)					 ::flixel::_hx_system::debug::stats::Stats _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 276)					_hx_tmp6->drawTime = (_hx_tmp6->drawTime + this->_draw->__get(i2));
            				}
            			}
HXLINE( 279)			{
HXLINE( 279)				int _g13 = (int)0;
HXDLIN( 279)				int _g4 = this->_visibleObjectMarker;
HXDLIN( 279)				while((_g13 < _g4)){
HXLINE( 279)					_g13 = (_g13 + (int)1);
HXDLIN( 279)					int i3 = (_g13 - (int)1);
HXLINE( 281)					 ::flixel::_hx_system::debug::stats::Stats _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 281)					_hx_tmp7->visibleCount = (_hx_tmp7->visibleCount + this->_visibleObject->__get(i3));
            				}
            			}
HXLINE( 283)			this->visibleCount = ::Std_obj::_hx_int(this->divide(this->visibleCount,this->_visibleObjectMarker));
HXLINE( 285)			if (::flixel::FlxG_obj::renderTile) {
HXLINE( 287)				{
HXLINE( 287)					int _g14 = (int)0;
HXDLIN( 287)					int _g5 = this->_drawCallsMarker;
HXDLIN( 287)					while((_g14 < _g5)){
HXLINE( 287)						_g14 = (_g14 + (int)1);
HXDLIN( 287)						int i4 = (_g14 - (int)1);
HXLINE( 289)						 ::flixel::_hx_system::debug::stats::Stats _hx_tmp8 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 289)						_hx_tmp8->drawCallsCount = (_hx_tmp8->drawCallsCount + this->_drawCalls->__get(i4));
            					}
            				}
HXLINE( 291)				this->drawCallsCount = ::Std_obj::_hx_int(this->divide(this->drawCallsCount,this->_drawCallsMarker));
            			}
HXLINE( 294)			this->_updateMarker = (int)0;
HXLINE( 295)			this->_drawMarker = (int)0;
HXLINE( 296)			this->_activeObjectMarker = (int)0;
HXLINE( 297)			this->_visibleObjectMarker = (int)0;
HXLINE( 298)			if (::flixel::FlxG_obj::renderTile) {
HXLINE( 300)				this->_drawCallsMarker = (int)0;
            			}
HXLINE( 303)			 ::flixel::_hx_system::debug::stats::Stats _hx_tmp9 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 303)			_hx_tmp9->_updateTimer = (_hx_tmp9->_updateTimer - (int)250);
            		}
            	}


void Stats_obj::updateTexts(){
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_308_updateTexts)
HXLINE( 309)		Float updTime = ::flixel::math::FlxMath_obj::roundDecimal(this->divide(this->updateTime,this->_updateMarker),(int)1);
HXLINE( 310)		Float drwTime = ::flixel::math::FlxMath_obj::roundDecimal(this->divide(this->drawTime,this->_drawMarker),(int)1);
HXLINE( 312)		this->drawTimeGraph->update(drwTime);
HXLINE( 313)		this->updateTimeGraph->update(updTime);
HXLINE( 315)		 ::openfl::_legacy::text::TextField _hx_tmp = this->_rightTextField;
HXLINE( 318)		::String _hx_tmp1;
HXDLIN( 318)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 318)			_hx_tmp1 = (this->drawCallsCount + HX_("\n",0a,00,00,00));
            		}
            		else {
HXLINE( 318)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXLINE( 315)		_hx_tmp->set_text((((((((((((this->activeCount + HX_(" (",08,1c,00,00)) + updTime) + HX_("ms)\n",a7,a8,63,48)) + this->visibleCount) + HX_(" (",08,1c,00,00)) + drwTime) + HX_("ms)\n",a7,a8,63,48)) + _hx_tmp1) + ::flixel::_hx_system::FlxQuadTree_obj::_NUM_CACHED_QUAD_TREES) + HX_("\n",0a,00,00,00)) + ::flixel::_hx_system::FlxLinkedList_obj::_NUM_CACHED_FLX_LIST));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stats_obj,updateTexts,(void))

Float Stats_obj::divide(Float f1,Float f2){
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_324_divide)
HXLINE( 325)		if ((f2 == (int)0)) {
HXLINE( 326)			return (int)0;
            		}
HXLINE( 327)		return ((Float)f1 / (Float)f2);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stats_obj,divide,return )

Float Stats_obj::currentFps(){
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_335_currentFps)
HXDLIN( 335)		int _hx_tmp = this->_frameCount;
HXDLIN( 335)		return ((Float)_hx_tmp / (Float)((Float)(this->_currentTime - this->_itvTime) / (Float)(int)1000));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stats_obj,currentFps,return )

Float Stats_obj::intervalTime(){
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_343_intervalTime)
HXDLIN( 343)		return ((Float)(this->_currentTime - this->_itvTime) / (Float)(int)1000);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stats_obj,intervalTime,return )

Float Stats_obj::currentMem(){
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_351_currentMem)
HXDLIN( 351)		return ((Float)((Float)::openfl::_legacy::_hx_system::System_obj::get_totalMemory() / (Float)(int)1024) / (Float)(int)1000);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stats_obj,currentMem,return )

void Stats_obj::flixelUpdate(int Time){
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_360_flixelUpdate)
HXLINE( 361)		if (this->_paused) {
HXLINE( 362)			return;
            		}
HXLINE( 363)		::Array< int > _hx_tmp = this->_update;
HXDLIN( 363)		_hx_tmp[this->_updateMarker++] = Time;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stats_obj,flixelUpdate,(void))

void Stats_obj::flixelDraw(int Time){
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_372_flixelDraw)
HXLINE( 373)		if (this->_paused) {
HXLINE( 374)			return;
            		}
HXLINE( 375)		::Array< int > _hx_tmp = this->_draw;
HXDLIN( 375)		_hx_tmp[this->_drawMarker++] = Time;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stats_obj,flixelDraw,(void))

void Stats_obj::activeObjects(int Count){
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_384_activeObjects)
HXLINE( 385)		if (this->_paused) {
HXLINE( 386)			return;
            		}
HXLINE( 387)		::Array< int > _hx_tmp = this->_activeObject;
HXDLIN( 387)		_hx_tmp[this->_activeObjectMarker++] = Count;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stats_obj,activeObjects,(void))

void Stats_obj::visibleObjects(int Count){
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_396_visibleObjects)
HXLINE( 397)		if (this->_paused) {
HXLINE( 398)			return;
            		}
HXLINE( 399)		::Array< int > _hx_tmp = this->_visibleObject;
HXDLIN( 399)		_hx_tmp[this->_visibleObjectMarker++] = Count;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stats_obj,visibleObjects,(void))

void Stats_obj::drawCalls(int Drawcalls){
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_408_drawCalls)
HXLINE( 409)		if (this->_paused) {
HXLINE( 410)			return;
            		}
HXLINE( 411)		::Array< int > _hx_tmp = this->_drawCalls;
HXDLIN( 411)		_hx_tmp[this->_drawCallsMarker++] = Drawcalls;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stats_obj,drawCalls,(void))

void Stats_obj::onFocus(){
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_419_onFocus)
HXDLIN( 419)		this->_paused = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stats_obj,onFocus,(void))

void Stats_obj::onFocusLost(){
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_427_onFocusLost)
HXDLIN( 427)		this->_paused = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stats_obj,onFocusLost,(void))

void Stats_obj::toggleSize(){
            	HX_GC_STACKFRAME(&_hx_pos_a2cdb8120663480d_431_toggleSize)
HXLINE( 432)		if ((this->_width == (int)160)) {
HXLINE( 434)			this->resize((int)320,this->_height);
HXLINE( 435)			{
HXLINE( 435)				 ::flixel::_hx_system::debug::stats::Stats _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 435)				_g->set_x((_g->get_x() - (int)160));
            			}
HXLINE( 436)			this->drawTimeGraph->set_visible(true);
HXLINE( 437)			this->updateTimeGraph->set_visible(true);
HXLINE( 438)			 ::flixel::_hx_system::ui::FlxSystemButton _hx_tmp = this->_toggleSizeButton;
HXDLIN( 438)			_hx_tmp->changeIcon( ::flixel::_hx_system::debug::stats::_Stats::GraphicMinimizeButton_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()));
            		}
            		else {
HXLINE( 442)			this->resize((int)160,this->_height);
HXLINE( 443)			{
HXLINE( 443)				 ::flixel::_hx_system::debug::stats::Stats _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 443)				_g1->set_x((_g1->get_x() + (int)160));
            			}
HXLINE( 444)			this->drawTimeGraph->set_visible(false);
HXLINE( 445)			this->updateTimeGraph->set_visible(false);
HXLINE( 446)			 ::flixel::_hx_system::ui::FlxSystemButton _hx_tmp1 = this->_toggleSizeButton;
HXDLIN( 446)			_hx_tmp1->changeIcon( ::flixel::_hx_system::debug::stats::_Stats::GraphicMaximizeButton_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()));
            		}
HXLINE( 449)		this->updateSize();
HXLINE( 450)		this->bound();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stats_obj,toggleSize,(void))

void Stats_obj::updateSize(){
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_454_updateSize)
HXLINE( 455)		this->super::updateSize();
HXLINE( 456)		if (hx::IsNotNull( this->_toggleSizeButton )) {
HXLINE( 458)			 ::flixel::_hx_system::ui::FlxSystemButton _hx_tmp = this->_toggleSizeButton;
HXDLIN( 458)			int _hx_tmp1 = this->_width;
HXDLIN( 458)			_hx_tmp->set_x(((_hx_tmp1 - this->_toggleSizeButton->get_width()) - (int)3));
HXLINE( 459)			this->_toggleSizeButton->set_y((int)3);
            		}
            	}


int Stats_obj::UPDATE_DELAY;

int Stats_obj::INITIAL_WIDTH;

int Stats_obj::MIN_HEIGHT;

int Stats_obj::FPS_COLOR;

int Stats_obj::MEMORY_COLOR;

int Stats_obj::DRAW_TIME_COLOR;

int Stats_obj::UPDATE_TIME_COLOR;

int Stats_obj::LABEL_COLOR;

int Stats_obj::TEXT_SIZE;

int Stats_obj::DECIMALS;


hx::ObjectPtr< Stats_obj > Stats_obj::__new() {
	hx::ObjectPtr< Stats_obj > __this = new Stats_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Stats_obj > Stats_obj::__alloc(hx::Ctx *_hx_ctx) {
	Stats_obj *__this = (Stats_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Stats_obj), true, "flixel.system.debug.stats.Stats"));
	*(void **)__this = Stats_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Stats_obj::Stats_obj()
{
}

void Stats_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Stats);
	HX_MARK_MEMBER_NAME(_leftTextField,"_leftTextField");
	HX_MARK_MEMBER_NAME(_rightTextField,"_rightTextField");
	HX_MARK_MEMBER_NAME(_itvTime,"_itvTime");
	HX_MARK_MEMBER_NAME(_frameCount,"_frameCount");
	HX_MARK_MEMBER_NAME(_currentTime,"_currentTime");
	HX_MARK_MEMBER_NAME(fpsGraph,"fpsGraph");
	HX_MARK_MEMBER_NAME(memoryGraph,"memoryGraph");
	HX_MARK_MEMBER_NAME(drawTimeGraph,"drawTimeGraph");
	HX_MARK_MEMBER_NAME(updateTimeGraph,"updateTimeGraph");
	HX_MARK_MEMBER_NAME(flashPlayerFramerate,"flashPlayerFramerate");
	HX_MARK_MEMBER_NAME(visibleCount,"visibleCount");
	HX_MARK_MEMBER_NAME(activeCount,"activeCount");
	HX_MARK_MEMBER_NAME(updateTime,"updateTime");
	HX_MARK_MEMBER_NAME(drawTime,"drawTime");
	HX_MARK_MEMBER_NAME(drawCallsCount,"drawCallsCount");
	HX_MARK_MEMBER_NAME(_lastTime,"_lastTime");
	HX_MARK_MEMBER_NAME(_updateTimer,"_updateTimer");
	HX_MARK_MEMBER_NAME(_update,"_update");
	HX_MARK_MEMBER_NAME(_updateMarker,"_updateMarker");
	HX_MARK_MEMBER_NAME(_draw,"_draw");
	HX_MARK_MEMBER_NAME(_drawMarker,"_drawMarker");
	HX_MARK_MEMBER_NAME(_drawCalls,"_drawCalls");
	HX_MARK_MEMBER_NAME(_drawCallsMarker,"_drawCallsMarker");
	HX_MARK_MEMBER_NAME(_visibleObject,"_visibleObject");
	HX_MARK_MEMBER_NAME(_visibleObjectMarker,"_visibleObjectMarker");
	HX_MARK_MEMBER_NAME(_activeObject,"_activeObject");
	HX_MARK_MEMBER_NAME(_activeObjectMarker,"_activeObjectMarker");
	HX_MARK_MEMBER_NAME(_paused,"_paused");
	HX_MARK_MEMBER_NAME(_toggleSizeButton,"_toggleSizeButton");
	 ::flixel::_hx_system::debug::Window_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Stats_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_leftTextField,"_leftTextField");
	HX_VISIT_MEMBER_NAME(_rightTextField,"_rightTextField");
	HX_VISIT_MEMBER_NAME(_itvTime,"_itvTime");
	HX_VISIT_MEMBER_NAME(_frameCount,"_frameCount");
	HX_VISIT_MEMBER_NAME(_currentTime,"_currentTime");
	HX_VISIT_MEMBER_NAME(fpsGraph,"fpsGraph");
	HX_VISIT_MEMBER_NAME(memoryGraph,"memoryGraph");
	HX_VISIT_MEMBER_NAME(drawTimeGraph,"drawTimeGraph");
	HX_VISIT_MEMBER_NAME(updateTimeGraph,"updateTimeGraph");
	HX_VISIT_MEMBER_NAME(flashPlayerFramerate,"flashPlayerFramerate");
	HX_VISIT_MEMBER_NAME(visibleCount,"visibleCount");
	HX_VISIT_MEMBER_NAME(activeCount,"activeCount");
	HX_VISIT_MEMBER_NAME(updateTime,"updateTime");
	HX_VISIT_MEMBER_NAME(drawTime,"drawTime");
	HX_VISIT_MEMBER_NAME(drawCallsCount,"drawCallsCount");
	HX_VISIT_MEMBER_NAME(_lastTime,"_lastTime");
	HX_VISIT_MEMBER_NAME(_updateTimer,"_updateTimer");
	HX_VISIT_MEMBER_NAME(_update,"_update");
	HX_VISIT_MEMBER_NAME(_updateMarker,"_updateMarker");
	HX_VISIT_MEMBER_NAME(_draw,"_draw");
	HX_VISIT_MEMBER_NAME(_drawMarker,"_drawMarker");
	HX_VISIT_MEMBER_NAME(_drawCalls,"_drawCalls");
	HX_VISIT_MEMBER_NAME(_drawCallsMarker,"_drawCallsMarker");
	HX_VISIT_MEMBER_NAME(_visibleObject,"_visibleObject");
	HX_VISIT_MEMBER_NAME(_visibleObjectMarker,"_visibleObjectMarker");
	HX_VISIT_MEMBER_NAME(_activeObject,"_activeObject");
	HX_VISIT_MEMBER_NAME(_activeObjectMarker,"_activeObjectMarker");
	HX_VISIT_MEMBER_NAME(_paused,"_paused");
	HX_VISIT_MEMBER_NAME(_toggleSizeButton,"_toggleSizeButton");
	 ::flixel::_hx_system::debug::Window_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Stats_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_draw") ) { return hx::Val( _draw ); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"divide") ) { return hx::Val( divide_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_update") ) { return hx::Val( _update ); }
		if (HX_FIELD_EQ(inName,"_paused") ) { return hx::Val( _paused ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return hx::Val( onFocus_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_itvTime") ) { return hx::Val( _itvTime ); }
		if (HX_FIELD_EQ(inName,"fpsGraph") ) { return hx::Val( fpsGraph ); }
		if (HX_FIELD_EQ(inName,"drawTime") ) { return hx::Val( drawTime ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_lastTime") ) { return hx::Val( _lastTime ); }
		if (HX_FIELD_EQ(inName,"drawCalls") ) { return hx::Val( drawCalls_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"updateTime") ) { return hx::Val( updateTime ); }
		if (HX_FIELD_EQ(inName,"_drawCalls") ) { return hx::Val( _drawCalls ); }
		if (HX_FIELD_EQ(inName,"currentFps") ) { return hx::Val( currentFps_dyn() ); }
		if (HX_FIELD_EQ(inName,"currentMem") ) { return hx::Val( currentMem_dyn() ); }
		if (HX_FIELD_EQ(inName,"flixelDraw") ) { return hx::Val( flixelDraw_dyn() ); }
		if (HX_FIELD_EQ(inName,"toggleSize") ) { return hx::Val( toggleSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateSize") ) { return hx::Val( updateSize_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_frameCount") ) { return hx::Val( _frameCount ); }
		if (HX_FIELD_EQ(inName,"memoryGraph") ) { return hx::Val( memoryGraph ); }
		if (HX_FIELD_EQ(inName,"activeCount") ) { return hx::Val( activeCount ); }
		if (HX_FIELD_EQ(inName,"_drawMarker") ) { return hx::Val( _drawMarker ); }
		if (HX_FIELD_EQ(inName,"updateTexts") ) { return hx::Val( updateTexts_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return hx::Val( onFocusLost_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_currentTime") ) { return hx::Val( _currentTime ); }
		if (HX_FIELD_EQ(inName,"visibleCount") ) { return hx::Val( visibleCount ); }
		if (HX_FIELD_EQ(inName,"_updateTimer") ) { return hx::Val( _updateTimer ); }
		if (HX_FIELD_EQ(inName,"intervalTime") ) { return hx::Val( intervalTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"flixelUpdate") ) { return hx::Val( flixelUpdate_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"drawTimeGraph") ) { return hx::Val( drawTimeGraph ); }
		if (HX_FIELD_EQ(inName,"_updateMarker") ) { return hx::Val( _updateMarker ); }
		if (HX_FIELD_EQ(inName,"_activeObject") ) { return hx::Val( _activeObject ); }
		if (HX_FIELD_EQ(inName,"activeObjects") ) { return hx::Val( activeObjects_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_leftTextField") ) { return hx::Val( _leftTextField ); }
		if (HX_FIELD_EQ(inName,"drawCallsCount") ) { return hx::Val( drawCallsCount ); }
		if (HX_FIELD_EQ(inName,"_visibleObject") ) { return hx::Val( _visibleObject ); }
		if (HX_FIELD_EQ(inName,"visibleObjects") ) { return hx::Val( visibleObjects_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_rightTextField") ) { return hx::Val( _rightTextField ); }
		if (HX_FIELD_EQ(inName,"updateTimeGraph") ) { return hx::Val( updateTimeGraph ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_drawCallsMarker") ) { return hx::Val( _drawCallsMarker ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_toggleSizeButton") ) { return hx::Val( _toggleSizeButton ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_activeObjectMarker") ) { return hx::Val( _activeObjectMarker ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"flashPlayerFramerate") ) { return hx::Val( flashPlayerFramerate ); }
		if (HX_FIELD_EQ(inName,"_visibleObjectMarker") ) { return hx::Val( _visibleObjectMarker ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Stats_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"MIN_HEIGHT") ) { outValue = ( MIN_HEIGHT ); return true; }
	}
	return false;
}

hx::Val Stats_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_draw") ) { _draw=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_update") ) { _update=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_paused") ) { _paused=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_itvTime") ) { _itvTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fpsGraph") ) { fpsGraph=inValue.Cast<  ::flixel::_hx_system::debug::stats::StatsGraph >(); return inValue; }
		if (HX_FIELD_EQ(inName,"drawTime") ) { drawTime=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_lastTime") ) { _lastTime=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"updateTime") ) { updateTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_drawCalls") ) { _drawCalls=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_frameCount") ) { _frameCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"memoryGraph") ) { memoryGraph=inValue.Cast<  ::flixel::_hx_system::debug::stats::StatsGraph >(); return inValue; }
		if (HX_FIELD_EQ(inName,"activeCount") ) { activeCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_drawMarker") ) { _drawMarker=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_currentTime") ) { _currentTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"visibleCount") ) { visibleCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_updateTimer") ) { _updateTimer=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"drawTimeGraph") ) { drawTimeGraph=inValue.Cast<  ::flixel::_hx_system::debug::stats::StatsGraph >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_updateMarker") ) { _updateMarker=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_activeObject") ) { _activeObject=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_leftTextField") ) { _leftTextField=inValue.Cast<  ::openfl::_legacy::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"drawCallsCount") ) { drawCallsCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_visibleObject") ) { _visibleObject=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_rightTextField") ) { _rightTextField=inValue.Cast<  ::openfl::_legacy::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateTimeGraph") ) { updateTimeGraph=inValue.Cast<  ::flixel::_hx_system::debug::stats::StatsGraph >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_drawCallsMarker") ) { _drawCallsMarker=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_toggleSizeButton") ) { _toggleSizeButton=inValue.Cast<  ::flixel::_hx_system::ui::FlxSystemButton >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_activeObjectMarker") ) { _activeObjectMarker=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"flashPlayerFramerate") ) { flashPlayerFramerate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_visibleObjectMarker") ) { _visibleObjectMarker=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Stats_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"MIN_HEIGHT") ) { MIN_HEIGHT=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Stats_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_leftTextField","\x07","\x34","\xbe","\x51"));
	outFields->push(HX_HCSTRING("_rightTextField","\xf0","\xe5","\xf5","\xc1"));
	outFields->push(HX_HCSTRING("_itvTime","\x59","\x55","\x8a","\xd2"));
	outFields->push(HX_HCSTRING("_frameCount","\x81","\x46","\x13","\x00"));
	outFields->push(HX_HCSTRING("_currentTime","\xe7","\x52","\x98","\xeb"));
	outFields->push(HX_HCSTRING("fpsGraph","\xa5","\x6a","\x9f","\x23"));
	outFields->push(HX_HCSTRING("memoryGraph","\x8d","\x30","\x93","\x6c"));
	outFields->push(HX_HCSTRING("drawTimeGraph","\x5d","\xf7","\x01","\xae"));
	outFields->push(HX_HCSTRING("updateTimeGraph","\xb8","\xb4","\x65","\x9e"));
	outFields->push(HX_HCSTRING("flashPlayerFramerate","\x1c","\x9e","\xc7","\x3e"));
	outFields->push(HX_HCSTRING("visibleCount","\xfd","\x5e","\xe8","\xbf"));
	outFields->push(HX_HCSTRING("activeCount","\x29","\x45","\xa8","\xa6"));
	outFields->push(HX_HCSTRING("updateTime","\xb6","\xb6","\xb1","\x05"));
	outFields->push(HX_HCSTRING("drawTime","\x31","\x76","\x66","\x61"));
	outFields->push(HX_HCSTRING("drawCallsCount","\x9e","\x73","\x40","\xb2"));
	outFields->push(HX_HCSTRING("_lastTime","\xe2","\xdc","\xdb","\x27"));
	outFields->push(HX_HCSTRING("_updateTimer","\xfd","\xd6","\xd7","\x5b"));
	outFields->push(HX_HCSTRING("_update","\xa8","\x97","\x7c","\xf5"));
	outFields->push(HX_HCSTRING("_updateMarker","\x82","\xaf","\xa2","\x9c"));
	outFields->push(HX_HCSTRING("_draw","\xe3","\x47","\x81","\xf5"));
	outFields->push(HX_HCSTRING("_drawMarker","\xfd","\xbd","\xbd","\xce"));
	outFields->push(HX_HCSTRING("_drawCalls","\x32","\x23","\xc9","\x64"));
	outFields->push(HX_HCSTRING("_drawCallsMarker","\x8c","\x7e","\xfb","\x1e"));
	outFields->push(HX_HCSTRING("_visibleObject","\x12","\x3d","\x83","\xb2"));
	outFields->push(HX_HCSTRING("_visibleObjectMarker","\x6c","\x40","\x96","\x6f"));
	outFields->push(HX_HCSTRING("_activeObject","\x04","\x60","\xc9","\x57"));
	outFields->push(HX_HCSTRING("_activeObjectMarker","\xde","\x24","\x6c","\x76"));
	outFields->push(HX_HCSTRING("_paused","\x4d","\x52","\xfb","\x5d"));
	outFields->push(HX_HCSTRING("_toggleSizeButton","\xa6","\x70","\xb9","\x01"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Stats_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_legacy::text::TextField*/ ,(int)offsetof(Stats_obj,_leftTextField),HX_HCSTRING("_leftTextField","\x07","\x34","\xbe","\x51")},
	{hx::fsObject /*::openfl::_legacy::text::TextField*/ ,(int)offsetof(Stats_obj,_rightTextField),HX_HCSTRING("_rightTextField","\xf0","\xe5","\xf5","\xc1")},
	{hx::fsInt,(int)offsetof(Stats_obj,_itvTime),HX_HCSTRING("_itvTime","\x59","\x55","\x8a","\xd2")},
	{hx::fsInt,(int)offsetof(Stats_obj,_frameCount),HX_HCSTRING("_frameCount","\x81","\x46","\x13","\x00")},
	{hx::fsInt,(int)offsetof(Stats_obj,_currentTime),HX_HCSTRING("_currentTime","\xe7","\x52","\x98","\xeb")},
	{hx::fsObject /*::flixel::_hx_system::debug::stats::StatsGraph*/ ,(int)offsetof(Stats_obj,fpsGraph),HX_HCSTRING("fpsGraph","\xa5","\x6a","\x9f","\x23")},
	{hx::fsObject /*::flixel::_hx_system::debug::stats::StatsGraph*/ ,(int)offsetof(Stats_obj,memoryGraph),HX_HCSTRING("memoryGraph","\x8d","\x30","\x93","\x6c")},
	{hx::fsObject /*::flixel::_hx_system::debug::stats::StatsGraph*/ ,(int)offsetof(Stats_obj,drawTimeGraph),HX_HCSTRING("drawTimeGraph","\x5d","\xf7","\x01","\xae")},
	{hx::fsObject /*::flixel::_hx_system::debug::stats::StatsGraph*/ ,(int)offsetof(Stats_obj,updateTimeGraph),HX_HCSTRING("updateTimeGraph","\xb8","\xb4","\x65","\x9e")},
	{hx::fsFloat,(int)offsetof(Stats_obj,flashPlayerFramerate),HX_HCSTRING("flashPlayerFramerate","\x1c","\x9e","\xc7","\x3e")},
	{hx::fsInt,(int)offsetof(Stats_obj,visibleCount),HX_HCSTRING("visibleCount","\xfd","\x5e","\xe8","\xbf")},
	{hx::fsInt,(int)offsetof(Stats_obj,activeCount),HX_HCSTRING("activeCount","\x29","\x45","\xa8","\xa6")},
	{hx::fsInt,(int)offsetof(Stats_obj,updateTime),HX_HCSTRING("updateTime","\xb6","\xb6","\xb1","\x05")},
	{hx::fsInt,(int)offsetof(Stats_obj,drawTime),HX_HCSTRING("drawTime","\x31","\x76","\x66","\x61")},
	{hx::fsInt,(int)offsetof(Stats_obj,drawCallsCount),HX_HCSTRING("drawCallsCount","\x9e","\x73","\x40","\xb2")},
	{hx::fsInt,(int)offsetof(Stats_obj,_lastTime),HX_HCSTRING("_lastTime","\xe2","\xdc","\xdb","\x27")},
	{hx::fsInt,(int)offsetof(Stats_obj,_updateTimer),HX_HCSTRING("_updateTimer","\xfd","\xd6","\xd7","\x5b")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Stats_obj,_update),HX_HCSTRING("_update","\xa8","\x97","\x7c","\xf5")},
	{hx::fsInt,(int)offsetof(Stats_obj,_updateMarker),HX_HCSTRING("_updateMarker","\x82","\xaf","\xa2","\x9c")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Stats_obj,_draw),HX_HCSTRING("_draw","\xe3","\x47","\x81","\xf5")},
	{hx::fsInt,(int)offsetof(Stats_obj,_drawMarker),HX_HCSTRING("_drawMarker","\xfd","\xbd","\xbd","\xce")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Stats_obj,_drawCalls),HX_HCSTRING("_drawCalls","\x32","\x23","\xc9","\x64")},
	{hx::fsInt,(int)offsetof(Stats_obj,_drawCallsMarker),HX_HCSTRING("_drawCallsMarker","\x8c","\x7e","\xfb","\x1e")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Stats_obj,_visibleObject),HX_HCSTRING("_visibleObject","\x12","\x3d","\x83","\xb2")},
	{hx::fsInt,(int)offsetof(Stats_obj,_visibleObjectMarker),HX_HCSTRING("_visibleObjectMarker","\x6c","\x40","\x96","\x6f")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Stats_obj,_activeObject),HX_HCSTRING("_activeObject","\x04","\x60","\xc9","\x57")},
	{hx::fsInt,(int)offsetof(Stats_obj,_activeObjectMarker),HX_HCSTRING("_activeObjectMarker","\xde","\x24","\x6c","\x76")},
	{hx::fsBool,(int)offsetof(Stats_obj,_paused),HX_HCSTRING("_paused","\x4d","\x52","\xfb","\x5d")},
	{hx::fsObject /*::flixel::_hx_system::ui::FlxSystemButton*/ ,(int)offsetof(Stats_obj,_toggleSizeButton),HX_HCSTRING("_toggleSizeButton","\xa6","\x70","\xb9","\x01")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Stats_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Stats_obj::UPDATE_DELAY,HX_HCSTRING("UPDATE_DELAY","\x6d","\x35","\xf7","\x07")},
	{hx::fsInt,(void *) &Stats_obj::INITIAL_WIDTH,HX_HCSTRING("INITIAL_WIDTH","\x8b","\x7c","\x50","\x0d")},
	{hx::fsInt,(void *) &Stats_obj::MIN_HEIGHT,HX_HCSTRING("MIN_HEIGHT","\x54","\x8a","\xe1","\x8d")},
	{hx::fsInt,(void *) &Stats_obj::FPS_COLOR,HX_HCSTRING("FPS_COLOR","\x0d","\xd1","\x6d","\xcd")},
	{hx::fsInt,(void *) &Stats_obj::MEMORY_COLOR,HX_HCSTRING("MEMORY_COLOR","\x45","\x1e","\xbd","\xfc")},
	{hx::fsInt,(void *) &Stats_obj::DRAW_TIME_COLOR,HX_HCSTRING("DRAW_TIME_COLOR","\xec","\x9b","\xc0","\x3b")},
	{hx::fsInt,(void *) &Stats_obj::UPDATE_TIME_COLOR,HX_HCSTRING("UPDATE_TIME_COLOR","\x07","\x42","\x13","\x96")},
	{hx::fsInt,(void *) &Stats_obj::LABEL_COLOR,HX_HCSTRING("LABEL_COLOR","\x58","\x4d","\x57","\xfe")},
	{hx::fsInt,(void *) &Stats_obj::TEXT_SIZE,HX_HCSTRING("TEXT_SIZE","\xd3","\xdc","\x4f","\x6d")},
	{hx::fsInt,(void *) &Stats_obj::DECIMALS,HX_HCSTRING("DECIMALS","\xc2","\xda","\xef","\x6b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Stats_obj_sMemberFields[] = {
	HX_HCSTRING("_leftTextField","\x07","\x34","\xbe","\x51"),
	HX_HCSTRING("_rightTextField","\xf0","\xe5","\xf5","\xc1"),
	HX_HCSTRING("_itvTime","\x59","\x55","\x8a","\xd2"),
	HX_HCSTRING("_frameCount","\x81","\x46","\x13","\x00"),
	HX_HCSTRING("_currentTime","\xe7","\x52","\x98","\xeb"),
	HX_HCSTRING("fpsGraph","\xa5","\x6a","\x9f","\x23"),
	HX_HCSTRING("memoryGraph","\x8d","\x30","\x93","\x6c"),
	HX_HCSTRING("drawTimeGraph","\x5d","\xf7","\x01","\xae"),
	HX_HCSTRING("updateTimeGraph","\xb8","\xb4","\x65","\x9e"),
	HX_HCSTRING("flashPlayerFramerate","\x1c","\x9e","\xc7","\x3e"),
	HX_HCSTRING("visibleCount","\xfd","\x5e","\xe8","\xbf"),
	HX_HCSTRING("activeCount","\x29","\x45","\xa8","\xa6"),
	HX_HCSTRING("updateTime","\xb6","\xb6","\xb1","\x05"),
	HX_HCSTRING("drawTime","\x31","\x76","\x66","\x61"),
	HX_HCSTRING("drawCallsCount","\x9e","\x73","\x40","\xb2"),
	HX_HCSTRING("_lastTime","\xe2","\xdc","\xdb","\x27"),
	HX_HCSTRING("_updateTimer","\xfd","\xd6","\xd7","\x5b"),
	HX_HCSTRING("_update","\xa8","\x97","\x7c","\xf5"),
	HX_HCSTRING("_updateMarker","\x82","\xaf","\xa2","\x9c"),
	HX_HCSTRING("_draw","\xe3","\x47","\x81","\xf5"),
	HX_HCSTRING("_drawMarker","\xfd","\xbd","\xbd","\xce"),
	HX_HCSTRING("_drawCalls","\x32","\x23","\xc9","\x64"),
	HX_HCSTRING("_drawCallsMarker","\x8c","\x7e","\xfb","\x1e"),
	HX_HCSTRING("_visibleObject","\x12","\x3d","\x83","\xb2"),
	HX_HCSTRING("_visibleObjectMarker","\x6c","\x40","\x96","\x6f"),
	HX_HCSTRING("_activeObject","\x04","\x60","\xc9","\x57"),
	HX_HCSTRING("_activeObjectMarker","\xde","\x24","\x6c","\x76"),
	HX_HCSTRING("_paused","\x4d","\x52","\xfb","\x5d"),
	HX_HCSTRING("_toggleSizeButton","\xa6","\x70","\xb9","\x01"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateTexts","\x5d","\xb4","\x31","\xf3"),
	HX_HCSTRING("divide","\x79","\x2f","\x12","\xbf"),
	HX_HCSTRING("currentFps","\x30","\x8d","\x28","\xc7"),
	HX_HCSTRING("intervalTime","\xf2","\xf7","\x28","\x85"),
	HX_HCSTRING("currentMem","\x5c","\xd3","\x2d","\xc7"),
	HX_HCSTRING("flixelUpdate","\x85","\x69","\x5e","\x27"),
	HX_HCSTRING("flixelDraw","\x80","\xf8","\xdf","\x4d"),
	HX_HCSTRING("activeObjects","\xae","\xb3","\x18","\x3a"),
	HX_HCSTRING("visibleObjects","\x82","\xea","\xf1","\x36"),
	HX_HCSTRING("drawCalls","\x71","\xa7","\x26","\x09"),
	HX_HCSTRING("onFocus","\x39","\xfe","\xc6","\x9a"),
	HX_HCSTRING("onFocusLost","\xbd","\xe4","\x85","\x41"),
	HX_HCSTRING("toggleSize","\x75","\xe6","\x09","\xe4"),
	HX_HCSTRING("updateSize","\x6a","\x8b","\x08","\x05"),
	::String(null()) };

static void Stats_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Stats_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Stats_obj::UPDATE_DELAY,"UPDATE_DELAY");
	HX_MARK_MEMBER_NAME(Stats_obj::INITIAL_WIDTH,"INITIAL_WIDTH");
	HX_MARK_MEMBER_NAME(Stats_obj::MIN_HEIGHT,"MIN_HEIGHT");
	HX_MARK_MEMBER_NAME(Stats_obj::FPS_COLOR,"FPS_COLOR");
	HX_MARK_MEMBER_NAME(Stats_obj::MEMORY_COLOR,"MEMORY_COLOR");
	HX_MARK_MEMBER_NAME(Stats_obj::DRAW_TIME_COLOR,"DRAW_TIME_COLOR");
	HX_MARK_MEMBER_NAME(Stats_obj::UPDATE_TIME_COLOR,"UPDATE_TIME_COLOR");
	HX_MARK_MEMBER_NAME(Stats_obj::LABEL_COLOR,"LABEL_COLOR");
	HX_MARK_MEMBER_NAME(Stats_obj::TEXT_SIZE,"TEXT_SIZE");
	HX_MARK_MEMBER_NAME(Stats_obj::DECIMALS,"DECIMALS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Stats_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Stats_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Stats_obj::UPDATE_DELAY,"UPDATE_DELAY");
	HX_VISIT_MEMBER_NAME(Stats_obj::INITIAL_WIDTH,"INITIAL_WIDTH");
	HX_VISIT_MEMBER_NAME(Stats_obj::MIN_HEIGHT,"MIN_HEIGHT");
	HX_VISIT_MEMBER_NAME(Stats_obj::FPS_COLOR,"FPS_COLOR");
	HX_VISIT_MEMBER_NAME(Stats_obj::MEMORY_COLOR,"MEMORY_COLOR");
	HX_VISIT_MEMBER_NAME(Stats_obj::DRAW_TIME_COLOR,"DRAW_TIME_COLOR");
	HX_VISIT_MEMBER_NAME(Stats_obj::UPDATE_TIME_COLOR,"UPDATE_TIME_COLOR");
	HX_VISIT_MEMBER_NAME(Stats_obj::LABEL_COLOR,"LABEL_COLOR");
	HX_VISIT_MEMBER_NAME(Stats_obj::TEXT_SIZE,"TEXT_SIZE");
	HX_VISIT_MEMBER_NAME(Stats_obj::DECIMALS,"DECIMALS");
};

#endif

hx::Class Stats_obj::__mClass;

static ::String Stats_obj_sStaticFields[] = {
	HX_HCSTRING("UPDATE_DELAY","\x6d","\x35","\xf7","\x07"),
	HX_HCSTRING("INITIAL_WIDTH","\x8b","\x7c","\x50","\x0d"),
	HX_HCSTRING("MIN_HEIGHT","\x54","\x8a","\xe1","\x8d"),
	HX_HCSTRING("FPS_COLOR","\x0d","\xd1","\x6d","\xcd"),
	HX_HCSTRING("MEMORY_COLOR","\x45","\x1e","\xbd","\xfc"),
	HX_HCSTRING("DRAW_TIME_COLOR","\xec","\x9b","\xc0","\x3b"),
	HX_HCSTRING("UPDATE_TIME_COLOR","\x07","\x42","\x13","\x96"),
	HX_HCSTRING("LABEL_COLOR","\x58","\x4d","\x57","\xfe"),
	HX_HCSTRING("TEXT_SIZE","\xd3","\xdc","\x4f","\x6d"),
	HX_HCSTRING("DECIMALS","\xc2","\xda","\xef","\x6b"),
	::String(null())
};

void Stats_obj::__register()
{
	hx::Object *dummy = new Stats_obj;
	Stats_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.debug.stats.Stats","\xe8","\x2a","\x65","\x37");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Stats_obj::__GetStatic;
	__mClass->mSetStaticField = &Stats_obj::__SetStatic;
	__mClass->mMarkFunc = Stats_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Stats_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Stats_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Stats_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Stats_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Stats_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Stats_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Stats_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_33_boot)
HXDLIN(  33)		UPDATE_DELAY = (int)250;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_37_boot)
HXDLIN(  37)		INITIAL_WIDTH = (int)160;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_41_boot)
HXDLIN(  41)		MIN_HEIGHT = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_43_boot)
HXDLIN(  43)		FPS_COLOR = (int)-6881536;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_44_boot)
HXDLIN(  44)		MEMORY_COLOR = (int)-16737025;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_45_boot)
HXDLIN(  45)		DRAW_TIME_COLOR = (int)-5898236;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_46_boot)
HXDLIN(  46)		UPDATE_TIME_COLOR = (int)-2305024;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_48_boot)
HXDLIN(  48)		LABEL_COLOR = (int)-1426063361;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_49_boot)
HXDLIN(  49)		TEXT_SIZE = (int)11;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a2cdb8120663480d_50_boot)
HXDLIN(  50)		DECIMALS = (int)1;
            	}
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace stats
