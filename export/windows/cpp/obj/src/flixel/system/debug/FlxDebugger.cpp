// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxAssets
#include <flixel/system/FlxAssets.h>
#endif
#ifndef INCLUDED_flixel_system_FlxVersion
#include <flixel/system/FlxVersion.h>
#endif
#ifndef INCLUDED_flixel_system_debug_FlxDebugger
#include <flixel/system/debug/FlxDebugger.h>
#endif
#ifndef INCLUDED_flixel_system_debug_FlxDebuggerLayout
#include <flixel/system/debug/FlxDebuggerLayout.h>
#endif
#ifndef INCLUDED_flixel_system_debug_GraphicBitmapLog
#include <flixel/system/debug/GraphicBitmapLog.h>
#endif
#ifndef INCLUDED_flixel_system_debug_GraphicConsole
#include <flixel/system/debug/GraphicConsole.h>
#endif
#ifndef INCLUDED_flixel_system_debug_GraphicInteractive
#include <flixel/system/debug/GraphicInteractive.h>
#endif
#ifndef INCLUDED_flixel_system_debug_GraphicLog
#include <flixel/system/debug/GraphicLog.h>
#endif
#ifndef INCLUDED_flixel_system_debug_GraphicStats
#include <flixel/system/debug/GraphicStats.h>
#endif
#ifndef INCLUDED_flixel_system_debug_GraphicWatch
#include <flixel/system/debug/GraphicWatch.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Tooltip
#include <flixel/system/debug/Tooltip.h>
#endif
#ifndef INCLUDED_flixel_system_debug_VCR
#include <flixel/system/debug/VCR.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug__FlxDebugger_GraphicDrawDebug
#include <flixel/system/debug/_FlxDebugger/GraphicDrawDebug.h>
#endif
#ifndef INCLUDED_flixel_system_debug__FlxDebugger_GraphicFlixel
#include <flixel/system/debug/_FlxDebugger/GraphicFlixel.h>
#endif
#ifndef INCLUDED_flixel_system_debug_completion_CompletionList
#include <flixel/system/debug/completion/CompletionList.h>
#endif
#ifndef INCLUDED_flixel_system_debug_console_Console
#include <flixel/system/debug/console/Console.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_Interaction
#include <flixel/system/debug/interaction/Interaction.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_BitmapLog
#include <flixel/system/debug/log/BitmapLog.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_Log
#include <flixel/system/debug/log/Log.h>
#endif
#ifndef INCLUDED_flixel_system_debug_stats_Stats
#include <flixel/system/debug/stats/Stats.h>
#endif
#ifndef INCLUDED_flixel_system_debug_watch_Tracker
#include <flixel/system/debug/watch/Tracker.h>
#endif
#ifndef INCLUDED_flixel_system_debug_watch_Watch
#include <flixel/system/debug/watch/Watch.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSystemButton
#include <flixel/system/ui/FlxSystemButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxHorizontalAlign
#include <flixel/util/FlxHorizontalAlign.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Graphics
#include <openfl/_legacy/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_MovieClip
#include <openfl/_legacy/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Stage
#include <openfl/_legacy/display/Stage.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_MouseEvent
#include <openfl/_legacy/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl__legacy_net_URLRequest
#include <openfl/_legacy/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextField
#include <openfl/_legacy/text/TextField.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextFieldAutoSize
#include <openfl/_legacy/text/TextFieldAutoSize.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextFormat
#include <openfl/_legacy/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_168_new,"flixel.system.debug.FlxDebugger","new",0x06ebd57d,"flixel.system.debug.FlxDebugger.new","flixel/system/debug/FlxDebugger.hx",168,0xd9fc0a74)
HX_DEFINE_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_63_new,"flixel.system.debug.FlxDebugger","new",0x06ebd57d,"flixel.system.debug.FlxDebugger.new","flixel/system/debug/FlxDebugger.hx",63,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_189_destroy,"flixel.system.debug.FlxDebugger","destroy",0x0aa38497,"flixel.system.debug.FlxDebugger.destroy","flixel/system/debug/FlxDebugger.hx",189,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_235_update,"flixel.system.debug.FlxDebugger","update",0x10a9d10c,"flixel.system.debug.FlxDebugger.update","flixel/system/debug/FlxDebugger.hx",235,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_245_setLayout,"flixel.system.debug.FlxDebugger","setLayout",0x62385cc9,"flixel.system.debug.FlxDebugger.setLayout","flixel/system/debug/FlxDebugger.hx",245,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_256_resetLayout,"flixel.system.debug.FlxDebugger","resetLayout",0xf3cb1bf6,"flixel.system.debug.FlxDebugger.resetLayout","flixel/system/debug/FlxDebugger.hx",256,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_322_onResize,"flixel.system.debug.FlxDebugger","onResize",0x5bb7a236,"flixel.system.debug.FlxDebugger.onResize","flixel/system/debug/FlxDebugger.hx",322,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_336_updateBounds,"flixel.system.debug.FlxDebugger","updateBounds",0x09101ca1,"flixel.system.debug.FlxDebugger.updateBounds","flixel/system/debug/FlxDebugger.hx",336,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_348_hAlignButtons,"flixel.system.debug.FlxDebugger","hAlignButtons",0x74a569e1,"flixel.system.debug.FlxDebugger.hAlignButtons","flixel/system/debug/FlxDebugger.hx",348,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_368_resetButtonLayout,"flixel.system.debug.FlxDebugger","resetButtonLayout",0x30f7f488,"flixel.system.debug.FlxDebugger.resetButtonLayout","flixel/system/debug/FlxDebugger.hx",368,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_389_addButton,"flixel.system.debug.FlxDebugger","addButton",0x3bdccfd0,"flixel.system.debug.FlxDebugger.addButton","flixel/system/debug/FlxDebugger.hx",389,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_408_removeButton,"flixel.system.debug.FlxDebugger","removeButton",0xec3cec99,"flixel.system.debug.FlxDebugger.removeButton","flixel/system/debug/FlxDebugger.hx",408,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_421_addWindowToggleButton,"flixel.system.debug.FlxDebugger","addWindowToggleButton",0x07784794,"flixel.system.debug.FlxDebugger.addWindowToggleButton","flixel/system/debug/FlxDebugger.hx",421,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_429_addWindow,"flixel.system.debug.FlxDebugger","addWindow",0xb48901ce,"flixel.system.debug.FlxDebugger.addWindow","flixel/system/debug/FlxDebugger.hx",429,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_441_removeWindow,"flixel.system.debug.FlxDebugger","removeWindow",0x64e91e97,"flixel.system.debug.FlxDebugger.removeWindow","flixel/system/debug/FlxDebugger.hx",441,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_448_addChild,"flixel.system.debug.FlxDebugger","addChild",0x32a6217e,"flixel.system.debug.FlxDebugger.addChild","flixel/system/debug/FlxDebugger.hx",448,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_461_onMouseOver,"flixel.system.debug.FlxDebugger","onMouseOver",0x134e1717,"flixel.system.debug.FlxDebugger.onMouseOver","flixel/system/debug/FlxDebugger.hx",461,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_469_onMouseOut,"flixel.system.debug.FlxDebugger","onMouseOut",0x752e442b,"flixel.system.debug.FlxDebugger.onMouseOut","flixel/system/debug/FlxDebugger.hx",469,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_473_onMouseFocus,"flixel.system.debug.FlxDebugger","onMouseFocus",0x9dc8e4b5,"flixel.system.debug.FlxDebugger.onMouseFocus","flixel/system/debug/FlxDebugger.hx",473,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_486_onMouseFocusLost,"flixel.system.debug.FlxDebugger","onMouseFocusLost",0xe822b939,"flixel.system.debug.FlxDebugger.onMouseFocusLost","flixel/system/debug/FlxDebugger.hx",486,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_498_toggleDrawDebug,"flixel.system.debug.FlxDebugger","toggleDrawDebug",0x1fb0d218,"flixel.system.debug.FlxDebugger.toggleDrawDebug","flixel/system/debug/FlxDebugger.hx",498,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_503_openHomepage,"flixel.system.debug.FlxDebugger","openHomepage",0x2c4a291b,"flixel.system.debug.FlxDebugger.openHomepage","flixel/system/debug/FlxDebugger.hx",503,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_507_openGitHub,"flixel.system.debug.FlxDebugger","openGitHub",0x31aecfb0,"flixel.system.debug.FlxDebugger.openGitHub","flixel/system/debug/FlxDebugger.hx",507,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_69_boot,"flixel.system.debug.FlxDebugger","boot",0xff87f875,"flixel.system.debug.FlxDebugger.boot","flixel/system/debug/FlxDebugger.hx",69,0xd9fc0a74)
HX_LOCAL_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_73_boot,"flixel.system.debug.FlxDebugger","boot",0xff87f875,"flixel.system.debug.FlxDebugger.boot","flixel/system/debug/FlxDebugger.hx",73,0xd9fc0a74)
namespace flixel{
namespace _hx_system{
namespace debug{

void FlxDebugger_obj::__construct(Float Width,Float Height){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::flixel::_hx_system::ui::FlxSystemButton,drawDebugButton) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_168_new)
HXLINE( 168)			drawDebugButton->set_toggled(!(::flixel::FlxG_obj::debugger->drawDebug));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_63_new)
HXLINE( 109)		this->_wasUsingSystemCursor = false;
HXLINE( 108)		this->_wasMouseVisible = true;
HXLINE( 107)		this->_usingSystemCursor = false;
HXLINE( 105)		this->_windows = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  98)		 ::haxe::ds::EnumValueMap _g =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXDLIN(  98)		_g->set(::flixel::util::FlxHorizontalAlign_obj::LEFT_dyn(),::Array_obj< ::Dynamic>::__new(0));
HXDLIN(  98)		_g->set(::flixel::util::FlxHorizontalAlign_obj::CENTER_dyn(),::Array_obj< ::Dynamic>::__new(0));
HXDLIN(  98)		_g->set(::flixel::util::FlxHorizontalAlign_obj::RIGHT_dyn(),::Array_obj< ::Dynamic>::__new(0));
HXDLIN(  98)		this->_buttons = _g;
HXLINE(  91)		this->_screen =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  87)		this->_layout = ::flixel::_hx_system::debug::FlxDebuggerLayout_obj::STANDARD_dyn();
HXLINE( 120)		super::__construct();
HXLINE( 122)		this->set_visible(false);
HXLINE( 124)		::flixel::_hx_system::debug::Tooltip_obj::init(hx::ObjectPtr<OBJ_>(this));
HXLINE( 126)		this->_topBar =  ::openfl::_legacy::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 127)		this->_topBar->get_graphics()->beginFill((int)0,((Float)0.66666666666666663));
HXLINE( 128)		 ::openfl::_legacy::display::Graphics _hx_tmp = this->_topBar->get_graphics();
HXDLIN( 128)		_hx_tmp->drawRect((int)0,(int)0,::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageWidth(),(int)20);
HXLINE( 129)		this->_topBar->get_graphics()->endFill();
HXLINE( 130)		this->addChild(this->_topBar);
HXLINE( 132)		 ::openfl::_legacy::text::TextField txt =  ::openfl::_legacy::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 133)		txt->set_height((int)20);
HXLINE( 134)		txt->set_selectable(false);
HXLINE( 135)		txt->set_y((int)-9);
HXLINE( 136)		txt->set_multiline(false);
HXLINE( 137)		txt->set_embedFonts(true);
HXLINE( 138)		 ::openfl::_legacy::text::TextFormat format =  ::openfl::_legacy::text::TextFormat_obj::__alloc( HX_CTX ,::flixel::_hx_system::FlxAssets_obj::FONT_DEBUGGER,(int)12,(int)16777215,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 139)		txt->set_defaultTextFormat(format);
HXLINE( 140)		txt->set_autoSize(::openfl::_legacy::text::TextFieldAutoSize_obj::LEFT_dyn());
HXLINE( 141)		txt->set_text(::Std_obj::string(::flixel::FlxG_obj::VERSION));
HXLINE( 143)		{
HXLINE( 143)			 ::flixel::_hx_system::debug::Window window = (this->log =  ::flixel::_hx_system::debug::log::Log_obj::__alloc( HX_CTX ));
HXDLIN( 143)			this->_windows->push(window);
HXDLIN( 143)			this->addChild(window);
HXDLIN( 143)			if (hx::IsNotNull( this->_screenBounds )) {
HXLINE( 143)				this->updateBounds();
HXDLIN( 143)				window->bound();
            			}
            		}
HXLINE( 144)		{
HXLINE( 144)			 ::flixel::_hx_system::debug::Window window1 = (this->bitmapLog =  ::flixel::_hx_system::debug::log::BitmapLog_obj::__alloc( HX_CTX ));
HXDLIN( 144)			this->_windows->push(window1);
HXDLIN( 144)			this->addChild(window1);
HXDLIN( 144)			if (hx::IsNotNull( this->_screenBounds )) {
HXLINE( 144)				this->updateBounds();
HXDLIN( 144)				window1->bound();
            			}
            		}
HXLINE( 145)		{
HXLINE( 145)			 ::flixel::_hx_system::debug::Window window2 = (this->watch =  ::flixel::_hx_system::debug::watch::Watch_obj::__alloc( HX_CTX ,null()));
HXDLIN( 145)			this->_windows->push(window2);
HXDLIN( 145)			this->addChild(window2);
HXDLIN( 145)			if (hx::IsNotNull( this->_screenBounds )) {
HXLINE( 145)				this->updateBounds();
HXDLIN( 145)				window2->bound();
            			}
            		}
HXLINE( 146)		this->completionList =  ::flixel::_hx_system::debug::completion::CompletionList_obj::__alloc( HX_CTX ,(int)5);
HXLINE( 147)		{
HXLINE( 147)			 ::flixel::_hx_system::debug::Window window3 = (this->console =  ::flixel::_hx_system::debug::console::Console_obj::__alloc( HX_CTX ,this->completionList));
HXDLIN( 147)			this->_windows->push(window3);
HXDLIN( 147)			this->addChild(window3);
HXDLIN( 147)			if (hx::IsNotNull( this->_screenBounds )) {
HXLINE( 147)				this->updateBounds();
HXDLIN( 147)				window3->bound();
            			}
            		}
HXLINE( 148)		{
HXLINE( 148)			 ::flixel::_hx_system::debug::Window window4 = (this->stats =  ::flixel::_hx_system::debug::stats::Stats_obj::__alloc( HX_CTX ));
HXDLIN( 148)			this->_windows->push(window4);
HXDLIN( 148)			this->addChild(window4);
HXDLIN( 148)			if (hx::IsNotNull( this->_screenBounds )) {
HXLINE( 148)				this->updateBounds();
HXDLIN( 148)				window4->bound();
            			}
            		}
HXLINE( 149)		{
HXLINE( 149)			 ::flixel::_hx_system::debug::Window window5 = (this->interaction =  ::flixel::_hx_system::debug::interaction::Interaction_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this)));
HXDLIN( 149)			this->_windows->push(window5);
HXDLIN( 149)			this->addChild(window5);
HXDLIN( 149)			if (hx::IsNotNull( this->_screenBounds )) {
HXLINE( 149)				this->updateBounds();
HXDLIN( 149)				window5->bound();
            			}
            		}
HXLINE( 151)		this->vcr =  ::flixel::_hx_system::debug::VCR_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 153)		this->addButton(::flixel::util::FlxHorizontalAlign_obj::LEFT_dyn(), ::flixel::_hx_system::debug::_FlxDebugger::GraphicFlixel_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()),this->openHomepage_dyn(),null(),null());
HXLINE( 154)		this->addButton(::flixel::util::FlxHorizontalAlign_obj::LEFT_dyn(),null(),this->openGitHub_dyn(),null(),null())->addChild(txt);
HXLINE( 156)		this->addWindowToggleButton(this->interaction,hx::ClassOf< ::flixel::_hx_system::debug::GraphicInteractive >());
HXLINE( 157)		this->addWindowToggleButton(this->bitmapLog,hx::ClassOf< ::flixel::_hx_system::debug::GraphicBitmapLog >());
HXLINE( 158)		this->addWindowToggleButton(this->log,hx::ClassOf< ::flixel::_hx_system::debug::GraphicLog >());
HXLINE( 160)		this->addWindowToggleButton(this->watch,hx::ClassOf< ::flixel::_hx_system::debug::GraphicWatch >());
HXLINE( 161)		this->addWindowToggleButton(this->console,hx::ClassOf< ::flixel::_hx_system::debug::GraphicConsole >());
HXLINE( 162)		this->addWindowToggleButton(this->stats,hx::ClassOf< ::flixel::_hx_system::debug::GraphicStats >());
HXLINE( 164)		 ::flixel::_hx_system::ui::FlxSystemButton drawDebugButton = this->addButton(::flixel::util::FlxHorizontalAlign_obj::RIGHT_dyn(), ::flixel::_hx_system::debug::_FlxDebugger::GraphicDrawDebug_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()),this->toggleDrawDebug_dyn(),true,null());
HXLINE( 165)		drawDebugButton->set_toggled(!(::flixel::FlxG_obj::debugger->drawDebug));
HXLINE( 166)		::flixel::FlxG_obj::debugger->drawDebugChanged->add( ::Dynamic(new _hx_Closure_0(drawDebugButton)));
HXLINE( 175)		this->addChild(this->completionList);
HXLINE( 177)		this->onResize(Width,Height);
HXLINE( 179)		this->addEventListener(::openfl::_legacy::events::MouseEvent_obj::MOUSE_OVER,this->onMouseOver_dyn(),null(),null(),null());
HXLINE( 180)		this->addEventListener(::openfl::_legacy::events::MouseEvent_obj::MOUSE_OUT,this->onMouseOut_dyn(),null(),null(),null());
HXLINE( 182)		::flixel::FlxG_obj::signals->stateSwitched->add(::flixel::_hx_system::debug::watch::Tracker_obj::onStateSwitch_dyn());
            	}

Dynamic FlxDebugger_obj::__CreateEmpty() { return new FlxDebugger_obj; }

void *FlxDebugger_obj::_hx_vtable = 0;

Dynamic FlxDebugger_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxDebugger_obj > _hx_result = new FlxDebugger_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxDebugger_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25b00754) {
		if (inClassId<=(int)0x22273017) {
			if (inClassId<=(int)0x1e88cdcf) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x1e88cdcf;
			} else {
				return inClassId==(int)0x22273017;
			}
		} else {
			return inClassId==(int)0x25b00754;
		}
	} else {
		if (inClassId<=(int)0x3d2d7617) {
			return inClassId==(int)0x306ae42a || inClassId==(int)0x3d2d7617;
		} else {
			return inClassId==(int)0x5fcdb6d3;
		}
	}
}

void FlxDebugger_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_189_destroy)
HXLINE( 190)		this->_screen = null();
HXLINE( 191)		this->_buttons = null();
HXLINE( 193)		this->removeChild(this->_topBar);
HXLINE( 194)		this->_topBar = null();
HXLINE( 196)		if (hx::IsNotNull( this->log )) {
HXLINE( 198)			this->removeChild(this->log);
HXLINE( 199)			this->log->destroy();
HXLINE( 200)			this->log = null();
            		}
HXLINE( 202)		if (hx::IsNotNull( this->watch )) {
HXLINE( 204)			this->removeChild(this->watch);
HXLINE( 205)			this->watch->destroy();
HXLINE( 206)			this->watch = null();
            		}
HXLINE( 208)		if (hx::IsNotNull( this->bitmapLog )) {
HXLINE( 210)			this->removeChild(this->bitmapLog);
HXLINE( 211)			this->bitmapLog->destroy();
HXLINE( 212)			this->bitmapLog = null();
            		}
HXLINE( 214)		if (hx::IsNotNull( this->stats )) {
HXLINE( 216)			this->removeChild(this->stats);
HXLINE( 217)			this->stats->destroy();
HXLINE( 218)			this->stats = null();
            		}
HXLINE( 220)		if (hx::IsNotNull( this->console )) {
HXLINE( 222)			this->removeChild(this->console);
HXLINE( 223)			this->console->destroy();
HXLINE( 224)			this->console = null();
            		}
HXLINE( 227)		this->_windows = null();
HXLINE( 229)		this->removeEventListener(::openfl::_legacy::events::MouseEvent_obj::MOUSE_OVER,this->onMouseOver_dyn(),null());
HXLINE( 230)		this->removeEventListener(::openfl::_legacy::events::MouseEvent_obj::MOUSE_OUT,this->onMouseOut_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxDebugger_obj,destroy,(void))

void FlxDebugger_obj::update(){
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_235_update)
HXDLIN( 235)		int _g = (int)0;
HXDLIN( 235)		::Array< ::Dynamic> _g1 = this->_windows;
HXDLIN( 235)		while((_g < _g1->length)){
HXDLIN( 235)			 ::flixel::_hx_system::debug::Window window = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::Window >();
HXDLIN( 235)			_g = (_g + (int)1);
HXLINE( 236)			window->update();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxDebugger_obj,update,(void))

void FlxDebugger_obj::setLayout( ::flixel::_hx_system::debug::FlxDebuggerLayout Layout){
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_245_setLayout)
HXLINE( 246)		this->_layout = Layout;
HXLINE( 247)		this->resetLayout();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxDebugger_obj,setLayout,(void))

void FlxDebugger_obj::resetLayout(){
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_256_resetLayout)
HXDLIN( 256)		 ::flixel::_hx_system::debug::FlxDebuggerLayout _g = this->_layout;
HXDLIN( 256)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE( 309)				 ::flixel::_hx_system::debug::console::Console _hx_tmp = this->console;
HXDLIN( 309)				_hx_tmp->resize((this->_screen->x - (int)4),(int)35);
HXLINE( 310)				this->console->reposition((int)2,this->_screen->y);
HXLINE( 311)				 ::flixel::_hx_system::debug::log::Log _hx_tmp1 = this->log;
HXDLIN( 311)				Float _hx_tmp2 = ((Float)(this->_screen->x - (int)6) / (Float)(int)2);
HXDLIN( 311)				_hx_tmp1->resize(_hx_tmp2,((Float)this->_screen->y / (Float)(int)4));
HXLINE( 312)				 ::flixel::_hx_system::debug::log::Log _hx_tmp3 = this->log;
HXDLIN( 312)				Float _hx_tmp4 = this->_screen->y;
HXDLIN( 312)				Float _hx_tmp5 = (_hx_tmp4 - this->log->get_height());
HXDLIN( 312)				_hx_tmp3->reposition((int)0,((_hx_tmp5 - this->console->get_height()) - ((Float)3.)));
HXLINE( 313)				 ::flixel::_hx_system::debug::watch::Watch _hx_tmp6 = this->watch;
HXDLIN( 313)				Float _hx_tmp7 = ((Float)(this->_screen->x - (int)6) / (Float)(int)2);
HXDLIN( 313)				_hx_tmp6->resize(_hx_tmp7,((Float)this->_screen->y / (Float)(int)4));
HXLINE( 314)				 ::flixel::_hx_system::debug::watch::Watch _hx_tmp8 = this->watch;
HXDLIN( 314)				Float _hx_tmp9 = this->_screen->x;
HXDLIN( 314)				Float _hx_tmp10 = this->_screen->y;
HXDLIN( 314)				Float _hx_tmp11 = (_hx_tmp10 - this->watch->get_height());
HXDLIN( 314)				_hx_tmp8->reposition(_hx_tmp9,((_hx_tmp11 - this->console->get_height()) - ((Float)3.)));
HXLINE( 315)				this->stats->reposition(this->_screen->x,(int)0);
HXLINE( 316)				 ::flixel::_hx_system::debug::log::BitmapLog _hx_tmp12 = this->bitmapLog;
HXDLIN( 316)				Float _hx_tmp13 = ((Float)(this->_screen->x - (int)6) / (Float)(int)2);
HXDLIN( 316)				_hx_tmp12->resize(_hx_tmp13,((Float)this->_screen->y / (Float)(int)4));
HXLINE( 317)				 ::flixel::_hx_system::debug::log::BitmapLog _hx_tmp14 = this->bitmapLog;
HXDLIN( 317)				Float _hx_tmp15 = (this->log->get_y() - (int)2);
HXDLIN( 317)				_hx_tmp14->reposition((int)0,(_hx_tmp15 - this->bitmapLog->get_height()));
            			}
            			break;
            			case (int)1: {
HXLINE( 259)				 ::flixel::_hx_system::debug::log::Log _hx_tmp16 = this->log;
HXDLIN( 259)				_hx_tmp16->resize(((Float)this->_screen->x / (Float)(int)4),(int)68);
HXLINE( 260)				this->log->reposition((int)0,this->_screen->y);
HXLINE( 261)				 ::flixel::_hx_system::debug::console::Console _hx_tmp17 = this->console;
HXDLIN( 261)				_hx_tmp17->resize((((Float)this->_screen->x / (Float)(int)2) - (int)8),(int)35);
HXLINE( 262)				 ::flixel::_hx_system::debug::console::Console _hx_tmp18 = this->console;
HXDLIN( 262)				Float _hx_tmp19 = this->log->get_x();
HXDLIN( 262)				Float _hx_tmp20 = ((_hx_tmp19 + this->log->get_width()) + (int)2);
HXDLIN( 262)				_hx_tmp18->reposition(_hx_tmp20,this->_screen->y);
HXLINE( 263)				 ::flixel::_hx_system::debug::watch::Watch _hx_tmp21 = this->watch;
HXDLIN( 263)				_hx_tmp21->resize(((Float)this->_screen->x / (Float)(int)4),(int)68);
HXLINE( 264)				this->watch->reposition(this->_screen->x,this->_screen->y);
HXLINE( 265)				this->stats->reposition(this->_screen->x,(int)0);
HXLINE( 266)				 ::flixel::_hx_system::debug::log::BitmapLog _hx_tmp22 = this->bitmapLog;
HXDLIN( 266)				_hx_tmp22->resize(((Float)this->_screen->x / (Float)(int)4),(int)68);
HXLINE( 267)				 ::flixel::_hx_system::debug::log::BitmapLog _hx_tmp23 = this->bitmapLog;
HXDLIN( 267)				_hx_tmp23->reposition((int)0,((this->_screen->y - (int)136) - (int)4));
            			}
            			break;
            			case (int)2: {
HXLINE( 269)				 ::flixel::_hx_system::debug::console::Console _hx_tmp24 = this->console;
HXDLIN( 269)				_hx_tmp24->resize((this->_screen->x - (int)4),(int)35);
HXLINE( 270)				this->console->reposition((int)2,this->_screen->y);
HXLINE( 271)				 ::flixel::_hx_system::debug::log::Log _hx_tmp25 = this->log;
HXDLIN( 271)				Float _hx_tmp26 = ((Float)(this->_screen->x - (int)6) / (Float)(int)2);
HXDLIN( 271)				_hx_tmp25->resize(_hx_tmp26,((Float)this->_screen->y / (Float)(int)2));
HXLINE( 272)				 ::flixel::_hx_system::debug::log::Log _hx_tmp27 = this->log;
HXDLIN( 272)				Float _hx_tmp28 = this->_screen->y;
HXDLIN( 272)				Float _hx_tmp29 = (_hx_tmp28 - this->log->get_height());
HXDLIN( 272)				_hx_tmp27->reposition((int)0,((_hx_tmp29 - this->console->get_height()) - ((Float)3.)));
HXLINE( 273)				 ::flixel::_hx_system::debug::watch::Watch _hx_tmp30 = this->watch;
HXDLIN( 273)				Float _hx_tmp31 = ((Float)(this->_screen->x - (int)6) / (Float)(int)2);
HXDLIN( 273)				_hx_tmp30->resize(_hx_tmp31,((Float)this->_screen->y / (Float)(int)2));
HXLINE( 274)				 ::flixel::_hx_system::debug::watch::Watch _hx_tmp32 = this->watch;
HXDLIN( 274)				Float _hx_tmp33 = this->_screen->x;
HXDLIN( 274)				Float _hx_tmp34 = this->_screen->y;
HXDLIN( 274)				Float _hx_tmp35 = (_hx_tmp34 - this->watch->get_height());
HXDLIN( 274)				_hx_tmp32->reposition(_hx_tmp33,((_hx_tmp35 - this->console->get_height()) - ((Float)3.)));
HXLINE( 275)				this->stats->reposition(this->_screen->x,(int)0);
HXLINE( 276)				 ::flixel::_hx_system::debug::log::BitmapLog _hx_tmp36 = this->bitmapLog;
HXDLIN( 276)				Float _hx_tmp37 = ((Float)(this->_screen->x - (int)6) / (Float)(int)2);
HXDLIN( 276)				Float _hx_tmp38 = (this->_screen->y - (int)4);
HXDLIN( 276)				_hx_tmp36->resize(_hx_tmp37,((_hx_tmp38 - ((Float)this->_screen->y / (Float)(int)2)) - (int)70));
HXLINE( 277)				this->bitmapLog->reposition((int)0,((Float)3.));
            			}
            			break;
            			case (int)3: {
HXLINE( 279)				 ::flixel::_hx_system::debug::console::Console _hx_tmp39 = this->console;
HXDLIN( 279)				_hx_tmp39->resize((this->_screen->x - (int)4),(int)35);
HXLINE( 280)				this->console->reposition((int)0,(int)0);
HXLINE( 281)				 ::flixel::_hx_system::debug::log::Log _hx_tmp40 = this->log;
HXDLIN( 281)				Float _hx_tmp41 = ((Float)(this->_screen->x - (int)6) / (Float)(int)2);
HXDLIN( 281)				_hx_tmp40->resize(_hx_tmp41,((Float)this->_screen->y / (Float)(int)4));
HXLINE( 282)				 ::flixel::_hx_system::debug::log::Log _hx_tmp42 = this->log;
HXDLIN( 282)				_hx_tmp42->reposition((int)0,((this->console->get_height() + (int)2) + (int)15));
HXLINE( 283)				 ::flixel::_hx_system::debug::watch::Watch _hx_tmp43 = this->watch;
HXDLIN( 283)				Float _hx_tmp44 = ((Float)(this->_screen->x - (int)6) / (Float)(int)2);
HXDLIN( 283)				_hx_tmp43->resize(_hx_tmp44,((Float)this->_screen->y / (Float)(int)4));
HXLINE( 284)				 ::flixel::_hx_system::debug::watch::Watch _hx_tmp45 = this->watch;
HXDLIN( 284)				Float _hx_tmp46 = this->_screen->x;
HXDLIN( 284)				_hx_tmp45->reposition(_hx_tmp46,((this->console->get_height() + (int)2) + (int)15));
HXLINE( 285)				this->stats->reposition(this->_screen->x,this->_screen->y);
HXLINE( 286)				 ::flixel::_hx_system::debug::log::BitmapLog _hx_tmp47 = this->bitmapLog;
HXDLIN( 286)				Float _hx_tmp48 = ((Float)(this->_screen->x - (int)6) / (Float)(int)2);
HXDLIN( 286)				_hx_tmp47->resize(_hx_tmp48,((Float)this->_screen->y / (Float)(int)4));
HXLINE( 287)				 ::flixel::_hx_system::debug::log::BitmapLog _hx_tmp49 = this->bitmapLog;
HXDLIN( 287)				Float _hx_tmp50 = ((this->console->get_height() + (int)4) + (int)15);
HXDLIN( 287)				_hx_tmp49->reposition((int)0,((_hx_tmp50 + ((Float)this->_screen->y / (Float)(int)4)) + (int)2));
            			}
            			break;
            			case (int)4: {
HXLINE( 289)				 ::flixel::_hx_system::debug::console::Console _hx_tmp51 = this->console;
HXDLIN( 289)				_hx_tmp51->resize((this->_screen->x - (int)4),(int)35);
HXLINE( 290)				this->console->reposition((int)2,this->_screen->y);
HXLINE( 291)				 ::flixel::_hx_system::debug::log::Log _hx_tmp52 = this->log;
HXDLIN( 291)				Float _hx_tmp53 = ((Float)this->_screen->x / (Float)(int)3);
HXDLIN( 291)				Float _hx_tmp54 = ((Float)((this->_screen->y - (int)15) - ((Float)5.)) / (Float)(int)2);
HXDLIN( 291)				_hx_tmp52->resize(_hx_tmp53,((_hx_tmp54 - ((Float)this->console->get_height() / (Float)(int)2)) - (int)2));
HXLINE( 292)				this->log->reposition((int)0,(int)0);
HXLINE( 293)				 ::flixel::_hx_system::debug::watch::Watch _hx_tmp55 = this->watch;
HXDLIN( 293)				Float _hx_tmp56 = ((Float)this->_screen->x / (Float)(int)3);
HXDLIN( 293)				Float _hx_tmp57 = ((Float)((this->_screen->y - (int)15) - ((Float)5.)) / (Float)(int)2);
HXDLIN( 293)				_hx_tmp55->resize(_hx_tmp56,(_hx_tmp57 - ((Float)this->console->get_height() / (Float)(int)2)));
HXLINE( 294)				 ::flixel::_hx_system::debug::watch::Watch _hx_tmp58 = this->watch;
HXDLIN( 294)				Float _hx_tmp59 = this->log->get_y();
HXDLIN( 294)				_hx_tmp58->reposition((int)0,((_hx_tmp59 + this->log->get_height()) + (int)2));
HXLINE( 295)				this->stats->reposition(this->_screen->x,(int)0);
HXLINE( 296)				 ::flixel::_hx_system::debug::log::BitmapLog _hx_tmp60 = this->bitmapLog;
HXDLIN( 296)				Float _hx_tmp61 = ((Float)this->_screen->x / (Float)(int)3);
HXDLIN( 296)				Float _hx_tmp62 = ((Float)((this->_screen->y - (int)15) - ((Float)5.)) / (Float)(int)2);
HXDLIN( 296)				_hx_tmp60->resize(_hx_tmp61,((_hx_tmp62 - ((Float)this->console->get_height() / (Float)(int)2)) - (int)2));
HXLINE( 297)				 ::flixel::_hx_system::debug::log::BitmapLog _hx_tmp63 = this->bitmapLog;
HXDLIN( 297)				_hx_tmp63->reposition((((Float)this->_screen->x / (Float)(int)3) + (int)4),(int)0);
            			}
            			break;
            			case (int)5: {
HXLINE( 299)				 ::flixel::_hx_system::debug::console::Console _hx_tmp64 = this->console;
HXDLIN( 299)				_hx_tmp64->resize((this->_screen->x - (int)4),(int)35);
HXLINE( 300)				this->console->reposition((int)2,this->_screen->y);
HXLINE( 301)				 ::flixel::_hx_system::debug::log::Log _hx_tmp65 = this->log;
HXDLIN( 301)				Float _hx_tmp66 = ((Float)this->_screen->x / (Float)(int)3);
HXDLIN( 301)				Float _hx_tmp67 = ((Float)((this->_screen->y - (int)15) - ((Float)5.)) / (Float)(int)2);
HXDLIN( 301)				_hx_tmp65->resize(_hx_tmp66,((_hx_tmp67 - ((Float)this->console->get_height() / (Float)(int)2)) - (int)2));
HXLINE( 302)				this->log->reposition(this->_screen->x,(int)0);
HXLINE( 303)				 ::flixel::_hx_system::debug::watch::Watch _hx_tmp68 = this->watch;
HXDLIN( 303)				Float _hx_tmp69 = ((Float)this->_screen->x / (Float)(int)3);
HXDLIN( 303)				Float _hx_tmp70 = ((Float)((this->_screen->y - (int)15) - ((Float)5.)) / (Float)(int)2);
HXDLIN( 303)				_hx_tmp68->resize(_hx_tmp69,(_hx_tmp70 - ((Float)this->console->get_height() / (Float)(int)2)));
HXLINE( 304)				 ::flixel::_hx_system::debug::watch::Watch _hx_tmp71 = this->watch;
HXDLIN( 304)				Float _hx_tmp72 = this->_screen->x;
HXDLIN( 304)				Float _hx_tmp73 = this->log->get_y();
HXDLIN( 304)				_hx_tmp71->reposition(_hx_tmp72,((_hx_tmp73 + this->log->get_height()) + (int)2));
HXLINE( 305)				this->stats->reposition((int)0,(int)0);
HXLINE( 306)				 ::flixel::_hx_system::debug::log::BitmapLog _hx_tmp74 = this->bitmapLog;
HXDLIN( 306)				Float _hx_tmp75 = ((Float)this->_screen->x / (Float)(int)3);
HXDLIN( 306)				Float _hx_tmp76 = ((Float)((this->_screen->y - (int)15) - ((Float)5.)) / (Float)(int)2);
HXDLIN( 306)				_hx_tmp74->resize(_hx_tmp75,((_hx_tmp76 - ((Float)this->console->get_height() / (Float)(int)2)) - (int)2));
HXLINE( 307)				 ::flixel::_hx_system::debug::log::BitmapLog _hx_tmp77 = this->bitmapLog;
HXDLIN( 307)				Float _hx_tmp78 = (this->_screen->x - (int)4);
HXDLIN( 307)				_hx_tmp77->reposition((_hx_tmp78 - (((Float)this->_screen->x / (Float)(int)3) * (int)2)),(int)0);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxDebugger_obj,resetLayout,(void))

void FlxDebugger_obj::onResize(Float Width,Float Height){
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_322_onResize)
HXLINE( 323)		this->_screen->x = Width;
HXLINE( 324)		this->_screen->y = Height;
HXLINE( 326)		this->updateBounds();
HXLINE( 327)		 ::openfl::_legacy::display::Sprite _hx_tmp = this->_topBar;
HXDLIN( 327)		_hx_tmp->set_width(::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageWidth());
HXLINE( 328)		this->resetButtonLayout();
HXLINE( 329)		this->resetLayout();
HXLINE( 330)		this->set_scaleX(this->set_scaleY((int)1));
HXLINE( 331)		this->set_x(-(::flixel::FlxG_obj::scaleMode->offset->x));
HXLINE( 332)		this->set_y(-(::flixel::FlxG_obj::scaleMode->offset->y));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxDebugger_obj,onResize,(void))

void FlxDebugger_obj::updateBounds(){
            	HX_GC_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_336_updateBounds)
HXLINE( 337)		Float _hx_tmp = (this->_screen->x - (int)4);
HXDLIN( 337)		this->_screenBounds =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,(int)2,((Float)21.),_hx_tmp,((this->_screen->y - (int)4) - (int)20));
HXLINE( 338)		{
HXLINE( 338)			int _g = (int)0;
HXDLIN( 338)			::Array< ::Dynamic> _g1 = this->_windows;
HXDLIN( 338)			while((_g < _g1->length)){
HXLINE( 338)				 ::flixel::_hx_system::debug::Window window = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::Window >();
HXDLIN( 338)				_g = (_g + (int)1);
HXLINE( 340)				window->updateBounds(this->_screenBounds);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxDebugger_obj,updateBounds,(void))

Float FlxDebugger_obj::hAlignButtons(::Array< ::Dynamic> Sprites,hx::Null< Float >  __o_Padding,hx::Null< bool >  __o_Set,hx::Null< Float >  __o_LeftOffset){
Float Padding = __o_Padding.Default(0);
bool Set = __o_Set.Default(true);
Float LeftOffset = __o_LeftOffset.Default(0);
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_348_hAlignButtons)
HXLINE( 349)		Float width = (int)0;
HXLINE( 350)		Float last = LeftOffset;
HXLINE( 352)		{
HXLINE( 352)			int _g1 = (int)0;
HXDLIN( 352)			int _g = Sprites->length;
HXDLIN( 352)			while((_g1 < _g)){
HXLINE( 352)				_g1 = (_g1 + (int)1);
HXDLIN( 352)				int i = (_g1 - (int)1);
HXLINE( 354)				 ::openfl::_legacy::display::Sprite o = Sprites->__get(i).StaticCast<  ::flixel::_hx_system::ui::FlxSystemButton >();
HXLINE( 355)				width = (width + (o->get_width() + Padding));
HXLINE( 356)				if (Set) {
HXLINE( 357)					o->set_x(last);
            				}
HXLINE( 358)				Float last1 = o->get_x();
HXDLIN( 358)				last = ((last1 + o->get_width()) + Padding);
            			}
            		}
HXLINE( 361)		return width;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxDebugger_obj,hAlignButtons,return )

void FlxDebugger_obj::resetButtonLayout(){
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_368_resetButtonLayout)
HXLINE( 369)		this->hAlignButtons(( (::Array< ::Dynamic>)(this->_buttons->get(::flixel::util::FlxHorizontalAlign_obj::LEFT_dyn())) ),(int)10,true,(int)10);
HXLINE( 371)		Float offset = (::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageWidth() * ((Float)0.5));
HXDLIN( 371)		Float offset1 = (offset - (this->hAlignButtons(( (::Array< ::Dynamic>)(this->_buttons->get(::flixel::util::FlxHorizontalAlign_obj::CENTER_dyn())) ),(int)10,false,null()) * ((Float)0.5)));
HXLINE( 372)		this->hAlignButtons(( (::Array< ::Dynamic>)(this->_buttons->get(::flixel::util::FlxHorizontalAlign_obj::CENTER_dyn())) ),(int)10,true,offset1);
HXLINE( 374)		int offset2 = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageWidth();
HXDLIN( 374)		Float offset3 = (offset2 - this->hAlignButtons(( (::Array< ::Dynamic>)(this->_buttons->get(::flixel::util::FlxHorizontalAlign_obj::RIGHT_dyn())) ),(int)10,false,null()));
HXLINE( 375)		this->hAlignButtons(( (::Array< ::Dynamic>)(this->_buttons->get(::flixel::util::FlxHorizontalAlign_obj::RIGHT_dyn())) ),(int)10,true,offset3);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxDebugger_obj,resetButtonLayout,(void))

 ::flixel::_hx_system::ui::FlxSystemButton FlxDebugger_obj::addButton( ::flixel::util::FlxHorizontalAlign Position, ::openfl::_legacy::display::BitmapData Icon, ::Dynamic UpHandler,hx::Null< bool >  __o_ToggleMode,hx::Null< bool >  __o_UpdateLayout){
bool ToggleMode = __o_ToggleMode.Default(false);
bool UpdateLayout = __o_UpdateLayout.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_389_addButton)
HXLINE( 390)		 ::flixel::_hx_system::ui::FlxSystemButton button =  ::flixel::_hx_system::ui::FlxSystemButton_obj::__alloc( HX_CTX ,Icon,UpHandler,ToggleMode);
HXLINE( 391)		button->set_y((((Float)10.) - ((Float)button->get_height() / (Float)(int)2)));
HXLINE( 392)		( (::Array< ::Dynamic>)(this->_buttons->get(Position)) )->push(button);
HXLINE( 393)		this->addChild(button);
HXLINE( 395)		if (UpdateLayout) {
HXLINE( 396)			this->resetButtonLayout();
            		}
HXLINE( 398)		return button;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxDebugger_obj,addButton,return )

void FlxDebugger_obj::removeButton( ::flixel::_hx_system::ui::FlxSystemButton Button,hx::Null< bool >  __o_UpdateLayout){
bool UpdateLayout = __o_UpdateLayout.Default(true);
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_408_removeButton)
HXLINE( 409)		this->removeChild(Button);
HXLINE( 410)		Button->destroy();
HXLINE( 412)		( (::Array< ::Dynamic>)(this->_buttons->get(::flixel::util::FlxHorizontalAlign_obj::LEFT_dyn())) )->remove(Button);
HXLINE( 413)		( (::Array< ::Dynamic>)(this->_buttons->get(::flixel::util::FlxHorizontalAlign_obj::CENTER_dyn())) )->remove(Button);
HXLINE( 414)		( (::Array< ::Dynamic>)(this->_buttons->get(::flixel::util::FlxHorizontalAlign_obj::RIGHT_dyn())) )->remove(Button);
HXLINE( 416)		if (UpdateLayout) {
HXLINE( 417)			this->resetButtonLayout();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxDebugger_obj,removeButton,(void))

void FlxDebugger_obj::addWindowToggleButton( ::flixel::_hx_system::debug::Window window,hx::Class icon){
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_421_addWindowToggleButton)
HXLINE( 422)		 ::flixel::_hx_system::ui::FlxSystemButton button = this->addButton(::flixel::util::FlxHorizontalAlign_obj::RIGHT_dyn(),( ( ::openfl::_legacy::display::BitmapData)(::Type_obj::createInstance(icon,::cpp::VirtualArray_obj::__new(2)->init(0,(int)0)->init(1,(int)0))) ),window->toggleVisible_dyn(),true,true);
HXLINE( 424)		window->toggleButton = button;
HXLINE( 425)		button->set_toggled(!(window->get_visible()));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxDebugger_obj,addWindowToggleButton,(void))

 ::flixel::_hx_system::debug::Window FlxDebugger_obj::addWindow( ::flixel::_hx_system::debug::Window window){
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_429_addWindow)
HXLINE( 430)		this->_windows->push(window);
HXLINE( 431)		this->addChild(window);
HXLINE( 432)		if (hx::IsNotNull( this->_screenBounds )) {
HXLINE( 434)			this->updateBounds();
HXLINE( 435)			window->bound();
            		}
HXLINE( 437)		return window;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxDebugger_obj,addWindow,return )

void FlxDebugger_obj::removeWindow( ::flixel::_hx_system::debug::Window window){
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_441_removeWindow)
HXLINE( 442)		if (this->contains(window)) {
HXLINE( 443)			this->removeChild(window);
            		}
HXLINE( 444)		{
HXLINE( 444)			::Array< ::Dynamic> array = this->_windows;
HXDLIN( 444)			int index = array->indexOf(window,null());
HXDLIN( 444)			if ((index != (int)-1)) {
HXLINE( 444)				array[index] = array->__get((array->length - (int)1)).StaticCast<  ::flixel::_hx_system::debug::Window >();
HXDLIN( 444)				array->pop().StaticCast<  ::flixel::_hx_system::debug::Window >();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxDebugger_obj,removeWindow,(void))

 ::openfl::_legacy::display::DisplayObject FlxDebugger_obj::addChild( ::openfl::_legacy::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_448_addChild)
HXLINE( 449)		 ::openfl::_legacy::display::DisplayObject result = this->super::addChild(child);
HXLINE( 451)		if (hx::IsNotNull( this->completionList )) {
HXLINE( 452)			this->super::addChild(this->completionList);
            		}
HXLINE( 453)		return result;
            	}


void FlxDebugger_obj::onMouseOver( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_461_onMouseOver)
HXDLIN( 461)		this->onMouseFocus();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxDebugger_obj,onMouseOver,(void))

void FlxDebugger_obj::onMouseOut( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_469_onMouseOut)
HXDLIN( 469)		this->onMouseFocusLost();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxDebugger_obj,onMouseOut,(void))

void FlxDebugger_obj::onMouseFocus(){
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_473_onMouseFocus)
HXLINE( 475)		::flixel::FlxG_obj::mouse->enabled = false;
HXLINE( 476)		this->_wasMouseVisible = ::flixel::FlxG_obj::mouse->visible;
HXLINE( 477)		this->_wasUsingSystemCursor = ::flixel::FlxG_obj::mouse->useSystemCursor;
HXLINE( 478)		::flixel::FlxG_obj::mouse->set_useSystemCursor(true);
HXLINE( 479)		this->_usingSystemCursor = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxDebugger_obj,onMouseFocus,(void))

void FlxDebugger_obj::onMouseFocusLost(){
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_486_onMouseFocusLost)
HXDLIN( 486)		if (this->_usingSystemCursor) {
HXLINE( 489)			::flixel::FlxG_obj::mouse->enabled = true;
HXLINE( 490)			::flixel::FlxG_obj::mouse->set_useSystemCursor(this->_wasUsingSystemCursor);
HXLINE( 491)			::flixel::FlxG_obj::mouse->set_visible(this->_wasMouseVisible);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxDebugger_obj,onMouseFocusLost,(void))

void FlxDebugger_obj::toggleDrawDebug(){
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_498_toggleDrawDebug)
HXDLIN( 498)		::flixel::FlxG_obj::debugger->set_drawDebug(!(::flixel::FlxG_obj::debugger->drawDebug));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxDebugger_obj,toggleDrawDebug,(void))

void FlxDebugger_obj::openHomepage(){
            	HX_GC_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_503_openHomepage)
HXDLIN( 503)		::String prefix = HX_("",00,00,00,00);
HXDLIN( 503)		if (!( ::EReg_obj::__alloc( HX_CTX ,HX_("^https?://",48,ee,dd,38),HX_("",00,00,00,00))->match(HX_("http://www.haxeflixel.com",de,bc,02,e0)))) {
HXDLIN( 503)			prefix = HX_("http://",52,75,cd,5a);
            		}
HXDLIN( 503)		::openfl::_legacy::Lib_obj::getURL( ::openfl::_legacy::net::URLRequest_obj::__alloc( HX_CTX ,(prefix + HX_("http://www.haxeflixel.com",de,bc,02,e0))),HX_("_blank",95,26,d9,b0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxDebugger_obj,openHomepage,(void))

void FlxDebugger_obj::openGitHub(){
            	HX_GC_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_507_openGitHub)
HXLINE( 508)		::String url = HX_("https://github.com/HaxeFlixel/flixel",bf,0c,67,11);
HXLINE( 509)		if (hx::IsNotEq( ::flixel::_hx_system::FlxVersion_obj::sha,HX_("",00,00,00,00) )) {
HXLINE( 511)			url = (url + (HX_("/commit/",09,7c,b6,01) + ::Std_obj::string(::flixel::_hx_system::FlxVersion_obj::sha)));
            		}
HXLINE( 513)		{
HXLINE( 513)			::String prefix = HX_("",00,00,00,00);
HXDLIN( 513)			if (!( ::EReg_obj::__alloc( HX_CTX ,HX_("^https?://",48,ee,dd,38),HX_("",00,00,00,00))->match(url))) {
HXLINE( 513)				prefix = HX_("http://",52,75,cd,5a);
            			}
HXDLIN( 513)			::openfl::_legacy::Lib_obj::getURL( ::openfl::_legacy::net::URLRequest_obj::__alloc( HX_CTX ,(prefix + url)),HX_("_blank",95,26,d9,b0));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxDebugger_obj,openGitHub,(void))

int FlxDebugger_obj::GUTTER;

int FlxDebugger_obj::TOP_HEIGHT;


hx::ObjectPtr< FlxDebugger_obj > FlxDebugger_obj::__new(Float Width,Float Height) {
	hx::ObjectPtr< FlxDebugger_obj > __this = new FlxDebugger_obj();
	__this->__construct(Width,Height);
	return __this;
}

hx::ObjectPtr< FlxDebugger_obj > FlxDebugger_obj::__alloc(hx::Ctx *_hx_ctx,Float Width,Float Height) {
	FlxDebugger_obj *__this = (FlxDebugger_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxDebugger_obj), true, "flixel.system.debug.FlxDebugger"));
	*(void **)__this = FlxDebugger_obj::_hx_vtable;
	__this->__construct(Width,Height);
	return __this;
}

FlxDebugger_obj::FlxDebugger_obj()
{
}

void FlxDebugger_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxDebugger);
	HX_MARK_MEMBER_NAME(stats,"stats");
	HX_MARK_MEMBER_NAME(log,"log");
	HX_MARK_MEMBER_NAME(watch,"watch");
	HX_MARK_MEMBER_NAME(bitmapLog,"bitmapLog");
	HX_MARK_MEMBER_NAME(vcr,"vcr");
	HX_MARK_MEMBER_NAME(console,"console");
	HX_MARK_MEMBER_NAME(interaction,"interaction");
	HX_MARK_MEMBER_NAME(completionList,"completionList");
	HX_MARK_MEMBER_NAME(_layout,"_layout");
	HX_MARK_MEMBER_NAME(_screen,"_screen");
	HX_MARK_MEMBER_NAME(_screenBounds,"_screenBounds");
	HX_MARK_MEMBER_NAME(_buttons,"_buttons");
	HX_MARK_MEMBER_NAME(_topBar,"_topBar");
	HX_MARK_MEMBER_NAME(_windows,"_windows");
	HX_MARK_MEMBER_NAME(_usingSystemCursor,"_usingSystemCursor");
	HX_MARK_MEMBER_NAME(_wasMouseVisible,"_wasMouseVisible");
	HX_MARK_MEMBER_NAME(_wasUsingSystemCursor,"_wasUsingSystemCursor");
	 ::openfl::_legacy::display::DisplayObjectContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxDebugger_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(stats,"stats");
	HX_VISIT_MEMBER_NAME(log,"log");
	HX_VISIT_MEMBER_NAME(watch,"watch");
	HX_VISIT_MEMBER_NAME(bitmapLog,"bitmapLog");
	HX_VISIT_MEMBER_NAME(vcr,"vcr");
	HX_VISIT_MEMBER_NAME(console,"console");
	HX_VISIT_MEMBER_NAME(interaction,"interaction");
	HX_VISIT_MEMBER_NAME(completionList,"completionList");
	HX_VISIT_MEMBER_NAME(_layout,"_layout");
	HX_VISIT_MEMBER_NAME(_screen,"_screen");
	HX_VISIT_MEMBER_NAME(_screenBounds,"_screenBounds");
	HX_VISIT_MEMBER_NAME(_buttons,"_buttons");
	HX_VISIT_MEMBER_NAME(_topBar,"_topBar");
	HX_VISIT_MEMBER_NAME(_windows,"_windows");
	HX_VISIT_MEMBER_NAME(_usingSystemCursor,"_usingSystemCursor");
	HX_VISIT_MEMBER_NAME(_wasMouseVisible,"_wasMouseVisible");
	HX_VISIT_MEMBER_NAME(_wasUsingSystemCursor,"_wasUsingSystemCursor");
	 ::openfl::_legacy::display::DisplayObjectContainer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxDebugger_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"log") ) { return hx::Val( log ); }
		if (HX_FIELD_EQ(inName,"vcr") ) { return hx::Val( vcr ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stats") ) { return hx::Val( stats ); }
		if (HX_FIELD_EQ(inName,"watch") ) { return hx::Val( watch ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"console") ) { return hx::Val( console ); }
		if (HX_FIELD_EQ(inName,"_layout") ) { return hx::Val( _layout ); }
		if (HX_FIELD_EQ(inName,"_screen") ) { return hx::Val( _screen ); }
		if (HX_FIELD_EQ(inName,"_topBar") ) { return hx::Val( _topBar ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_buttons") ) { return hx::Val( _buttons ); }
		if (HX_FIELD_EQ(inName,"_windows") ) { return hx::Val( _windows ); }
		if (HX_FIELD_EQ(inName,"onResize") ) { return hx::Val( onResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"addChild") ) { return hx::Val( addChild_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bitmapLog") ) { return hx::Val( bitmapLog ); }
		if (HX_FIELD_EQ(inName,"setLayout") ) { return hx::Val( setLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"addButton") ) { return hx::Val( addButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"addWindow") ) { return hx::Val( addWindow_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onMouseOut") ) { return hx::Val( onMouseOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"openGitHub") ) { return hx::Val( openGitHub_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interaction") ) { return hx::Val( interaction ); }
		if (HX_FIELD_EQ(inName,"resetLayout") ) { return hx::Val( resetLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseOver") ) { return hx::Val( onMouseOver_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"updateBounds") ) { return hx::Val( updateBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeButton") ) { return hx::Val( removeButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeWindow") ) { return hx::Val( removeWindow_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseFocus") ) { return hx::Val( onMouseFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"openHomepage") ) { return hx::Val( openHomepage_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_screenBounds") ) { return hx::Val( _screenBounds ); }
		if (HX_FIELD_EQ(inName,"hAlignButtons") ) { return hx::Val( hAlignButtons_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"completionList") ) { return hx::Val( completionList ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"toggleDrawDebug") ) { return hx::Val( toggleDrawDebug_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_wasMouseVisible") ) { return hx::Val( _wasMouseVisible ); }
		if (HX_FIELD_EQ(inName,"onMouseFocusLost") ) { return hx::Val( onMouseFocusLost_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"resetButtonLayout") ) { return hx::Val( resetButtonLayout_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_usingSystemCursor") ) { return hx::Val( _usingSystemCursor ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_wasUsingSystemCursor") ) { return hx::Val( _wasUsingSystemCursor ); }
		if (HX_FIELD_EQ(inName,"addWindowToggleButton") ) { return hx::Val( addWindowToggleButton_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxDebugger_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"log") ) { log=inValue.Cast<  ::flixel::_hx_system::debug::log::Log >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vcr") ) { vcr=inValue.Cast<  ::flixel::_hx_system::debug::VCR >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stats") ) { stats=inValue.Cast<  ::flixel::_hx_system::debug::stats::Stats >(); return inValue; }
		if (HX_FIELD_EQ(inName,"watch") ) { watch=inValue.Cast<  ::flixel::_hx_system::debug::watch::Watch >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"console") ) { console=inValue.Cast<  ::flixel::_hx_system::debug::console::Console >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_layout") ) { _layout=inValue.Cast<  ::flixel::_hx_system::debug::FlxDebuggerLayout >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_screen") ) { _screen=inValue.Cast<  ::openfl::_legacy::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_topBar") ) { _topBar=inValue.Cast<  ::openfl::_legacy::display::Sprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_buttons") ) { _buttons=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_windows") ) { _windows=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bitmapLog") ) { bitmapLog=inValue.Cast<  ::flixel::_hx_system::debug::log::BitmapLog >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interaction") ) { interaction=inValue.Cast<  ::flixel::_hx_system::debug::interaction::Interaction >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_screenBounds") ) { _screenBounds=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"completionList") ) { completionList=inValue.Cast<  ::flixel::_hx_system::debug::completion::CompletionList >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_wasMouseVisible") ) { _wasMouseVisible=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_usingSystemCursor") ) { _usingSystemCursor=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_wasUsingSystemCursor") ) { _wasUsingSystemCursor=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxDebugger_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84"));
	outFields->push(HX_HCSTRING("log","\x84","\x54","\x52","\x00"));
	outFields->push(HX_HCSTRING("watch","\x4f","\x16","\x25","\xc5"));
	outFields->push(HX_HCSTRING("bitmapLog","\xd5","\x5b","\xdb","\xc6"));
	outFields->push(HX_HCSTRING("vcr","\xa5","\xe0","\x59","\x00"));
	outFields->push(HX_HCSTRING("console","\x57","\xeb","\xd5","\x18"));
	outFields->push(HX_HCSTRING("interaction","\xd2","\x37","\x59","\x3c"));
	outFields->push(HX_HCSTRING("completionList","\x9a","\xd1","\x5d","\x23"));
	outFields->push(HX_HCSTRING("_layout","\x49","\xc0","\x2f","\xc7"));
	outFields->push(HX_HCSTRING("_screen","\x0b","\x4d","\xd4","\xb5"));
	outFields->push(HX_HCSTRING("_screenBounds","\xe0","\x21","\xaa","\x25"));
	outFields->push(HX_HCSTRING("_buttons","\xc2","\xab","\x2d","\x04"));
	outFields->push(HX_HCSTRING("_topBar","\xdd","\x9f","\x91","\x03"));
	outFields->push(HX_HCSTRING("_windows","\x04","\x38","\x2d","\x22"));
	outFields->push(HX_HCSTRING("_usingSystemCursor","\x4a","\x33","\x58","\xe3"));
	outFields->push(HX_HCSTRING("_wasMouseVisible","\x17","\x92","\xd7","\x91"));
	outFields->push(HX_HCSTRING("_wasUsingSystemCursor","\xff","\xd8","\x04","\xe6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxDebugger_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::_hx_system::debug::stats::Stats*/ ,(int)offsetof(FlxDebugger_obj,stats),HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84")},
	{hx::fsObject /*::flixel::_hx_system::debug::log::Log*/ ,(int)offsetof(FlxDebugger_obj,log),HX_HCSTRING("log","\x84","\x54","\x52","\x00")},
	{hx::fsObject /*::flixel::_hx_system::debug::watch::Watch*/ ,(int)offsetof(FlxDebugger_obj,watch),HX_HCSTRING("watch","\x4f","\x16","\x25","\xc5")},
	{hx::fsObject /*::flixel::_hx_system::debug::log::BitmapLog*/ ,(int)offsetof(FlxDebugger_obj,bitmapLog),HX_HCSTRING("bitmapLog","\xd5","\x5b","\xdb","\xc6")},
	{hx::fsObject /*::flixel::_hx_system::debug::VCR*/ ,(int)offsetof(FlxDebugger_obj,vcr),HX_HCSTRING("vcr","\xa5","\xe0","\x59","\x00")},
	{hx::fsObject /*::flixel::_hx_system::debug::console::Console*/ ,(int)offsetof(FlxDebugger_obj,console),HX_HCSTRING("console","\x57","\xeb","\xd5","\x18")},
	{hx::fsObject /*::flixel::_hx_system::debug::interaction::Interaction*/ ,(int)offsetof(FlxDebugger_obj,interaction),HX_HCSTRING("interaction","\xd2","\x37","\x59","\x3c")},
	{hx::fsObject /*::flixel::_hx_system::debug::completion::CompletionList*/ ,(int)offsetof(FlxDebugger_obj,completionList),HX_HCSTRING("completionList","\x9a","\xd1","\x5d","\x23")},
	{hx::fsObject /*::flixel::_hx_system::debug::FlxDebuggerLayout*/ ,(int)offsetof(FlxDebugger_obj,_layout),HX_HCSTRING("_layout","\x49","\xc0","\x2f","\xc7")},
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(int)offsetof(FlxDebugger_obj,_screen),HX_HCSTRING("_screen","\x0b","\x4d","\xd4","\xb5")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(FlxDebugger_obj,_screenBounds),HX_HCSTRING("_screenBounds","\xe0","\x21","\xaa","\x25")},
	{hx::fsObject /*::haxe::ds::EnumValueMap*/ ,(int)offsetof(FlxDebugger_obj,_buttons),HX_HCSTRING("_buttons","\xc2","\xab","\x2d","\x04")},
	{hx::fsObject /*::openfl::_legacy::display::Sprite*/ ,(int)offsetof(FlxDebugger_obj,_topBar),HX_HCSTRING("_topBar","\xdd","\x9f","\x91","\x03")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxDebugger_obj,_windows),HX_HCSTRING("_windows","\x04","\x38","\x2d","\x22")},
	{hx::fsBool,(int)offsetof(FlxDebugger_obj,_usingSystemCursor),HX_HCSTRING("_usingSystemCursor","\x4a","\x33","\x58","\xe3")},
	{hx::fsBool,(int)offsetof(FlxDebugger_obj,_wasMouseVisible),HX_HCSTRING("_wasMouseVisible","\x17","\x92","\xd7","\x91")},
	{hx::fsBool,(int)offsetof(FlxDebugger_obj,_wasUsingSystemCursor),HX_HCSTRING("_wasUsingSystemCursor","\xff","\xd8","\x04","\xe6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxDebugger_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &FlxDebugger_obj::GUTTER,HX_HCSTRING("GUTTER","\x1b","\xd3","\x2b","\x8c")},
	{hx::fsInt,(void *) &FlxDebugger_obj::TOP_HEIGHT,HX_HCSTRING("TOP_HEIGHT","\xb1","\x2b","\xf8","\x33")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxDebugger_obj_sMemberFields[] = {
	HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84"),
	HX_HCSTRING("log","\x84","\x54","\x52","\x00"),
	HX_HCSTRING("watch","\x4f","\x16","\x25","\xc5"),
	HX_HCSTRING("bitmapLog","\xd5","\x5b","\xdb","\xc6"),
	HX_HCSTRING("vcr","\xa5","\xe0","\x59","\x00"),
	HX_HCSTRING("console","\x57","\xeb","\xd5","\x18"),
	HX_HCSTRING("interaction","\xd2","\x37","\x59","\x3c"),
	HX_HCSTRING("completionList","\x9a","\xd1","\x5d","\x23"),
	HX_HCSTRING("_layout","\x49","\xc0","\x2f","\xc7"),
	HX_HCSTRING("_screen","\x0b","\x4d","\xd4","\xb5"),
	HX_HCSTRING("_screenBounds","\xe0","\x21","\xaa","\x25"),
	HX_HCSTRING("_buttons","\xc2","\xab","\x2d","\x04"),
	HX_HCSTRING("_topBar","\xdd","\x9f","\x91","\x03"),
	HX_HCSTRING("_windows","\x04","\x38","\x2d","\x22"),
	HX_HCSTRING("_usingSystemCursor","\x4a","\x33","\x58","\xe3"),
	HX_HCSTRING("_wasMouseVisible","\x17","\x92","\xd7","\x91"),
	HX_HCSTRING("_wasUsingSystemCursor","\xff","\xd8","\x04","\xe6"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("setLayout","\xec","\x23","\x60","\xb8"),
	HX_HCSTRING("resetLayout","\xd9","\x31","\xcd","\xf8"),
	HX_HCSTRING("onResize","\x73","\x50","\x28","\xe8"),
	HX_HCSTRING("updateBounds","\x5e","\x2d","\xe1","\x65"),
	HX_HCSTRING("hAlignButtons","\x84","\xfe","\xc2","\x4e"),
	HX_HCSTRING("resetButtonLayout","\xab","\x16","\xc0","\x05"),
	HX_HCSTRING("addButton","\xf3","\x96","\x04","\x92"),
	HX_HCSTRING("removeButton","\x56","\xfd","\x0d","\x49"),
	HX_HCSTRING("addWindowToggleButton","\x37","\xb7","\xff","\xa6"),
	HX_HCSTRING("addWindow","\xf1","\xc8","\xb0","\x0a"),
	HX_HCSTRING("removeWindow","\x54","\x2f","\xba","\xc1"),
	HX_HCSTRING("addChild","\xbb","\xcf","\x16","\xbf"),
	HX_HCSTRING("onMouseOver","\xfa","\x2c","\x50","\x18"),
	HX_HCSTRING("onMouseOut","\xa8","\xbb","\xd4","\x81"),
	HX_HCSTRING("onMouseFocus","\x72","\xf5","\x99","\xfa"),
	HX_HCSTRING("onMouseFocusLost","\x76","\x6c","\x77","\xbd"),
	HX_HCSTRING("toggleDrawDebug","\x7b","\x15","\xd7","\xeb"),
	HX_HCSTRING("openHomepage","\xd8","\x39","\x1b","\x89"),
	HX_HCSTRING("openGitHub","\x2d","\x47","\x55","\x3e"),
	::String(null()) };

static void FlxDebugger_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxDebugger_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxDebugger_obj::GUTTER,"GUTTER");
	HX_MARK_MEMBER_NAME(FlxDebugger_obj::TOP_HEIGHT,"TOP_HEIGHT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxDebugger_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxDebugger_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxDebugger_obj::GUTTER,"GUTTER");
	HX_VISIT_MEMBER_NAME(FlxDebugger_obj::TOP_HEIGHT,"TOP_HEIGHT");
};

#endif

hx::Class FlxDebugger_obj::__mClass;

static ::String FlxDebugger_obj_sStaticFields[] = {
	HX_HCSTRING("GUTTER","\x1b","\xd3","\x2b","\x8c"),
	HX_HCSTRING("TOP_HEIGHT","\xb1","\x2b","\xf8","\x33"),
	::String(null())
};

void FlxDebugger_obj::__register()
{
	hx::Object *dummy = new FlxDebugger_obj;
	FlxDebugger_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.debug.FlxDebugger","\x0b","\x53","\xa2","\xd7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxDebugger_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxDebugger_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxDebugger_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxDebugger_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxDebugger_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxDebugger_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxDebugger_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxDebugger_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_69_boot)
HXDLIN(  69)		GUTTER = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_73_boot)
HXDLIN(  73)		TOP_HEIGHT = (int)20;
            	}
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
