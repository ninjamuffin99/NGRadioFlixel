// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_util_LabelValuePair
#include <flixel/util/FlxPool_flixel_util_LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetType
#include <openfl/_legacy/AssetType.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_media_Sound
#include <openfl/_legacy/media/Sound.h>
#endif
#ifndef INCLUDED_openfl__legacy_media_SoundChannel
#include <openfl/_legacy/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl__legacy_net_URLRequest
#include <openfl/_legacy/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_media_ID3Info
#include <openfl/media/ID3Info.h>
#endif
#ifndef INCLUDED_openfl_media_SoundLoaderContext
#include <openfl/media/SoundLoaderContext.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ec393d325e46c77d_24_new,"flixel.system.FlxSound","new",0xa043445c,"flixel.system.FlxSound.new","flixel/system/FlxSound.hx",24,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_189_reset,"flixel.system.FlxSound","reset",0xf879b4cb,"flixel.system.FlxSound.reset","flixel/system/FlxSound.hx",189,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_217_destroy,"flixel.system.FlxSound","destroy",0x15a54ef6,"flixel.system.FlxSound.destroy","flixel/system/FlxSound.hx",217,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_247_update,"flixel.system.FlxSound","update",0xf091b78d,"flixel.system.FlxSound.update","flixel/system/FlxSound.hx",247,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_291_kill,"flixel.system.FlxSound","kill",0x989fe822,"flixel.system.FlxSound.kill","flixel/system/FlxSound.hx",291,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_306_loadEmbedded,"flixel.system.FlxSound","loadEmbedded",0xbf233254,"flixel.system.FlxSound.loadEmbedded","flixel/system/FlxSound.hx",306,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_343_loadStream,"flixel.system.FlxSound","loadStream",0x893586ca,"flixel.system.FlxSound.loadStream","flixel/system/FlxSound.hx",343,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_376_init,"flixel.system.FlxSound","init",0x97514394,"flixel.system.FlxSound.init","flixel/system/FlxSound.hx",376,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_399_proximity,"flixel.system.FlxSound","proximity",0x52ce623b,"flixel.system.FlxSound.proximity","flixel/system/FlxSound.hx",399,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_420_play,"flixel.system.FlxSound","play",0x9bf03678,"flixel.system.FlxSound.play","flixel/system/FlxSound.hx",420,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_442_resume,"flixel.system.FlxSound","resume",0x72109b31,"flixel.system.FlxSound.resume","flixel/system/FlxSound.hx",442,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_452_pause,"flixel.system.FlxSound","pause",0xcf0941f2,"flixel.system.FlxSound.pause","flixel/system/FlxSound.hx",452,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_466_stop,"flixel.system.FlxSound","stop",0x9df1f886,"flixel.system.FlxSound.stop","flixel/system/FlxSound.hx",466,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_478_fadeOut,"flixel.system.FlxSound","fadeOut",0x225b5a6e,"flixel.system.FlxSound.fadeOut","flixel/system/FlxSound.hx",478,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_494_fadeIn,"flixel.system.FlxSound","fadeIn",0x4e377e05,"flixel.system.FlxSound.fadeIn","flixel/system/FlxSound.hx",494,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_507_volumeTween,"flixel.system.FlxSound","volumeTween",0x6ac0ca2d,"flixel.system.FlxSound.volumeTween","flixel/system/FlxSound.hx",507,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_517_getActualVolume,"flixel.system.FlxSound","getActualVolume",0xa3e81aba,"flixel.system.FlxSound.getActualVolume","flixel/system/FlxSound.hx",517,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_528_setPosition,"flixel.system.FlxSound","setPosition",0xba193a67,"flixel.system.FlxSound.setPosition","flixel/system/FlxSound.hx",528,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_538_updateTransform,"flixel.system.FlxSound","updateTransform",0x01697c1f,"flixel.system.FlxSound.updateTransform","flixel/system/FlxSound.hx",538,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_554_startSound,"flixel.system.FlxSound","startSound",0x5fc0a891,"flixel.system.FlxSound.startSound","flixel/system/FlxSound.hx",554,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_581_stopped,"flixel.system.FlxSound","stopped",0x3480f409,"flixel.system.FlxSound.stopped","flixel/system/FlxSound.hx",581,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_604_cleanup,"flixel.system.FlxSound","cleanup",0x9c612e20,"flixel.system.FlxSound.cleanup","flixel/system/FlxSound.hx",604,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_631_gotID3,"flixel.system.FlxSound","gotID3",0xcead1fb0,"flixel.system.FlxSound.gotID3","flixel/system/FlxSound.hx",631,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_641_onFocus,"flixel.system.FlxSound","onFocus",0x8be62035,"flixel.system.FlxSound.onFocus","flixel/system/FlxSound.hx",641,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_647_onFocusLost,"flixel.system.FlxSound","onFocusLost",0x0043b4b9,"flixel.system.FlxSound.onFocusLost","flixel/system/FlxSound.hx",647,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_654_set_group,"flixel.system.FlxSound","set_group",0x9197949e,"flixel.system.FlxSound.set_group","flixel/system/FlxSound.hx",654,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_675_get_playing,"flixel.system.FlxSound","get_playing",0xced03f81,"flixel.system.FlxSound.get_playing","flixel/system/FlxSound.hx",675,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_680_get_volume,"flixel.system.FlxSound","get_volume",0x12b7dd27,"flixel.system.FlxSound.get_volume","flixel/system/FlxSound.hx",680,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_684_set_volume,"flixel.system.FlxSound","set_volume",0x16357b9b,"flixel.system.FlxSound.set_volume","flixel/system/FlxSound.hx",684,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_693_get_pitch,"flixel.system.FlxSound","get_pitch",0xd6f2b113,"flixel.system.FlxSound.get_pitch","flixel/system/FlxSound.hx",693,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_697_set_pitch,"flixel.system.FlxSound","set_pitch",0xba439d1f,"flixel.system.FlxSound.set_pitch","flixel/system/FlxSound.hx",697,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_706_get_pan,"flixel.system.FlxSound","get_pan",0x17e93bf0,"flixel.system.FlxSound.get_pan","flixel/system/FlxSound.hx",706,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_711_set_pan,"flixel.system.FlxSound","set_pan",0x0aeaccfc,"flixel.system.FlxSound.set_pan","flixel/system/FlxSound.hx",711,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_716_get_time,"flixel.system.FlxSound","get_time",0xd6d6221a,"flixel.system.FlxSound.get_time","flixel/system/FlxSound.hx",716,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_720_set_time,"flixel.system.FlxSound","set_time",0x85337b8e,"flixel.system.FlxSound.set_time","flixel/system/FlxSound.hx",720,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_731_get_length,"flixel.system.FlxSound","get_length",0x526c4833,"flixel.system.FlxSound.get_length","flixel/system/FlxSound.hx",731,0x7d78fc74)
HX_LOCAL_STACK_FRAME(_hx_pos_ec393d325e46c77d_736_toString,"flixel.system.FlxSound","toString",0x428d6b30,"flixel.system.FlxSound.toString","flixel/system/FlxSound.hx",736,0x7d78fc74)
namespace flixel{
namespace _hx_system{

void FlxSound_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_24_new)
HXLINE( 174)		this->_alreadyPaused = false;
HXLINE( 158)		this->_volumeAdjust = ((Float)1.0);
HXLINE( 153)		this->_pitch = ((Float)1.0);
HXLINE( 148)		this->_length = ((Float)0);
HXLINE( 144)		this->_time = ((Float)0);
HXLINE( 109)		this->loopTime = ((Float)0);
HXLINE( 181)		super::__construct();
HXLINE( 182)		this->reset();
            	}

Dynamic FlxSound_obj::__CreateEmpty() { return new FlxSound_obj; }

void *FlxSound_obj::_hx_vtable = 0;

Dynamic FlxSound_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxSound_obj > _hx_result = new FlxSound_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxSound_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25a685e0;
	} else {
		return inClassId==(int)0x43288a0c;
	}
}

void FlxSound_obj::reset(){
            	HX_GC_STACKFRAME(&_hx_pos_ec393d325e46c77d_189_reset)
HXLINE( 190)		this->destroy();
HXLINE( 192)		this->x = (int)0;
HXLINE( 193)		this->y = (int)0;
HXLINE( 195)		this->_time = (int)0;
HXLINE( 196)		this->_paused = false;
HXLINE( 197)		this->_volume = ((Float)1.0);
HXLINE( 198)		this->_volumeAdjust = ((Float)1.0);
HXLINE( 199)		this->looped = false;
HXLINE( 200)		this->loopTime = ((Float)0.0);
HXLINE( 201)		this->endTime = ((Float)0.0);
HXLINE( 202)		this->_target = null();
HXLINE( 203)		this->_radius = (int)0;
HXLINE( 204)		this->_proximityPan = false;
HXLINE( 205)		this->set_visible(false);
HXLINE( 206)		this->amplitude = (int)0;
HXLINE( 207)		this->amplitudeLeft = (int)0;
HXLINE( 208)		this->amplitudeRight = (int)0;
HXLINE( 209)		this->autoDestroy = false;
HXLINE( 211)		if (hx::IsNull( this->_transform )) {
HXLINE( 212)			this->_transform =  ::openfl::media::SoundTransform_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE( 213)		this->_transform->pan = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSound_obj,reset,(void))

void FlxSound_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_217_destroy)
HXLINE( 218)		this->_transform = null();
HXLINE( 219)		this->set_exists(false);
HXLINE( 220)		this->set_active(false);
HXLINE( 221)		this->_target = null();
HXLINE( 222)		this->name = null();
HXLINE( 223)		this->artist = null();
HXLINE( 225)		if (hx::IsNotNull( this->_channel )) {
HXLINE( 227)			this->_channel->removeEventListener(::openfl::_legacy::events::Event_obj::SOUND_COMPLETE,this->stopped_dyn(),null());
HXLINE( 228)			this->_channel->stop();
HXLINE( 229)			this->_channel = null();
            		}
HXLINE( 232)		if (hx::IsNotNull( this->_sound )) {
HXLINE( 234)			this->_sound->removeEventListener(::openfl::_legacy::events::Event_obj::ID3,this->gotID3_dyn(),null());
HXLINE( 235)			this->_sound = null();
            		}
HXLINE( 238)		this->onComplete = null();
HXLINE( 240)		this->super::destroy();
            	}


void FlxSound_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_247_update)
HXLINE( 248)		if (hx::IsNull( this->_channel )) {
HXLINE( 249)			return;
            		}
HXLINE( 251)		this->_time = this->_channel->get_position();
HXLINE( 253)		Float radialMultiplier = ((Float)1.0);
HXLINE( 256)		if (hx::IsNotNull( this->_target )) {
HXLINE( 258)			 ::flixel::math::FlxPoint targetPosition = this->_target->getPosition(null());
HXLINE( 259)			Float X = this->x;
HXDLIN( 259)			Float Y = this->y;
HXDLIN( 259)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 259)			point->_inPool = false;
HXDLIN( 259)			 ::flixel::math::FlxPoint point1 = point;
HXDLIN( 259)			point1->_weak = true;
HXDLIN( 259)			Float radialMultiplier1 = targetPosition->distanceTo(point1);
HXDLIN( 259)			radialMultiplier = ((Float)radialMultiplier1 / (Float)this->_radius);
HXLINE( 260)			targetPosition->put();
HXLINE( 261)			Float lowerBound;
HXDLIN( 261)			if ((radialMultiplier < (int)0)) {
HXLINE( 261)				lowerBound = (int)0;
            			}
            			else {
HXLINE( 261)				lowerBound = radialMultiplier;
            			}
HXDLIN( 261)			 ::Dynamic radialMultiplier2;
HXDLIN( 261)			if ((lowerBound > (int)1)) {
HXLINE( 261)				radialMultiplier2 = (int)1;
            			}
            			else {
HXLINE( 261)				radialMultiplier2 = lowerBound;
            			}
HXDLIN( 261)			radialMultiplier = ((int)1 - radialMultiplier2);
HXLINE( 263)			if (this->_proximityPan) {
HXLINE( 265)				Float d = ((Float)(this->x - this->_target->x) / (Float)this->_radius);
HXLINE( 266)				Float lowerBound1;
HXDLIN( 266)				if ((d < (int)-1)) {
HXLINE( 266)					lowerBound1 = (int)-1;
            				}
            				else {
HXLINE( 266)					lowerBound1 = d;
            				}
HXDLIN( 266)				 ::Dynamic _hx_tmp;
HXDLIN( 266)				if ((lowerBound1 > (int)1)) {
HXLINE( 266)					_hx_tmp = (int)1;
            				}
            				else {
HXLINE( 266)					_hx_tmp = lowerBound1;
            				}
HXDLIN( 266)				this->_transform->pan = _hx_tmp;
            			}
            		}
HXLINE( 270)		this->_volumeAdjust = radialMultiplier;
HXLINE( 271)		this->updateTransform();
HXLINE( 273)		if ((this->_transform->volume > (int)0)) {
HXLINE( 275)			Float _hx_tmp1 = this->_channel->get_leftPeak();
HXDLIN( 275)			this->amplitudeLeft = ((Float)_hx_tmp1 / (Float)this->_transform->volume);
HXLINE( 276)			Float _hx_tmp2 = this->_channel->get_rightPeak();
HXDLIN( 276)			this->amplitudeRight = ((Float)_hx_tmp2 / (Float)this->_transform->volume);
HXLINE( 277)			this->amplitude = ((this->amplitudeLeft + this->amplitudeRight) * ((Float)0.5));
            		}
            		else {
HXLINE( 281)			this->amplitudeLeft = (int)0;
HXLINE( 282)			this->amplitudeRight = (int)0;
HXLINE( 283)			this->amplitude = (int)0;
            		}
HXLINE( 286)		bool _hx_tmp3;
HXDLIN( 286)		if (hx::IsNotNull( this->endTime )) {
HXLINE( 286)			_hx_tmp3 = hx::IsGreaterEq( this->_time,this->endTime );
            		}
            		else {
HXLINE( 286)			_hx_tmp3 = false;
            		}
HXDLIN( 286)		if (_hx_tmp3) {
HXLINE( 287)			this->stopped(null());
            		}
            	}


void FlxSound_obj::kill(){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_291_kill)
HXLINE( 292)		this->super::kill();
HXLINE( 293)		this->cleanup(false,null());
            	}


 ::flixel::_hx_system::FlxSound FlxSound_obj::loadEmbedded( ::Dynamic EmbeddedSound,hx::Null< bool >  __o_Looped,hx::Null< bool >  __o_AutoDestroy, ::Dynamic OnComplete){
bool Looped = __o_Looped.Default(false);
bool AutoDestroy = __o_AutoDestroy.Default(false);
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_306_loadEmbedded)
HXLINE( 307)		if (hx::IsNull( EmbeddedSound )) {
HXLINE( 308)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 310)		this->cleanup(true,null());
HXLINE( 312)		if (::Std_obj::is(EmbeddedSound,hx::ClassOf< ::openfl::_legacy::media::Sound >())) {
HXLINE( 314)			this->_sound = ( ( ::openfl::_legacy::media::Sound)(EmbeddedSound) );
            		}
            		else {
HXLINE( 316)			if (::Std_obj::is(EmbeddedSound,hx::ClassOf< ::hx::Class >())) {
HXLINE( 318)				this->_sound = ( ( ::openfl::_legacy::media::Sound)(::Type_obj::createInstance(EmbeddedSound,::cpp::VirtualArray_obj::__new(0))) );
            			}
            			else {
HXLINE( 320)				if (::Std_obj::is(EmbeddedSound,hx::ClassOf< ::String >())) {
HXLINE( 322)					bool _hx_tmp;
HXDLIN( 322)					if (!(::openfl::_legacy::Assets_obj::exists(( (::String)(EmbeddedSound) ),::openfl::_legacy::AssetType_obj::SOUND_dyn()))) {
HXLINE( 322)						_hx_tmp = ::openfl::_legacy::Assets_obj::exists(( (::String)(EmbeddedSound) ),::openfl::_legacy::AssetType_obj::MUSIC_dyn());
            					}
            					else {
HXLINE( 322)						_hx_tmp = true;
            					}
HXDLIN( 322)					if (_hx_tmp) {
HXLINE( 324)						this->_sound = ::openfl::_legacy::Assets_obj::getSound(( (::String)(EmbeddedSound) ),null());
            					}
            					else {
HXLINE( 326)						 ::Dynamic _hx_tmp1 = ::flixel::FlxG_obj::log->error_dyn();
HXDLIN( 326)						_hx_tmp1(((HX_("Could not find a Sound asset with an ID of '",6f,0e,1e,66) + EmbeddedSound) + HX_("'.",27,22,00,00)));
            					}
            				}
            			}
            		}
HXLINE( 330)		return this->init(Looped,AutoDestroy,OnComplete);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxSound_obj,loadEmbedded,return )

 ::flixel::_hx_system::FlxSound FlxSound_obj::loadStream(::String SoundURL,hx::Null< bool >  __o_Looped,hx::Null< bool >  __o_AutoDestroy, ::Dynamic OnComplete){
bool Looped = __o_Looped.Default(false);
bool AutoDestroy = __o_AutoDestroy.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_ec393d325e46c77d_343_loadStream)
HXLINE( 344)		this->cleanup(true,null());
HXLINE( 346)		this->_sound =  ::openfl::_legacy::media::Sound_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 347)		this->_sound->addEventListener(::openfl::_legacy::events::Event_obj::ID3,this->gotID3_dyn(),null(),null(),null());
HXLINE( 348)		 ::openfl::_legacy::media::Sound _hx_tmp = this->_sound;
HXDLIN( 348)		_hx_tmp->load( ::openfl::_legacy::net::URLRequest_obj::__alloc( HX_CTX ,SoundURL),null(),null());
HXLINE( 350)		return this->init(Looped,AutoDestroy,OnComplete);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxSound_obj,loadStream,return )

 ::flixel::_hx_system::FlxSound FlxSound_obj::init(hx::Null< bool >  __o_Looped,hx::Null< bool >  __o_AutoDestroy, ::Dynamic OnComplete){
bool Looped = __o_Looped.Default(false);
bool AutoDestroy = __o_AutoDestroy.Default(false);
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_376_init)
HXLINE( 377)		this->looped = Looped;
HXLINE( 378)		this->autoDestroy = AutoDestroy;
HXLINE( 379)		this->updateTransform();
HXLINE( 380)		this->set_exists(true);
HXLINE( 381)		this->onComplete = OnComplete;
HXLINE( 382)		Float _hx_tmp;
HXDLIN( 382)		if (hx::IsNull( this->_sound )) {
HXLINE( 382)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE( 382)			_hx_tmp = this->_sound->get_length();
            		}
HXDLIN( 382)		this->_length = _hx_tmp;
HXLINE( 383)		this->endTime = this->_length;
HXLINE( 384)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxSound_obj,init,return )

 ::flixel::_hx_system::FlxSound FlxSound_obj::proximity(Float X,Float Y, ::flixel::FlxObject TargetObject,Float Radius,hx::Null< bool >  __o_Pan){
bool Pan = __o_Pan.Default(true);
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_399_proximity)
HXLINE( 400)		this->x = X;
HXLINE( 401)		this->y = Y;
HXLINE( 402)		this->_target = TargetObject;
HXLINE( 403)		this->_radius = Radius;
HXLINE( 404)		this->_proximityPan = Pan;
HXLINE( 405)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxSound_obj,proximity,return )

 ::flixel::_hx_system::FlxSound FlxSound_obj::play(hx::Null< bool >  __o_ForceRestart,hx::Null< Float >  __o_StartTime, ::Dynamic EndTime){
bool ForceRestart = __o_ForceRestart.Default(false);
Float StartTime = __o_StartTime.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_420_play)
HXLINE( 421)		if (!(this->exists)) {
HXLINE( 422)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 424)		if (ForceRestart) {
HXLINE( 425)			this->cleanup(false,true);
            		}
            		else {
HXLINE( 426)			if (hx::IsNotNull( this->_channel )) {
HXLINE( 427)				return hx::ObjectPtr<OBJ_>(this);
            			}
            		}
HXLINE( 429)		if (this->_paused) {
HXLINE( 430)			this->resume();
            		}
            		else {
HXLINE( 432)			this->startSound(StartTime);
            		}
HXLINE( 434)		this->endTime = EndTime;
HXLINE( 435)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxSound_obj,play,return )

 ::flixel::_hx_system::FlxSound FlxSound_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_442_resume)
HXLINE( 443)		if (this->_paused) {
HXLINE( 444)			this->startSound(this->_time);
            		}
HXLINE( 445)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSound_obj,resume,return )

 ::flixel::_hx_system::FlxSound FlxSound_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_452_pause)
HXLINE( 453)		if (hx::IsNull( this->_channel )) {
HXLINE( 454)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 456)		this->_time = this->_channel->get_position();
HXLINE( 457)		this->_paused = true;
HXLINE( 458)		this->cleanup(false,false);
HXLINE( 459)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSound_obj,pause,return )

 ::flixel::_hx_system::FlxSound FlxSound_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_466_stop)
HXLINE( 467)		this->cleanup(this->autoDestroy,true);
HXLINE( 468)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSound_obj,stop,return )

 ::flixel::_hx_system::FlxSound FlxSound_obj::fadeOut(hx::Null< Float >  __o_Duration, ::Dynamic __o_To, ::Dynamic onComplete){
Float Duration = __o_Duration.Default(1);
 ::Dynamic To = __o_To.Default(0);
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_478_fadeOut)
HXLINE( 479)		if (hx::IsNotNull( this->fadeTween )) {
HXLINE( 480)			this->fadeTween->cancel();
            		}
HXLINE( 481)		this->fadeTween = ::flixel::tweens::FlxTween_obj::num(this->_volume,To,Duration, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),this->volumeTween_dyn());
HXLINE( 483)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxSound_obj,fadeOut,return )

 ::flixel::_hx_system::FlxSound FlxSound_obj::fadeIn(hx::Null< Float >  __o_Duration,hx::Null< Float >  __o_From,hx::Null< Float >  __o_To, ::Dynamic onComplete){
Float Duration = __o_Duration.Default(1);
Float From = __o_From.Default(0);
Float To = __o_To.Default(1);
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_494_fadeIn)
HXLINE( 495)		if (hx::IsNull( this->_channel )) {
HXLINE( 496)			this->play(null(),null(),null());
            		}
HXLINE( 498)		if (hx::IsNotNull( this->fadeTween )) {
HXLINE( 499)			this->fadeTween->cancel();
            		}
HXLINE( 501)		this->fadeTween = ::flixel::tweens::FlxTween_obj::num(From,To,Duration, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),this->volumeTween_dyn());
HXLINE( 502)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxSound_obj,fadeIn,return )

void FlxSound_obj::volumeTween(Float f){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_507_volumeTween)
HXDLIN( 507)		this->set_volume(f);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSound_obj,volumeTween,(void))

Float FlxSound_obj::getActualVolume(){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_517_getActualVolume)
HXDLIN( 517)		return (this->_volume * this->_volumeAdjust);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSound_obj,getActualVolume,return )

void FlxSound_obj::setPosition(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_528_setPosition)
HXLINE( 529)		this->x = X;
HXLINE( 530)		this->y = Y;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxSound_obj,setPosition,(void))

void FlxSound_obj::updateTransform(){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_538_updateTransform)
HXLINE( 541)		int _hx_tmp;
HXDLIN( 541)		if (::flixel::FlxG_obj::sound->muted) {
HXLINE( 541)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE( 541)			_hx_tmp = (int)1;
            		}
HXLINE( 543)		Float _hx_tmp1;
HXDLIN( 543)		if (hx::IsNotNull( this->group )) {
HXLINE( 543)			_hx_tmp1 = this->group->volume;
            		}
            		else {
HXLINE( 543)			_hx_tmp1 = (int)1;
            		}
HXLINE( 539)		this->_transform->volume = ((((_hx_tmp * ::flixel::FlxG_obj::sound->volume) * _hx_tmp1) * this->_volume) * this->_volumeAdjust);
HXLINE( 545)		if (hx::IsNotNull( this->_channel )) {
HXLINE( 546)			this->_channel->set_soundTransform(this->_transform);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSound_obj,updateTransform,(void))

void FlxSound_obj::startSound(Float StartTime){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_554_startSound)
HXLINE( 555)		if (hx::IsNull( this->_sound )) {
HXLINE( 556)			return;
            		}
HXLINE( 558)		this->_time = StartTime;
HXLINE( 559)		this->_paused = false;
HXLINE( 560)		this->_channel = this->_sound->play(this->_time,(int)0,this->_transform);
HXLINE( 561)		if (hx::IsNotNull( this->_channel )) {
HXLINE( 564)			this->set_pitch(this->_pitch);
HXLINE( 566)			this->_channel->addEventListener(::openfl::_legacy::events::Event_obj::SOUND_COMPLETE,this->stopped_dyn(),null(),null(),null());
HXLINE( 567)			this->set_active(true);
            		}
            		else {
HXLINE( 571)			this->set_exists(false);
HXLINE( 572)			this->set_active(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSound_obj,startSound,(void))

void FlxSound_obj::stopped( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_581_stopped)
HXLINE( 582)		if (hx::IsNotNull( this->onComplete )) {
HXLINE( 583)			this->onComplete();
            		}
HXLINE( 585)		if (this->looped) {
HXLINE( 587)			this->cleanup(false,null());
HXLINE( 588)			this->play(false,this->loopTime,this->endTime);
            		}
            		else {
HXLINE( 591)			this->cleanup(this->autoDestroy,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSound_obj,stopped,(void))

void FlxSound_obj::cleanup(bool destroySound,hx::Null< bool >  __o_resetPosition){
bool resetPosition = __o_resetPosition.Default(true);
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_604_cleanup)
HXLINE( 605)		if (destroySound) {
HXLINE( 607)			this->reset();
HXLINE( 608)			return;
            		}
HXLINE( 611)		if (hx::IsNotNull( this->_channel )) {
HXLINE( 613)			this->_channel->removeEventListener(::openfl::_legacy::events::Event_obj::SOUND_COMPLETE,this->stopped_dyn(),null());
HXLINE( 614)			this->_channel->stop();
HXLINE( 615)			this->_channel = null();
            		}
HXLINE( 618)		this->set_active(false);
HXLINE( 620)		if (resetPosition) {
HXLINE( 622)			this->_time = (int)0;
HXLINE( 623)			this->_paused = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxSound_obj,cleanup,(void))

void FlxSound_obj::gotID3( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_631_gotID3)
HXLINE( 632)		this->name = this->_sound->get_id3()->songName;
HXLINE( 633)		this->artist = this->_sound->get_id3()->artist;
HXLINE( 634)		this->_sound->removeEventListener(::openfl::_legacy::events::Event_obj::ID3,this->gotID3_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSound_obj,gotID3,(void))

void FlxSound_obj::onFocus(){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_641_onFocus)
HXDLIN( 641)		if (!(this->_alreadyPaused)) {
HXLINE( 642)			this->resume();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSound_obj,onFocus,(void))

void FlxSound_obj::onFocusLost(){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_647_onFocusLost)
HXLINE( 648)		this->_alreadyPaused = this->_paused;
HXLINE( 649)		this->pause();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSound_obj,onFocusLost,(void))

 ::flixel::_hx_system::FlxSoundGroup FlxSound_obj::set_group( ::flixel::_hx_system::FlxSoundGroup group){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_654_set_group)
HXLINE( 655)		if (hx::IsNotEq( this->group,group )) {
HXLINE( 657)			 ::flixel::_hx_system::FlxSoundGroup oldGroup = this->group;
HXLINE( 660)			this->group = group;
HXLINE( 662)			if (hx::IsNotNull( oldGroup )) {
HXLINE( 663)				oldGroup->remove(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 665)			if (hx::IsNotNull( group )) {
HXLINE( 666)				group->add(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 668)			this->updateTransform();
            		}
HXLINE( 670)		return group;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSound_obj,set_group,return )

bool FlxSound_obj::get_playing(){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_675_get_playing)
HXDLIN( 675)		return hx::IsNotNull( this->_channel );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSound_obj,get_playing,return )

Float FlxSound_obj::get_volume(){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_680_get_volume)
HXDLIN( 680)		return this->_volume;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSound_obj,get_volume,return )

Float FlxSound_obj::set_volume(Float Volume){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_684_set_volume)
HXLINE( 685)		Float lowerBound;
HXDLIN( 685)		if ((Volume < (int)0)) {
HXLINE( 685)			lowerBound = (int)0;
            		}
            		else {
HXLINE( 685)			lowerBound = Volume;
            		}
HXDLIN( 685)		 ::Dynamic _hx_tmp;
HXDLIN( 685)		if ((lowerBound > (int)1)) {
HXLINE( 685)			_hx_tmp = (int)1;
            		}
            		else {
HXLINE( 685)			_hx_tmp = lowerBound;
            		}
HXDLIN( 685)		this->_volume = _hx_tmp;
HXLINE( 686)		this->updateTransform();
HXLINE( 687)		return Volume;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSound_obj,set_volume,return )

Float FlxSound_obj::get_pitch(){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_693_get_pitch)
HXDLIN( 693)		return this->_pitch;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSound_obj,get_pitch,return )

Float FlxSound_obj::set_pitch(Float v){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_697_set_pitch)
HXLINE( 698)		if (hx::IsNotNull( this->_channel )) {
HXLINE( 699)			this->_channel->set_pitch(v);
            		}
HXLINE( 700)		return (this->_pitch = v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSound_obj,set_pitch,return )

Float FlxSound_obj::get_pan(){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_706_get_pan)
HXDLIN( 706)		return this->_transform->pan;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSound_obj,get_pan,return )

Float FlxSound_obj::set_pan(Float pan){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_711_set_pan)
HXDLIN( 711)		return (this->_transform->pan = pan);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSound_obj,set_pan,return )

Float FlxSound_obj::get_time(){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_716_get_time)
HXDLIN( 716)		return this->_time;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSound_obj,get_time,return )

Float FlxSound_obj::set_time(Float time){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_720_set_time)
HXLINE( 721)		if (hx::IsNotNull( this->_channel )) {
HXLINE( 723)			this->cleanup(false,true);
HXLINE( 724)			this->startSound(time);
            		}
HXLINE( 726)		return (this->_time = time);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSound_obj,set_time,return )

Float FlxSound_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_731_get_length)
HXDLIN( 731)		return this->_length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSound_obj,get_length,return )

::String FlxSound_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_ec393d325e46c77d_736_toString)
HXLINE( 737)		 ::Dynamic value = hx::IsNotNull( this->_channel );
HXDLIN( 737)		 ::flixel::util::LabelValuePair _this = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 737)		_this->label = HX_("playing",6e,0f,18,8a);
HXDLIN( 737)		_this->value = value;
HXDLIN( 737)		 ::flixel::util::LabelValuePair _hx_tmp = _this;
HXLINE( 738)		 ::Dynamic value1 = this->_time;
HXDLIN( 738)		 ::flixel::util::LabelValuePair _this1 = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 738)		_this1->label = HX_("time",0d,cc,fc,4c);
HXDLIN( 738)		_this1->value = value1;
HXDLIN( 738)		 ::flixel::util::LabelValuePair _hx_tmp1 = _this1;
HXLINE( 739)		 ::Dynamic value2 = this->_length;
HXDLIN( 739)		 ::flixel::util::LabelValuePair _this2 = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 739)		_this2->label = HX_("length",e6,94,07,9f);
HXDLIN( 739)		_this2->value = value2;
HXDLIN( 739)		 ::flixel::util::LabelValuePair _hx_tmp2 = _this2;
HXLINE( 740)		 ::Dynamic value3 = this->_volume;
HXDLIN( 740)		 ::flixel::util::LabelValuePair _this3 = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 740)		_this3->label = HX_("volume",da,29,53,5f);
HXDLIN( 740)		_this3->value = value3;
HXLINE( 736)		return ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(4)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_this3));
            	}



hx::ObjectPtr< FlxSound_obj > FlxSound_obj::__new() {
	hx::ObjectPtr< FlxSound_obj > __this = new FlxSound_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FlxSound_obj > FlxSound_obj::__alloc(hx::Ctx *_hx_ctx) {
	FlxSound_obj *__this = (FlxSound_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxSound_obj), true, "flixel.system.FlxSound"));
	*(void **)__this = FlxSound_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxSound_obj::FlxSound_obj()
{
}

void FlxSound_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxSound);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(persist,"persist");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(artist,"artist");
	HX_MARK_MEMBER_NAME(amplitude,"amplitude");
	HX_MARK_MEMBER_NAME(amplitudeLeft,"amplitudeLeft");
	HX_MARK_MEMBER_NAME(amplitudeRight,"amplitudeRight");
	HX_MARK_MEMBER_NAME(autoDestroy,"autoDestroy");
	HX_MARK_MEMBER_NAME(onComplete,"onComplete");
	HX_MARK_MEMBER_NAME(playing,"playing");
	HX_MARK_MEMBER_NAME(group,"group");
	HX_MARK_MEMBER_NAME(looped,"looped");
	HX_MARK_MEMBER_NAME(loopTime,"loopTime");
	HX_MARK_MEMBER_NAME(endTime,"endTime");
	HX_MARK_MEMBER_NAME(fadeTween,"fadeTween");
	HX_MARK_MEMBER_NAME(_sound,"_sound");
	HX_MARK_MEMBER_NAME(_channel,"_channel");
	HX_MARK_MEMBER_NAME(_transform,"_transform");
	HX_MARK_MEMBER_NAME(_paused,"_paused");
	HX_MARK_MEMBER_NAME(_volume,"_volume");
	HX_MARK_MEMBER_NAME(_time,"_time");
	HX_MARK_MEMBER_NAME(_length,"_length");
	HX_MARK_MEMBER_NAME(_pitch,"_pitch");
	HX_MARK_MEMBER_NAME(_volumeAdjust,"_volumeAdjust");
	HX_MARK_MEMBER_NAME(_target,"_target");
	HX_MARK_MEMBER_NAME(_radius,"_radius");
	HX_MARK_MEMBER_NAME(_proximityPan,"_proximityPan");
	HX_MARK_MEMBER_NAME(_alreadyPaused,"_alreadyPaused");
	 ::flixel::FlxBasic_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxSound_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(persist,"persist");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(artist,"artist");
	HX_VISIT_MEMBER_NAME(amplitude,"amplitude");
	HX_VISIT_MEMBER_NAME(amplitudeLeft,"amplitudeLeft");
	HX_VISIT_MEMBER_NAME(amplitudeRight,"amplitudeRight");
	HX_VISIT_MEMBER_NAME(autoDestroy,"autoDestroy");
	HX_VISIT_MEMBER_NAME(onComplete,"onComplete");
	HX_VISIT_MEMBER_NAME(playing,"playing");
	HX_VISIT_MEMBER_NAME(group,"group");
	HX_VISIT_MEMBER_NAME(looped,"looped");
	HX_VISIT_MEMBER_NAME(loopTime,"loopTime");
	HX_VISIT_MEMBER_NAME(endTime,"endTime");
	HX_VISIT_MEMBER_NAME(fadeTween,"fadeTween");
	HX_VISIT_MEMBER_NAME(_sound,"_sound");
	HX_VISIT_MEMBER_NAME(_channel,"_channel");
	HX_VISIT_MEMBER_NAME(_transform,"_transform");
	HX_VISIT_MEMBER_NAME(_paused,"_paused");
	HX_VISIT_MEMBER_NAME(_volume,"_volume");
	HX_VISIT_MEMBER_NAME(_time,"_time");
	HX_VISIT_MEMBER_NAME(_length,"_length");
	HX_VISIT_MEMBER_NAME(_pitch,"_pitch");
	HX_VISIT_MEMBER_NAME(_volumeAdjust,"_volumeAdjust");
	HX_VISIT_MEMBER_NAME(_target,"_target");
	HX_VISIT_MEMBER_NAME(_radius,"_radius");
	HX_VISIT_MEMBER_NAME(_proximityPan,"_proximityPan");
	HX_VISIT_MEMBER_NAME(_alreadyPaused,"_alreadyPaused");
	 ::flixel::FlxBasic_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxSound_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pan") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pan() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"time") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_time() ); }
		if (HX_FIELD_EQ(inName,"kill") ) { return hx::Val( kill_dyn() ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pitch") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pitch() ); }
		if (HX_FIELD_EQ(inName,"group") ) { return hx::Val( group ); }
		if (HX_FIELD_EQ(inName,"_time") ) { return hx::Val( _time ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"artist") ) { return hx::Val( artist ); }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_volume() ); }
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"looped") ) { return hx::Val( looped ); }
		if (HX_FIELD_EQ(inName,"_sound") ) { return hx::Val( _sound ); }
		if (HX_FIELD_EQ(inName,"_pitch") ) { return hx::Val( _pitch ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"resume") ) { return hx::Val( resume_dyn() ); }
		if (HX_FIELD_EQ(inName,"fadeIn") ) { return hx::Val( fadeIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"gotID3") ) { return hx::Val( gotID3_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"persist") ) { return hx::Val( persist ); }
		if (HX_FIELD_EQ(inName,"playing") ) { return hx::Val( inCallProp == hx::paccAlways ? get_playing() : playing ); }
		if (HX_FIELD_EQ(inName,"endTime") ) { return hx::Val( endTime ); }
		if (HX_FIELD_EQ(inName,"_paused") ) { return hx::Val( _paused ); }
		if (HX_FIELD_EQ(inName,"_volume") ) { return hx::Val( _volume ); }
		if (HX_FIELD_EQ(inName,"_length") ) { return hx::Val( _length ); }
		if (HX_FIELD_EQ(inName,"_target") ) { return hx::Val( _target ); }
		if (HX_FIELD_EQ(inName,"_radius") ) { return hx::Val( _radius ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"fadeOut") ) { return hx::Val( fadeOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopped") ) { return hx::Val( stopped_dyn() ); }
		if (HX_FIELD_EQ(inName,"cleanup") ) { return hx::Val( cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return hx::Val( onFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_pan") ) { return hx::Val( get_pan_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pan") ) { return hx::Val( set_pan_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"loopTime") ) { return hx::Val( loopTime ); }
		if (HX_FIELD_EQ(inName,"_channel") ) { return hx::Val( _channel ); }
		if (HX_FIELD_EQ(inName,"get_time") ) { return hx::Val( get_time_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_time") ) { return hx::Val( set_time_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"amplitude") ) { return hx::Val( amplitude ); }
		if (HX_FIELD_EQ(inName,"fadeTween") ) { return hx::Val( fadeTween ); }
		if (HX_FIELD_EQ(inName,"proximity") ) { return hx::Val( proximity_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_group") ) { return hx::Val( set_group_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_pitch") ) { return hx::Val( get_pitch_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pitch") ) { return hx::Val( set_pitch_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onComplete") ) { return hx::Val( onComplete ); }
		if (HX_FIELD_EQ(inName,"_transform") ) { return hx::Val( _transform ); }
		if (HX_FIELD_EQ(inName,"loadStream") ) { return hx::Val( loadStream_dyn() ); }
		if (HX_FIELD_EQ(inName,"startSound") ) { return hx::Val( startSound_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_volume") ) { return hx::Val( get_volume_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_volume") ) { return hx::Val( set_volume_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"autoDestroy") ) { return hx::Val( autoDestroy ); }
		if (HX_FIELD_EQ(inName,"volumeTween") ) { return hx::Val( volumeTween_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPosition") ) { return hx::Val( setPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return hx::Val( onFocusLost_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_playing") ) { return hx::Val( get_playing_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadEmbedded") ) { return hx::Val( loadEmbedded_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"amplitudeLeft") ) { return hx::Val( amplitudeLeft ); }
		if (HX_FIELD_EQ(inName,"_volumeAdjust") ) { return hx::Val( _volumeAdjust ); }
		if (HX_FIELD_EQ(inName,"_proximityPan") ) { return hx::Val( _proximityPan ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"amplitudeRight") ) { return hx::Val( amplitudeRight ); }
		if (HX_FIELD_EQ(inName,"_alreadyPaused") ) { return hx::Val( _alreadyPaused ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getActualVolume") ) { return hx::Val( getActualVolume_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTransform") ) { return hx::Val( updateTransform_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxSound_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pan") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pan(inValue.Cast< Float >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"time") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_time(inValue.Cast< Float >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pitch") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pitch(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"group") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_group(inValue.Cast<  ::flixel::_hx_system::FlxSoundGroup >()) );group=inValue.Cast<  ::flixel::_hx_system::FlxSoundGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_time") ) { _time=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"artist") ) { artist=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_volume(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"looped") ) { looped=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_sound") ) { _sound=inValue.Cast<  ::openfl::_legacy::media::Sound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pitch") ) { _pitch=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"persist") ) { persist=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playing") ) { playing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endTime") ) { endTime=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_paused") ) { _paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_volume") ) { _volume=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_length") ) { _length=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_target") ) { _target=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_radius") ) { _radius=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"loopTime") ) { loopTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_channel") ) { _channel=inValue.Cast<  ::openfl::_legacy::media::SoundChannel >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"amplitude") ) { amplitude=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fadeTween") ) { fadeTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onComplete") ) { onComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_transform") ) { _transform=inValue.Cast<  ::openfl::media::SoundTransform >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"autoDestroy") ) { autoDestroy=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"amplitudeLeft") ) { amplitudeLeft=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_volumeAdjust") ) { _volumeAdjust=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_proximityPan") ) { _proximityPan=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"amplitudeRight") ) { amplitudeRight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_alreadyPaused") ) { _alreadyPaused=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxSound_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("persist","\x14","\x22","\x71","\x83"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("artist","\xc7","\xf2","\x48","\xb9"));
	outFields->push(HX_HCSTRING("amplitude","\x43","\x15","\xfb","\x69"));
	outFields->push(HX_HCSTRING("amplitudeLeft","\xea","\xa6","\x0b","\xb4"));
	outFields->push(HX_HCSTRING("amplitudeRight","\x99","\x73","\x33","\x4d"));
	outFields->push(HX_HCSTRING("autoDestroy","\x4b","\xd1","\x69","\x0a"));
	outFields->push(HX_HCSTRING("pan","\x5d","\x51","\x55","\x00"));
	outFields->push(HX_HCSTRING("playing","\x6e","\x0f","\x18","\x8a"));
	outFields->push(HX_HCSTRING("volume","\xda","\x29","\x53","\x5f"));
	outFields->push(HX_HCSTRING("pitch","\xc0","\xbb","\xa0","\xc2"));
	outFields->push(HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("group","\x3f","\xb3","\xf4","\x99"));
	outFields->push(HX_HCSTRING("looped","\xc3","\x5f","\xb9","\x61"));
	outFields->push(HX_HCSTRING("loopTime","\x91","\xa0","\x6a","\x3f"));
	outFields->push(HX_HCSTRING("endTime","\x88","\x85","\x21","\x2f"));
	outFields->push(HX_HCSTRING("fadeTween","\x4f","\x03","\x59","\x05"));
	outFields->push(HX_HCSTRING("_sound","\x10","\xd4","\xb3","\x7c"));
	outFields->push(HX_HCSTRING("_channel","\x44","\x5a","\x8a","\x06"));
	outFields->push(HX_HCSTRING("_transform","\x2d","\xa9","\x35","\xa1"));
	outFields->push(HX_HCSTRING("_paused","\x4d","\x52","\xfb","\x5d"));
	outFields->push(HX_HCSTRING("_volume","\x79","\x3b","\xca","\xcd"));
	outFields->push(HX_HCSTRING("_time","\xec","\xe7","\x0d","\x00"));
	outFields->push(HX_HCSTRING("_length","\x85","\xa6","\x7e","\x0d"));
	outFields->push(HX_HCSTRING("_pitch","\x01","\x03","\x88","\xbe"));
	outFields->push(HX_HCSTRING("_volumeAdjust","\xe8","\xdc","\xfb","\x32"));
	outFields->push(HX_HCSTRING("_target","\xf0","\x04","\x64","\xf5"));
	outFields->push(HX_HCSTRING("_radius","\xf1","\xe1","\x6d","\x1f"));
	outFields->push(HX_HCSTRING("_proximityPan","\x3d","\xe4","\x2d","\x8b"));
	outFields->push(HX_HCSTRING("_alreadyPaused","\xa7","\xfe","\x5b","\xba"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxSound_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(FlxSound_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(FlxSound_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsBool,(int)offsetof(FlxSound_obj,persist),HX_HCSTRING("persist","\x14","\x22","\x71","\x83")},
	{hx::fsString,(int)offsetof(FlxSound_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsString,(int)offsetof(FlxSound_obj,artist),HX_HCSTRING("artist","\xc7","\xf2","\x48","\xb9")},
	{hx::fsFloat,(int)offsetof(FlxSound_obj,amplitude),HX_HCSTRING("amplitude","\x43","\x15","\xfb","\x69")},
	{hx::fsFloat,(int)offsetof(FlxSound_obj,amplitudeLeft),HX_HCSTRING("amplitudeLeft","\xea","\xa6","\x0b","\xb4")},
	{hx::fsFloat,(int)offsetof(FlxSound_obj,amplitudeRight),HX_HCSTRING("amplitudeRight","\x99","\x73","\x33","\x4d")},
	{hx::fsBool,(int)offsetof(FlxSound_obj,autoDestroy),HX_HCSTRING("autoDestroy","\x4b","\xd1","\x69","\x0a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxSound_obj,onComplete),HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d")},
	{hx::fsBool,(int)offsetof(FlxSound_obj,playing),HX_HCSTRING("playing","\x6e","\x0f","\x18","\x8a")},
	{hx::fsObject /*::flixel::_hx_system::FlxSoundGroup*/ ,(int)offsetof(FlxSound_obj,group),HX_HCSTRING("group","\x3f","\xb3","\xf4","\x99")},
	{hx::fsBool,(int)offsetof(FlxSound_obj,looped),HX_HCSTRING("looped","\xc3","\x5f","\xb9","\x61")},
	{hx::fsFloat,(int)offsetof(FlxSound_obj,loopTime),HX_HCSTRING("loopTime","\x91","\xa0","\x6a","\x3f")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxSound_obj,endTime),HX_HCSTRING("endTime","\x88","\x85","\x21","\x2f")},
	{hx::fsObject /*::flixel::tweens::FlxTween*/ ,(int)offsetof(FlxSound_obj,fadeTween),HX_HCSTRING("fadeTween","\x4f","\x03","\x59","\x05")},
	{hx::fsObject /*::openfl::_legacy::media::Sound*/ ,(int)offsetof(FlxSound_obj,_sound),HX_HCSTRING("_sound","\x10","\xd4","\xb3","\x7c")},
	{hx::fsObject /*::openfl::_legacy::media::SoundChannel*/ ,(int)offsetof(FlxSound_obj,_channel),HX_HCSTRING("_channel","\x44","\x5a","\x8a","\x06")},
	{hx::fsObject /*::openfl::media::SoundTransform*/ ,(int)offsetof(FlxSound_obj,_transform),HX_HCSTRING("_transform","\x2d","\xa9","\x35","\xa1")},
	{hx::fsBool,(int)offsetof(FlxSound_obj,_paused),HX_HCSTRING("_paused","\x4d","\x52","\xfb","\x5d")},
	{hx::fsFloat,(int)offsetof(FlxSound_obj,_volume),HX_HCSTRING("_volume","\x79","\x3b","\xca","\xcd")},
	{hx::fsFloat,(int)offsetof(FlxSound_obj,_time),HX_HCSTRING("_time","\xec","\xe7","\x0d","\x00")},
	{hx::fsFloat,(int)offsetof(FlxSound_obj,_length),HX_HCSTRING("_length","\x85","\xa6","\x7e","\x0d")},
	{hx::fsFloat,(int)offsetof(FlxSound_obj,_pitch),HX_HCSTRING("_pitch","\x01","\x03","\x88","\xbe")},
	{hx::fsFloat,(int)offsetof(FlxSound_obj,_volumeAdjust),HX_HCSTRING("_volumeAdjust","\xe8","\xdc","\xfb","\x32")},
	{hx::fsObject /*::flixel::FlxObject*/ ,(int)offsetof(FlxSound_obj,_target),HX_HCSTRING("_target","\xf0","\x04","\x64","\xf5")},
	{hx::fsFloat,(int)offsetof(FlxSound_obj,_radius),HX_HCSTRING("_radius","\xf1","\xe1","\x6d","\x1f")},
	{hx::fsBool,(int)offsetof(FlxSound_obj,_proximityPan),HX_HCSTRING("_proximityPan","\x3d","\xe4","\x2d","\x8b")},
	{hx::fsBool,(int)offsetof(FlxSound_obj,_alreadyPaused),HX_HCSTRING("_alreadyPaused","\xa7","\xfe","\x5b","\xba")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxSound_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxSound_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("persist","\x14","\x22","\x71","\x83"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("artist","\xc7","\xf2","\x48","\xb9"),
	HX_HCSTRING("amplitude","\x43","\x15","\xfb","\x69"),
	HX_HCSTRING("amplitudeLeft","\xea","\xa6","\x0b","\xb4"),
	HX_HCSTRING("amplitudeRight","\x99","\x73","\x33","\x4d"),
	HX_HCSTRING("autoDestroy","\x4b","\xd1","\x69","\x0a"),
	HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"),
	HX_HCSTRING("playing","\x6e","\x0f","\x18","\x8a"),
	HX_HCSTRING("group","\x3f","\xb3","\xf4","\x99"),
	HX_HCSTRING("looped","\xc3","\x5f","\xb9","\x61"),
	HX_HCSTRING("loopTime","\x91","\xa0","\x6a","\x3f"),
	HX_HCSTRING("endTime","\x88","\x85","\x21","\x2f"),
	HX_HCSTRING("fadeTween","\x4f","\x03","\x59","\x05"),
	HX_HCSTRING("_sound","\x10","\xd4","\xb3","\x7c"),
	HX_HCSTRING("_channel","\x44","\x5a","\x8a","\x06"),
	HX_HCSTRING("_transform","\x2d","\xa9","\x35","\xa1"),
	HX_HCSTRING("_paused","\x4d","\x52","\xfb","\x5d"),
	HX_HCSTRING("_volume","\x79","\x3b","\xca","\xcd"),
	HX_HCSTRING("_time","\xec","\xe7","\x0d","\x00"),
	HX_HCSTRING("_length","\x85","\xa6","\x7e","\x0d"),
	HX_HCSTRING("_pitch","\x01","\x03","\x88","\xbe"),
	HX_HCSTRING("_volumeAdjust","\xe8","\xdc","\xfb","\x32"),
	HX_HCSTRING("_target","\xf0","\x04","\x64","\xf5"),
	HX_HCSTRING("_radius","\xf1","\xe1","\x6d","\x1f"),
	HX_HCSTRING("_proximityPan","\x3d","\xe4","\x2d","\x8b"),
	HX_HCSTRING("_alreadyPaused","\xa7","\xfe","\x5b","\xba"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("kill","\x9e","\xdf","\x09","\x47"),
	HX_HCSTRING("loadEmbedded","\xd0","\x05","\xcb","\x97"),
	HX_HCSTRING("loadStream","\x46","\x43","\x58","\xc6"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("proximity","\x3f","\xc9","\x25","\x82"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("resume","\xad","\x69","\x84","\x08"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("fadeOut","\x72","\x38","\x3c","\x31"),
	HX_HCSTRING("fadeIn","\x81","\x4c","\xab","\xe4"),
	HX_HCSTRING("volumeTween","\x31","\xfa","\x02","\xac"),
	HX_HCSTRING("getActualVolume","\xbe","\x9c","\x9c","\x37"),
	HX_HCSTRING("setPosition","\x6b","\x6a","\x5b","\xfb"),
	HX_HCSTRING("updateTransform","\x23","\xfe","\x1d","\x95"),
	HX_HCSTRING("startSound","\x0d","\x65","\xe3","\x9c"),
	HX_HCSTRING("stopped","\x0d","\xd2","\x61","\x43"),
	HX_HCSTRING("cleanup","\x24","\x0c","\x42","\xab"),
	HX_HCSTRING("gotID3","\x2c","\xee","\x20","\x65"),
	HX_HCSTRING("onFocus","\x39","\xfe","\xc6","\x9a"),
	HX_HCSTRING("onFocusLost","\xbd","\xe4","\x85","\x41"),
	HX_HCSTRING("set_group","\xa2","\xfb","\xee","\xc0"),
	HX_HCSTRING("get_playing","\x85","\x6f","\x12","\x10"),
	HX_HCSTRING("get_volume","\xa3","\x99","\xda","\x4f"),
	HX_HCSTRING("set_volume","\x17","\x38","\x58","\x53"),
	HX_HCSTRING("get_pitch","\x17","\x18","\x4a","\x06"),
	HX_HCSTRING("set_pitch","\x23","\x04","\x9b","\xe9"),
	HX_HCSTRING("get_pan","\xf4","\x19","\xca","\x26"),
	HX_HCSTRING("set_pan","\x00","\xab","\xcb","\x19"),
	HX_HCSTRING("get_time","\x96","\x87","\xb7","\xcc"),
	HX_HCSTRING("set_time","\x0a","\xe1","\x14","\x7b"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void FlxSound_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxSound_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxSound_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxSound_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxSound_obj::__mClass;

void FlxSound_obj::__register()
{
	hx::Object *dummy = new FlxSound_obj;
	FlxSound_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.FlxSound","\x6a","\x26","\x83","\xc1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxSound_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxSound_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxSound_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxSound_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxSound_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxSound_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
