// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxAssets
#include <flixel/system/FlxAssets.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSplash
#include <flixel/system/FlxSplash.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Graphics
#include <openfl/_legacy/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_MovieClip
#include <openfl/_legacy/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Stage
#include <openfl/_legacy/display/Stage.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_media_Sound
#include <openfl/_legacy/media/Sound.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextField
#include <openfl/_legacy/text/TextField.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextFormat
#include <openfl/_legacy/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0cd566ad6ef5d750_16_new,"flixel.system.FlxSplash","new",0x887e165e,"flixel.system.FlxSplash.new","flixel/system/FlxSplash.hx",16,0xa5de80f2)
HX_LOCAL_STACK_FRAME(_hx_pos_0cd566ad6ef5d750_33_create,"flixel.system.FlxSplash","create",0x2dc273be,"flixel.system.FlxSplash.create","flixel/system/FlxSplash.hx",33,0xa5de80f2)
static const Float _hx_array_data_1ea84f6c_3[] = {
	0.041,0.184,0.334,0.495,0.636,
};
static const int _hx_array_data_1ea84f6c_4[] = {
	(int)47394,(int)16761138,(int)16066382,(int)3555839,(int)314875,
};
HX_LOCAL_STACK_FRAME(_hx_pos_0cd566ad6ef5d750_81_destroy,"flixel.system.FlxSplash","destroy",0xef7e49f8,"flixel.system.FlxSplash.destroy","flixel/system/FlxSplash.hx",81,0xa5de80f2)
HX_LOCAL_STACK_FRAME(_hx_pos_0cd566ad6ef5d750_92_onResize,"flixel.system.FlxSplash","onResize",0xb64991b5,"flixel.system.FlxSplash.onResize","flixel/system/FlxSplash.hx",92,0xa5de80f2)
HX_LOCAL_STACK_FRAME(_hx_pos_0cd566ad6ef5d750_107_timerCallback,"flixel.system.FlxSplash","timerCallback",0x874bd228,"flixel.system.FlxSplash.timerCallback","flixel/system/FlxSplash.hx",107,0xa5de80f2)
HX_LOCAL_STACK_FRAME(_hx_pos_0cd566ad6ef5d750_122_drawGreen,"flixel.system.FlxSplash","drawGreen",0xf0f01c9d,"flixel.system.FlxSplash.drawGreen","flixel/system/FlxSplash.hx",122,0xa5de80f2)
HX_LOCAL_STACK_FRAME(_hx_pos_0cd566ad6ef5d750_137_drawYellow,"flixel.system.FlxSplash","drawYellow",0x9c05b05a,"flixel.system.FlxSplash.drawYellow","flixel/system/FlxSplash.hx",137,0xa5de80f2)
HX_LOCAL_STACK_FRAME(_hx_pos_0cd566ad6ef5d750_149_drawRed,"flixel.system.FlxSplash","drawRed",0xc6cedcab,"flixel.system.FlxSplash.drawRed","flixel/system/FlxSplash.hx",149,0xa5de80f2)
HX_LOCAL_STACK_FRAME(_hx_pos_0cd566ad6ef5d750_161_drawBlue,"flixel.system.FlxSplash","drawBlue",0x23a42e00,"flixel.system.FlxSplash.drawBlue","flixel/system/FlxSplash.hx",161,0xa5de80f2)
HX_LOCAL_STACK_FRAME(_hx_pos_0cd566ad6ef5d750_173_drawLightBlue,"flixel.system.FlxSplash","drawLightBlue",0x099f256a,"flixel.system.FlxSplash.drawLightBlue","flixel/system/FlxSplash.hx",173,0xa5de80f2)
HX_LOCAL_STACK_FRAME(_hx_pos_0cd566ad6ef5d750_185_onComplete,"flixel.system.FlxSplash","onComplete",0xe7646aba,"flixel.system.FlxSplash.onComplete","flixel/system/FlxSplash.hx",185,0xa5de80f2)
namespace flixel{
namespace _hx_system{

void FlxSplash_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_0cd566ad6ef5d750_16_new)
HXLINE(  27)		this->_curPart = (int)0;
HXLINE(  16)		super::__construct(MaxSize);
            	}

Dynamic FlxSplash_obj::__CreateEmpty() { return new FlxSplash_obj; }

void *FlxSplash_obj::_hx_vtable = 0;

Dynamic FlxSplash_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxSplash_obj > _hx_result = new FlxSplash_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FlxSplash_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2335d9a7) {
		if (inClassId<=(int)0x0dba198a) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0dba198a;
		} else {
			return inClassId==(int)0x2335d9a7;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x3634c52c;
	}
}

void FlxSplash_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_0cd566ad6ef5d750_33_create)
HXLINE(  34)		this->_cachedBgColor = ::flixel::FlxG_obj::cameras->get_bgColor();
HXLINE(  35)		::flixel::FlxG_obj::cameras->set_bgColor((int)-16777216);
HXLINE(  38)		this->_cachedTimestep = ::flixel::FlxG_obj::fixedTimestep;
HXLINE(  39)		::flixel::FlxG_obj::fixedTimestep = false;
HXLINE(  41)		this->_cachedAutoPause = ::flixel::FlxG_obj::autoPause;
HXLINE(  42)		::flixel::FlxG_obj::autoPause = false;
HXLINE(  45)		::flixel::FlxG_obj::keys->enabled = false;
HXLINE(  48)		this->_times = ::Array_obj< Float >::fromData( _hx_array_data_1ea84f6c_3,5);
HXLINE(  49)		this->_colors = ::Array_obj< int >::fromData( _hx_array_data_1ea84f6c_4,5);
HXLINE(  50)		this->_functions = ::Array_obj< ::Dynamic>::__new(5)->init(0,this->drawGreen_dyn())->init(1,this->drawYellow_dyn())->init(2,this->drawRed_dyn())->init(3,this->drawBlue_dyn())->init(4,this->drawLightBlue_dyn());
HXLINE(  52)		{
HXLINE(  52)			int _g = (int)0;
HXDLIN(  52)			::Array< Float > _g1 = this->_times;
HXDLIN(  52)			while((_g < _g1->length)){
HXLINE(  52)				Float time = _g1->__get(_g);
HXDLIN(  52)				_g = (_g + (int)1);
HXLINE(  54)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(time,this->timerCallback_dyn(),null());
            			}
            		}
HXLINE(  57)		int stageWidth = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageWidth();
HXLINE(  58)		int stageHeight = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageHeight();
HXLINE(  60)		this->_sprite =  ::openfl::_legacy::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  61)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->addChild(this->_sprite);
HXLINE(  62)		this->_gfx = this->_sprite->get_graphics();
HXLINE(  64)		this->_text =  ::openfl::_legacy::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  65)		this->_text->set_selectable(false);
HXLINE(  66)		this->_text->set_embedFonts(true);
HXLINE(  67)		 ::openfl::_legacy::text::TextFormat dtf =  ::openfl::_legacy::text::TextFormat_obj::__alloc( HX_CTX ,::flixel::_hx_system::FlxAssets_obj::FONT_DEFAULT,(int)16,(int)16777215,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  68)		dtf->align = HX_("center",d5,25,db,05);
HXLINE(  69)		this->_text->set_defaultTextFormat(dtf);
HXLINE(  70)		this->_text->set_text(HX_("HaxeFlixel",42,8f,0c,ac));
HXLINE(  71)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->addChild(this->_text);
HXLINE(  73)		this->onResize(stageWidth,stageHeight);
HXLINE(  76)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  76)		::String extension = HX_("",00,00,00,00);
HXDLIN(  76)		extension = HX_(".ogg",e1,64,bc,1e);
HXDLIN(  76)		_hx_tmp->load(::openfl::_legacy::Assets_obj::getSound((HX_("flixel/sounds/flixel",54,41,d6,5d) + extension),null()),null(),null(),null(),null(),null(),null(),null())->play(null(),null(),null());
            	}


void FlxSplash_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_0cd566ad6ef5d750_81_destroy)
HXLINE(  82)		this->_sprite = null();
HXLINE(  83)		this->_gfx = null();
HXLINE(  84)		this->_text = null();
HXLINE(  85)		this->_times = null();
HXLINE(  86)		this->_colors = null();
HXLINE(  87)		this->_functions = null();
HXLINE(  88)		this->super::destroy();
            	}


void FlxSplash_obj::onResize(int Width,int Height){
            	HX_STACKFRAME(&_hx_pos_0cd566ad6ef5d750_92_onResize)
HXLINE(  93)		this->super::onResize(Width,Height);
HXLINE(  95)		 ::openfl::_legacy::display::Sprite _hx_tmp = this->_sprite;
HXDLIN(  95)		_hx_tmp->set_x(((Float)Width / (Float)(int)2));
HXLINE(  96)		 ::openfl::_legacy::display::Sprite _hx_tmp1 = this->_sprite;
HXDLIN(  96)		_hx_tmp1->set_y((((Float)Height / (Float)(int)2) - ((int)20 * ::flixel::FlxG_obj::game->get_scaleY())));
HXLINE(  98)		 ::openfl::_legacy::text::TextField _hx_tmp2 = this->_text;
HXDLIN(  98)		_hx_tmp2->set_width(((Float)Width / (Float)::flixel::FlxG_obj::game->get_scaleX()));
HXLINE(  99)		this->_text->set_x((int)0);
HXLINE( 100)		 ::openfl::_legacy::text::TextField _hx_tmp3 = this->_text;
HXDLIN( 100)		Float _hx_tmp4 = this->_sprite->get_y();
HXDLIN( 100)		_hx_tmp3->set_y((_hx_tmp4 + ((int)80 * ::flixel::FlxG_obj::game->get_scaleY())));
HXLINE( 102)		 ::openfl::_legacy::display::Sprite _hx_tmp5 = this->_sprite;
HXDLIN( 102)		 ::openfl::_legacy::text::TextField _hx_tmp6 = this->_text;
HXDLIN( 102)		_hx_tmp5->set_scaleX(_hx_tmp6->set_scaleX(::flixel::FlxG_obj::game->get_scaleX()));
HXLINE( 103)		 ::openfl::_legacy::display::Sprite _hx_tmp7 = this->_sprite;
HXDLIN( 103)		 ::openfl::_legacy::text::TextField _hx_tmp8 = this->_text;
HXDLIN( 103)		_hx_tmp7->set_scaleY(_hx_tmp8->set_scaleY(::flixel::FlxG_obj::game->get_scaleY()));
            	}


void FlxSplash_obj::timerCallback( ::flixel::util::FlxTimer Timer){
            	HX_STACKFRAME(&_hx_pos_0cd566ad6ef5d750_107_timerCallback)
HXLINE( 108)		this->_functions->__get(this->_curPart)();
HXLINE( 109)		 ::openfl::_legacy::text::TextField _hx_tmp = this->_text;
HXDLIN( 109)		_hx_tmp->set_textColor(this->_colors->__get(this->_curPart));
HXLINE( 110)		this->_text->set_text(HX_("HaxeFlixel",42,8f,0c,ac));
HXLINE( 111)		this->_curPart++;
HXLINE( 113)		if ((this->_curPart == (int)5)) {
HXLINE( 116)			::flixel::tweens::FlxTween_obj::tween(this->_sprite, ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),(int)0)),((Float)3.0), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d),this->onComplete_dyn())));
HXLINE( 117)			::flixel::tweens::FlxTween_obj::tween(this->_text, ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),(int)0)),((Float)3.0), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSplash_obj,timerCallback,(void))

void FlxSplash_obj::drawGreen(){
            	HX_STACKFRAME(&_hx_pos_0cd566ad6ef5d750_122_drawGreen)
HXLINE( 123)		this->_gfx->beginFill((int)47394,null());
HXLINE( 124)		this->_gfx->moveTo((int)0,(int)-37);
HXLINE( 125)		this->_gfx->lineTo((int)1,(int)-37);
HXLINE( 126)		this->_gfx->lineTo((int)37,(int)0);
HXLINE( 127)		this->_gfx->lineTo((int)37,(int)1);
HXLINE( 128)		this->_gfx->lineTo((int)1,(int)37);
HXLINE( 129)		this->_gfx->lineTo((int)0,(int)37);
HXLINE( 130)		this->_gfx->lineTo((int)-37,(int)1);
HXLINE( 131)		this->_gfx->lineTo((int)-37,(int)0);
HXLINE( 132)		this->_gfx->lineTo((int)0,(int)-37);
HXLINE( 133)		this->_gfx->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSplash_obj,drawGreen,(void))

void FlxSplash_obj::drawYellow(){
            	HX_STACKFRAME(&_hx_pos_0cd566ad6ef5d750_137_drawYellow)
HXLINE( 138)		this->_gfx->beginFill((int)16761138,null());
HXLINE( 139)		this->_gfx->moveTo((int)-50,(int)-50);
HXLINE( 140)		this->_gfx->lineTo((int)-25,(int)-50);
HXLINE( 141)		this->_gfx->lineTo((int)0,(int)-37);
HXLINE( 142)		this->_gfx->lineTo((int)-37,(int)0);
HXLINE( 143)		this->_gfx->lineTo((int)-50,(int)-25);
HXLINE( 144)		this->_gfx->lineTo((int)-50,(int)-50);
HXLINE( 145)		this->_gfx->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSplash_obj,drawYellow,(void))

void FlxSplash_obj::drawRed(){
            	HX_STACKFRAME(&_hx_pos_0cd566ad6ef5d750_149_drawRed)
HXLINE( 150)		this->_gfx->beginFill((int)16066382,null());
HXLINE( 151)		this->_gfx->moveTo((int)50,(int)-50);
HXLINE( 152)		this->_gfx->lineTo((int)25,(int)-50);
HXLINE( 153)		this->_gfx->lineTo((int)1,(int)-37);
HXLINE( 154)		this->_gfx->lineTo((int)37,(int)0);
HXLINE( 155)		this->_gfx->lineTo((int)50,(int)-25);
HXLINE( 156)		this->_gfx->lineTo((int)50,(int)-50);
HXLINE( 157)		this->_gfx->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSplash_obj,drawRed,(void))

void FlxSplash_obj::drawBlue(){
            	HX_STACKFRAME(&_hx_pos_0cd566ad6ef5d750_161_drawBlue)
HXLINE( 162)		this->_gfx->beginFill((int)3555839,null());
HXLINE( 163)		this->_gfx->moveTo((int)-50,(int)50);
HXLINE( 164)		this->_gfx->lineTo((int)-25,(int)50);
HXLINE( 165)		this->_gfx->lineTo((int)0,(int)37);
HXLINE( 166)		this->_gfx->lineTo((int)-37,(int)1);
HXLINE( 167)		this->_gfx->lineTo((int)-50,(int)25);
HXLINE( 168)		this->_gfx->lineTo((int)-50,(int)50);
HXLINE( 169)		this->_gfx->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSplash_obj,drawBlue,(void))

void FlxSplash_obj::drawLightBlue(){
            	HX_STACKFRAME(&_hx_pos_0cd566ad6ef5d750_173_drawLightBlue)
HXLINE( 174)		this->_gfx->beginFill((int)314875,null());
HXLINE( 175)		this->_gfx->moveTo((int)50,(int)50);
HXLINE( 176)		this->_gfx->lineTo((int)25,(int)50);
HXLINE( 177)		this->_gfx->lineTo((int)1,(int)37);
HXLINE( 178)		this->_gfx->lineTo((int)37,(int)1);
HXLINE( 179)		this->_gfx->lineTo((int)50,(int)25);
HXLINE( 180)		this->_gfx->lineTo((int)50,(int)50);
HXLINE( 181)		this->_gfx->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSplash_obj,drawLightBlue,(void))

void FlxSplash_obj::onComplete( ::flixel::tweens::FlxTween Tween){
            	HX_STACKFRAME(&_hx_pos_0cd566ad6ef5d750_185_onComplete)
HXLINE( 186)		::flixel::FlxG_obj::cameras->set_bgColor(this->_cachedBgColor);
HXLINE( 187)		::flixel::FlxG_obj::fixedTimestep = this->_cachedTimestep;
HXLINE( 188)		::flixel::FlxG_obj::autoPause = this->_cachedAutoPause;
HXLINE( 190)		::flixel::FlxG_obj::keys->enabled = true;
HXLINE( 192)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->removeChild(this->_sprite);
HXLINE( 193)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->removeChild(this->_text);
HXLINE( 194)		{
HXLINE( 194)			 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::flixel::_hx_system::FlxSplash_obj::nextState,::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 194)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 194)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 195)		::flixel::FlxG_obj::game->_gameJustStarted = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSplash_obj,onComplete,(void))

hx::Class FlxSplash_obj::nextState;


hx::ObjectPtr< FlxSplash_obj > FlxSplash_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< FlxSplash_obj > __this = new FlxSplash_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< FlxSplash_obj > FlxSplash_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	FlxSplash_obj *__this = (FlxSplash_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxSplash_obj), true, "flixel.system.FlxSplash"));
	*(void **)__this = FlxSplash_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

FlxSplash_obj::FlxSplash_obj()
{
}

void FlxSplash_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxSplash);
	HX_MARK_MEMBER_NAME(_sprite,"_sprite");
	HX_MARK_MEMBER_NAME(_gfx,"_gfx");
	HX_MARK_MEMBER_NAME(_text,"_text");
	HX_MARK_MEMBER_NAME(_times,"_times");
	HX_MARK_MEMBER_NAME(_colors,"_colors");
	HX_MARK_MEMBER_NAME(_functions,"_functions");
	HX_MARK_MEMBER_NAME(_curPart,"_curPart");
	HX_MARK_MEMBER_NAME(_cachedBgColor,"_cachedBgColor");
	HX_MARK_MEMBER_NAME(_cachedTimestep,"_cachedTimestep");
	HX_MARK_MEMBER_NAME(_cachedAutoPause,"_cachedAutoPause");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxSplash_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_sprite,"_sprite");
	HX_VISIT_MEMBER_NAME(_gfx,"_gfx");
	HX_VISIT_MEMBER_NAME(_text,"_text");
	HX_VISIT_MEMBER_NAME(_times,"_times");
	HX_VISIT_MEMBER_NAME(_colors,"_colors");
	HX_VISIT_MEMBER_NAME(_functions,"_functions");
	HX_VISIT_MEMBER_NAME(_curPart,"_curPart");
	HX_VISIT_MEMBER_NAME(_cachedBgColor,"_cachedBgColor");
	HX_VISIT_MEMBER_NAME(_cachedTimestep,"_cachedTimestep");
	HX_VISIT_MEMBER_NAME(_cachedAutoPause,"_cachedAutoPause");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxSplash_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_gfx") ) { return hx::Val( _gfx ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_text") ) { return hx::Val( _text ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_times") ) { return hx::Val( _times ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_sprite") ) { return hx::Val( _sprite ); }
		if (HX_FIELD_EQ(inName,"_colors") ) { return hx::Val( _colors ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawRed") ) { return hx::Val( drawRed_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_curPart") ) { return hx::Val( _curPart ); }
		if (HX_FIELD_EQ(inName,"onResize") ) { return hx::Val( onResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawBlue") ) { return hx::Val( drawBlue_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawGreen") ) { return hx::Val( drawGreen_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_functions") ) { return hx::Val( _functions ); }
		if (HX_FIELD_EQ(inName,"drawYellow") ) { return hx::Val( drawYellow_dyn() ); }
		if (HX_FIELD_EQ(inName,"onComplete") ) { return hx::Val( onComplete_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"timerCallback") ) { return hx::Val( timerCallback_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawLightBlue") ) { return hx::Val( drawLightBlue_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_cachedBgColor") ) { return hx::Val( _cachedBgColor ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_cachedTimestep") ) { return hx::Val( _cachedTimestep ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_cachedAutoPause") ) { return hx::Val( _cachedAutoPause ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxSplash_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"nextState") ) { outValue = ( nextState ); return true; }
	}
	return false;
}

hx::Val FlxSplash_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_gfx") ) { _gfx=inValue.Cast<  ::openfl::_legacy::display::Graphics >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_text") ) { _text=inValue.Cast<  ::openfl::_legacy::text::TextField >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_times") ) { _times=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_sprite") ) { _sprite=inValue.Cast<  ::openfl::_legacy::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_colors") ) { _colors=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_curPart") ) { _curPart=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_functions") ) { _functions=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_cachedBgColor") ) { _cachedBgColor=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_cachedTimestep") ) { _cachedTimestep=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_cachedAutoPause") ) { _cachedAutoPause=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxSplash_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"nextState") ) { nextState=ioValue.Cast< hx::Class >(); return true; }
	}
	return false;
}

void FlxSplash_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_sprite","\xa4","\xed","\x0c","\x32"));
	outFields->push(HX_HCSTRING("_gfx","\x7a","\xc6","\x19","\x3f"));
	outFields->push(HX_HCSTRING("_text","\x8c","\xe8","\x0a","\x00"));
	outFields->push(HX_HCSTRING("_times","\x07","\x07","\x1d","\x0c"));
	outFields->push(HX_HCSTRING("_colors","\x4f","\xd7","\xfd","\x34"));
	outFields->push(HX_HCSTRING("_functions","\x1c","\x86","\xa5","\x0f"));
	outFields->push(HX_HCSTRING("_curPart","\x14","\xaf","\x1f","\xef"));
	outFields->push(HX_HCSTRING("_cachedBgColor","\xdd","\xd9","\x56","\x6b"));
	outFields->push(HX_HCSTRING("_cachedTimestep","\x7a","\x54","\xfe","\xe6"));
	outFields->push(HX_HCSTRING("_cachedAutoPause","\x46","\xcb","\x1c","\x2d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxSplash_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_legacy::display::Sprite*/ ,(int)offsetof(FlxSplash_obj,_sprite),HX_HCSTRING("_sprite","\xa4","\xed","\x0c","\x32")},
	{hx::fsObject /*::openfl::_legacy::display::Graphics*/ ,(int)offsetof(FlxSplash_obj,_gfx),HX_HCSTRING("_gfx","\x7a","\xc6","\x19","\x3f")},
	{hx::fsObject /*::openfl::_legacy::text::TextField*/ ,(int)offsetof(FlxSplash_obj,_text),HX_HCSTRING("_text","\x8c","\xe8","\x0a","\x00")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(FlxSplash_obj,_times),HX_HCSTRING("_times","\x07","\x07","\x1d","\x0c")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxSplash_obj,_colors),HX_HCSTRING("_colors","\x4f","\xd7","\xfd","\x34")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FlxSplash_obj,_functions),HX_HCSTRING("_functions","\x1c","\x86","\xa5","\x0f")},
	{hx::fsInt,(int)offsetof(FlxSplash_obj,_curPart),HX_HCSTRING("_curPart","\x14","\xaf","\x1f","\xef")},
	{hx::fsInt,(int)offsetof(FlxSplash_obj,_cachedBgColor),HX_HCSTRING("_cachedBgColor","\xdd","\xd9","\x56","\x6b")},
	{hx::fsBool,(int)offsetof(FlxSplash_obj,_cachedTimestep),HX_HCSTRING("_cachedTimestep","\x7a","\x54","\xfe","\xe6")},
	{hx::fsBool,(int)offsetof(FlxSplash_obj,_cachedAutoPause),HX_HCSTRING("_cachedAutoPause","\x46","\xcb","\x1c","\x2d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxSplash_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::hx::Class*/ ,(void *) &FlxSplash_obj::nextState,HX_HCSTRING("nextState","\x1e","\x90","\x50","\x2b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxSplash_obj_sMemberFields[] = {
	HX_HCSTRING("_sprite","\xa4","\xed","\x0c","\x32"),
	HX_HCSTRING("_gfx","\x7a","\xc6","\x19","\x3f"),
	HX_HCSTRING("_text","\x8c","\xe8","\x0a","\x00"),
	HX_HCSTRING("_times","\x07","\x07","\x1d","\x0c"),
	HX_HCSTRING("_colors","\x4f","\xd7","\xfd","\x34"),
	HX_HCSTRING("_functions","\x1c","\x86","\xa5","\x0f"),
	HX_HCSTRING("_curPart","\x14","\xaf","\x1f","\xef"),
	HX_HCSTRING("_cachedBgColor","\xdd","\xd9","\x56","\x6b"),
	HX_HCSTRING("_cachedTimestep","\x7a","\x54","\xfe","\xe6"),
	HX_HCSTRING("_cachedAutoPause","\x46","\xcb","\x1c","\x2d"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("onResize","\x73","\x50","\x28","\xe8"),
	HX_HCSTRING("timerCallback","\xaa","\xe2","\x0a","\x97"),
	HX_HCSTRING("drawGreen","\x1f","\x44","\xf8","\x61"),
	HX_HCSTRING("drawYellow","\x98","\x1a","\x20","\x12"),
	HX_HCSTRING("drawRed","\xad","\xbf","\xd6","\xfb"),
	HX_HCSTRING("drawBlue","\xbe","\xec","\x82","\x55"),
	HX_HCSTRING("drawLightBlue","\xec","\x35","\x5e","\x19"),
	HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"),
	::String(null()) };

static void FlxSplash_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxSplash_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxSplash_obj::nextState,"nextState");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxSplash_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxSplash_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxSplash_obj::nextState,"nextState");
};

#endif

hx::Class FlxSplash_obj::__mClass;

static ::String FlxSplash_obj_sStaticFields[] = {
	HX_HCSTRING("nextState","\x1e","\x90","\x50","\x2b"),
	::String(null())
};

void FlxSplash_obj::__register()
{
	hx::Object *dummy = new FlxSplash_obj;
	FlxSplash_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.FlxSplash","\x6c","\x4f","\xa8","\x1e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxSplash_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxSplash_obj::__SetStatic;
	__mClass->mMarkFunc = FlxSplash_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxSplash_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxSplash_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxSplash_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxSplash_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxSplash_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxSplash_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
