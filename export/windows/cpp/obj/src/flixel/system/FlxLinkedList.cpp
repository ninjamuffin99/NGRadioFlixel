// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_system_FlxLinkedList
#include <flixel/system/FlxLinkedList.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b10ff5d8533aa49f_65_new,"flixel.system.FlxLinkedList","new",0xf2c6bf4e,"flixel.system.FlxLinkedList.new","flixel/system/FlxLinkedList.hx",65,0xa1edd602)
HX_LOCAL_STACK_FRAME(_hx_pos_b10ff5d8533aa49f_76_destroy,"flixel.system.FlxLinkedList","destroy",0x9f662ae8,"flixel.system.FlxLinkedList.destroy","flixel/system/FlxLinkedList.hx",76,0xa1edd602)
HX_LOCAL_STACK_FRAME(_hx_pos_b10ff5d8533aa49f_25_recycle,"flixel.system.FlxLinkedList","recycle",0xb26c0e01,"flixel.system.FlxLinkedList.recycle","flixel/system/FlxLinkedList.hx",25,0xa1edd602)
HX_LOCAL_STACK_FRAME(_hx_pos_b10ff5d8533aa49f_44_clearCache,"flixel.system.FlxLinkedList","clearCache",0x48ebc447,"flixel.system.FlxLinkedList.clearCache","flixel/system/FlxLinkedList.hx",44,0xa1edd602)
HX_LOCAL_STACK_FRAME(_hx_pos_b10ff5d8533aa49f_17_boot,"flixel.system.FlxLinkedList","boot",0x7339a584,"flixel.system.FlxLinkedList.boot","flixel/system/FlxLinkedList.hx",17,0xa1edd602)
namespace flixel{
namespace _hx_system{

void FlxLinkedList_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_b10ff5d8533aa49f_65_new)
HXDLIN(  65)		this->exists = true;
            	}

Dynamic FlxLinkedList_obj::__CreateEmpty() { return new FlxLinkedList_obj; }

void *FlxLinkedList_obj::_hx_vtable = 0;

Dynamic FlxLinkedList_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxLinkedList_obj > _hx_result = new FlxLinkedList_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxLinkedList_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x23c0685e;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_system_FlxLinkedList__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::_hx_system::FlxLinkedList_obj::destroy,
};

void *FlxLinkedList_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_system_FlxLinkedList__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void FlxLinkedList_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_b10ff5d8533aa49f_76_destroy)
HXLINE(  78)		if (!(this->exists)) {
HXLINE(  79)			return;
            		}
HXLINE(  81)		this->object = null();
HXLINE(  82)		if (hx::IsNotNull( this->next )) {
HXLINE(  84)			this->next->destroy();
            		}
HXLINE(  86)		this->exists = false;
HXLINE(  89)		this->next = ::flixel::_hx_system::FlxLinkedList_obj::_cachedListsHead;
HXLINE(  90)		::flixel::_hx_system::FlxLinkedList_obj::_cachedListsHead = hx::ObjectPtr<OBJ_>(this);
HXLINE(  91)		::flixel::_hx_system::FlxLinkedList_obj::_NUM_CACHED_FLX_LIST++;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxLinkedList_obj,destroy,(void))

int FlxLinkedList_obj::_NUM_CACHED_FLX_LIST;

 ::flixel::_hx_system::FlxLinkedList FlxLinkedList_obj::_cachedListsHead;

 ::flixel::_hx_system::FlxLinkedList FlxLinkedList_obj::recycle(){
            	HX_GC_STACKFRAME(&_hx_pos_b10ff5d8533aa49f_25_recycle)
HXDLIN(  25)		if (hx::IsNotNull( ::flixel::_hx_system::FlxLinkedList_obj::_cachedListsHead )) {
HXLINE(  27)			 ::flixel::_hx_system::FlxLinkedList cachedList = ::flixel::_hx_system::FlxLinkedList_obj::_cachedListsHead;
HXLINE(  28)			::flixel::_hx_system::FlxLinkedList_obj::_cachedListsHead = ::flixel::_hx_system::FlxLinkedList_obj::_cachedListsHead->next;
HXLINE(  29)			::flixel::_hx_system::FlxLinkedList_obj::_NUM_CACHED_FLX_LIST--;
HXLINE(  31)			cachedList->exists = true;
HXLINE(  32)			cachedList->next = null();
HXLINE(  33)			return cachedList;
            		}
            		else {
HXLINE(  36)			return  ::flixel::_hx_system::FlxLinkedList_obj::__alloc( HX_CTX );
            		}
HXLINE(  25)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxLinkedList_obj,recycle,return )

void FlxLinkedList_obj::clearCache(){
            	HX_STACKFRAME(&_hx_pos_b10ff5d8533aa49f_44_clearCache)
HXLINE(  46)		while(hx::IsNotNull( ::flixel::_hx_system::FlxLinkedList_obj::_cachedListsHead )){
HXLINE(  48)			 ::flixel::_hx_system::FlxLinkedList node = ::flixel::_hx_system::FlxLinkedList_obj::_cachedListsHead;
HXLINE(  49)			::flixel::_hx_system::FlxLinkedList_obj::_cachedListsHead = ::flixel::_hx_system::FlxLinkedList_obj::_cachedListsHead->next;
HXLINE(  50)			node->object = null();
HXLINE(  51)			node->next = null();
            		}
HXLINE(  53)		::flixel::_hx_system::FlxLinkedList_obj::_NUM_CACHED_FLX_LIST = (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxLinkedList_obj,clearCache,(void))


hx::ObjectPtr< FlxLinkedList_obj > FlxLinkedList_obj::__new() {
	hx::ObjectPtr< FlxLinkedList_obj > __this = new FlxLinkedList_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FlxLinkedList_obj > FlxLinkedList_obj::__alloc(hx::Ctx *_hx_ctx) {
	FlxLinkedList_obj *__this = (FlxLinkedList_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxLinkedList_obj), true, "flixel.system.FlxLinkedList"));
	*(void **)__this = FlxLinkedList_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxLinkedList_obj::FlxLinkedList_obj()
{
}

void FlxLinkedList_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxLinkedList);
	HX_MARK_MEMBER_NAME(object,"object");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(exists,"exists");
	HX_MARK_END_CLASS();
}

void FlxLinkedList_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(object,"object");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(exists,"exists");
}

hx::Val FlxLinkedList_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { return hx::Val( object ); }
		if (HX_FIELD_EQ(inName,"exists") ) { return hx::Val( exists ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxLinkedList_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"recycle") ) { outValue = recycle_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clearCache") ) { outValue = clearCache_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_cachedListsHead") ) { outValue = ( _cachedListsHead ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_NUM_CACHED_FLX_LIST") ) { outValue = ( _NUM_CACHED_FLX_LIST ); return true; }
	}
	return false;
}

hx::Val FlxLinkedList_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::flixel::_hx_system::FlxLinkedList >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { object=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"exists") ) { exists=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxLinkedList_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"_cachedListsHead") ) { _cachedListsHead=ioValue.Cast<  ::flixel::_hx_system::FlxLinkedList >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_NUM_CACHED_FLX_LIST") ) { _NUM_CACHED_FLX_LIST=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void FlxLinkedList_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15"));
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxLinkedList_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::FlxObject*/ ,(int)offsetof(FlxLinkedList_obj,object),HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15")},
	{hx::fsObject /*::flixel::_hx_system::FlxLinkedList*/ ,(int)offsetof(FlxLinkedList_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsBool,(int)offsetof(FlxLinkedList_obj,exists),HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxLinkedList_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &FlxLinkedList_obj::_NUM_CACHED_FLX_LIST,HX_HCSTRING("_NUM_CACHED_FLX_LIST","\x90","\x95","\x35","\x46")},
	{hx::fsObject /*::flixel::_hx_system::FlxLinkedList*/ ,(void *) &FlxLinkedList_obj::_cachedListsHead,HX_HCSTRING("_cachedListsHead","\x54","\x10","\xc6","\x7b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxLinkedList_obj_sMemberFields[] = {
	HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void FlxLinkedList_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxLinkedList_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxLinkedList_obj::_NUM_CACHED_FLX_LIST,"_NUM_CACHED_FLX_LIST");
	HX_MARK_MEMBER_NAME(FlxLinkedList_obj::_cachedListsHead,"_cachedListsHead");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxLinkedList_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxLinkedList_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxLinkedList_obj::_NUM_CACHED_FLX_LIST,"_NUM_CACHED_FLX_LIST");
	HX_VISIT_MEMBER_NAME(FlxLinkedList_obj::_cachedListsHead,"_cachedListsHead");
};

#endif

hx::Class FlxLinkedList_obj::__mClass;

static ::String FlxLinkedList_obj_sStaticFields[] = {
	HX_HCSTRING("_NUM_CACHED_FLX_LIST","\x90","\x95","\x35","\x46"),
	HX_HCSTRING("_cachedListsHead","\x54","\x10","\xc6","\x7b"),
	HX_HCSTRING("recycle","\x13","\x10","\x8c","\x37"),
	HX_HCSTRING("clearCache","\x75","\xd9","\x1e","\x16"),
	::String(null())
};

void FlxLinkedList_obj::__register()
{
	hx::Object *dummy = new FlxLinkedList_obj;
	FlxLinkedList_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.FlxLinkedList","\x5c","\xc0","\x4d","\xc1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxLinkedList_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxLinkedList_obj::__SetStatic;
	__mClass->mMarkFunc = FlxLinkedList_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxLinkedList_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxLinkedList_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxLinkedList_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxLinkedList_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxLinkedList_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxLinkedList_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxLinkedList_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b10ff5d8533aa49f_17_boot)
HXDLIN(  17)		_NUM_CACHED_FLX_LIST = (int)0;
            	}
}

} // end namespace flixel
} // end namespace system
