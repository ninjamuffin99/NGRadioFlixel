// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_86_fromInt,"flixel.util._FlxColor.FlxColor_Impl_","fromInt",0xdc40c740,"flixel.util._FlxColor.FlxColor_Impl_.fromInt","flixel/util/FlxColor.hx",86,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_99_fromRGB,"flixel.util._FlxColor.FlxColor_Impl_","fromRGB",0xdc47795e,"flixel.util._FlxColor.FlxColor_Impl_.fromRGB","flixel/util/FlxColor.hx",99,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_114_fromRGBFloat,"flixel.util._FlxColor.FlxColor_Impl_","fromRGBFloat",0x9c52075e,"flixel.util._FlxColor.FlxColor_Impl_.fromRGBFloat","flixel/util/FlxColor.hx",114,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_130_fromCMYK,"flixel.util._FlxColor.FlxColor_Impl_","fromCMYK",0xd85d276b,"flixel.util._FlxColor.FlxColor_Impl_.fromCMYK","flixel/util/FlxColor.hx",130,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_145_fromHSB,"flixel.util._FlxColor.FlxColor_Impl_","fromHSB",0xdc3fed48,"flixel.util._FlxColor.FlxColor_Impl_.fromHSB","flixel/util/FlxColor.hx",145,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_160_fromHSL,"flixel.util._FlxColor.FlxColor_Impl_","fromHSL",0xdc3fed52,"flixel.util._FlxColor.FlxColor_Impl_.fromHSL","flixel/util/FlxColor.hx",160,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_181_fromString,"flixel.util._FlxColor.FlxColor_Impl_","fromString",0x7279f720,"flixel.util._FlxColor.FlxColor_Impl_.fromString","flixel/util/FlxColor.hx",181,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_218_getHSBColorWheel,"flixel.util._FlxColor.FlxColor_Impl_","getHSBColorWheel",0xaedeb29e,"flixel.util._FlxColor.FlxColor_Impl_.getHSBColorWheel","flixel/util/FlxColor.hx",218,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_230_interpolate,"flixel.util._FlxColor.FlxColor_Impl_","interpolate",0x463d27dc,"flixel.util._FlxColor.FlxColor_Impl_.interpolate","flixel/util/FlxColor.hx",230,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_249_gradient,"flixel.util._FlxColor.FlxColor_Impl_","gradient",0x6325b7f5,"flixel.util._FlxColor.FlxColor_Impl_.gradient","flixel/util/FlxColor.hx",249,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_256_gradient,"flixel.util._FlxColor.FlxColor_Impl_","gradient",0x6325b7f5,"flixel.util._FlxColor.FlxColor_Impl_.gradient","flixel/util/FlxColor.hx",256,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_274_multiply,"flixel.util._FlxColor.FlxColor_Impl_","multiply",0xd3736029,"flixel.util._FlxColor.FlxColor_Impl_.multiply","flixel/util/FlxColor.hx",274,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_283_add,"flixel.util._FlxColor.FlxColor_Impl_","add",0x199e323c,"flixel.util._FlxColor.FlxColor_Impl_.add","flixel/util/FlxColor.hx",283,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_292_subtract,"flixel.util._FlxColor.FlxColor_Impl_","subtract",0x30f7f319,"flixel.util._FlxColor.FlxColor_Impl_.subtract","flixel/util/FlxColor.hx",292,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_303_getComplementHarmony,"flixel.util._FlxColor.FlxColor_Impl_","getComplementHarmony",0xe82411cf,"flixel.util._FlxColor.FlxColor_Impl_.getComplementHarmony","flixel/util/FlxColor.hx",303,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_314_getAnalogousHarmony,"flixel.util._FlxColor.FlxColor_Impl_","getAnalogousHarmony",0x6a6ddffa,"flixel.util._FlxColor.FlxColor_Impl_.getAnalogousHarmony","flixel/util/FlxColor.hx",314,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_329_getSplitComplementHarmony,"flixel.util._FlxColor.FlxColor_Impl_","getSplitComplementHarmony",0x65102b17,"flixel.util._FlxColor.FlxColor_Impl_.getSplitComplementHarmony","flixel/util/FlxColor.hx",329,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_344_getTriadicHarmony,"flixel.util._FlxColor.FlxColor_Impl_","getTriadicHarmony",0x8ea1774f,"flixel.util._FlxColor.FlxColor_Impl_.getTriadicHarmony","flixel/util/FlxColor.hx",344,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_358_to24Bit,"flixel.util._FlxColor.FlxColor_Impl_","to24Bit",0xaa37506b,"flixel.util._FlxColor.FlxColor_Impl_.to24Bit","flixel/util/FlxColor.hx",358,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_370_toHexString,"flixel.util._FlxColor.FlxColor_Impl_","toHexString",0x94bdbc2c,"flixel.util._FlxColor.FlxColor_Impl_.toHexString","flixel/util/FlxColor.hx",370,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_381_toWebString,"flixel.util._FlxColor.FlxColor_Impl_","toWebString",0x5e0aaea5,"flixel.util._FlxColor.FlxColor_Impl_.toWebString","flixel/util/FlxColor.hx",381,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_390_getColorInfo,"flixel.util._FlxColor.FlxColor_Impl_","getColorInfo",0x327dc480,"flixel.util._FlxColor.FlxColor_Impl_.getColorInfo","flixel/util/FlxColor.hx",390,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_409_getDarkened,"flixel.util._FlxColor.FlxColor_Impl_","getDarkened",0xd9fa3a4f,"flixel.util._FlxColor.FlxColor_Impl_.getDarkened","flixel/util/FlxColor.hx",409,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_423_getLightened,"flixel.util._FlxColor.FlxColor_Impl_","getLightened",0xe2b011ed,"flixel.util._FlxColor.FlxColor_Impl_.getLightened","flixel/util/FlxColor.hx",423,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_436_getInverted,"flixel.util._FlxColor.FlxColor_Impl_","getInverted",0x422fc6c6,"flixel.util._FlxColor.FlxColor_Impl_.getInverted","flixel/util/FlxColor.hx",436,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_453_setRGB,"flixel.util._FlxColor.FlxColor_Impl_","setRGB",0x421acf50,"flixel.util._FlxColor.FlxColor_Impl_.setRGB","flixel/util/FlxColor.hx",453,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_471_setRGBFloat,"flixel.util._FlxColor.FlxColor_Impl_","setRGBFloat",0x51a7e42c,"flixel.util._FlxColor.FlxColor_Impl_.setRGBFloat","flixel/util/FlxColor.hx",471,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_490_setCMYK,"flixel.util._FlxColor.FlxColor_Impl_","setCMYK",0x8b750539,"flixel.util._FlxColor.FlxColor_Impl_.setCMYK","flixel/util/FlxColor.hx",490,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_508_setHSB,"flixel.util._FlxColor.FlxColor_Impl_","setHSB",0x4213433a,"flixel.util._FlxColor.FlxColor_Impl_.setHSB","flixel/util/FlxColor.hx",508,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_524_setHSL,"flixel.util._FlxColor.FlxColor_Impl_","setHSL",0x42134344,"flixel.util._FlxColor.FlxColor_Impl_.setHSL","flixel/util/FlxColor.hx",524,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_534_setHSChromaMatch,"flixel.util._FlxColor.FlxColor_Impl_","setHSChromaMatch",0x8f5af4c7,"flixel.util._FlxColor.FlxColor_Impl_.setHSChromaMatch","flixel/util/FlxColor.hx",534,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_553__new,"flixel.util._FlxColor.FlxColor_Impl_","_new",0x4f82ece6,"flixel.util._FlxColor.FlxColor_Impl_._new","flixel/util/FlxColor.hx",553,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_563_getThis,"flixel.util._FlxColor.FlxColor_Impl_","getThis",0xa3c49faf,"flixel.util._FlxColor.FlxColor_Impl_.getThis","flixel/util/FlxColor.hx",563,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_568_validate,"flixel.util._FlxColor.FlxColor_Impl_","validate",0x3dca4e9b,"flixel.util._FlxColor.FlxColor_Impl_.validate","flixel/util/FlxColor.hx",568,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_576_get_red,"flixel.util._FlxColor.FlxColor_Impl_","get_red",0xab118b83,"flixel.util._FlxColor.FlxColor_Impl_.get_red","flixel/util/FlxColor.hx",576,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_581_get_green,"flixel.util._FlxColor.FlxColor_Impl_","get_green",0x6e5e3175,"flixel.util._FlxColor.FlxColor_Impl_.get_green","flixel/util/FlxColor.hx",581,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_586_get_blue,"flixel.util._FlxColor.FlxColor_Impl_","get_blue",0xf9ba7c28,"flixel.util._FlxColor.FlxColor_Impl_.get_blue","flixel/util/FlxColor.hx",586,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_591_get_alpha,"flixel.util._FlxColor.FlxColor_Impl_","get_alpha",0xf607ca10,"flixel.util._FlxColor.FlxColor_Impl_.get_alpha","flixel/util/FlxColor.hx",591,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_596_get_redFloat,"flixel.util._FlxColor.FlxColor_Impl_","get_redFloat",0x28fb0f19,"flixel.util._FlxColor.FlxColor_Impl_.get_redFloat","flixel/util/FlxColor.hx",596,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_601_get_greenFloat,"flixel.util._FlxColor.FlxColor_Impl_","get_greenFloat",0x97159be7,"flixel.util._FlxColor.FlxColor_Impl_.get_greenFloat","flixel/util/FlxColor.hx",601,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_606_get_blueFloat,"flixel.util._FlxColor.FlxColor_Impl_","get_blueFloat",0x58cea854,"flixel.util._FlxColor.FlxColor_Impl_.get_blueFloat","flixel/util/FlxColor.hx",606,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_611_get_alphaFloat,"flixel.util._FlxColor.FlxColor_Impl_","get_alphaFloat",0xe2f5f16c,"flixel.util._FlxColor.FlxColor_Impl_.get_alphaFloat","flixel/util/FlxColor.hx",611,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_615_set_red,"flixel.util._FlxColor.FlxColor_Impl_","set_red",0x9e131c8f,"flixel.util._FlxColor.FlxColor_Impl_.set_red","flixel/util/FlxColor.hx",615,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_623_set_green,"flixel.util._FlxColor.FlxColor_Impl_","set_green",0x51af1d81,"flixel.util._FlxColor.FlxColor_Impl_.set_green","flixel/util/FlxColor.hx",623,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_631_set_blue,"flixel.util._FlxColor.FlxColor_Impl_","set_blue",0xa817d59c,"flixel.util._FlxColor.FlxColor_Impl_.set_blue","flixel/util/FlxColor.hx",631,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_639_set_alpha,"flixel.util._FlxColor.FlxColor_Impl_","set_alpha",0xd958b61c,"flixel.util._FlxColor.FlxColor_Impl_.set_alpha","flixel/util/FlxColor.hx",639,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_647_set_redFloat,"flixel.util._FlxColor.FlxColor_Impl_","set_redFloat",0x3df4328d,"flixel.util._FlxColor.FlxColor_Impl_.set_redFloat","flixel/util/FlxColor.hx",647,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_653_set_greenFloat,"flixel.util._FlxColor.FlxColor_Impl_","set_greenFloat",0xb735845b,"flixel.util._FlxColor.FlxColor_Impl_.set_greenFloat","flixel/util/FlxColor.hx",653,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_659_set_blueFloat,"flixel.util._FlxColor.FlxColor_Impl_","set_blueFloat",0x9dd48a60,"flixel.util._FlxColor.FlxColor_Impl_.set_blueFloat","flixel/util/FlxColor.hx",659,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_665_set_alphaFloat,"flixel.util._FlxColor.FlxColor_Impl_","set_alphaFloat",0x0315d9e0,"flixel.util._FlxColor.FlxColor_Impl_.set_alphaFloat","flixel/util/FlxColor.hx",665,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_672_get_cyan,"flixel.util._FlxColor.FlxColor_Impl_","get_cyan",0xfa6d7eb1,"flixel.util._FlxColor.FlxColor_Impl_.get_cyan","flixel/util/FlxColor.hx",672,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_677_get_magenta,"flixel.util._FlxColor.FlxColor_Impl_","get_magenta",0xbba26d5b,"flixel.util._FlxColor.FlxColor_Impl_.get_magenta","flixel/util/FlxColor.hx",677,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_682_get_yellow,"flixel.util._FlxColor.FlxColor_Impl_","get_yellow",0xdee9d882,"flixel.util._FlxColor.FlxColor_Impl_.get_yellow","flixel/util/FlxColor.hx",682,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_687_get_black,"flixel.util._FlxColor.FlxColor_Impl_","get_black",0x8962f871,"flixel.util._FlxColor.FlxColor_Impl_.get_black","flixel/util/FlxColor.hx",687,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_691_set_cyan,"flixel.util._FlxColor.FlxColor_Impl_","set_cyan",0xa8cad825,"flixel.util._FlxColor.FlxColor_Impl_.set_cyan","flixel/util/FlxColor.hx",691,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_697_set_magenta,"flixel.util._FlxColor.FlxColor_Impl_","set_magenta",0xc60f7467,"flixel.util._FlxColor.FlxColor_Impl_.set_magenta","flixel/util/FlxColor.hx",697,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_703_set_yellow,"flixel.util._FlxColor.FlxColor_Impl_","set_yellow",0xe26776f6,"flixel.util._FlxColor.FlxColor_Impl_.set_yellow","flixel/util/FlxColor.hx",703,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_709_set_black,"flixel.util._FlxColor.FlxColor_Impl_","set_black",0x6cb3e47d,"flixel.util._FlxColor.FlxColor_Impl_.set_black","flixel/util/FlxColor.hx",709,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_715_get_hue,"flixel.util._FlxColor.FlxColor_Impl_","get_hue",0xab0a02ea,"flixel.util._FlxColor.FlxColor_Impl_.get_hue","flixel/util/FlxColor.hx",715,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_728_get_brightness,"flixel.util._FlxColor.FlxColor_Impl_","get_brightness",0x252b65df,"flixel.util._FlxColor.FlxColor_Impl_.get_brightness","flixel/util/FlxColor.hx",728,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_733_get_saturation,"flixel.util._FlxColor.FlxColor_Impl_","get_saturation",0xb65babe0,"flixel.util._FlxColor.FlxColor_Impl_.get_saturation","flixel/util/FlxColor.hx",733,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_738_get_lightness,"flixel.util._FlxColor.FlxColor_Impl_","get_lightness",0x5544981f,"flixel.util._FlxColor.FlxColor_Impl_.get_lightness","flixel/util/FlxColor.hx",738,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_742_set_hue,"flixel.util._FlxColor.FlxColor_Impl_","set_hue",0x9e0b93f6,"flixel.util._FlxColor.FlxColor_Impl_.set_hue","flixel/util/FlxColor.hx",742,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_748_set_saturation,"flixel.util._FlxColor.FlxColor_Impl_","set_saturation",0xd67b9454,"flixel.util._FlxColor.FlxColor_Impl_.set_saturation","flixel/util/FlxColor.hx",748,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_754_set_brightness,"flixel.util._FlxColor.FlxColor_Impl_","set_brightness",0x454b4e53,"flixel.util._FlxColor.FlxColor_Impl_.set_brightness","flixel/util/FlxColor.hx",754,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_760_set_lightness,"flixel.util._FlxColor.FlxColor_Impl_","set_lightness",0x9a4a7a2b,"flixel.util._FlxColor.FlxColor_Impl_.set_lightness","flixel/util/FlxColor.hx",760,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_767_maxColor,"flixel.util._FlxColor.FlxColor_Impl_","maxColor",0x2d604224,"flixel.util._FlxColor.FlxColor_Impl_.maxColor","flixel/util/FlxColor.hx",767,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_772_minColor,"flixel.util._FlxColor.FlxColor_Impl_","minColor",0x7a7a5c76,"flixel.util._FlxColor.FlxColor_Impl_.minColor","flixel/util/FlxColor.hx",772,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_777_boundChannel,"flixel.util._FlxColor.FlxColor_Impl_","boundChannel",0x855280aa,"flixel.util._FlxColor.FlxColor_Impl_.boundChannel","flixel/util/FlxColor.hx",777,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_20_boot,"flixel.util._FlxColor.FlxColor_Impl_","boot",0x517f5bb7,"flixel.util._FlxColor.FlxColor_Impl_.boot","flixel/util/FlxColor.hx",20,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_21_boot,"flixel.util._FlxColor.FlxColor_Impl_","boot",0x517f5bb7,"flixel.util._FlxColor.FlxColor_Impl_.boot","flixel/util/FlxColor.hx",21,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_22_boot,"flixel.util._FlxColor.FlxColor_Impl_","boot",0x517f5bb7,"flixel.util._FlxColor.FlxColor_Impl_.boot","flixel/util/FlxColor.hx",22,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_23_boot,"flixel.util._FlxColor.FlxColor_Impl_","boot",0x517f5bb7,"flixel.util._FlxColor.FlxColor_Impl_.boot","flixel/util/FlxColor.hx",23,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_25_boot,"flixel.util._FlxColor.FlxColor_Impl_","boot",0x517f5bb7,"flixel.util._FlxColor.FlxColor_Impl_.boot","flixel/util/FlxColor.hx",25,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_26_boot,"flixel.util._FlxColor.FlxColor_Impl_","boot",0x517f5bb7,"flixel.util._FlxColor.FlxColor_Impl_.boot","flixel/util/FlxColor.hx",26,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_27_boot,"flixel.util._FlxColor.FlxColor_Impl_","boot",0x517f5bb7,"flixel.util._FlxColor.FlxColor_Impl_.boot","flixel/util/FlxColor.hx",27,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_28_boot,"flixel.util._FlxColor.FlxColor_Impl_","boot",0x517f5bb7,"flixel.util._FlxColor.FlxColor_Impl_.boot","flixel/util/FlxColor.hx",28,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_29_boot,"flixel.util._FlxColor.FlxColor_Impl_","boot",0x517f5bb7,"flixel.util._FlxColor.FlxColor_Impl_.boot","flixel/util/FlxColor.hx",29,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_30_boot,"flixel.util._FlxColor.FlxColor_Impl_","boot",0x517f5bb7,"flixel.util._FlxColor.FlxColor_Impl_.boot","flixel/util/FlxColor.hx",30,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_31_boot,"flixel.util._FlxColor.FlxColor_Impl_","boot",0x517f5bb7,"flixel.util._FlxColor.FlxColor_Impl_.boot","flixel/util/FlxColor.hx",31,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_32_boot,"flixel.util._FlxColor.FlxColor_Impl_","boot",0x517f5bb7,"flixel.util._FlxColor.FlxColor_Impl_.boot","flixel/util/FlxColor.hx",32,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_33_boot,"flixel.util._FlxColor.FlxColor_Impl_","boot",0x517f5bb7,"flixel.util._FlxColor.FlxColor_Impl_.boot","flixel/util/FlxColor.hx",33,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_34_boot,"flixel.util._FlxColor.FlxColor_Impl_","boot",0x517f5bb7,"flixel.util._FlxColor.FlxColor_Impl_.boot","flixel/util/FlxColor.hx",34,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_35_boot,"flixel.util._FlxColor.FlxColor_Impl_","boot",0x517f5bb7,"flixel.util._FlxColor.FlxColor_Impl_.boot","flixel/util/FlxColor.hx",35,0x9335c333)
HX_LOCAL_STACK_FRAME(_hx_pos_0c1a490149f50aaa_53_boot,"flixel.util._FlxColor.FlxColor_Impl_","boot",0x517f5bb7,"flixel.util._FlxColor.FlxColor_Impl_.boot","flixel/system/macros/FlxMacroUtil.hx",53,0x8cc0f087)
HX_LOCAL_STACK_FRAME(_hx_pos_fda63b7a1987bfd7_76_boot,"flixel.util._FlxColor.FlxColor_Impl_","boot",0x517f5bb7,"flixel.util._FlxColor.FlxColor_Impl_.boot","flixel/util/FlxColor.hx",76,0x9335c333)
namespace flixel{
namespace util{
namespace _FlxColor{

void FlxColor_Impl__obj::__construct() { }

Dynamic FlxColor_Impl__obj::__CreateEmpty() { return new FlxColor_Impl__obj; }

void *FlxColor_Impl__obj::_hx_vtable = 0;

Dynamic FlxColor_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxColor_Impl__obj > _hx_result = new FlxColor_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxColor_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x279e4d17;
}

int FlxColor_Impl__obj::TRANSPARENT;

int FlxColor_Impl__obj::WHITE;

int FlxColor_Impl__obj::GRAY;

int FlxColor_Impl__obj::BLACK;

int FlxColor_Impl__obj::GREEN;

int FlxColor_Impl__obj::LIME;

int FlxColor_Impl__obj::YELLOW;

int FlxColor_Impl__obj::ORANGE;

int FlxColor_Impl__obj::RED;

int FlxColor_Impl__obj::PURPLE;

int FlxColor_Impl__obj::BLUE;

int FlxColor_Impl__obj::BROWN;

int FlxColor_Impl__obj::PINK;

int FlxColor_Impl__obj::MAGENTA;

int FlxColor_Impl__obj::CYAN;

 ::haxe::ds::StringMap FlxColor_Impl__obj::colorLookup;

 ::EReg FlxColor_Impl__obj::COLOR_REGEX;

int FlxColor_Impl__obj::fromInt(int Value){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_86_fromInt)
HXDLIN(  86)		return ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(Value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,fromInt,return )

int FlxColor_Impl__obj::fromRGB(int Red,int Green,int Blue,hx::Null< int >  __o_Alpha){
int Alpha = __o_Alpha.Default(255);
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_99_fromRGB)
HXLINE( 100)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXLINE( 101)		{
HXLINE( 101)			color = ((int)color & (int)(int)-16711681);
HXDLIN( 101)			int color1;
HXDLIN( 101)			if ((Red > (int)255)) {
HXLINE( 101)				color1 = (int)255;
            			}
            			else {
HXLINE( 101)				if ((Red < (int)0)) {
HXLINE( 101)					color1 = (int)0;
            				}
            				else {
HXLINE( 101)					color1 = Red;
            				}
            			}
HXDLIN( 101)			color = ((int)color | (int)((int)color1 << (int)(int)16));
            		}
HXDLIN( 101)		{
HXLINE( 101)			color = ((int)color & (int)(int)-65281);
HXDLIN( 101)			int color2;
HXDLIN( 101)			if ((Green > (int)255)) {
HXLINE( 101)				color2 = (int)255;
            			}
            			else {
HXLINE( 101)				if ((Green < (int)0)) {
HXLINE( 101)					color2 = (int)0;
            				}
            				else {
HXLINE( 101)					color2 = Green;
            				}
            			}
HXDLIN( 101)			color = ((int)color | (int)((int)color2 << (int)(int)8));
            		}
HXDLIN( 101)		{
HXLINE( 101)			color = ((int)color & (int)(int)-256);
HXDLIN( 101)			int color3;
HXDLIN( 101)			if ((Blue > (int)255)) {
HXLINE( 101)				color3 = (int)255;
            			}
            			else {
HXLINE( 101)				if ((Blue < (int)0)) {
HXLINE( 101)					color3 = (int)0;
            				}
            				else {
HXLINE( 101)					color3 = Blue;
            				}
            			}
HXDLIN( 101)			color = ((int)color | (int)color3);
            		}
HXDLIN( 101)		{
HXLINE( 101)			color = ((int)color & (int)(int)16777215);
HXDLIN( 101)			int color4;
HXDLIN( 101)			if ((Alpha > (int)255)) {
HXLINE( 101)				color4 = (int)255;
            			}
            			else {
HXLINE( 101)				if ((Alpha < (int)0)) {
HXLINE( 101)					color4 = (int)0;
            				}
            				else {
HXLINE( 101)					color4 = Alpha;
            				}
            			}
HXDLIN( 101)			color = ((int)color | (int)((int)color4 << (int)(int)24));
            		}
HXDLIN( 101)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxColor_Impl__obj,fromRGB,return )

int FlxColor_Impl__obj::fromRGBFloat(Float Red,Float Green,Float Blue,hx::Null< Float >  __o_Alpha){
Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_114_fromRGBFloat)
HXLINE( 115)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXLINE( 116)		{
HXLINE( 116)			int Value = ::Math_obj::round((Red * (int)255));
HXDLIN( 116)			color = ((int)color & (int)(int)-16711681);
HXDLIN( 116)			int color1;
HXDLIN( 116)			if ((Value > (int)255)) {
HXLINE( 116)				color1 = (int)255;
            			}
            			else {
HXLINE( 116)				if ((Value < (int)0)) {
HXLINE( 116)					color1 = (int)0;
            				}
            				else {
HXLINE( 116)					color1 = Value;
            				}
            			}
HXDLIN( 116)			color = ((int)color | (int)((int)color1 << (int)(int)16));
            		}
HXDLIN( 116)		{
HXLINE( 116)			int Value1 = ::Math_obj::round((Green * (int)255));
HXDLIN( 116)			color = ((int)color & (int)(int)-65281);
HXDLIN( 116)			int color2;
HXDLIN( 116)			if ((Value1 > (int)255)) {
HXLINE( 116)				color2 = (int)255;
            			}
            			else {
HXLINE( 116)				if ((Value1 < (int)0)) {
HXLINE( 116)					color2 = (int)0;
            				}
            				else {
HXLINE( 116)					color2 = Value1;
            				}
            			}
HXDLIN( 116)			color = ((int)color | (int)((int)color2 << (int)(int)8));
            		}
HXDLIN( 116)		{
HXLINE( 116)			int Value2 = ::Math_obj::round((Blue * (int)255));
HXDLIN( 116)			color = ((int)color & (int)(int)-256);
HXDLIN( 116)			int color3;
HXDLIN( 116)			if ((Value2 > (int)255)) {
HXLINE( 116)				color3 = (int)255;
            			}
            			else {
HXLINE( 116)				if ((Value2 < (int)0)) {
HXLINE( 116)					color3 = (int)0;
            				}
            				else {
HXLINE( 116)					color3 = Value2;
            				}
            			}
HXDLIN( 116)			color = ((int)color | (int)color3);
            		}
HXDLIN( 116)		{
HXLINE( 116)			int Value3 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 116)			color = ((int)color & (int)(int)16777215);
HXDLIN( 116)			int color4;
HXDLIN( 116)			if ((Value3 > (int)255)) {
HXLINE( 116)				color4 = (int)255;
            			}
            			else {
HXLINE( 116)				if ((Value3 < (int)0)) {
HXLINE( 116)					color4 = (int)0;
            				}
            				else {
HXLINE( 116)					color4 = Value3;
            				}
            			}
HXDLIN( 116)			color = ((int)color | (int)((int)color4 << (int)(int)24));
            		}
HXDLIN( 116)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxColor_Impl__obj,fromRGBFloat,return )

int FlxColor_Impl__obj::fromCMYK(Float Cyan,Float Magenta,Float Yellow,Float Black,hx::Null< Float >  __o_Alpha){
Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_130_fromCMYK)
HXLINE( 131)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXLINE( 132)		{
HXLINE( 132)			Float Value = (((int)1 - Cyan) * ((int)1 - Black));
HXDLIN( 132)			{
HXLINE( 132)				int Value1 = ::Math_obj::round((Value * (int)255));
HXDLIN( 132)				color = ((int)color & (int)(int)-16711681);
HXDLIN( 132)				int color1;
HXDLIN( 132)				if ((Value1 > (int)255)) {
HXLINE( 132)					color1 = (int)255;
            				}
            				else {
HXLINE( 132)					if ((Value1 < (int)0)) {
HXLINE( 132)						color1 = (int)0;
            					}
            					else {
HXLINE( 132)						color1 = Value1;
            					}
            				}
HXDLIN( 132)				color = ((int)color | (int)((int)color1 << (int)(int)16));
            			}
            		}
HXDLIN( 132)		{
HXLINE( 132)			Float Value2 = (((int)1 - Magenta) * ((int)1 - Black));
HXDLIN( 132)			{
HXLINE( 132)				int Value3 = ::Math_obj::round((Value2 * (int)255));
HXDLIN( 132)				color = ((int)color & (int)(int)-65281);
HXDLIN( 132)				int color2;
HXDLIN( 132)				if ((Value3 > (int)255)) {
HXLINE( 132)					color2 = (int)255;
            				}
            				else {
HXLINE( 132)					if ((Value3 < (int)0)) {
HXLINE( 132)						color2 = (int)0;
            					}
            					else {
HXLINE( 132)						color2 = Value3;
            					}
            				}
HXDLIN( 132)				color = ((int)color | (int)((int)color2 << (int)(int)8));
            			}
            		}
HXDLIN( 132)		{
HXLINE( 132)			Float Value4 = (((int)1 - Yellow) * ((int)1 - Black));
HXDLIN( 132)			{
HXLINE( 132)				int Value5 = ::Math_obj::round((Value4 * (int)255));
HXDLIN( 132)				color = ((int)color & (int)(int)-256);
HXDLIN( 132)				int color3;
HXDLIN( 132)				if ((Value5 > (int)255)) {
HXLINE( 132)					color3 = (int)255;
            				}
            				else {
HXLINE( 132)					if ((Value5 < (int)0)) {
HXLINE( 132)						color3 = (int)0;
            					}
            					else {
HXLINE( 132)						color3 = Value5;
            					}
            				}
HXDLIN( 132)				color = ((int)color | (int)color3);
            			}
            		}
HXDLIN( 132)		{
HXLINE( 132)			int Value6 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 132)			color = ((int)color & (int)(int)16777215);
HXDLIN( 132)			int color4;
HXDLIN( 132)			if ((Value6 > (int)255)) {
HXLINE( 132)				color4 = (int)255;
            			}
            			else {
HXLINE( 132)				if ((Value6 < (int)0)) {
HXLINE( 132)					color4 = (int)0;
            				}
            				else {
HXLINE( 132)					color4 = Value6;
            				}
            			}
HXDLIN( 132)			color = ((int)color | (int)((int)color4 << (int)(int)24));
            		}
HXDLIN( 132)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxColor_Impl__obj,fromCMYK,return )

int FlxColor_Impl__obj::fromHSB(Float Hue,Float Saturation,Float Brightness,hx::Null< Float >  __o_Alpha){
Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_145_fromHSB)
HXLINE( 146)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXLINE( 147)		Float chroma = (Brightness * Saturation);
HXDLIN( 147)		Float match = (Brightness - chroma);
HXDLIN( 147)		Float Hue1 = Hue;
HXDLIN( 147)		Float Chroma = chroma;
HXDLIN( 147)		Hue1 = hx::Mod(Hue1,(int)360);
HXDLIN( 147)		Float hueD = ((Float)Hue1 / (Float)(int)60);
HXDLIN( 147)		Float mid = ((Chroma * ((int)1 - ::Math_obj::abs((hx::Mod(hueD,(int)2) - (int)1)))) + match);
HXDLIN( 147)		Chroma = (Chroma + match);
HXDLIN( 147)		{
HXLINE( 147)			int _g = ::Std_obj::_hx_int(hueD);
HXDLIN( 147)			switch((int)(_g)){
            				case (int)0: {
HXLINE( 147)					{
HXLINE( 147)						int Value = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)-16711681);
HXDLIN( 147)						int color1;
HXDLIN( 147)						if ((Value > (int)255)) {
HXLINE( 147)							color1 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value < (int)0)) {
HXLINE( 147)								color1 = (int)0;
            							}
            							else {
HXLINE( 147)								color1 = Value;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)((int)color1 << (int)(int)16));
            					}
HXDLIN( 147)					{
HXLINE( 147)						int Value1 = ::Math_obj::round((mid * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)-65281);
HXDLIN( 147)						int color2;
HXDLIN( 147)						if ((Value1 > (int)255)) {
HXLINE( 147)							color2 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value1 < (int)0)) {
HXLINE( 147)								color2 = (int)0;
            							}
            							else {
HXLINE( 147)								color2 = Value1;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)((int)color2 << (int)(int)8));
            					}
HXDLIN( 147)					{
HXLINE( 147)						int Value2 = ::Math_obj::round((match * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)-256);
HXDLIN( 147)						int color3;
HXDLIN( 147)						if ((Value2 > (int)255)) {
HXLINE( 147)							color3 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value2 < (int)0)) {
HXLINE( 147)								color3 = (int)0;
            							}
            							else {
HXLINE( 147)								color3 = Value2;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)color3);
            					}
HXDLIN( 147)					{
HXLINE( 147)						int Value3 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)16777215);
HXDLIN( 147)						int color4;
HXDLIN( 147)						if ((Value3 > (int)255)) {
HXLINE( 147)							color4 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value3 < (int)0)) {
HXLINE( 147)								color4 = (int)0;
            							}
            							else {
HXLINE( 147)								color4 = Value3;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)((int)color4 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 147)					{
HXLINE( 147)						int Value4 = ::Math_obj::round((mid * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)-16711681);
HXDLIN( 147)						int color5;
HXDLIN( 147)						if ((Value4 > (int)255)) {
HXLINE( 147)							color5 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value4 < (int)0)) {
HXLINE( 147)								color5 = (int)0;
            							}
            							else {
HXLINE( 147)								color5 = Value4;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)((int)color5 << (int)(int)16));
            					}
HXDLIN( 147)					{
HXLINE( 147)						int Value5 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)-65281);
HXDLIN( 147)						int color6;
HXDLIN( 147)						if ((Value5 > (int)255)) {
HXLINE( 147)							color6 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value5 < (int)0)) {
HXLINE( 147)								color6 = (int)0;
            							}
            							else {
HXLINE( 147)								color6 = Value5;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)((int)color6 << (int)(int)8));
            					}
HXDLIN( 147)					{
HXLINE( 147)						int Value6 = ::Math_obj::round((match * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)-256);
HXDLIN( 147)						int color7;
HXDLIN( 147)						if ((Value6 > (int)255)) {
HXLINE( 147)							color7 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value6 < (int)0)) {
HXLINE( 147)								color7 = (int)0;
            							}
            							else {
HXLINE( 147)								color7 = Value6;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)color7);
            					}
HXDLIN( 147)					{
HXLINE( 147)						int Value7 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)16777215);
HXDLIN( 147)						int color8;
HXDLIN( 147)						if ((Value7 > (int)255)) {
HXLINE( 147)							color8 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value7 < (int)0)) {
HXLINE( 147)								color8 = (int)0;
            							}
            							else {
HXLINE( 147)								color8 = Value7;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)((int)color8 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 147)					{
HXLINE( 147)						int Value8 = ::Math_obj::round((match * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)-16711681);
HXDLIN( 147)						int color9;
HXDLIN( 147)						if ((Value8 > (int)255)) {
HXLINE( 147)							color9 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value8 < (int)0)) {
HXLINE( 147)								color9 = (int)0;
            							}
            							else {
HXLINE( 147)								color9 = Value8;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)((int)color9 << (int)(int)16));
            					}
HXDLIN( 147)					{
HXLINE( 147)						int Value9 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)-65281);
HXDLIN( 147)						int color10;
HXDLIN( 147)						if ((Value9 > (int)255)) {
HXLINE( 147)							color10 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value9 < (int)0)) {
HXLINE( 147)								color10 = (int)0;
            							}
            							else {
HXLINE( 147)								color10 = Value9;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)((int)color10 << (int)(int)8));
            					}
HXDLIN( 147)					{
HXLINE( 147)						int Value10 = ::Math_obj::round((mid * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)-256);
HXDLIN( 147)						int color11;
HXDLIN( 147)						if ((Value10 > (int)255)) {
HXLINE( 147)							color11 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value10 < (int)0)) {
HXLINE( 147)								color11 = (int)0;
            							}
            							else {
HXLINE( 147)								color11 = Value10;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)color11);
            					}
HXDLIN( 147)					{
HXLINE( 147)						int Value11 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)16777215);
HXDLIN( 147)						int color12;
HXDLIN( 147)						if ((Value11 > (int)255)) {
HXLINE( 147)							color12 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value11 < (int)0)) {
HXLINE( 147)								color12 = (int)0;
            							}
            							else {
HXLINE( 147)								color12 = Value11;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)((int)color12 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 147)					{
HXLINE( 147)						int Value12 = ::Math_obj::round((match * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)-16711681);
HXDLIN( 147)						int color13;
HXDLIN( 147)						if ((Value12 > (int)255)) {
HXLINE( 147)							color13 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value12 < (int)0)) {
HXLINE( 147)								color13 = (int)0;
            							}
            							else {
HXLINE( 147)								color13 = Value12;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)((int)color13 << (int)(int)16));
            					}
HXDLIN( 147)					{
HXLINE( 147)						int Value13 = ::Math_obj::round((mid * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)-65281);
HXDLIN( 147)						int color14;
HXDLIN( 147)						if ((Value13 > (int)255)) {
HXLINE( 147)							color14 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value13 < (int)0)) {
HXLINE( 147)								color14 = (int)0;
            							}
            							else {
HXLINE( 147)								color14 = Value13;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)((int)color14 << (int)(int)8));
            					}
HXDLIN( 147)					{
HXLINE( 147)						int Value14 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)-256);
HXDLIN( 147)						int color15;
HXDLIN( 147)						if ((Value14 > (int)255)) {
HXLINE( 147)							color15 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value14 < (int)0)) {
HXLINE( 147)								color15 = (int)0;
            							}
            							else {
HXLINE( 147)								color15 = Value14;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)color15);
            					}
HXDLIN( 147)					{
HXLINE( 147)						int Value15 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)16777215);
HXDLIN( 147)						int color16;
HXDLIN( 147)						if ((Value15 > (int)255)) {
HXLINE( 147)							color16 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value15 < (int)0)) {
HXLINE( 147)								color16 = (int)0;
            							}
            							else {
HXLINE( 147)								color16 = Value15;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)((int)color16 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 147)					{
HXLINE( 147)						int Value16 = ::Math_obj::round((mid * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)-16711681);
HXDLIN( 147)						int color17;
HXDLIN( 147)						if ((Value16 > (int)255)) {
HXLINE( 147)							color17 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value16 < (int)0)) {
HXLINE( 147)								color17 = (int)0;
            							}
            							else {
HXLINE( 147)								color17 = Value16;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)((int)color17 << (int)(int)16));
            					}
HXDLIN( 147)					{
HXLINE( 147)						int Value17 = ::Math_obj::round((match * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)-65281);
HXDLIN( 147)						int color18;
HXDLIN( 147)						if ((Value17 > (int)255)) {
HXLINE( 147)							color18 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value17 < (int)0)) {
HXLINE( 147)								color18 = (int)0;
            							}
            							else {
HXLINE( 147)								color18 = Value17;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)((int)color18 << (int)(int)8));
            					}
HXDLIN( 147)					{
HXLINE( 147)						int Value18 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)-256);
HXDLIN( 147)						int color19;
HXDLIN( 147)						if ((Value18 > (int)255)) {
HXLINE( 147)							color19 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value18 < (int)0)) {
HXLINE( 147)								color19 = (int)0;
            							}
            							else {
HXLINE( 147)								color19 = Value18;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)color19);
            					}
HXDLIN( 147)					{
HXLINE( 147)						int Value19 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)16777215);
HXDLIN( 147)						int color20;
HXDLIN( 147)						if ((Value19 > (int)255)) {
HXLINE( 147)							color20 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value19 < (int)0)) {
HXLINE( 147)								color20 = (int)0;
            							}
            							else {
HXLINE( 147)								color20 = Value19;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)((int)color20 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 147)					{
HXLINE( 147)						int Value20 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)-16711681);
HXDLIN( 147)						int color21;
HXDLIN( 147)						if ((Value20 > (int)255)) {
HXLINE( 147)							color21 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value20 < (int)0)) {
HXLINE( 147)								color21 = (int)0;
            							}
            							else {
HXLINE( 147)								color21 = Value20;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)((int)color21 << (int)(int)16));
            					}
HXDLIN( 147)					{
HXLINE( 147)						int Value21 = ::Math_obj::round((match * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)-65281);
HXDLIN( 147)						int color22;
HXDLIN( 147)						if ((Value21 > (int)255)) {
HXLINE( 147)							color22 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value21 < (int)0)) {
HXLINE( 147)								color22 = (int)0;
            							}
            							else {
HXLINE( 147)								color22 = Value21;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)((int)color22 << (int)(int)8));
            					}
HXDLIN( 147)					{
HXLINE( 147)						int Value22 = ::Math_obj::round((mid * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)-256);
HXDLIN( 147)						int color23;
HXDLIN( 147)						if ((Value22 > (int)255)) {
HXLINE( 147)							color23 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value22 < (int)0)) {
HXLINE( 147)								color23 = (int)0;
            							}
            							else {
HXLINE( 147)								color23 = Value22;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)color23);
            					}
HXDLIN( 147)					{
HXLINE( 147)						int Value23 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 147)						color = ((int)color & (int)(int)16777215);
HXDLIN( 147)						int color24;
HXDLIN( 147)						if ((Value23 > (int)255)) {
HXLINE( 147)							color24 = (int)255;
            						}
            						else {
HXLINE( 147)							if ((Value23 < (int)0)) {
HXLINE( 147)								color24 = (int)0;
            							}
            							else {
HXLINE( 147)								color24 = Value23;
            							}
            						}
HXDLIN( 147)						color = ((int)color | (int)((int)color24 << (int)(int)24));
            					}
            				}
            				break;
            			}
            		}
HXDLIN( 147)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxColor_Impl__obj,fromHSB,return )

int FlxColor_Impl__obj::fromHSL(Float Hue,Float Saturation,Float Lightness,hx::Null< Float >  __o_Alpha){
Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_160_fromHSL)
HXLINE( 161)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXLINE( 162)		Float chroma = (((int)1 - ::Math_obj::abs((((int)2 * Lightness) - (int)1))) * Saturation);
HXDLIN( 162)		Float match = (Lightness - ((Float)chroma / (Float)(int)2));
HXDLIN( 162)		Float Hue1 = Hue;
HXDLIN( 162)		Float Chroma = chroma;
HXDLIN( 162)		Hue1 = hx::Mod(Hue1,(int)360);
HXDLIN( 162)		Float hueD = ((Float)Hue1 / (Float)(int)60);
HXDLIN( 162)		Float mid = ((Chroma * ((int)1 - ::Math_obj::abs((hx::Mod(hueD,(int)2) - (int)1)))) + match);
HXDLIN( 162)		Chroma = (Chroma + match);
HXDLIN( 162)		{
HXLINE( 162)			int _g = ::Std_obj::_hx_int(hueD);
HXDLIN( 162)			switch((int)(_g)){
            				case (int)0: {
HXLINE( 162)					{
HXLINE( 162)						int Value = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)-16711681);
HXDLIN( 162)						int color1;
HXDLIN( 162)						if ((Value > (int)255)) {
HXLINE( 162)							color1 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value < (int)0)) {
HXLINE( 162)								color1 = (int)0;
            							}
            							else {
HXLINE( 162)								color1 = Value;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)((int)color1 << (int)(int)16));
            					}
HXDLIN( 162)					{
HXLINE( 162)						int Value1 = ::Math_obj::round((mid * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)-65281);
HXDLIN( 162)						int color2;
HXDLIN( 162)						if ((Value1 > (int)255)) {
HXLINE( 162)							color2 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value1 < (int)0)) {
HXLINE( 162)								color2 = (int)0;
            							}
            							else {
HXLINE( 162)								color2 = Value1;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)((int)color2 << (int)(int)8));
            					}
HXDLIN( 162)					{
HXLINE( 162)						int Value2 = ::Math_obj::round((match * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)-256);
HXDLIN( 162)						int color3;
HXDLIN( 162)						if ((Value2 > (int)255)) {
HXLINE( 162)							color3 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value2 < (int)0)) {
HXLINE( 162)								color3 = (int)0;
            							}
            							else {
HXLINE( 162)								color3 = Value2;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)color3);
            					}
HXDLIN( 162)					{
HXLINE( 162)						int Value3 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)16777215);
HXDLIN( 162)						int color4;
HXDLIN( 162)						if ((Value3 > (int)255)) {
HXLINE( 162)							color4 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value3 < (int)0)) {
HXLINE( 162)								color4 = (int)0;
            							}
            							else {
HXLINE( 162)								color4 = Value3;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)((int)color4 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 162)					{
HXLINE( 162)						int Value4 = ::Math_obj::round((mid * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)-16711681);
HXDLIN( 162)						int color5;
HXDLIN( 162)						if ((Value4 > (int)255)) {
HXLINE( 162)							color5 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value4 < (int)0)) {
HXLINE( 162)								color5 = (int)0;
            							}
            							else {
HXLINE( 162)								color5 = Value4;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)((int)color5 << (int)(int)16));
            					}
HXDLIN( 162)					{
HXLINE( 162)						int Value5 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)-65281);
HXDLIN( 162)						int color6;
HXDLIN( 162)						if ((Value5 > (int)255)) {
HXLINE( 162)							color6 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value5 < (int)0)) {
HXLINE( 162)								color6 = (int)0;
            							}
            							else {
HXLINE( 162)								color6 = Value5;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)((int)color6 << (int)(int)8));
            					}
HXDLIN( 162)					{
HXLINE( 162)						int Value6 = ::Math_obj::round((match * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)-256);
HXDLIN( 162)						int color7;
HXDLIN( 162)						if ((Value6 > (int)255)) {
HXLINE( 162)							color7 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value6 < (int)0)) {
HXLINE( 162)								color7 = (int)0;
            							}
            							else {
HXLINE( 162)								color7 = Value6;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)color7);
            					}
HXDLIN( 162)					{
HXLINE( 162)						int Value7 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)16777215);
HXDLIN( 162)						int color8;
HXDLIN( 162)						if ((Value7 > (int)255)) {
HXLINE( 162)							color8 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value7 < (int)0)) {
HXLINE( 162)								color8 = (int)0;
            							}
            							else {
HXLINE( 162)								color8 = Value7;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)((int)color8 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 162)					{
HXLINE( 162)						int Value8 = ::Math_obj::round((match * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)-16711681);
HXDLIN( 162)						int color9;
HXDLIN( 162)						if ((Value8 > (int)255)) {
HXLINE( 162)							color9 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value8 < (int)0)) {
HXLINE( 162)								color9 = (int)0;
            							}
            							else {
HXLINE( 162)								color9 = Value8;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)((int)color9 << (int)(int)16));
            					}
HXDLIN( 162)					{
HXLINE( 162)						int Value9 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)-65281);
HXDLIN( 162)						int color10;
HXDLIN( 162)						if ((Value9 > (int)255)) {
HXLINE( 162)							color10 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value9 < (int)0)) {
HXLINE( 162)								color10 = (int)0;
            							}
            							else {
HXLINE( 162)								color10 = Value9;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)((int)color10 << (int)(int)8));
            					}
HXDLIN( 162)					{
HXLINE( 162)						int Value10 = ::Math_obj::round((mid * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)-256);
HXDLIN( 162)						int color11;
HXDLIN( 162)						if ((Value10 > (int)255)) {
HXLINE( 162)							color11 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value10 < (int)0)) {
HXLINE( 162)								color11 = (int)0;
            							}
            							else {
HXLINE( 162)								color11 = Value10;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)color11);
            					}
HXDLIN( 162)					{
HXLINE( 162)						int Value11 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)16777215);
HXDLIN( 162)						int color12;
HXDLIN( 162)						if ((Value11 > (int)255)) {
HXLINE( 162)							color12 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value11 < (int)0)) {
HXLINE( 162)								color12 = (int)0;
            							}
            							else {
HXLINE( 162)								color12 = Value11;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)((int)color12 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 162)					{
HXLINE( 162)						int Value12 = ::Math_obj::round((match * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)-16711681);
HXDLIN( 162)						int color13;
HXDLIN( 162)						if ((Value12 > (int)255)) {
HXLINE( 162)							color13 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value12 < (int)0)) {
HXLINE( 162)								color13 = (int)0;
            							}
            							else {
HXLINE( 162)								color13 = Value12;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)((int)color13 << (int)(int)16));
            					}
HXDLIN( 162)					{
HXLINE( 162)						int Value13 = ::Math_obj::round((mid * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)-65281);
HXDLIN( 162)						int color14;
HXDLIN( 162)						if ((Value13 > (int)255)) {
HXLINE( 162)							color14 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value13 < (int)0)) {
HXLINE( 162)								color14 = (int)0;
            							}
            							else {
HXLINE( 162)								color14 = Value13;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)((int)color14 << (int)(int)8));
            					}
HXDLIN( 162)					{
HXLINE( 162)						int Value14 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)-256);
HXDLIN( 162)						int color15;
HXDLIN( 162)						if ((Value14 > (int)255)) {
HXLINE( 162)							color15 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value14 < (int)0)) {
HXLINE( 162)								color15 = (int)0;
            							}
            							else {
HXLINE( 162)								color15 = Value14;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)color15);
            					}
HXDLIN( 162)					{
HXLINE( 162)						int Value15 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)16777215);
HXDLIN( 162)						int color16;
HXDLIN( 162)						if ((Value15 > (int)255)) {
HXLINE( 162)							color16 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value15 < (int)0)) {
HXLINE( 162)								color16 = (int)0;
            							}
            							else {
HXLINE( 162)								color16 = Value15;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)((int)color16 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 162)					{
HXLINE( 162)						int Value16 = ::Math_obj::round((mid * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)-16711681);
HXDLIN( 162)						int color17;
HXDLIN( 162)						if ((Value16 > (int)255)) {
HXLINE( 162)							color17 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value16 < (int)0)) {
HXLINE( 162)								color17 = (int)0;
            							}
            							else {
HXLINE( 162)								color17 = Value16;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)((int)color17 << (int)(int)16));
            					}
HXDLIN( 162)					{
HXLINE( 162)						int Value17 = ::Math_obj::round((match * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)-65281);
HXDLIN( 162)						int color18;
HXDLIN( 162)						if ((Value17 > (int)255)) {
HXLINE( 162)							color18 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value17 < (int)0)) {
HXLINE( 162)								color18 = (int)0;
            							}
            							else {
HXLINE( 162)								color18 = Value17;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)((int)color18 << (int)(int)8));
            					}
HXDLIN( 162)					{
HXLINE( 162)						int Value18 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)-256);
HXDLIN( 162)						int color19;
HXDLIN( 162)						if ((Value18 > (int)255)) {
HXLINE( 162)							color19 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value18 < (int)0)) {
HXLINE( 162)								color19 = (int)0;
            							}
            							else {
HXLINE( 162)								color19 = Value18;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)color19);
            					}
HXDLIN( 162)					{
HXLINE( 162)						int Value19 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)16777215);
HXDLIN( 162)						int color20;
HXDLIN( 162)						if ((Value19 > (int)255)) {
HXLINE( 162)							color20 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value19 < (int)0)) {
HXLINE( 162)								color20 = (int)0;
            							}
            							else {
HXLINE( 162)								color20 = Value19;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)((int)color20 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 162)					{
HXLINE( 162)						int Value20 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)-16711681);
HXDLIN( 162)						int color21;
HXDLIN( 162)						if ((Value20 > (int)255)) {
HXLINE( 162)							color21 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value20 < (int)0)) {
HXLINE( 162)								color21 = (int)0;
            							}
            							else {
HXLINE( 162)								color21 = Value20;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)((int)color21 << (int)(int)16));
            					}
HXDLIN( 162)					{
HXLINE( 162)						int Value21 = ::Math_obj::round((match * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)-65281);
HXDLIN( 162)						int color22;
HXDLIN( 162)						if ((Value21 > (int)255)) {
HXLINE( 162)							color22 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value21 < (int)0)) {
HXLINE( 162)								color22 = (int)0;
            							}
            							else {
HXLINE( 162)								color22 = Value21;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)((int)color22 << (int)(int)8));
            					}
HXDLIN( 162)					{
HXLINE( 162)						int Value22 = ::Math_obj::round((mid * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)-256);
HXDLIN( 162)						int color23;
HXDLIN( 162)						if ((Value22 > (int)255)) {
HXLINE( 162)							color23 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value22 < (int)0)) {
HXLINE( 162)								color23 = (int)0;
            							}
            							else {
HXLINE( 162)								color23 = Value22;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)color23);
            					}
HXDLIN( 162)					{
HXLINE( 162)						int Value23 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 162)						color = ((int)color & (int)(int)16777215);
HXDLIN( 162)						int color24;
HXDLIN( 162)						if ((Value23 > (int)255)) {
HXLINE( 162)							color24 = (int)255;
            						}
            						else {
HXLINE( 162)							if ((Value23 < (int)0)) {
HXLINE( 162)								color24 = (int)0;
            							}
            							else {
HXLINE( 162)								color24 = Value23;
            							}
            						}
HXDLIN( 162)						color = ((int)color | (int)((int)color24 << (int)(int)24));
            					}
            				}
            				break;
            			}
            		}
HXDLIN( 162)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxColor_Impl__obj,fromHSL,return )

 ::Dynamic FlxColor_Impl__obj::fromString(::String str){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_181_fromString)
HXLINE( 182)		 ::Dynamic result = null();
HXLINE( 183)		str = ::StringTools_obj::trim(str);
HXLINE( 185)		if (::flixel::util::_FlxColor::FlxColor_Impl__obj::COLOR_REGEX->match(str)) {
HXLINE( 187)			::String hexColor = (HX_("0x",48,2a,00,00) + ::flixel::util::_FlxColor::FlxColor_Impl__obj::COLOR_REGEX->matched((int)2));
HXLINE( 188)			result = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(::Std_obj::parseInt(hexColor));
HXLINE( 189)			if ((hexColor.length == (int)8)) {
HXLINE( 191)				int Value = ::Math_obj::round((int)255);
HXDLIN( 191)				result = ((int)result & (int)(int)16777215);
HXDLIN( 191)				int result1;
HXDLIN( 191)				if ((Value > (int)255)) {
HXLINE( 191)					result1 = (int)255;
            				}
            				else {
HXLINE( 191)					if ((Value < (int)0)) {
HXLINE( 191)						result1 = (int)0;
            					}
            					else {
HXLINE( 191)						result1 = Value;
            					}
            				}
HXDLIN( 191)				result = ((int)result | (int)((int)result1 << (int)(int)24));
            			}
            		}
            		else {
HXLINE( 196)			str = str.toUpperCase();
HXLINE( 197)			{
HXLINE( 197)				 ::Dynamic key = ::flixel::util::_FlxColor::FlxColor_Impl__obj::colorLookup->keys();
HXDLIN( 197)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 197)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 199)					if ((key1.toUpperCase() == str)) {
HXLINE( 201)						result = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(::flixel::util::_FlxColor::FlxColor_Impl__obj::colorLookup->get(key1));
HXLINE( 202)						goto _hx_goto_6;
            					}
            				}
            				_hx_goto_6:;
            			}
            		}
HXLINE( 207)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,fromString,return )

::Array< int > FlxColor_Impl__obj::getHSBColorWheel(hx::Null< int >  __o_Alpha){
int Alpha = __o_Alpha.Default(255);
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_218_getHSBColorWheel)
HXDLIN( 218)		::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN( 218)		{
HXDLIN( 218)			int _g1 = (int)0;
HXDLIN( 218)			while((_g1 < (int)360)){
HXDLIN( 218)				_g1 = (_g1 + (int)1);
HXDLIN( 218)				int c = (_g1 - (int)1);
HXDLIN( 218)				_g->push(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromHSB(c,((Float)1.0),((Float)1.0),Alpha));
            			}
            		}
HXDLIN( 218)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,getHSBColorWheel,return )

int FlxColor_Impl__obj::interpolate(int Color1,int Color2,hx::Null< Float >  __o_Factor){
Float Factor = __o_Factor.Default(((Float)0.5));
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_230_interpolate)
HXLINE( 231)		int r = ::Std_obj::_hx_int((((((int)((int)Color2 >> (int)(int)16) & (int)(int)255) - ((int)((int)Color1 >> (int)(int)16) & (int)(int)255)) * Factor) + ((int)((int)Color1 >> (int)(int)16) & (int)(int)255)));
HXLINE( 232)		int g = ::Std_obj::_hx_int((((((int)((int)Color2 >> (int)(int)8) & (int)(int)255) - ((int)((int)Color1 >> (int)(int)8) & (int)(int)255)) * Factor) + ((int)((int)Color1 >> (int)(int)8) & (int)(int)255)));
HXLINE( 233)		int b = ::Std_obj::_hx_int((((((int)Color2 & (int)(int)255) - ((int)Color1 & (int)(int)255)) * Factor) + ((int)Color1 & (int)(int)255)));
HXLINE( 234)		int a = ::Std_obj::_hx_int((((((int)((int)Color2 >> (int)(int)24) & (int)(int)255) - ((int)((int)Color1 >> (int)(int)24) & (int)(int)255)) * Factor) + ((int)((int)Color1 >> (int)(int)24) & (int)(int)255)));
HXLINE( 236)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 236)		{
HXLINE( 236)			color = ((int)color & (int)(int)-16711681);
HXDLIN( 236)			int color1;
HXDLIN( 236)			if ((r > (int)255)) {
HXLINE( 236)				color1 = (int)255;
            			}
            			else {
HXLINE( 236)				if ((r < (int)0)) {
HXLINE( 236)					color1 = (int)0;
            				}
            				else {
HXLINE( 236)					color1 = r;
            				}
            			}
HXDLIN( 236)			color = ((int)color | (int)((int)color1 << (int)(int)16));
            		}
HXDLIN( 236)		{
HXLINE( 236)			color = ((int)color & (int)(int)-65281);
HXDLIN( 236)			int color2;
HXDLIN( 236)			if ((g > (int)255)) {
HXLINE( 236)				color2 = (int)255;
            			}
            			else {
HXLINE( 236)				if ((g < (int)0)) {
HXLINE( 236)					color2 = (int)0;
            				}
            				else {
HXLINE( 236)					color2 = g;
            				}
            			}
HXDLIN( 236)			color = ((int)color | (int)((int)color2 << (int)(int)8));
            		}
HXDLIN( 236)		{
HXLINE( 236)			color = ((int)color & (int)(int)-256);
HXDLIN( 236)			int color3;
HXDLIN( 236)			if ((b > (int)255)) {
HXLINE( 236)				color3 = (int)255;
            			}
            			else {
HXLINE( 236)				if ((b < (int)0)) {
HXLINE( 236)					color3 = (int)0;
            				}
            				else {
HXLINE( 236)					color3 = b;
            				}
            			}
HXDLIN( 236)			color = ((int)color | (int)color3);
            		}
HXDLIN( 236)		{
HXLINE( 236)			color = ((int)color & (int)(int)16777215);
HXDLIN( 236)			int color4;
HXDLIN( 236)			if ((a > (int)255)) {
HXLINE( 236)				color4 = (int)255;
            			}
            			else {
HXLINE( 236)				if ((a < (int)0)) {
HXLINE( 236)					color4 = (int)0;
            				}
            				else {
HXLINE( 236)					color4 = a;
            				}
            			}
HXDLIN( 236)			color = ((int)color | (int)((int)color4 << (int)(int)24));
            		}
HXDLIN( 236)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxColor_Impl__obj,interpolate,return )

::Array< int > FlxColor_Impl__obj::gradient(int Color1,int Color2,int Steps, ::Dynamic Ease){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_249_gradient)
HXLINE( 250)		::Array< int > output = ::Array_obj< int >::__new();
HXLINE( 252)		if (hx::IsNull( Ease )) {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			Float _hx_run(Float t){
            				HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_256_gradient)
HXLINE( 256)				return t;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 254)			Ease =  ::Dynamic(new _hx_Closure_0());
            		}
HXLINE( 260)		{
HXLINE( 260)			int _g1 = (int)0;
HXDLIN( 260)			int _g = Steps;
HXDLIN( 260)			while((_g1 < _g)){
HXLINE( 260)				_g1 = (_g1 + (int)1);
HXDLIN( 260)				int step = (_g1 - (int)1);
HXLINE( 262)				Float Factor = ( (Float)(Ease(((Float)step / (Float)(Steps - (int)1)))) );
HXDLIN( 262)				int r = ::Std_obj::_hx_int((((((int)((int)Color2 >> (int)(int)16) & (int)(int)255) - ((int)((int)Color1 >> (int)(int)16) & (int)(int)255)) * Factor) + ((int)((int)Color1 >> (int)(int)16) & (int)(int)255)));
HXDLIN( 262)				int g = ::Std_obj::_hx_int((((((int)((int)Color2 >> (int)(int)8) & (int)(int)255) - ((int)((int)Color1 >> (int)(int)8) & (int)(int)255)) * Factor) + ((int)((int)Color1 >> (int)(int)8) & (int)(int)255)));
HXDLIN( 262)				int b = ::Std_obj::_hx_int((((((int)Color2 & (int)(int)255) - ((int)Color1 & (int)(int)255)) * Factor) + ((int)Color1 & (int)(int)255)));
HXDLIN( 262)				int a = ::Std_obj::_hx_int((((((int)((int)Color2 >> (int)(int)24) & (int)(int)255) - ((int)((int)Color1 >> (int)(int)24) & (int)(int)255)) * Factor) + ((int)((int)Color1 >> (int)(int)24) & (int)(int)255)));
HXDLIN( 262)				int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 262)				{
HXLINE( 262)					color = ((int)color & (int)(int)-16711681);
HXDLIN( 262)					int color1;
HXDLIN( 262)					if ((r > (int)255)) {
HXLINE( 262)						color1 = (int)255;
            					}
            					else {
HXLINE( 262)						if ((r < (int)0)) {
HXLINE( 262)							color1 = (int)0;
            						}
            						else {
HXLINE( 262)							color1 = r;
            						}
            					}
HXDLIN( 262)					color = ((int)color | (int)((int)color1 << (int)(int)16));
            				}
HXDLIN( 262)				{
HXLINE( 262)					color = ((int)color & (int)(int)-65281);
HXDLIN( 262)					int color2;
HXDLIN( 262)					if ((g > (int)255)) {
HXLINE( 262)						color2 = (int)255;
            					}
            					else {
HXLINE( 262)						if ((g < (int)0)) {
HXLINE( 262)							color2 = (int)0;
            						}
            						else {
HXLINE( 262)							color2 = g;
            						}
            					}
HXDLIN( 262)					color = ((int)color | (int)((int)color2 << (int)(int)8));
            				}
HXDLIN( 262)				{
HXLINE( 262)					color = ((int)color & (int)(int)-256);
HXDLIN( 262)					int color3;
HXDLIN( 262)					if ((b > (int)255)) {
HXLINE( 262)						color3 = (int)255;
            					}
            					else {
HXLINE( 262)						if ((b < (int)0)) {
HXLINE( 262)							color3 = (int)0;
            						}
            						else {
HXLINE( 262)							color3 = b;
            						}
            					}
HXDLIN( 262)					color = ((int)color | (int)color3);
            				}
HXDLIN( 262)				{
HXLINE( 262)					color = ((int)color & (int)(int)16777215);
HXDLIN( 262)					int color4;
HXDLIN( 262)					if ((a > (int)255)) {
HXLINE( 262)						color4 = (int)255;
            					}
            					else {
HXLINE( 262)						if ((a < (int)0)) {
HXLINE( 262)							color4 = (int)0;
            						}
            						else {
HXLINE( 262)							color4 = a;
            						}
            					}
HXDLIN( 262)					color = ((int)color | (int)((int)color4 << (int)(int)24));
            				}
HXDLIN( 262)				output[step] = color;
            			}
            		}
HXLINE( 265)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxColor_Impl__obj,gradient,return )

int FlxColor_Impl__obj::multiply(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_274_multiply)
HXDLIN( 274)		Float Red = (((Float)((int)((int)lhs >> (int)(int)16) & (int)(int)255) / (Float)(int)255) * ((Float)((int)((int)rhs >> (int)(int)16) & (int)(int)255) / (Float)(int)255));
HXDLIN( 274)		Float Green = (((Float)((int)((int)lhs >> (int)(int)8) & (int)(int)255) / (Float)(int)255) * ((Float)((int)((int)rhs >> (int)(int)8) & (int)(int)255) / (Float)(int)255));
HXDLIN( 274)		Float Blue = (((Float)((int)lhs & (int)(int)255) / (Float)(int)255) * ((Float)((int)rhs & (int)(int)255) / (Float)(int)255));
HXDLIN( 274)		Float Alpha = (int)1;
HXDLIN( 274)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 274)		{
HXDLIN( 274)			int Value = ::Math_obj::round((Red * (int)255));
HXDLIN( 274)			color = ((int)color & (int)(int)-16711681);
HXDLIN( 274)			int color1;
HXDLIN( 274)			if ((Value > (int)255)) {
HXDLIN( 274)				color1 = (int)255;
            			}
            			else {
HXDLIN( 274)				if ((Value < (int)0)) {
HXDLIN( 274)					color1 = (int)0;
            				}
            				else {
HXDLIN( 274)					color1 = Value;
            				}
            			}
HXDLIN( 274)			color = ((int)color | (int)((int)color1 << (int)(int)16));
            		}
HXDLIN( 274)		{
HXDLIN( 274)			int Value1 = ::Math_obj::round((Green * (int)255));
HXDLIN( 274)			color = ((int)color & (int)(int)-65281);
HXDLIN( 274)			int color2;
HXDLIN( 274)			if ((Value1 > (int)255)) {
HXDLIN( 274)				color2 = (int)255;
            			}
            			else {
HXDLIN( 274)				if ((Value1 < (int)0)) {
HXDLIN( 274)					color2 = (int)0;
            				}
            				else {
HXDLIN( 274)					color2 = Value1;
            				}
            			}
HXDLIN( 274)			color = ((int)color | (int)((int)color2 << (int)(int)8));
            		}
HXDLIN( 274)		{
HXDLIN( 274)			int Value2 = ::Math_obj::round((Blue * (int)255));
HXDLIN( 274)			color = ((int)color & (int)(int)-256);
HXDLIN( 274)			int color3;
HXDLIN( 274)			if ((Value2 > (int)255)) {
HXDLIN( 274)				color3 = (int)255;
            			}
            			else {
HXDLIN( 274)				if ((Value2 < (int)0)) {
HXDLIN( 274)					color3 = (int)0;
            				}
            				else {
HXDLIN( 274)					color3 = Value2;
            				}
            			}
HXDLIN( 274)			color = ((int)color | (int)color3);
            		}
HXDLIN( 274)		{
HXDLIN( 274)			int Value3 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 274)			color = ((int)color & (int)(int)16777215);
HXDLIN( 274)			int color4;
HXDLIN( 274)			if ((Value3 > (int)255)) {
HXDLIN( 274)				color4 = (int)255;
            			}
            			else {
HXDLIN( 274)				if ((Value3 < (int)0)) {
HXDLIN( 274)					color4 = (int)0;
            				}
            				else {
HXDLIN( 274)					color4 = Value3;
            				}
            			}
HXDLIN( 274)			color = ((int)color | (int)((int)color4 << (int)(int)24));
            		}
HXDLIN( 274)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,multiply,return )

int FlxColor_Impl__obj::add(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_283_add)
HXDLIN( 283)		int Red = (((int)((int)lhs >> (int)(int)16) & (int)(int)255) + ((int)((int)rhs >> (int)(int)16) & (int)(int)255));
HXDLIN( 283)		int Green = (((int)((int)lhs >> (int)(int)8) & (int)(int)255) + ((int)((int)rhs >> (int)(int)8) & (int)(int)255));
HXDLIN( 283)		int Blue = (((int)lhs & (int)(int)255) + ((int)rhs & (int)(int)255));
HXDLIN( 283)		int Alpha = (int)255;
HXDLIN( 283)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 283)		{
HXDLIN( 283)			color = ((int)color & (int)(int)-16711681);
HXDLIN( 283)			int color1;
HXDLIN( 283)			if ((Red > (int)255)) {
HXDLIN( 283)				color1 = (int)255;
            			}
            			else {
HXDLIN( 283)				if ((Red < (int)0)) {
HXDLIN( 283)					color1 = (int)0;
            				}
            				else {
HXDLIN( 283)					color1 = Red;
            				}
            			}
HXDLIN( 283)			color = ((int)color | (int)((int)color1 << (int)(int)16));
            		}
HXDLIN( 283)		{
HXDLIN( 283)			color = ((int)color & (int)(int)-65281);
HXDLIN( 283)			int color2;
HXDLIN( 283)			if ((Green > (int)255)) {
HXDLIN( 283)				color2 = (int)255;
            			}
            			else {
HXDLIN( 283)				if ((Green < (int)0)) {
HXDLIN( 283)					color2 = (int)0;
            				}
            				else {
HXDLIN( 283)					color2 = Green;
            				}
            			}
HXDLIN( 283)			color = ((int)color | (int)((int)color2 << (int)(int)8));
            		}
HXDLIN( 283)		{
HXDLIN( 283)			color = ((int)color & (int)(int)-256);
HXDLIN( 283)			int color3;
HXDLIN( 283)			if ((Blue > (int)255)) {
HXDLIN( 283)				color3 = (int)255;
            			}
            			else {
HXDLIN( 283)				if ((Blue < (int)0)) {
HXDLIN( 283)					color3 = (int)0;
            				}
            				else {
HXDLIN( 283)					color3 = Blue;
            				}
            			}
HXDLIN( 283)			color = ((int)color | (int)color3);
            		}
HXDLIN( 283)		{
HXDLIN( 283)			color = ((int)color & (int)(int)16777215);
HXDLIN( 283)			int color4;
HXDLIN( 283)			if ((Alpha > (int)255)) {
HXDLIN( 283)				color4 = (int)255;
            			}
            			else {
HXDLIN( 283)				if ((Alpha < (int)0)) {
HXDLIN( 283)					color4 = (int)0;
            				}
            				else {
HXDLIN( 283)					color4 = Alpha;
            				}
            			}
HXDLIN( 283)			color = ((int)color | (int)((int)color4 << (int)(int)24));
            		}
HXDLIN( 283)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,add,return )

int FlxColor_Impl__obj::subtract(int lhs,int rhs){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_292_subtract)
HXDLIN( 292)		int Red = (((int)((int)lhs >> (int)(int)16) & (int)(int)255) - ((int)((int)rhs >> (int)(int)16) & (int)(int)255));
HXDLIN( 292)		int Green = (((int)((int)lhs >> (int)(int)8) & (int)(int)255) - ((int)((int)rhs >> (int)(int)8) & (int)(int)255));
HXDLIN( 292)		int Blue = (((int)lhs & (int)(int)255) - ((int)rhs & (int)(int)255));
HXDLIN( 292)		int Alpha = (int)255;
HXDLIN( 292)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 292)		{
HXDLIN( 292)			color = ((int)color & (int)(int)-16711681);
HXDLIN( 292)			int color1;
HXDLIN( 292)			if ((Red > (int)255)) {
HXDLIN( 292)				color1 = (int)255;
            			}
            			else {
HXDLIN( 292)				if ((Red < (int)0)) {
HXDLIN( 292)					color1 = (int)0;
            				}
            				else {
HXDLIN( 292)					color1 = Red;
            				}
            			}
HXDLIN( 292)			color = ((int)color | (int)((int)color1 << (int)(int)16));
            		}
HXDLIN( 292)		{
HXDLIN( 292)			color = ((int)color & (int)(int)-65281);
HXDLIN( 292)			int color2;
HXDLIN( 292)			if ((Green > (int)255)) {
HXDLIN( 292)				color2 = (int)255;
            			}
            			else {
HXDLIN( 292)				if ((Green < (int)0)) {
HXDLIN( 292)					color2 = (int)0;
            				}
            				else {
HXDLIN( 292)					color2 = Green;
            				}
            			}
HXDLIN( 292)			color = ((int)color | (int)((int)color2 << (int)(int)8));
            		}
HXDLIN( 292)		{
HXDLIN( 292)			color = ((int)color & (int)(int)-256);
HXDLIN( 292)			int color3;
HXDLIN( 292)			if ((Blue > (int)255)) {
HXDLIN( 292)				color3 = (int)255;
            			}
            			else {
HXDLIN( 292)				if ((Blue < (int)0)) {
HXDLIN( 292)					color3 = (int)0;
            				}
            				else {
HXDLIN( 292)					color3 = Blue;
            				}
            			}
HXDLIN( 292)			color = ((int)color | (int)color3);
            		}
HXDLIN( 292)		{
HXDLIN( 292)			color = ((int)color & (int)(int)16777215);
HXDLIN( 292)			int color4;
HXDLIN( 292)			if ((Alpha > (int)255)) {
HXDLIN( 292)				color4 = (int)255;
            			}
            			else {
HXDLIN( 292)				if ((Alpha < (int)0)) {
HXDLIN( 292)					color4 = (int)0;
            				}
            				else {
HXDLIN( 292)					color4 = Alpha;
            				}
            			}
HXDLIN( 292)			color = ((int)color | (int)((int)color4 << (int)(int)24));
            		}
HXDLIN( 292)		return color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,subtract,return )

int FlxColor_Impl__obj::getComplementHarmony(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_303_getComplementHarmony)
HXDLIN( 303)		int _hx_tmp = ::flixel::math::FlxMath_obj::wrap((::Std_obj::_hx_int(::flixel::util::_FlxColor::FlxColor_Impl__obj::get_hue(this1)) + (int)180),(int)0,(int)350);
HXDLIN( 303)		Float _hx_tmp1 = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 303)		Float _hx_tmp2 = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 303)		Float _hx_tmp3 = (_hx_tmp2 - ::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 303)		Float _hx_tmp4 = ((Float)_hx_tmp3 / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 303)		return ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromHSB(_hx_tmp,_hx_tmp1,_hx_tmp4,((Float)((int)((int)this1 >> (int)(int)24) & (int)(int)255) / (Float)(int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,getComplementHarmony,return )

 ::Dynamic FlxColor_Impl__obj::getAnalogousHarmony(int this1,hx::Null< int >  __o_Threshold){
int Threshold = __o_Threshold.Default(30);
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_314_getAnalogousHarmony)
HXLINE( 315)		int warmer = ::flixel::math::FlxMath_obj::wrap((::Std_obj::_hx_int(::flixel::util::_FlxColor::FlxColor_Impl__obj::get_hue(this1)) - Threshold),(int)0,(int)350);
HXDLIN( 315)		Float warmer1 = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 315)		Float warmer2 = (warmer1 - ::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 315)		Float warmer3 = ((Float)warmer2 / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 315)		Float warmer4 = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 315)		int warmer5 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromHSB(warmer,warmer3,warmer4,((Float)((int)((int)this1 >> (int)(int)24) & (int)(int)255) / (Float)(int)255));
HXLINE( 316)		int colder = ::flixel::math::FlxMath_obj::wrap((::Std_obj::_hx_int(::flixel::util::_FlxColor::FlxColor_Impl__obj::get_hue(this1)) + Threshold),(int)0,(int)350);
HXDLIN( 316)		Float colder1 = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 316)		Float colder2 = (colder1 - ::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 316)		Float colder3 = ((Float)colder2 / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 316)		Float colder4 = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 316)		int colder5 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromHSB(colder,colder3,colder4,((Float)((int)((int)this1 >> (int)(int)24) & (int)(int)255) / (Float)(int)255));
HXLINE( 318)		return  ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("warmer",f2,95,03,ba),warmer5)
            			->setFixed(1,HX_("colder",91,61,7e,c6),colder5)
            			->setFixed(2,HX_("original",51,34,e8,e0),this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,getAnalogousHarmony,return )

 ::Dynamic FlxColor_Impl__obj::getSplitComplementHarmony(int this1,hx::Null< int >  __o_Threshold){
int Threshold = __o_Threshold.Default(30);
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_329_getSplitComplementHarmony)
HXLINE( 330)		int oppositeHue = ::flixel::math::FlxMath_obj::wrap((::Std_obj::_hx_int(::flixel::util::_FlxColor::FlxColor_Impl__obj::get_hue(this1)) + (int)180),(int)0,(int)350);
HXLINE( 331)		int warmer = ::flixel::math::FlxMath_obj::wrap((oppositeHue - Threshold),(int)0,(int)350);
HXDLIN( 331)		Float warmer1 = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 331)		Float warmer2 = (warmer1 - ::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 331)		Float warmer3 = ((Float)warmer2 / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 331)		Float warmer4 = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 331)		int warmer5 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromHSB(warmer,warmer3,warmer4,((Float)((int)((int)this1 >> (int)(int)24) & (int)(int)255) / (Float)(int)255));
HXLINE( 332)		int colder = ::flixel::math::FlxMath_obj::wrap((oppositeHue + Threshold),(int)0,(int)350);
HXDLIN( 332)		Float colder1 = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 332)		Float colder2 = (colder1 - ::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 332)		Float colder3 = ((Float)colder2 / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 332)		Float colder4 = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 332)		int colder5 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromHSB(colder,colder3,colder4,((Float)((int)((int)this1 >> (int)(int)24) & (int)(int)255) / (Float)(int)255));
HXLINE( 334)		return  ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("warmer",f2,95,03,ba),warmer5)
            			->setFixed(1,HX_("colder",91,61,7e,c6),colder5)
            			->setFixed(2,HX_("original",51,34,e8,e0),this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,getSplitComplementHarmony,return )

 ::Dynamic FlxColor_Impl__obj::getTriadicHarmony(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_344_getTriadicHarmony)
HXLINE( 345)		int triadic1 = ::flixel::math::FlxMath_obj::wrap((::Std_obj::_hx_int(::flixel::util::_FlxColor::FlxColor_Impl__obj::get_hue(this1)) + (int)120),(int)0,(int)359);
HXDLIN( 345)		Float triadic11 = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 345)		Float triadic12 = (triadic11 - ::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 345)		Float triadic13 = ((Float)triadic12 / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 345)		Float triadic14 = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 345)		int triadic15 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromHSB(triadic1,triadic13,triadic14,((Float)((int)((int)this1 >> (int)(int)24) & (int)(int)255) / (Float)(int)255));
HXLINE( 346)		int triadic2 = ::flixel::math::FlxMath_obj::wrap((::Std_obj::_hx_int(::flixel::util::_FlxColor::FlxColor_Impl__obj::get_hue(triadic15)) + (int)120),(int)0,(int)359);
HXDLIN( 346)		Float triadic21 = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 346)		Float triadic22 = (triadic21 - ::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 346)		Float triadic23 = ((Float)triadic22 / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 346)		Float triadic24 = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 346)		int triadic25 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromHSB(triadic2,triadic23,triadic24,((Float)((int)((int)this1 >> (int)(int)24) & (int)(int)255) / (Float)(int)255));
HXLINE( 348)		return  ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("color1",6e,c5,86,c6),this1)
            			->setFixed(1,HX_("color2",6f,c5,86,c6),triadic15)
            			->setFixed(2,HX_("color3",70,c5,86,c6),triadic25));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,getTriadicHarmony,return )

int FlxColor_Impl__obj::to24Bit(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_358_to24Bit)
HXDLIN( 358)		return ((int)this1 & (int)(int)16777215);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,to24Bit,return )

::String FlxColor_Impl__obj::toHexString(int this1,hx::Null< bool >  __o_Alpha,hx::Null< bool >  __o_Prefix){
bool Alpha = __o_Alpha.Default(true);
bool Prefix = __o_Prefix.Default(true);
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_370_toHexString)
HXDLIN( 370)		::String _hx_tmp;
HXDLIN( 370)		if (Prefix) {
HXDLIN( 370)			_hx_tmp = HX_("0x",48,2a,00,00);
            		}
            		else {
HXDLIN( 370)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN( 370)		::String _hx_tmp1;
HXDLIN( 370)		if (Alpha) {
HXDLIN( 370)			_hx_tmp1 = ::StringTools_obj::hex(((int)((int)this1 >> (int)(int)24) & (int)(int)255),(int)2);
            		}
            		else {
HXDLIN( 370)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN( 370)		::String _hx_tmp2 = (_hx_tmp + _hx_tmp1);
HXDLIN( 370)		::String _hx_tmp3 = (_hx_tmp2 + ::StringTools_obj::hex(((int)((int)this1 >> (int)(int)16) & (int)(int)255),(int)2));
HXDLIN( 370)		::String _hx_tmp4 = (_hx_tmp3 + ::StringTools_obj::hex(((int)((int)this1 >> (int)(int)8) & (int)(int)255),(int)2));
HXDLIN( 370)		return (_hx_tmp4 + ::StringTools_obj::hex(((int)this1 & (int)(int)255),(int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxColor_Impl__obj,toHexString,return )

::String FlxColor_Impl__obj::toWebString(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_381_toWebString)
HXDLIN( 381)		::String _hx_tmp = (HX_("",00,00,00,00) + ::StringTools_obj::hex(((int)((int)this1 >> (int)(int)16) & (int)(int)255),(int)2));
HXDLIN( 381)		::String _hx_tmp1 = (_hx_tmp + ::StringTools_obj::hex(((int)((int)this1 >> (int)(int)8) & (int)(int)255),(int)2));
HXDLIN( 381)		return (HX_("#",23,00,00,00) + (_hx_tmp1 + ::StringTools_obj::hex(((int)this1 & (int)(int)255),(int)2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,toWebString,return )

::String FlxColor_Impl__obj::getColorInfo(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_390_getColorInfo)
HXLINE( 392)		::String result;
HXDLIN( 392)		result = HX_("0x",48,2a,00,00);
HXDLIN( 392)		::String result1;
HXDLIN( 392)		result1 = ::StringTools_obj::hex(((int)((int)this1 >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 392)		::String result2 = (result + result1);
HXDLIN( 392)		::String result3 = (result2 + ::StringTools_obj::hex(((int)((int)this1 >> (int)(int)16) & (int)(int)255),(int)2));
HXDLIN( 392)		::String result4 = (result3 + ::StringTools_obj::hex(((int)((int)this1 >> (int)(int)8) & (int)(int)255),(int)2));
HXDLIN( 392)		::String result5 = ((result4 + ::StringTools_obj::hex(((int)this1 & (int)(int)255),(int)2)) + HX_("\n",0a,00,00,00));
HXLINE( 394)		result5 = (result5 + ((((((((HX_("Alpha: ",64,15,67,7f) + ((int)((int)this1 >> (int)(int)24) & (int)(int)255)) + HX_(" Red: ",f7,bd,55,45)) + ((int)((int)this1 >> (int)(int)16) & (int)(int)255)) + HX_(" Green: ",e9,23,00,ae)) + ((int)((int)this1 >> (int)(int)8) & (int)(int)255)) + HX_(" Blue: ",00,1c,26,13)) + ((int)this1 & (int)(int)255)) + HX_("\n",0a,00,00,00)));
HXLINE( 396)		::String result6 = ((HX_("Hue: ",3e,91,7c,c2) + ::flixel::math::FlxMath_obj::roundDecimal(::flixel::util::_FlxColor::FlxColor_Impl__obj::get_hue(this1),(int)2)) + HX_(" Saturation: ",38,1b,be,c1));
HXDLIN( 396)		Float result7 = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 396)		Float result8 = (result7 - ::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 396)		::String result9 = ((result6 + ::flixel::math::FlxMath_obj::roundDecimal(((Float)result8 / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))),(int)2)) + HX_(" Brightness: ",f7,92,6f,4f));
HXDLIN( 396)		::String result10 = ((result9 + ::flixel::math::FlxMath_obj::roundDecimal(::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))),(int)2)) + HX_(" Lightness: ",13,68,ef,ba));
HXLINE( 397)		Float result11 = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXLINE( 396)		result5 = (result5 + (result10 + ::flixel::math::FlxMath_obj::roundDecimal(((Float)(result11 + ::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))) / (Float)(int)2),(int)2)));
HXLINE( 399)		return result5;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,getColorInfo,return )

int FlxColor_Impl__obj::getDarkened(int this1,hx::Null< Float >  __o_Factor){
Float Factor = __o_Factor.Default(((Float)0.2));
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_409_getDarkened)
HXLINE( 410)		Float lowerBound;
HXDLIN( 410)		if ((Factor < (int)0)) {
HXLINE( 410)			lowerBound = (int)0;
            		}
            		else {
HXLINE( 410)			lowerBound = Factor;
            		}
HXDLIN( 410)		 ::Dynamic Factor1;
HXDLIN( 410)		if ((lowerBound > (int)1)) {
HXLINE( 410)			Factor1 = (int)1;
            		}
            		else {
HXLINE( 410)			Factor1 = lowerBound;
            		}
HXDLIN( 410)		Factor = Factor1;
HXLINE( 411)		int output = this1;
HXLINE( 412)		{
HXLINE( 412)			Float Value = ::Math_obj::max(((Float)((int)((int)output >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)output >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)output & (int)(int)255) / (Float)(int)255)));
HXDLIN( 412)			Float Value1 = ((Float)(Value + ::Math_obj::min(((Float)((int)((int)output >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)output >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)output & (int)(int)255) / (Float)(int)255)))) / (Float)(int)2);
HXDLIN( 412)			Float Value2 = (Value1 * ((int)1 - Factor));
HXDLIN( 412)			{
HXLINE( 412)				Float Hue = ::flixel::util::_FlxColor::FlxColor_Impl__obj::get_hue(output);
HXDLIN( 412)				Float Saturation = ::Math_obj::max(((Float)((int)((int)output >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)output >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)output & (int)(int)255) / (Float)(int)255)));
HXDLIN( 412)				Float Saturation1 = (Saturation - ::Math_obj::min(((Float)((int)((int)output >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)output >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)output & (int)(int)255) / (Float)(int)255))));
HXDLIN( 412)				Float Alpha = ((Float)((int)((int)output >> (int)(int)24) & (int)(int)255) / (Float)(int)255);
HXDLIN( 412)				Float chroma = (((int)1 - ::Math_obj::abs((((int)2 * Value2) - (int)1))) * ((Float)Saturation1 / (Float)::Math_obj::max(((Float)((int)((int)output >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)output >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)output & (int)(int)255) / (Float)(int)255)))));
HXDLIN( 412)				Float match = (Value2 - ((Float)chroma / (Float)(int)2));
HXDLIN( 412)				{
HXLINE( 412)					Float Hue1 = Hue;
HXDLIN( 412)					Float Chroma = chroma;
HXDLIN( 412)					Hue1 = hx::Mod(Hue1,(int)360);
HXDLIN( 412)					Float hueD = ((Float)Hue1 / (Float)(int)60);
HXDLIN( 412)					Float mid = ((Chroma * ((int)1 - ::Math_obj::abs((hx::Mod(hueD,(int)2) - (int)1)))) + match);
HXDLIN( 412)					Chroma = (Chroma + match);
HXDLIN( 412)					{
HXLINE( 412)						int _g = ::Std_obj::_hx_int(hueD);
HXDLIN( 412)						switch((int)(_g)){
            							case (int)0: {
HXLINE( 412)								{
HXLINE( 412)									int Value3 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)-16711681);
HXDLIN( 412)									int output1;
HXDLIN( 412)									if ((Value3 > (int)255)) {
HXLINE( 412)										output1 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value3 < (int)0)) {
HXLINE( 412)											output1 = (int)0;
            										}
            										else {
HXLINE( 412)											output1 = Value3;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)((int)output1 << (int)(int)16));
            								}
HXDLIN( 412)								{
HXLINE( 412)									int Value4 = ::Math_obj::round((mid * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)-65281);
HXDLIN( 412)									int output2;
HXDLIN( 412)									if ((Value4 > (int)255)) {
HXLINE( 412)										output2 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value4 < (int)0)) {
HXLINE( 412)											output2 = (int)0;
            										}
            										else {
HXLINE( 412)											output2 = Value4;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)((int)output2 << (int)(int)8));
            								}
HXDLIN( 412)								{
HXLINE( 412)									int Value5 = ::Math_obj::round((match * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)-256);
HXDLIN( 412)									int output3;
HXDLIN( 412)									if ((Value5 > (int)255)) {
HXLINE( 412)										output3 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value5 < (int)0)) {
HXLINE( 412)											output3 = (int)0;
            										}
            										else {
HXLINE( 412)											output3 = Value5;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)output3);
            								}
HXDLIN( 412)								{
HXLINE( 412)									int Value6 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)16777215);
HXDLIN( 412)									int output4;
HXDLIN( 412)									if ((Value6 > (int)255)) {
HXLINE( 412)										output4 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value6 < (int)0)) {
HXLINE( 412)											output4 = (int)0;
            										}
            										else {
HXLINE( 412)											output4 = Value6;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)((int)output4 << (int)(int)24));
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 412)								{
HXLINE( 412)									int Value7 = ::Math_obj::round((mid * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)-16711681);
HXDLIN( 412)									int output5;
HXDLIN( 412)									if ((Value7 > (int)255)) {
HXLINE( 412)										output5 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value7 < (int)0)) {
HXLINE( 412)											output5 = (int)0;
            										}
            										else {
HXLINE( 412)											output5 = Value7;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)((int)output5 << (int)(int)16));
            								}
HXDLIN( 412)								{
HXLINE( 412)									int Value8 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)-65281);
HXDLIN( 412)									int output6;
HXDLIN( 412)									if ((Value8 > (int)255)) {
HXLINE( 412)										output6 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value8 < (int)0)) {
HXLINE( 412)											output6 = (int)0;
            										}
            										else {
HXLINE( 412)											output6 = Value8;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)((int)output6 << (int)(int)8));
            								}
HXDLIN( 412)								{
HXLINE( 412)									int Value9 = ::Math_obj::round((match * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)-256);
HXDLIN( 412)									int output7;
HXDLIN( 412)									if ((Value9 > (int)255)) {
HXLINE( 412)										output7 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value9 < (int)0)) {
HXLINE( 412)											output7 = (int)0;
            										}
            										else {
HXLINE( 412)											output7 = Value9;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)output7);
            								}
HXDLIN( 412)								{
HXLINE( 412)									int Value10 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)16777215);
HXDLIN( 412)									int output8;
HXDLIN( 412)									if ((Value10 > (int)255)) {
HXLINE( 412)										output8 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value10 < (int)0)) {
HXLINE( 412)											output8 = (int)0;
            										}
            										else {
HXLINE( 412)											output8 = Value10;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)((int)output8 << (int)(int)24));
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 412)								{
HXLINE( 412)									int Value11 = ::Math_obj::round((match * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)-16711681);
HXDLIN( 412)									int output9;
HXDLIN( 412)									if ((Value11 > (int)255)) {
HXLINE( 412)										output9 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value11 < (int)0)) {
HXLINE( 412)											output9 = (int)0;
            										}
            										else {
HXLINE( 412)											output9 = Value11;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)((int)output9 << (int)(int)16));
            								}
HXDLIN( 412)								{
HXLINE( 412)									int Value12 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)-65281);
HXDLIN( 412)									int output10;
HXDLIN( 412)									if ((Value12 > (int)255)) {
HXLINE( 412)										output10 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value12 < (int)0)) {
HXLINE( 412)											output10 = (int)0;
            										}
            										else {
HXLINE( 412)											output10 = Value12;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)((int)output10 << (int)(int)8));
            								}
HXDLIN( 412)								{
HXLINE( 412)									int Value13 = ::Math_obj::round((mid * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)-256);
HXDLIN( 412)									int output11;
HXDLIN( 412)									if ((Value13 > (int)255)) {
HXLINE( 412)										output11 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value13 < (int)0)) {
HXLINE( 412)											output11 = (int)0;
            										}
            										else {
HXLINE( 412)											output11 = Value13;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)output11);
            								}
HXDLIN( 412)								{
HXLINE( 412)									int Value14 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)16777215);
HXDLIN( 412)									int output12;
HXDLIN( 412)									if ((Value14 > (int)255)) {
HXLINE( 412)										output12 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value14 < (int)0)) {
HXLINE( 412)											output12 = (int)0;
            										}
            										else {
HXLINE( 412)											output12 = Value14;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)((int)output12 << (int)(int)24));
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 412)								{
HXLINE( 412)									int Value15 = ::Math_obj::round((match * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)-16711681);
HXDLIN( 412)									int output13;
HXDLIN( 412)									if ((Value15 > (int)255)) {
HXLINE( 412)										output13 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value15 < (int)0)) {
HXLINE( 412)											output13 = (int)0;
            										}
            										else {
HXLINE( 412)											output13 = Value15;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)((int)output13 << (int)(int)16));
            								}
HXDLIN( 412)								{
HXLINE( 412)									int Value16 = ::Math_obj::round((mid * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)-65281);
HXDLIN( 412)									int output14;
HXDLIN( 412)									if ((Value16 > (int)255)) {
HXLINE( 412)										output14 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value16 < (int)0)) {
HXLINE( 412)											output14 = (int)0;
            										}
            										else {
HXLINE( 412)											output14 = Value16;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)((int)output14 << (int)(int)8));
            								}
HXDLIN( 412)								{
HXLINE( 412)									int Value17 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)-256);
HXDLIN( 412)									int output15;
HXDLIN( 412)									if ((Value17 > (int)255)) {
HXLINE( 412)										output15 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value17 < (int)0)) {
HXLINE( 412)											output15 = (int)0;
            										}
            										else {
HXLINE( 412)											output15 = Value17;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)output15);
            								}
HXDLIN( 412)								{
HXLINE( 412)									int Value18 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)16777215);
HXDLIN( 412)									int output16;
HXDLIN( 412)									if ((Value18 > (int)255)) {
HXLINE( 412)										output16 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value18 < (int)0)) {
HXLINE( 412)											output16 = (int)0;
            										}
            										else {
HXLINE( 412)											output16 = Value18;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)((int)output16 << (int)(int)24));
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 412)								{
HXLINE( 412)									int Value19 = ::Math_obj::round((mid * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)-16711681);
HXDLIN( 412)									int output17;
HXDLIN( 412)									if ((Value19 > (int)255)) {
HXLINE( 412)										output17 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value19 < (int)0)) {
HXLINE( 412)											output17 = (int)0;
            										}
            										else {
HXLINE( 412)											output17 = Value19;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)((int)output17 << (int)(int)16));
            								}
HXDLIN( 412)								{
HXLINE( 412)									int Value20 = ::Math_obj::round((match * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)-65281);
HXDLIN( 412)									int output18;
HXDLIN( 412)									if ((Value20 > (int)255)) {
HXLINE( 412)										output18 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value20 < (int)0)) {
HXLINE( 412)											output18 = (int)0;
            										}
            										else {
HXLINE( 412)											output18 = Value20;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)((int)output18 << (int)(int)8));
            								}
HXDLIN( 412)								{
HXLINE( 412)									int Value21 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)-256);
HXDLIN( 412)									int output19;
HXDLIN( 412)									if ((Value21 > (int)255)) {
HXLINE( 412)										output19 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value21 < (int)0)) {
HXLINE( 412)											output19 = (int)0;
            										}
            										else {
HXLINE( 412)											output19 = Value21;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)output19);
            								}
HXDLIN( 412)								{
HXLINE( 412)									int Value22 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)16777215);
HXDLIN( 412)									int output20;
HXDLIN( 412)									if ((Value22 > (int)255)) {
HXLINE( 412)										output20 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value22 < (int)0)) {
HXLINE( 412)											output20 = (int)0;
            										}
            										else {
HXLINE( 412)											output20 = Value22;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)((int)output20 << (int)(int)24));
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 412)								{
HXLINE( 412)									int Value23 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)-16711681);
HXDLIN( 412)									int output21;
HXDLIN( 412)									if ((Value23 > (int)255)) {
HXLINE( 412)										output21 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value23 < (int)0)) {
HXLINE( 412)											output21 = (int)0;
            										}
            										else {
HXLINE( 412)											output21 = Value23;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)((int)output21 << (int)(int)16));
            								}
HXDLIN( 412)								{
HXLINE( 412)									int Value24 = ::Math_obj::round((match * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)-65281);
HXDLIN( 412)									int output22;
HXDLIN( 412)									if ((Value24 > (int)255)) {
HXLINE( 412)										output22 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value24 < (int)0)) {
HXLINE( 412)											output22 = (int)0;
            										}
            										else {
HXLINE( 412)											output22 = Value24;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)((int)output22 << (int)(int)8));
            								}
HXDLIN( 412)								{
HXLINE( 412)									int Value25 = ::Math_obj::round((mid * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)-256);
HXDLIN( 412)									int output23;
HXDLIN( 412)									if ((Value25 > (int)255)) {
HXLINE( 412)										output23 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value25 < (int)0)) {
HXLINE( 412)											output23 = (int)0;
            										}
            										else {
HXLINE( 412)											output23 = Value25;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)output23);
            								}
HXDLIN( 412)								{
HXLINE( 412)									int Value26 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 412)									output = ((int)output & (int)(int)16777215);
HXDLIN( 412)									int output24;
HXDLIN( 412)									if ((Value26 > (int)255)) {
HXLINE( 412)										output24 = (int)255;
            									}
            									else {
HXLINE( 412)										if ((Value26 < (int)0)) {
HXLINE( 412)											output24 = (int)0;
            										}
            										else {
HXLINE( 412)											output24 = Value26;
            										}
            									}
HXDLIN( 412)									output = ((int)output | (int)((int)output24 << (int)(int)24));
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE( 413)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,getDarkened,return )

int FlxColor_Impl__obj::getLightened(int this1,hx::Null< Float >  __o_Factor){
Float Factor = __o_Factor.Default(((Float)0.2));
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_423_getLightened)
HXLINE( 424)		Float lowerBound;
HXDLIN( 424)		if ((Factor < (int)0)) {
HXLINE( 424)			lowerBound = (int)0;
            		}
            		else {
HXLINE( 424)			lowerBound = Factor;
            		}
HXDLIN( 424)		 ::Dynamic Factor1;
HXDLIN( 424)		if ((lowerBound > (int)1)) {
HXLINE( 424)			Factor1 = (int)1;
            		}
            		else {
HXLINE( 424)			Factor1 = lowerBound;
            		}
HXDLIN( 424)		Factor = Factor1;
HXLINE( 425)		int output = this1;
HXLINE( 426)		{
HXLINE( 426)			Float Value = ::Math_obj::max(((Float)((int)((int)output >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)output >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)output & (int)(int)255) / (Float)(int)255)));
HXDLIN( 426)			Float Value1 = ((Float)(Value + ::Math_obj::min(((Float)((int)((int)output >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)output >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)output & (int)(int)255) / (Float)(int)255)))) / (Float)(int)2);
HXDLIN( 426)			Float Value2 = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 426)			Float Value3 = (Value1 + (((int)1 - ((Float)(Value2 + ::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))) / (Float)(int)2)) * Factor));
HXDLIN( 426)			{
HXLINE( 426)				Float Hue = ::flixel::util::_FlxColor::FlxColor_Impl__obj::get_hue(output);
HXDLIN( 426)				Float Saturation = ::Math_obj::max(((Float)((int)((int)output >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)output >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)output & (int)(int)255) / (Float)(int)255)));
HXDLIN( 426)				Float Saturation1 = (Saturation - ::Math_obj::min(((Float)((int)((int)output >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)output >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)output & (int)(int)255) / (Float)(int)255))));
HXDLIN( 426)				Float Alpha = ((Float)((int)((int)output >> (int)(int)24) & (int)(int)255) / (Float)(int)255);
HXDLIN( 426)				Float chroma = (((int)1 - ::Math_obj::abs((((int)2 * Value3) - (int)1))) * ((Float)Saturation1 / (Float)::Math_obj::max(((Float)((int)((int)output >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)output >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)output & (int)(int)255) / (Float)(int)255)))));
HXDLIN( 426)				Float match = (Value3 - ((Float)chroma / (Float)(int)2));
HXDLIN( 426)				{
HXLINE( 426)					Float Hue1 = Hue;
HXDLIN( 426)					Float Chroma = chroma;
HXDLIN( 426)					Hue1 = hx::Mod(Hue1,(int)360);
HXDLIN( 426)					Float hueD = ((Float)Hue1 / (Float)(int)60);
HXDLIN( 426)					Float mid = ((Chroma * ((int)1 - ::Math_obj::abs((hx::Mod(hueD,(int)2) - (int)1)))) + match);
HXDLIN( 426)					Chroma = (Chroma + match);
HXDLIN( 426)					{
HXLINE( 426)						int _g = ::Std_obj::_hx_int(hueD);
HXDLIN( 426)						switch((int)(_g)){
            							case (int)0: {
HXLINE( 426)								{
HXLINE( 426)									int Value4 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)-16711681);
HXDLIN( 426)									int output1;
HXDLIN( 426)									if ((Value4 > (int)255)) {
HXLINE( 426)										output1 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value4 < (int)0)) {
HXLINE( 426)											output1 = (int)0;
            										}
            										else {
HXLINE( 426)											output1 = Value4;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)((int)output1 << (int)(int)16));
            								}
HXDLIN( 426)								{
HXLINE( 426)									int Value5 = ::Math_obj::round((mid * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)-65281);
HXDLIN( 426)									int output2;
HXDLIN( 426)									if ((Value5 > (int)255)) {
HXLINE( 426)										output2 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value5 < (int)0)) {
HXLINE( 426)											output2 = (int)0;
            										}
            										else {
HXLINE( 426)											output2 = Value5;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)((int)output2 << (int)(int)8));
            								}
HXDLIN( 426)								{
HXLINE( 426)									int Value6 = ::Math_obj::round((match * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)-256);
HXDLIN( 426)									int output3;
HXDLIN( 426)									if ((Value6 > (int)255)) {
HXLINE( 426)										output3 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value6 < (int)0)) {
HXLINE( 426)											output3 = (int)0;
            										}
            										else {
HXLINE( 426)											output3 = Value6;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)output3);
            								}
HXDLIN( 426)								{
HXLINE( 426)									int Value7 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)16777215);
HXDLIN( 426)									int output4;
HXDLIN( 426)									if ((Value7 > (int)255)) {
HXLINE( 426)										output4 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value7 < (int)0)) {
HXLINE( 426)											output4 = (int)0;
            										}
            										else {
HXLINE( 426)											output4 = Value7;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)((int)output4 << (int)(int)24));
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 426)								{
HXLINE( 426)									int Value8 = ::Math_obj::round((mid * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)-16711681);
HXDLIN( 426)									int output5;
HXDLIN( 426)									if ((Value8 > (int)255)) {
HXLINE( 426)										output5 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value8 < (int)0)) {
HXLINE( 426)											output5 = (int)0;
            										}
            										else {
HXLINE( 426)											output5 = Value8;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)((int)output5 << (int)(int)16));
            								}
HXDLIN( 426)								{
HXLINE( 426)									int Value9 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)-65281);
HXDLIN( 426)									int output6;
HXDLIN( 426)									if ((Value9 > (int)255)) {
HXLINE( 426)										output6 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value9 < (int)0)) {
HXLINE( 426)											output6 = (int)0;
            										}
            										else {
HXLINE( 426)											output6 = Value9;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)((int)output6 << (int)(int)8));
            								}
HXDLIN( 426)								{
HXLINE( 426)									int Value10 = ::Math_obj::round((match * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)-256);
HXDLIN( 426)									int output7;
HXDLIN( 426)									if ((Value10 > (int)255)) {
HXLINE( 426)										output7 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value10 < (int)0)) {
HXLINE( 426)											output7 = (int)0;
            										}
            										else {
HXLINE( 426)											output7 = Value10;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)output7);
            								}
HXDLIN( 426)								{
HXLINE( 426)									int Value11 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)16777215);
HXDLIN( 426)									int output8;
HXDLIN( 426)									if ((Value11 > (int)255)) {
HXLINE( 426)										output8 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value11 < (int)0)) {
HXLINE( 426)											output8 = (int)0;
            										}
            										else {
HXLINE( 426)											output8 = Value11;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)((int)output8 << (int)(int)24));
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 426)								{
HXLINE( 426)									int Value12 = ::Math_obj::round((match * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)-16711681);
HXDLIN( 426)									int output9;
HXDLIN( 426)									if ((Value12 > (int)255)) {
HXLINE( 426)										output9 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value12 < (int)0)) {
HXLINE( 426)											output9 = (int)0;
            										}
            										else {
HXLINE( 426)											output9 = Value12;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)((int)output9 << (int)(int)16));
            								}
HXDLIN( 426)								{
HXLINE( 426)									int Value13 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)-65281);
HXDLIN( 426)									int output10;
HXDLIN( 426)									if ((Value13 > (int)255)) {
HXLINE( 426)										output10 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value13 < (int)0)) {
HXLINE( 426)											output10 = (int)0;
            										}
            										else {
HXLINE( 426)											output10 = Value13;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)((int)output10 << (int)(int)8));
            								}
HXDLIN( 426)								{
HXLINE( 426)									int Value14 = ::Math_obj::round((mid * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)-256);
HXDLIN( 426)									int output11;
HXDLIN( 426)									if ((Value14 > (int)255)) {
HXLINE( 426)										output11 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value14 < (int)0)) {
HXLINE( 426)											output11 = (int)0;
            										}
            										else {
HXLINE( 426)											output11 = Value14;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)output11);
            								}
HXDLIN( 426)								{
HXLINE( 426)									int Value15 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)16777215);
HXDLIN( 426)									int output12;
HXDLIN( 426)									if ((Value15 > (int)255)) {
HXLINE( 426)										output12 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value15 < (int)0)) {
HXLINE( 426)											output12 = (int)0;
            										}
            										else {
HXLINE( 426)											output12 = Value15;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)((int)output12 << (int)(int)24));
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 426)								{
HXLINE( 426)									int Value16 = ::Math_obj::round((match * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)-16711681);
HXDLIN( 426)									int output13;
HXDLIN( 426)									if ((Value16 > (int)255)) {
HXLINE( 426)										output13 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value16 < (int)0)) {
HXLINE( 426)											output13 = (int)0;
            										}
            										else {
HXLINE( 426)											output13 = Value16;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)((int)output13 << (int)(int)16));
            								}
HXDLIN( 426)								{
HXLINE( 426)									int Value17 = ::Math_obj::round((mid * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)-65281);
HXDLIN( 426)									int output14;
HXDLIN( 426)									if ((Value17 > (int)255)) {
HXLINE( 426)										output14 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value17 < (int)0)) {
HXLINE( 426)											output14 = (int)0;
            										}
            										else {
HXLINE( 426)											output14 = Value17;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)((int)output14 << (int)(int)8));
            								}
HXDLIN( 426)								{
HXLINE( 426)									int Value18 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)-256);
HXDLIN( 426)									int output15;
HXDLIN( 426)									if ((Value18 > (int)255)) {
HXLINE( 426)										output15 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value18 < (int)0)) {
HXLINE( 426)											output15 = (int)0;
            										}
            										else {
HXLINE( 426)											output15 = Value18;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)output15);
            								}
HXDLIN( 426)								{
HXLINE( 426)									int Value19 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)16777215);
HXDLIN( 426)									int output16;
HXDLIN( 426)									if ((Value19 > (int)255)) {
HXLINE( 426)										output16 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value19 < (int)0)) {
HXLINE( 426)											output16 = (int)0;
            										}
            										else {
HXLINE( 426)											output16 = Value19;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)((int)output16 << (int)(int)24));
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 426)								{
HXLINE( 426)									int Value20 = ::Math_obj::round((mid * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)-16711681);
HXDLIN( 426)									int output17;
HXDLIN( 426)									if ((Value20 > (int)255)) {
HXLINE( 426)										output17 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value20 < (int)0)) {
HXLINE( 426)											output17 = (int)0;
            										}
            										else {
HXLINE( 426)											output17 = Value20;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)((int)output17 << (int)(int)16));
            								}
HXDLIN( 426)								{
HXLINE( 426)									int Value21 = ::Math_obj::round((match * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)-65281);
HXDLIN( 426)									int output18;
HXDLIN( 426)									if ((Value21 > (int)255)) {
HXLINE( 426)										output18 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value21 < (int)0)) {
HXLINE( 426)											output18 = (int)0;
            										}
            										else {
HXLINE( 426)											output18 = Value21;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)((int)output18 << (int)(int)8));
            								}
HXDLIN( 426)								{
HXLINE( 426)									int Value22 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)-256);
HXDLIN( 426)									int output19;
HXDLIN( 426)									if ((Value22 > (int)255)) {
HXLINE( 426)										output19 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value22 < (int)0)) {
HXLINE( 426)											output19 = (int)0;
            										}
            										else {
HXLINE( 426)											output19 = Value22;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)output19);
            								}
HXDLIN( 426)								{
HXLINE( 426)									int Value23 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)16777215);
HXDLIN( 426)									int output20;
HXDLIN( 426)									if ((Value23 > (int)255)) {
HXLINE( 426)										output20 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value23 < (int)0)) {
HXLINE( 426)											output20 = (int)0;
            										}
            										else {
HXLINE( 426)											output20 = Value23;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)((int)output20 << (int)(int)24));
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 426)								{
HXLINE( 426)									int Value24 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)-16711681);
HXDLIN( 426)									int output21;
HXDLIN( 426)									if ((Value24 > (int)255)) {
HXLINE( 426)										output21 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value24 < (int)0)) {
HXLINE( 426)											output21 = (int)0;
            										}
            										else {
HXLINE( 426)											output21 = Value24;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)((int)output21 << (int)(int)16));
            								}
HXDLIN( 426)								{
HXLINE( 426)									int Value25 = ::Math_obj::round((match * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)-65281);
HXDLIN( 426)									int output22;
HXDLIN( 426)									if ((Value25 > (int)255)) {
HXLINE( 426)										output22 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value25 < (int)0)) {
HXLINE( 426)											output22 = (int)0;
            										}
            										else {
HXLINE( 426)											output22 = Value25;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)((int)output22 << (int)(int)8));
            								}
HXDLIN( 426)								{
HXLINE( 426)									int Value26 = ::Math_obj::round((mid * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)-256);
HXDLIN( 426)									int output23;
HXDLIN( 426)									if ((Value26 > (int)255)) {
HXLINE( 426)										output23 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value26 < (int)0)) {
HXLINE( 426)											output23 = (int)0;
            										}
            										else {
HXLINE( 426)											output23 = Value26;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)output23);
            								}
HXDLIN( 426)								{
HXLINE( 426)									int Value27 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 426)									output = ((int)output & (int)(int)16777215);
HXDLIN( 426)									int output24;
HXDLIN( 426)									if ((Value27 > (int)255)) {
HXLINE( 426)										output24 = (int)255;
            									}
            									else {
HXLINE( 426)										if ((Value27 < (int)0)) {
HXLINE( 426)											output24 = (int)0;
            										}
            										else {
HXLINE( 426)											output24 = Value27;
            										}
            									}
HXDLIN( 426)									output = ((int)output | (int)((int)output24 << (int)(int)24));
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE( 427)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,getLightened,return )

int FlxColor_Impl__obj::getInverted(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_436_getInverted)
HXLINE( 437)		int oldAlpha = ((int)((int)this1 >> (int)(int)24) & (int)(int)255);
HXLINE( 438)		int lhs = (int)-1;
HXDLIN( 438)		int Red = (((int)((int)lhs >> (int)(int)16) & (int)(int)255) - ((int)((int)this1 >> (int)(int)16) & (int)(int)255));
HXDLIN( 438)		int Green = (((int)((int)lhs >> (int)(int)8) & (int)(int)255) - ((int)((int)this1 >> (int)(int)8) & (int)(int)255));
HXDLIN( 438)		int Blue = (((int)lhs & (int)(int)255) - ((int)this1 & (int)(int)255));
HXDLIN( 438)		int Alpha = (int)255;
HXDLIN( 438)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 438)		{
HXLINE( 438)			color = ((int)color & (int)(int)-16711681);
HXDLIN( 438)			int color1;
HXDLIN( 438)			if ((Red > (int)255)) {
HXLINE( 438)				color1 = (int)255;
            			}
            			else {
HXLINE( 438)				if ((Red < (int)0)) {
HXLINE( 438)					color1 = (int)0;
            				}
            				else {
HXLINE( 438)					color1 = Red;
            				}
            			}
HXDLIN( 438)			color = ((int)color | (int)((int)color1 << (int)(int)16));
            		}
HXDLIN( 438)		{
HXLINE( 438)			color = ((int)color & (int)(int)-65281);
HXDLIN( 438)			int color2;
HXDLIN( 438)			if ((Green > (int)255)) {
HXLINE( 438)				color2 = (int)255;
            			}
            			else {
HXLINE( 438)				if ((Green < (int)0)) {
HXLINE( 438)					color2 = (int)0;
            				}
            				else {
HXLINE( 438)					color2 = Green;
            				}
            			}
HXDLIN( 438)			color = ((int)color | (int)((int)color2 << (int)(int)8));
            		}
HXDLIN( 438)		{
HXLINE( 438)			color = ((int)color & (int)(int)-256);
HXDLIN( 438)			int color3;
HXDLIN( 438)			if ((Blue > (int)255)) {
HXLINE( 438)				color3 = (int)255;
            			}
            			else {
HXLINE( 438)				if ((Blue < (int)0)) {
HXLINE( 438)					color3 = (int)0;
            				}
            				else {
HXLINE( 438)					color3 = Blue;
            				}
            			}
HXDLIN( 438)			color = ((int)color | (int)color3);
            		}
HXDLIN( 438)		{
HXLINE( 438)			color = ((int)color & (int)(int)16777215);
HXDLIN( 438)			int color4;
HXDLIN( 438)			if ((Alpha > (int)255)) {
HXLINE( 438)				color4 = (int)255;
            			}
            			else {
HXLINE( 438)				if ((Alpha < (int)0)) {
HXLINE( 438)					color4 = (int)0;
            				}
            				else {
HXLINE( 438)					color4 = Alpha;
            				}
            			}
HXDLIN( 438)			color = ((int)color | (int)((int)color4 << (int)(int)24));
            		}
HXDLIN( 438)		int output = color;
HXLINE( 439)		{
HXLINE( 439)			output = ((int)output & (int)(int)16777215);
HXDLIN( 439)			int output1;
HXDLIN( 439)			if ((oldAlpha > (int)255)) {
HXLINE( 439)				output1 = (int)255;
            			}
            			else {
HXLINE( 439)				if ((oldAlpha < (int)0)) {
HXLINE( 439)					output1 = (int)0;
            				}
            				else {
HXLINE( 439)					output1 = oldAlpha;
            				}
            			}
HXDLIN( 439)			output = ((int)output | (int)((int)output1 << (int)(int)24));
            		}
HXLINE( 440)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,getInverted,return )

int FlxColor_Impl__obj::setRGB(int this1,int Red,int Green,int Blue,hx::Null< int >  __o_Alpha){
int Alpha = __o_Alpha.Default(255);
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_453_setRGB)
HXLINE( 454)		{
HXLINE( 454)			this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 454)			int this2;
HXDLIN( 454)			if ((Red > (int)255)) {
HXLINE( 454)				this2 = (int)255;
            			}
            			else {
HXLINE( 454)				if ((Red < (int)0)) {
HXLINE( 454)					this2 = (int)0;
            				}
            				else {
HXLINE( 454)					this2 = Red;
            				}
            			}
HXDLIN( 454)			this1 = ((int)this1 | (int)((int)this2 << (int)(int)16));
            		}
HXLINE( 455)		{
HXLINE( 455)			this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 455)			int this3;
HXDLIN( 455)			if ((Green > (int)255)) {
HXLINE( 455)				this3 = (int)255;
            			}
            			else {
HXLINE( 455)				if ((Green < (int)0)) {
HXLINE( 455)					this3 = (int)0;
            				}
            				else {
HXLINE( 455)					this3 = Green;
            				}
            			}
HXDLIN( 455)			this1 = ((int)this1 | (int)((int)this3 << (int)(int)8));
            		}
HXLINE( 456)		{
HXLINE( 456)			this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 456)			int this4;
HXDLIN( 456)			if ((Blue > (int)255)) {
HXLINE( 456)				this4 = (int)255;
            			}
            			else {
HXLINE( 456)				if ((Blue < (int)0)) {
HXLINE( 456)					this4 = (int)0;
            				}
            				else {
HXLINE( 456)					this4 = Blue;
            				}
            			}
HXDLIN( 456)			this1 = ((int)this1 | (int)this4);
            		}
HXLINE( 457)		{
HXLINE( 457)			this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 457)			int this5;
HXDLIN( 457)			if ((Alpha > (int)255)) {
HXLINE( 457)				this5 = (int)255;
            			}
            			else {
HXLINE( 457)				if ((Alpha < (int)0)) {
HXLINE( 457)					this5 = (int)0;
            				}
            				else {
HXLINE( 457)					this5 = Alpha;
            				}
            			}
HXDLIN( 457)			this1 = ((int)this1 | (int)((int)this5 << (int)(int)24));
            		}
HXLINE( 458)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxColor_Impl__obj,setRGB,return )

int FlxColor_Impl__obj::setRGBFloat(int this1,Float Red,Float Green,Float Blue,hx::Null< Float >  __o_Alpha){
Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_471_setRGBFloat)
HXLINE( 472)		{
HXLINE( 472)			int Value = ::Math_obj::round((Red * (int)255));
HXDLIN( 472)			this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 472)			int this2;
HXDLIN( 472)			if ((Value > (int)255)) {
HXLINE( 472)				this2 = (int)255;
            			}
            			else {
HXLINE( 472)				if ((Value < (int)0)) {
HXLINE( 472)					this2 = (int)0;
            				}
            				else {
HXLINE( 472)					this2 = Value;
            				}
            			}
HXDLIN( 472)			this1 = ((int)this1 | (int)((int)this2 << (int)(int)16));
            		}
HXLINE( 473)		{
HXLINE( 473)			int Value1 = ::Math_obj::round((Green * (int)255));
HXDLIN( 473)			this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 473)			int this3;
HXDLIN( 473)			if ((Value1 > (int)255)) {
HXLINE( 473)				this3 = (int)255;
            			}
            			else {
HXLINE( 473)				if ((Value1 < (int)0)) {
HXLINE( 473)					this3 = (int)0;
            				}
            				else {
HXLINE( 473)					this3 = Value1;
            				}
            			}
HXDLIN( 473)			this1 = ((int)this1 | (int)((int)this3 << (int)(int)8));
            		}
HXLINE( 474)		{
HXLINE( 474)			int Value2 = ::Math_obj::round((Blue * (int)255));
HXDLIN( 474)			this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 474)			int this4;
HXDLIN( 474)			if ((Value2 > (int)255)) {
HXLINE( 474)				this4 = (int)255;
            			}
            			else {
HXLINE( 474)				if ((Value2 < (int)0)) {
HXLINE( 474)					this4 = (int)0;
            				}
            				else {
HXLINE( 474)					this4 = Value2;
            				}
            			}
HXDLIN( 474)			this1 = ((int)this1 | (int)this4);
            		}
HXLINE( 475)		{
HXLINE( 475)			int Value3 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 475)			this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 475)			int this5;
HXDLIN( 475)			if ((Value3 > (int)255)) {
HXLINE( 475)				this5 = (int)255;
            			}
            			else {
HXLINE( 475)				if ((Value3 < (int)0)) {
HXLINE( 475)					this5 = (int)0;
            				}
            				else {
HXLINE( 475)					this5 = Value3;
            				}
            			}
HXDLIN( 475)			this1 = ((int)this1 | (int)((int)this5 << (int)(int)24));
            		}
HXLINE( 476)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxColor_Impl__obj,setRGBFloat,return )

int FlxColor_Impl__obj::setCMYK(int this1,Float Cyan,Float Magenta,Float Yellow,Float Black,hx::Null< Float >  __o_Alpha){
Float Alpha = __o_Alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_490_setCMYK)
HXLINE( 491)		{
HXLINE( 491)			Float Value = (((int)1 - Cyan) * ((int)1 - Black));
HXDLIN( 491)			{
HXLINE( 491)				int Value1 = ::Math_obj::round((Value * (int)255));
HXDLIN( 491)				this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 491)				int this2;
HXDLIN( 491)				if ((Value1 > (int)255)) {
HXLINE( 491)					this2 = (int)255;
            				}
            				else {
HXLINE( 491)					if ((Value1 < (int)0)) {
HXLINE( 491)						this2 = (int)0;
            					}
            					else {
HXLINE( 491)						this2 = Value1;
            					}
            				}
HXDLIN( 491)				this1 = ((int)this1 | (int)((int)this2 << (int)(int)16));
            			}
            		}
HXLINE( 492)		{
HXLINE( 492)			Float Value2 = (((int)1 - Magenta) * ((int)1 - Black));
HXDLIN( 492)			{
HXLINE( 492)				int Value3 = ::Math_obj::round((Value2 * (int)255));
HXDLIN( 492)				this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 492)				int this3;
HXDLIN( 492)				if ((Value3 > (int)255)) {
HXLINE( 492)					this3 = (int)255;
            				}
            				else {
HXLINE( 492)					if ((Value3 < (int)0)) {
HXLINE( 492)						this3 = (int)0;
            					}
            					else {
HXLINE( 492)						this3 = Value3;
            					}
            				}
HXDLIN( 492)				this1 = ((int)this1 | (int)((int)this3 << (int)(int)8));
            			}
            		}
HXLINE( 493)		{
HXLINE( 493)			Float Value4 = (((int)1 - Yellow) * ((int)1 - Black));
HXDLIN( 493)			{
HXLINE( 493)				int Value5 = ::Math_obj::round((Value4 * (int)255));
HXDLIN( 493)				this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 493)				int this4;
HXDLIN( 493)				if ((Value5 > (int)255)) {
HXLINE( 493)					this4 = (int)255;
            				}
            				else {
HXLINE( 493)					if ((Value5 < (int)0)) {
HXLINE( 493)						this4 = (int)0;
            					}
            					else {
HXLINE( 493)						this4 = Value5;
            					}
            				}
HXDLIN( 493)				this1 = ((int)this1 | (int)this4);
            			}
            		}
HXLINE( 494)		{
HXLINE( 494)			int Value6 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 494)			this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 494)			int this5;
HXDLIN( 494)			if ((Value6 > (int)255)) {
HXLINE( 494)				this5 = (int)255;
            			}
            			else {
HXLINE( 494)				if ((Value6 < (int)0)) {
HXLINE( 494)					this5 = (int)0;
            				}
            				else {
HXLINE( 494)					this5 = Value6;
            				}
            			}
HXDLIN( 494)			this1 = ((int)this1 | (int)((int)this5 << (int)(int)24));
            		}
HXLINE( 495)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(FlxColor_Impl__obj,setCMYK,return )

int FlxColor_Impl__obj::setHSB(int this1,Float Hue,Float Saturation,Float Brightness,Float Alpha){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_508_setHSB)
HXLINE( 509)		Float chroma = (Brightness * Saturation);
HXLINE( 510)		Float match = (Brightness - chroma);
HXLINE( 511)		Float Hue1 = Hue;
HXDLIN( 511)		Float Chroma = chroma;
HXDLIN( 511)		Hue1 = hx::Mod(Hue1,(int)360);
HXDLIN( 511)		Float hueD = ((Float)Hue1 / (Float)(int)60);
HXDLIN( 511)		Float mid = ((Chroma * ((int)1 - ::Math_obj::abs((hx::Mod(hueD,(int)2) - (int)1)))) + match);
HXDLIN( 511)		Chroma = (Chroma + match);
HXDLIN( 511)		{
HXLINE( 511)			int _g = ::Std_obj::_hx_int(hueD);
HXDLIN( 511)			switch((int)(_g)){
            				case (int)0: {
HXLINE( 511)					{
HXLINE( 511)						int Value = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 511)						int this2;
HXDLIN( 511)						if ((Value > (int)255)) {
HXLINE( 511)							this2 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value < (int)0)) {
HXLINE( 511)								this2 = (int)0;
            							}
            							else {
HXLINE( 511)								this2 = Value;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)((int)this2 << (int)(int)16));
            					}
HXDLIN( 511)					{
HXLINE( 511)						int Value1 = ::Math_obj::round((mid * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 511)						int this3;
HXDLIN( 511)						if ((Value1 > (int)255)) {
HXLINE( 511)							this3 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value1 < (int)0)) {
HXLINE( 511)								this3 = (int)0;
            							}
            							else {
HXLINE( 511)								this3 = Value1;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)((int)this3 << (int)(int)8));
            					}
HXDLIN( 511)					{
HXLINE( 511)						int Value2 = ::Math_obj::round((match * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 511)						int this4;
HXDLIN( 511)						if ((Value2 > (int)255)) {
HXLINE( 511)							this4 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value2 < (int)0)) {
HXLINE( 511)								this4 = (int)0;
            							}
            							else {
HXLINE( 511)								this4 = Value2;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)this4);
            					}
HXDLIN( 511)					{
HXLINE( 511)						int Value3 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 511)						int this5;
HXDLIN( 511)						if ((Value3 > (int)255)) {
HXLINE( 511)							this5 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value3 < (int)0)) {
HXLINE( 511)								this5 = (int)0;
            							}
            							else {
HXLINE( 511)								this5 = Value3;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)((int)this5 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 511)					{
HXLINE( 511)						int Value4 = ::Math_obj::round((mid * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 511)						int this6;
HXDLIN( 511)						if ((Value4 > (int)255)) {
HXLINE( 511)							this6 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value4 < (int)0)) {
HXLINE( 511)								this6 = (int)0;
            							}
            							else {
HXLINE( 511)								this6 = Value4;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)((int)this6 << (int)(int)16));
            					}
HXDLIN( 511)					{
HXLINE( 511)						int Value5 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 511)						int this7;
HXDLIN( 511)						if ((Value5 > (int)255)) {
HXLINE( 511)							this7 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value5 < (int)0)) {
HXLINE( 511)								this7 = (int)0;
            							}
            							else {
HXLINE( 511)								this7 = Value5;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)((int)this7 << (int)(int)8));
            					}
HXDLIN( 511)					{
HXLINE( 511)						int Value6 = ::Math_obj::round((match * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 511)						int this8;
HXDLIN( 511)						if ((Value6 > (int)255)) {
HXLINE( 511)							this8 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value6 < (int)0)) {
HXLINE( 511)								this8 = (int)0;
            							}
            							else {
HXLINE( 511)								this8 = Value6;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)this8);
            					}
HXDLIN( 511)					{
HXLINE( 511)						int Value7 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 511)						int this9;
HXDLIN( 511)						if ((Value7 > (int)255)) {
HXLINE( 511)							this9 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value7 < (int)0)) {
HXLINE( 511)								this9 = (int)0;
            							}
            							else {
HXLINE( 511)								this9 = Value7;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)((int)this9 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 511)					{
HXLINE( 511)						int Value8 = ::Math_obj::round((match * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 511)						int this10;
HXDLIN( 511)						if ((Value8 > (int)255)) {
HXLINE( 511)							this10 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value8 < (int)0)) {
HXLINE( 511)								this10 = (int)0;
            							}
            							else {
HXLINE( 511)								this10 = Value8;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)((int)this10 << (int)(int)16));
            					}
HXDLIN( 511)					{
HXLINE( 511)						int Value9 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 511)						int this11;
HXDLIN( 511)						if ((Value9 > (int)255)) {
HXLINE( 511)							this11 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value9 < (int)0)) {
HXLINE( 511)								this11 = (int)0;
            							}
            							else {
HXLINE( 511)								this11 = Value9;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)((int)this11 << (int)(int)8));
            					}
HXDLIN( 511)					{
HXLINE( 511)						int Value10 = ::Math_obj::round((mid * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 511)						int this12;
HXDLIN( 511)						if ((Value10 > (int)255)) {
HXLINE( 511)							this12 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value10 < (int)0)) {
HXLINE( 511)								this12 = (int)0;
            							}
            							else {
HXLINE( 511)								this12 = Value10;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)this12);
            					}
HXDLIN( 511)					{
HXLINE( 511)						int Value11 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 511)						int this13;
HXDLIN( 511)						if ((Value11 > (int)255)) {
HXLINE( 511)							this13 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value11 < (int)0)) {
HXLINE( 511)								this13 = (int)0;
            							}
            							else {
HXLINE( 511)								this13 = Value11;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)((int)this13 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 511)					{
HXLINE( 511)						int Value12 = ::Math_obj::round((match * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 511)						int this14;
HXDLIN( 511)						if ((Value12 > (int)255)) {
HXLINE( 511)							this14 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value12 < (int)0)) {
HXLINE( 511)								this14 = (int)0;
            							}
            							else {
HXLINE( 511)								this14 = Value12;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)((int)this14 << (int)(int)16));
            					}
HXDLIN( 511)					{
HXLINE( 511)						int Value13 = ::Math_obj::round((mid * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 511)						int this15;
HXDLIN( 511)						if ((Value13 > (int)255)) {
HXLINE( 511)							this15 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value13 < (int)0)) {
HXLINE( 511)								this15 = (int)0;
            							}
            							else {
HXLINE( 511)								this15 = Value13;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)((int)this15 << (int)(int)8));
            					}
HXDLIN( 511)					{
HXLINE( 511)						int Value14 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 511)						int this16;
HXDLIN( 511)						if ((Value14 > (int)255)) {
HXLINE( 511)							this16 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value14 < (int)0)) {
HXLINE( 511)								this16 = (int)0;
            							}
            							else {
HXLINE( 511)								this16 = Value14;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)this16);
            					}
HXDLIN( 511)					{
HXLINE( 511)						int Value15 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 511)						int this17;
HXDLIN( 511)						if ((Value15 > (int)255)) {
HXLINE( 511)							this17 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value15 < (int)0)) {
HXLINE( 511)								this17 = (int)0;
            							}
            							else {
HXLINE( 511)								this17 = Value15;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)((int)this17 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 511)					{
HXLINE( 511)						int Value16 = ::Math_obj::round((mid * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 511)						int this18;
HXDLIN( 511)						if ((Value16 > (int)255)) {
HXLINE( 511)							this18 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value16 < (int)0)) {
HXLINE( 511)								this18 = (int)0;
            							}
            							else {
HXLINE( 511)								this18 = Value16;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)((int)this18 << (int)(int)16));
            					}
HXDLIN( 511)					{
HXLINE( 511)						int Value17 = ::Math_obj::round((match * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 511)						int this19;
HXDLIN( 511)						if ((Value17 > (int)255)) {
HXLINE( 511)							this19 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value17 < (int)0)) {
HXLINE( 511)								this19 = (int)0;
            							}
            							else {
HXLINE( 511)								this19 = Value17;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)((int)this19 << (int)(int)8));
            					}
HXDLIN( 511)					{
HXLINE( 511)						int Value18 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 511)						int this20;
HXDLIN( 511)						if ((Value18 > (int)255)) {
HXLINE( 511)							this20 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value18 < (int)0)) {
HXLINE( 511)								this20 = (int)0;
            							}
            							else {
HXLINE( 511)								this20 = Value18;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)this20);
            					}
HXDLIN( 511)					{
HXLINE( 511)						int Value19 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 511)						int this21;
HXDLIN( 511)						if ((Value19 > (int)255)) {
HXLINE( 511)							this21 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value19 < (int)0)) {
HXLINE( 511)								this21 = (int)0;
            							}
            							else {
HXLINE( 511)								this21 = Value19;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)((int)this21 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 511)					{
HXLINE( 511)						int Value20 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 511)						int this22;
HXDLIN( 511)						if ((Value20 > (int)255)) {
HXLINE( 511)							this22 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value20 < (int)0)) {
HXLINE( 511)								this22 = (int)0;
            							}
            							else {
HXLINE( 511)								this22 = Value20;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)((int)this22 << (int)(int)16));
            					}
HXDLIN( 511)					{
HXLINE( 511)						int Value21 = ::Math_obj::round((match * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 511)						int this23;
HXDLIN( 511)						if ((Value21 > (int)255)) {
HXLINE( 511)							this23 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value21 < (int)0)) {
HXLINE( 511)								this23 = (int)0;
            							}
            							else {
HXLINE( 511)								this23 = Value21;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)((int)this23 << (int)(int)8));
            					}
HXDLIN( 511)					{
HXLINE( 511)						int Value22 = ::Math_obj::round((mid * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 511)						int this24;
HXDLIN( 511)						if ((Value22 > (int)255)) {
HXLINE( 511)							this24 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value22 < (int)0)) {
HXLINE( 511)								this24 = (int)0;
            							}
            							else {
HXLINE( 511)								this24 = Value22;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)this24);
            					}
HXDLIN( 511)					{
HXLINE( 511)						int Value23 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 511)						this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 511)						int this25;
HXDLIN( 511)						if ((Value23 > (int)255)) {
HXLINE( 511)							this25 = (int)255;
            						}
            						else {
HXLINE( 511)							if ((Value23 < (int)0)) {
HXLINE( 511)								this25 = (int)0;
            							}
            							else {
HXLINE( 511)								this25 = Value23;
            							}
            						}
HXDLIN( 511)						this1 = ((int)this1 | (int)((int)this25 << (int)(int)24));
            					}
            				}
            				break;
            			}
            		}
HXDLIN( 511)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxColor_Impl__obj,setHSB,return )

int FlxColor_Impl__obj::setHSL(int this1,Float Hue,Float Saturation,Float Lightness,Float Alpha){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_524_setHSL)
HXLINE( 525)		Float chroma = (((int)1 - ::Math_obj::abs((((int)2 * Lightness) - (int)1))) * Saturation);
HXLINE( 526)		Float match = (Lightness - ((Float)chroma / (Float)(int)2));
HXLINE( 527)		Float Hue1 = Hue;
HXDLIN( 527)		Float Chroma = chroma;
HXDLIN( 527)		Hue1 = hx::Mod(Hue1,(int)360);
HXDLIN( 527)		Float hueD = ((Float)Hue1 / (Float)(int)60);
HXDLIN( 527)		Float mid = ((Chroma * ((int)1 - ::Math_obj::abs((hx::Mod(hueD,(int)2) - (int)1)))) + match);
HXDLIN( 527)		Chroma = (Chroma + match);
HXDLIN( 527)		{
HXLINE( 527)			int _g = ::Std_obj::_hx_int(hueD);
HXDLIN( 527)			switch((int)(_g)){
            				case (int)0: {
HXLINE( 527)					{
HXLINE( 527)						int Value = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 527)						int this2;
HXDLIN( 527)						if ((Value > (int)255)) {
HXLINE( 527)							this2 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value < (int)0)) {
HXLINE( 527)								this2 = (int)0;
            							}
            							else {
HXLINE( 527)								this2 = Value;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)((int)this2 << (int)(int)16));
            					}
HXDLIN( 527)					{
HXLINE( 527)						int Value1 = ::Math_obj::round((mid * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 527)						int this3;
HXDLIN( 527)						if ((Value1 > (int)255)) {
HXLINE( 527)							this3 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value1 < (int)0)) {
HXLINE( 527)								this3 = (int)0;
            							}
            							else {
HXLINE( 527)								this3 = Value1;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)((int)this3 << (int)(int)8));
            					}
HXDLIN( 527)					{
HXLINE( 527)						int Value2 = ::Math_obj::round((match * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 527)						int this4;
HXDLIN( 527)						if ((Value2 > (int)255)) {
HXLINE( 527)							this4 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value2 < (int)0)) {
HXLINE( 527)								this4 = (int)0;
            							}
            							else {
HXLINE( 527)								this4 = Value2;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)this4);
            					}
HXDLIN( 527)					{
HXLINE( 527)						int Value3 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 527)						int this5;
HXDLIN( 527)						if ((Value3 > (int)255)) {
HXLINE( 527)							this5 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value3 < (int)0)) {
HXLINE( 527)								this5 = (int)0;
            							}
            							else {
HXLINE( 527)								this5 = Value3;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)((int)this5 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 527)					{
HXLINE( 527)						int Value4 = ::Math_obj::round((mid * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 527)						int this6;
HXDLIN( 527)						if ((Value4 > (int)255)) {
HXLINE( 527)							this6 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value4 < (int)0)) {
HXLINE( 527)								this6 = (int)0;
            							}
            							else {
HXLINE( 527)								this6 = Value4;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)((int)this6 << (int)(int)16));
            					}
HXDLIN( 527)					{
HXLINE( 527)						int Value5 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 527)						int this7;
HXDLIN( 527)						if ((Value5 > (int)255)) {
HXLINE( 527)							this7 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value5 < (int)0)) {
HXLINE( 527)								this7 = (int)0;
            							}
            							else {
HXLINE( 527)								this7 = Value5;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)((int)this7 << (int)(int)8));
            					}
HXDLIN( 527)					{
HXLINE( 527)						int Value6 = ::Math_obj::round((match * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 527)						int this8;
HXDLIN( 527)						if ((Value6 > (int)255)) {
HXLINE( 527)							this8 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value6 < (int)0)) {
HXLINE( 527)								this8 = (int)0;
            							}
            							else {
HXLINE( 527)								this8 = Value6;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)this8);
            					}
HXDLIN( 527)					{
HXLINE( 527)						int Value7 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 527)						int this9;
HXDLIN( 527)						if ((Value7 > (int)255)) {
HXLINE( 527)							this9 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value7 < (int)0)) {
HXLINE( 527)								this9 = (int)0;
            							}
            							else {
HXLINE( 527)								this9 = Value7;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)((int)this9 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 527)					{
HXLINE( 527)						int Value8 = ::Math_obj::round((match * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 527)						int this10;
HXDLIN( 527)						if ((Value8 > (int)255)) {
HXLINE( 527)							this10 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value8 < (int)0)) {
HXLINE( 527)								this10 = (int)0;
            							}
            							else {
HXLINE( 527)								this10 = Value8;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)((int)this10 << (int)(int)16));
            					}
HXDLIN( 527)					{
HXLINE( 527)						int Value9 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 527)						int this11;
HXDLIN( 527)						if ((Value9 > (int)255)) {
HXLINE( 527)							this11 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value9 < (int)0)) {
HXLINE( 527)								this11 = (int)0;
            							}
            							else {
HXLINE( 527)								this11 = Value9;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)((int)this11 << (int)(int)8));
            					}
HXDLIN( 527)					{
HXLINE( 527)						int Value10 = ::Math_obj::round((mid * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 527)						int this12;
HXDLIN( 527)						if ((Value10 > (int)255)) {
HXLINE( 527)							this12 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value10 < (int)0)) {
HXLINE( 527)								this12 = (int)0;
            							}
            							else {
HXLINE( 527)								this12 = Value10;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)this12);
            					}
HXDLIN( 527)					{
HXLINE( 527)						int Value11 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 527)						int this13;
HXDLIN( 527)						if ((Value11 > (int)255)) {
HXLINE( 527)							this13 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value11 < (int)0)) {
HXLINE( 527)								this13 = (int)0;
            							}
            							else {
HXLINE( 527)								this13 = Value11;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)((int)this13 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 527)					{
HXLINE( 527)						int Value12 = ::Math_obj::round((match * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 527)						int this14;
HXDLIN( 527)						if ((Value12 > (int)255)) {
HXLINE( 527)							this14 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value12 < (int)0)) {
HXLINE( 527)								this14 = (int)0;
            							}
            							else {
HXLINE( 527)								this14 = Value12;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)((int)this14 << (int)(int)16));
            					}
HXDLIN( 527)					{
HXLINE( 527)						int Value13 = ::Math_obj::round((mid * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 527)						int this15;
HXDLIN( 527)						if ((Value13 > (int)255)) {
HXLINE( 527)							this15 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value13 < (int)0)) {
HXLINE( 527)								this15 = (int)0;
            							}
            							else {
HXLINE( 527)								this15 = Value13;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)((int)this15 << (int)(int)8));
            					}
HXDLIN( 527)					{
HXLINE( 527)						int Value14 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 527)						int this16;
HXDLIN( 527)						if ((Value14 > (int)255)) {
HXLINE( 527)							this16 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value14 < (int)0)) {
HXLINE( 527)								this16 = (int)0;
            							}
            							else {
HXLINE( 527)								this16 = Value14;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)this16);
            					}
HXDLIN( 527)					{
HXLINE( 527)						int Value15 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 527)						int this17;
HXDLIN( 527)						if ((Value15 > (int)255)) {
HXLINE( 527)							this17 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value15 < (int)0)) {
HXLINE( 527)								this17 = (int)0;
            							}
            							else {
HXLINE( 527)								this17 = Value15;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)((int)this17 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 527)					{
HXLINE( 527)						int Value16 = ::Math_obj::round((mid * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 527)						int this18;
HXDLIN( 527)						if ((Value16 > (int)255)) {
HXLINE( 527)							this18 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value16 < (int)0)) {
HXLINE( 527)								this18 = (int)0;
            							}
            							else {
HXLINE( 527)								this18 = Value16;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)((int)this18 << (int)(int)16));
            					}
HXDLIN( 527)					{
HXLINE( 527)						int Value17 = ::Math_obj::round((match * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 527)						int this19;
HXDLIN( 527)						if ((Value17 > (int)255)) {
HXLINE( 527)							this19 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value17 < (int)0)) {
HXLINE( 527)								this19 = (int)0;
            							}
            							else {
HXLINE( 527)								this19 = Value17;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)((int)this19 << (int)(int)8));
            					}
HXDLIN( 527)					{
HXLINE( 527)						int Value18 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 527)						int this20;
HXDLIN( 527)						if ((Value18 > (int)255)) {
HXLINE( 527)							this20 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value18 < (int)0)) {
HXLINE( 527)								this20 = (int)0;
            							}
            							else {
HXLINE( 527)								this20 = Value18;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)this20);
            					}
HXDLIN( 527)					{
HXLINE( 527)						int Value19 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 527)						int this21;
HXDLIN( 527)						if ((Value19 > (int)255)) {
HXLINE( 527)							this21 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value19 < (int)0)) {
HXLINE( 527)								this21 = (int)0;
            							}
            							else {
HXLINE( 527)								this21 = Value19;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)((int)this21 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 527)					{
HXLINE( 527)						int Value20 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 527)						int this22;
HXDLIN( 527)						if ((Value20 > (int)255)) {
HXLINE( 527)							this22 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value20 < (int)0)) {
HXLINE( 527)								this22 = (int)0;
            							}
            							else {
HXLINE( 527)								this22 = Value20;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)((int)this22 << (int)(int)16));
            					}
HXDLIN( 527)					{
HXLINE( 527)						int Value21 = ::Math_obj::round((match * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 527)						int this23;
HXDLIN( 527)						if ((Value21 > (int)255)) {
HXLINE( 527)							this23 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value21 < (int)0)) {
HXLINE( 527)								this23 = (int)0;
            							}
            							else {
HXLINE( 527)								this23 = Value21;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)((int)this23 << (int)(int)8));
            					}
HXDLIN( 527)					{
HXLINE( 527)						int Value22 = ::Math_obj::round((mid * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 527)						int this24;
HXDLIN( 527)						if ((Value22 > (int)255)) {
HXLINE( 527)							this24 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value22 < (int)0)) {
HXLINE( 527)								this24 = (int)0;
            							}
            							else {
HXLINE( 527)								this24 = Value22;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)this24);
            					}
HXDLIN( 527)					{
HXLINE( 527)						int Value23 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 527)						this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 527)						int this25;
HXDLIN( 527)						if ((Value23 > (int)255)) {
HXLINE( 527)							this25 = (int)255;
            						}
            						else {
HXLINE( 527)							if ((Value23 < (int)0)) {
HXLINE( 527)								this25 = (int)0;
            							}
            							else {
HXLINE( 527)								this25 = Value23;
            							}
            						}
HXDLIN( 527)						this1 = ((int)this1 | (int)((int)this25 << (int)(int)24));
            					}
            				}
            				break;
            			}
            		}
HXDLIN( 527)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxColor_Impl__obj,setHSL,return )

int FlxColor_Impl__obj::setHSChromaMatch(int this1,Float Hue,Float Saturation,Float Chroma,Float Match,Float Alpha){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_534_setHSChromaMatch)
HXLINE( 535)		Hue = hx::Mod(Hue,(int)360);
HXLINE( 536)		Float hueD = ((Float)Hue / (Float)(int)60);
HXLINE( 537)		Float mid = ((Chroma * ((int)1 - ::Math_obj::abs((hx::Mod(hueD,(int)2) - (int)1)))) + Match);
HXLINE( 538)		Chroma = (Chroma + Match);
HXLINE( 540)		{
HXLINE( 540)			int _g = ::Std_obj::_hx_int(hueD);
HXDLIN( 540)			switch((int)(_g)){
            				case (int)0: {
HXLINE( 542)					{
HXLINE( 542)						int Value = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 542)						this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 542)						int this2;
HXDLIN( 542)						if ((Value > (int)255)) {
HXLINE( 542)							this2 = (int)255;
            						}
            						else {
HXLINE( 542)							if ((Value < (int)0)) {
HXLINE( 542)								this2 = (int)0;
            							}
            							else {
HXLINE( 542)								this2 = Value;
            							}
            						}
HXDLIN( 542)						this1 = ((int)this1 | (int)((int)this2 << (int)(int)16));
            					}
HXDLIN( 542)					{
HXLINE( 542)						int Value1 = ::Math_obj::round((mid * (int)255));
HXDLIN( 542)						this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 542)						int this3;
HXDLIN( 542)						if ((Value1 > (int)255)) {
HXLINE( 542)							this3 = (int)255;
            						}
            						else {
HXLINE( 542)							if ((Value1 < (int)0)) {
HXLINE( 542)								this3 = (int)0;
            							}
            							else {
HXLINE( 542)								this3 = Value1;
            							}
            						}
HXDLIN( 542)						this1 = ((int)this1 | (int)((int)this3 << (int)(int)8));
            					}
HXDLIN( 542)					{
HXLINE( 542)						int Value2 = ::Math_obj::round((Match * (int)255));
HXDLIN( 542)						this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 542)						int this4;
HXDLIN( 542)						if ((Value2 > (int)255)) {
HXLINE( 542)							this4 = (int)255;
            						}
            						else {
HXLINE( 542)							if ((Value2 < (int)0)) {
HXLINE( 542)								this4 = (int)0;
            							}
            							else {
HXLINE( 542)								this4 = Value2;
            							}
            						}
HXDLIN( 542)						this1 = ((int)this1 | (int)this4);
            					}
HXDLIN( 542)					{
HXLINE( 542)						int Value3 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 542)						this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 542)						int this5;
HXDLIN( 542)						if ((Value3 > (int)255)) {
HXLINE( 542)							this5 = (int)255;
            						}
            						else {
HXLINE( 542)							if ((Value3 < (int)0)) {
HXLINE( 542)								this5 = (int)0;
            							}
            							else {
HXLINE( 542)								this5 = Value3;
            							}
            						}
HXDLIN( 542)						this1 = ((int)this1 | (int)((int)this5 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 543)					{
HXLINE( 543)						int Value4 = ::Math_obj::round((mid * (int)255));
HXDLIN( 543)						this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 543)						int this6;
HXDLIN( 543)						if ((Value4 > (int)255)) {
HXLINE( 543)							this6 = (int)255;
            						}
            						else {
HXLINE( 543)							if ((Value4 < (int)0)) {
HXLINE( 543)								this6 = (int)0;
            							}
            							else {
HXLINE( 543)								this6 = Value4;
            							}
            						}
HXDLIN( 543)						this1 = ((int)this1 | (int)((int)this6 << (int)(int)16));
            					}
HXDLIN( 543)					{
HXLINE( 543)						int Value5 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 543)						this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 543)						int this7;
HXDLIN( 543)						if ((Value5 > (int)255)) {
HXLINE( 543)							this7 = (int)255;
            						}
            						else {
HXLINE( 543)							if ((Value5 < (int)0)) {
HXLINE( 543)								this7 = (int)0;
            							}
            							else {
HXLINE( 543)								this7 = Value5;
            							}
            						}
HXDLIN( 543)						this1 = ((int)this1 | (int)((int)this7 << (int)(int)8));
            					}
HXDLIN( 543)					{
HXLINE( 543)						int Value6 = ::Math_obj::round((Match * (int)255));
HXDLIN( 543)						this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 543)						int this8;
HXDLIN( 543)						if ((Value6 > (int)255)) {
HXLINE( 543)							this8 = (int)255;
            						}
            						else {
HXLINE( 543)							if ((Value6 < (int)0)) {
HXLINE( 543)								this8 = (int)0;
            							}
            							else {
HXLINE( 543)								this8 = Value6;
            							}
            						}
HXDLIN( 543)						this1 = ((int)this1 | (int)this8);
            					}
HXDLIN( 543)					{
HXLINE( 543)						int Value7 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 543)						this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 543)						int this9;
HXDLIN( 543)						if ((Value7 > (int)255)) {
HXLINE( 543)							this9 = (int)255;
            						}
            						else {
HXLINE( 543)							if ((Value7 < (int)0)) {
HXLINE( 543)								this9 = (int)0;
            							}
            							else {
HXLINE( 543)								this9 = Value7;
            							}
            						}
HXDLIN( 543)						this1 = ((int)this1 | (int)((int)this9 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 544)					{
HXLINE( 544)						int Value8 = ::Math_obj::round((Match * (int)255));
HXDLIN( 544)						this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 544)						int this10;
HXDLIN( 544)						if ((Value8 > (int)255)) {
HXLINE( 544)							this10 = (int)255;
            						}
            						else {
HXLINE( 544)							if ((Value8 < (int)0)) {
HXLINE( 544)								this10 = (int)0;
            							}
            							else {
HXLINE( 544)								this10 = Value8;
            							}
            						}
HXDLIN( 544)						this1 = ((int)this1 | (int)((int)this10 << (int)(int)16));
            					}
HXDLIN( 544)					{
HXLINE( 544)						int Value9 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 544)						this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 544)						int this11;
HXDLIN( 544)						if ((Value9 > (int)255)) {
HXLINE( 544)							this11 = (int)255;
            						}
            						else {
HXLINE( 544)							if ((Value9 < (int)0)) {
HXLINE( 544)								this11 = (int)0;
            							}
            							else {
HXLINE( 544)								this11 = Value9;
            							}
            						}
HXDLIN( 544)						this1 = ((int)this1 | (int)((int)this11 << (int)(int)8));
            					}
HXDLIN( 544)					{
HXLINE( 544)						int Value10 = ::Math_obj::round((mid * (int)255));
HXDLIN( 544)						this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 544)						int this12;
HXDLIN( 544)						if ((Value10 > (int)255)) {
HXLINE( 544)							this12 = (int)255;
            						}
            						else {
HXLINE( 544)							if ((Value10 < (int)0)) {
HXLINE( 544)								this12 = (int)0;
            							}
            							else {
HXLINE( 544)								this12 = Value10;
            							}
            						}
HXDLIN( 544)						this1 = ((int)this1 | (int)this12);
            					}
HXDLIN( 544)					{
HXLINE( 544)						int Value11 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 544)						this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 544)						int this13;
HXDLIN( 544)						if ((Value11 > (int)255)) {
HXLINE( 544)							this13 = (int)255;
            						}
            						else {
HXLINE( 544)							if ((Value11 < (int)0)) {
HXLINE( 544)								this13 = (int)0;
            							}
            							else {
HXLINE( 544)								this13 = Value11;
            							}
            						}
HXDLIN( 544)						this1 = ((int)this1 | (int)((int)this13 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 545)					{
HXLINE( 545)						int Value12 = ::Math_obj::round((Match * (int)255));
HXDLIN( 545)						this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 545)						int this14;
HXDLIN( 545)						if ((Value12 > (int)255)) {
HXLINE( 545)							this14 = (int)255;
            						}
            						else {
HXLINE( 545)							if ((Value12 < (int)0)) {
HXLINE( 545)								this14 = (int)0;
            							}
            							else {
HXLINE( 545)								this14 = Value12;
            							}
            						}
HXDLIN( 545)						this1 = ((int)this1 | (int)((int)this14 << (int)(int)16));
            					}
HXDLIN( 545)					{
HXLINE( 545)						int Value13 = ::Math_obj::round((mid * (int)255));
HXDLIN( 545)						this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 545)						int this15;
HXDLIN( 545)						if ((Value13 > (int)255)) {
HXLINE( 545)							this15 = (int)255;
            						}
            						else {
HXLINE( 545)							if ((Value13 < (int)0)) {
HXLINE( 545)								this15 = (int)0;
            							}
            							else {
HXLINE( 545)								this15 = Value13;
            							}
            						}
HXDLIN( 545)						this1 = ((int)this1 | (int)((int)this15 << (int)(int)8));
            					}
HXDLIN( 545)					{
HXLINE( 545)						int Value14 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 545)						this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 545)						int this16;
HXDLIN( 545)						if ((Value14 > (int)255)) {
HXLINE( 545)							this16 = (int)255;
            						}
            						else {
HXLINE( 545)							if ((Value14 < (int)0)) {
HXLINE( 545)								this16 = (int)0;
            							}
            							else {
HXLINE( 545)								this16 = Value14;
            							}
            						}
HXDLIN( 545)						this1 = ((int)this1 | (int)this16);
            					}
HXDLIN( 545)					{
HXLINE( 545)						int Value15 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 545)						this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 545)						int this17;
HXDLIN( 545)						if ((Value15 > (int)255)) {
HXLINE( 545)							this17 = (int)255;
            						}
            						else {
HXLINE( 545)							if ((Value15 < (int)0)) {
HXLINE( 545)								this17 = (int)0;
            							}
            							else {
HXLINE( 545)								this17 = Value15;
            							}
            						}
HXDLIN( 545)						this1 = ((int)this1 | (int)((int)this17 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 546)					{
HXLINE( 546)						int Value16 = ::Math_obj::round((mid * (int)255));
HXDLIN( 546)						this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 546)						int this18;
HXDLIN( 546)						if ((Value16 > (int)255)) {
HXLINE( 546)							this18 = (int)255;
            						}
            						else {
HXLINE( 546)							if ((Value16 < (int)0)) {
HXLINE( 546)								this18 = (int)0;
            							}
            							else {
HXLINE( 546)								this18 = Value16;
            							}
            						}
HXDLIN( 546)						this1 = ((int)this1 | (int)((int)this18 << (int)(int)16));
            					}
HXDLIN( 546)					{
HXLINE( 546)						int Value17 = ::Math_obj::round((Match * (int)255));
HXDLIN( 546)						this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 546)						int this19;
HXDLIN( 546)						if ((Value17 > (int)255)) {
HXLINE( 546)							this19 = (int)255;
            						}
            						else {
HXLINE( 546)							if ((Value17 < (int)0)) {
HXLINE( 546)								this19 = (int)0;
            							}
            							else {
HXLINE( 546)								this19 = Value17;
            							}
            						}
HXDLIN( 546)						this1 = ((int)this1 | (int)((int)this19 << (int)(int)8));
            					}
HXDLIN( 546)					{
HXLINE( 546)						int Value18 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 546)						this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 546)						int this20;
HXDLIN( 546)						if ((Value18 > (int)255)) {
HXLINE( 546)							this20 = (int)255;
            						}
            						else {
HXLINE( 546)							if ((Value18 < (int)0)) {
HXLINE( 546)								this20 = (int)0;
            							}
            							else {
HXLINE( 546)								this20 = Value18;
            							}
            						}
HXDLIN( 546)						this1 = ((int)this1 | (int)this20);
            					}
HXDLIN( 546)					{
HXLINE( 546)						int Value19 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 546)						this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 546)						int this21;
HXDLIN( 546)						if ((Value19 > (int)255)) {
HXLINE( 546)							this21 = (int)255;
            						}
            						else {
HXLINE( 546)							if ((Value19 < (int)0)) {
HXLINE( 546)								this21 = (int)0;
            							}
            							else {
HXLINE( 546)								this21 = Value19;
            							}
            						}
HXDLIN( 546)						this1 = ((int)this1 | (int)((int)this21 << (int)(int)24));
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 547)					{
HXLINE( 547)						int Value20 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 547)						this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 547)						int this22;
HXDLIN( 547)						if ((Value20 > (int)255)) {
HXLINE( 547)							this22 = (int)255;
            						}
            						else {
HXLINE( 547)							if ((Value20 < (int)0)) {
HXLINE( 547)								this22 = (int)0;
            							}
            							else {
HXLINE( 547)								this22 = Value20;
            							}
            						}
HXDLIN( 547)						this1 = ((int)this1 | (int)((int)this22 << (int)(int)16));
            					}
HXDLIN( 547)					{
HXLINE( 547)						int Value21 = ::Math_obj::round((Match * (int)255));
HXDLIN( 547)						this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 547)						int this23;
HXDLIN( 547)						if ((Value21 > (int)255)) {
HXLINE( 547)							this23 = (int)255;
            						}
            						else {
HXLINE( 547)							if ((Value21 < (int)0)) {
HXLINE( 547)								this23 = (int)0;
            							}
            							else {
HXLINE( 547)								this23 = Value21;
            							}
            						}
HXDLIN( 547)						this1 = ((int)this1 | (int)((int)this23 << (int)(int)8));
            					}
HXDLIN( 547)					{
HXLINE( 547)						int Value22 = ::Math_obj::round((mid * (int)255));
HXDLIN( 547)						this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 547)						int this24;
HXDLIN( 547)						if ((Value22 > (int)255)) {
HXLINE( 547)							this24 = (int)255;
            						}
            						else {
HXLINE( 547)							if ((Value22 < (int)0)) {
HXLINE( 547)								this24 = (int)0;
            							}
            							else {
HXLINE( 547)								this24 = Value22;
            							}
            						}
HXDLIN( 547)						this1 = ((int)this1 | (int)this24);
            					}
HXDLIN( 547)					{
HXLINE( 547)						int Value23 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 547)						this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 547)						int this25;
HXDLIN( 547)						if ((Value23 > (int)255)) {
HXLINE( 547)							this25 = (int)255;
            						}
            						else {
HXLINE( 547)							if ((Value23 < (int)0)) {
HXLINE( 547)								this25 = (int)0;
            							}
            							else {
HXLINE( 547)								this25 = Value23;
            							}
            						}
HXDLIN( 547)						this1 = ((int)this1 | (int)((int)this25 << (int)(int)24));
            					}
            				}
            				break;
            			}
            		}
HXLINE( 550)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(FlxColor_Impl__obj,setHSChromaMatch,return )

int FlxColor_Impl__obj::_new(hx::Null< int >  __o_Value){
int Value = __o_Value.Default(0);
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_553__new)
HXDLIN( 553)		int this1 = Value;
HXDLIN( 553)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,_new,return )

int FlxColor_Impl__obj::getThis(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_563_getThis)
HXDLIN( 563)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,getThis,return )

void FlxColor_Impl__obj::validate(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_568_validate)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,validate,(void))

int FlxColor_Impl__obj::get_red(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_576_get_red)
HXDLIN( 576)		return ((int)((int)this1 >> (int)(int)16) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,get_red,return )

int FlxColor_Impl__obj::get_green(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_581_get_green)
HXDLIN( 581)		return ((int)((int)this1 >> (int)(int)8) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,get_green,return )

int FlxColor_Impl__obj::get_blue(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_586_get_blue)
HXDLIN( 586)		return ((int)this1 & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,get_blue,return )

int FlxColor_Impl__obj::get_alpha(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_591_get_alpha)
HXDLIN( 591)		return ((int)((int)this1 >> (int)(int)24) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,get_alpha,return )

Float FlxColor_Impl__obj::get_redFloat(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_596_get_redFloat)
HXDLIN( 596)		return ((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,get_redFloat,return )

Float FlxColor_Impl__obj::get_greenFloat(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_601_get_greenFloat)
HXDLIN( 601)		return ((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,get_greenFloat,return )

Float FlxColor_Impl__obj::get_blueFloat(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_606_get_blueFloat)
HXDLIN( 606)		return ((Float)((int)this1 & (int)(int)255) / (Float)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,get_blueFloat,return )

Float FlxColor_Impl__obj::get_alphaFloat(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_611_get_alphaFloat)
HXDLIN( 611)		return ((Float)((int)((int)this1 >> (int)(int)24) & (int)(int)255) / (Float)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,get_alphaFloat,return )

int FlxColor_Impl__obj::set_red(int this1,int Value){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_615_set_red)
HXLINE( 617)		this1 = ((int)this1 & (int)(int)-16711681);
HXLINE( 618)		int this2;
HXDLIN( 618)		if ((Value > (int)255)) {
HXLINE( 618)			this2 = (int)255;
            		}
            		else {
HXLINE( 618)			if ((Value < (int)0)) {
HXLINE( 618)				this2 = (int)0;
            			}
            			else {
HXLINE( 618)				this2 = Value;
            			}
            		}
HXDLIN( 618)		this1 = ((int)this1 | (int)((int)this2 << (int)(int)16));
HXLINE( 619)		return Value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,set_red,return )

int FlxColor_Impl__obj::set_green(int this1,int Value){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_623_set_green)
HXLINE( 625)		this1 = ((int)this1 & (int)(int)-65281);
HXLINE( 626)		int this2;
HXDLIN( 626)		if ((Value > (int)255)) {
HXLINE( 626)			this2 = (int)255;
            		}
            		else {
HXLINE( 626)			if ((Value < (int)0)) {
HXLINE( 626)				this2 = (int)0;
            			}
            			else {
HXLINE( 626)				this2 = Value;
            			}
            		}
HXDLIN( 626)		this1 = ((int)this1 | (int)((int)this2 << (int)(int)8));
HXLINE( 627)		return Value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,set_green,return )

int FlxColor_Impl__obj::set_blue(int this1,int Value){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_631_set_blue)
HXLINE( 633)		this1 = ((int)this1 & (int)(int)-256);
HXLINE( 634)		int this2;
HXDLIN( 634)		if ((Value > (int)255)) {
HXLINE( 634)			this2 = (int)255;
            		}
            		else {
HXLINE( 634)			if ((Value < (int)0)) {
HXLINE( 634)				this2 = (int)0;
            			}
            			else {
HXLINE( 634)				this2 = Value;
            			}
            		}
HXDLIN( 634)		this1 = ((int)this1 | (int)this2);
HXLINE( 635)		return Value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,set_blue,return )

int FlxColor_Impl__obj::set_alpha(int this1,int Value){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_639_set_alpha)
HXLINE( 641)		this1 = ((int)this1 & (int)(int)16777215);
HXLINE( 642)		int this2;
HXDLIN( 642)		if ((Value > (int)255)) {
HXLINE( 642)			this2 = (int)255;
            		}
            		else {
HXLINE( 642)			if ((Value < (int)0)) {
HXLINE( 642)				this2 = (int)0;
            			}
            			else {
HXLINE( 642)				this2 = Value;
            			}
            		}
HXDLIN( 642)		this1 = ((int)this1 | (int)((int)this2 << (int)(int)24));
HXLINE( 643)		return Value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,set_alpha,return )

Float FlxColor_Impl__obj::set_redFloat(int this1,Float Value){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_647_set_redFloat)
HXLINE( 648)		{
HXLINE( 648)			int Value1 = ::Math_obj::round((Value * (int)255));
HXDLIN( 648)			this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 648)			int this2;
HXDLIN( 648)			if ((Value1 > (int)255)) {
HXLINE( 648)				this2 = (int)255;
            			}
            			else {
HXLINE( 648)				if ((Value1 < (int)0)) {
HXLINE( 648)					this2 = (int)0;
            				}
            				else {
HXLINE( 648)					this2 = Value1;
            				}
            			}
HXDLIN( 648)			this1 = ((int)this1 | (int)((int)this2 << (int)(int)16));
            		}
HXLINE( 649)		return Value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,set_redFloat,return )

Float FlxColor_Impl__obj::set_greenFloat(int this1,Float Value){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_653_set_greenFloat)
HXLINE( 654)		{
HXLINE( 654)			int Value1 = ::Math_obj::round((Value * (int)255));
HXDLIN( 654)			this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 654)			int this2;
HXDLIN( 654)			if ((Value1 > (int)255)) {
HXLINE( 654)				this2 = (int)255;
            			}
            			else {
HXLINE( 654)				if ((Value1 < (int)0)) {
HXLINE( 654)					this2 = (int)0;
            				}
            				else {
HXLINE( 654)					this2 = Value1;
            				}
            			}
HXDLIN( 654)			this1 = ((int)this1 | (int)((int)this2 << (int)(int)8));
            		}
HXLINE( 655)		return Value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,set_greenFloat,return )

Float FlxColor_Impl__obj::set_blueFloat(int this1,Float Value){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_659_set_blueFloat)
HXLINE( 660)		{
HXLINE( 660)			int Value1 = ::Math_obj::round((Value * (int)255));
HXDLIN( 660)			this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 660)			int this2;
HXDLIN( 660)			if ((Value1 > (int)255)) {
HXLINE( 660)				this2 = (int)255;
            			}
            			else {
HXLINE( 660)				if ((Value1 < (int)0)) {
HXLINE( 660)					this2 = (int)0;
            				}
            				else {
HXLINE( 660)					this2 = Value1;
            				}
            			}
HXDLIN( 660)			this1 = ((int)this1 | (int)this2);
            		}
HXLINE( 661)		return Value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,set_blueFloat,return )

Float FlxColor_Impl__obj::set_alphaFloat(int this1,Float Value){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_665_set_alphaFloat)
HXLINE( 666)		{
HXLINE( 666)			int Value1 = ::Math_obj::round((Value * (int)255));
HXDLIN( 666)			this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 666)			int this2;
HXDLIN( 666)			if ((Value1 > (int)255)) {
HXLINE( 666)				this2 = (int)255;
            			}
            			else {
HXLINE( 666)				if ((Value1 < (int)0)) {
HXLINE( 666)					this2 = (int)0;
            				}
            				else {
HXLINE( 666)					this2 = Value1;
            				}
            			}
HXDLIN( 666)			this1 = ((int)this1 | (int)((int)this2 << (int)(int)24));
            		}
HXLINE( 667)		return Value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,set_alphaFloat,return )

Float FlxColor_Impl__obj::get_cyan(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_672_get_cyan)
HXDLIN( 672)		Float _hx_tmp = (((int)1 - ((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255)) - ((int)1 - ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))));
HXDLIN( 672)		return ((Float)_hx_tmp / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,get_cyan,return )

Float FlxColor_Impl__obj::get_magenta(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_677_get_magenta)
HXDLIN( 677)		Float _hx_tmp = (((int)1 - ((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255)) - ((int)1 - ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))));
HXDLIN( 677)		return ((Float)_hx_tmp / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,get_magenta,return )

Float FlxColor_Impl__obj::get_yellow(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_682_get_yellow)
HXDLIN( 682)		Float _hx_tmp = (((int)1 - ((Float)((int)this1 & (int)(int)255) / (Float)(int)255)) - ((int)1 - ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))));
HXDLIN( 682)		return ((Float)_hx_tmp / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,get_yellow,return )

Float FlxColor_Impl__obj::get_black(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_687_get_black)
HXDLIN( 687)		return ((int)1 - ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,get_black,return )

Float FlxColor_Impl__obj::set_cyan(int this1,Float Value){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_691_set_cyan)
HXLINE( 692)		{
HXLINE( 692)			Float Magenta = (((int)1 - ((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255)) - ((int)1 - ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))));
HXDLIN( 692)			Float Magenta1 = ((Float)Magenta / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 692)			Float Yellow = (((int)1 - ((Float)((int)this1 & (int)(int)255) / (Float)(int)255)) - ((int)1 - ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))));
HXDLIN( 692)			Float Yellow1 = ((Float)Yellow / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 692)			Float Black = ((int)1 - ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 692)			Float Alpha = ((Float)((int)((int)this1 >> (int)(int)24) & (int)(int)255) / (Float)(int)255);
HXDLIN( 692)			{
HXLINE( 692)				Float Value1 = (((int)1 - Value) * ((int)1 - Black));
HXDLIN( 692)				{
HXLINE( 692)					int Value2 = ::Math_obj::round((Value1 * (int)255));
HXDLIN( 692)					this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 692)					int this2;
HXDLIN( 692)					if ((Value2 > (int)255)) {
HXLINE( 692)						this2 = (int)255;
            					}
            					else {
HXLINE( 692)						if ((Value2 < (int)0)) {
HXLINE( 692)							this2 = (int)0;
            						}
            						else {
HXLINE( 692)							this2 = Value2;
            						}
            					}
HXDLIN( 692)					this1 = ((int)this1 | (int)((int)this2 << (int)(int)16));
            				}
            			}
HXDLIN( 692)			{
HXLINE( 692)				Float Value3 = (((int)1 - Magenta1) * ((int)1 - Black));
HXDLIN( 692)				{
HXLINE( 692)					int Value4 = ::Math_obj::round((Value3 * (int)255));
HXDLIN( 692)					this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 692)					int this3;
HXDLIN( 692)					if ((Value4 > (int)255)) {
HXLINE( 692)						this3 = (int)255;
            					}
            					else {
HXLINE( 692)						if ((Value4 < (int)0)) {
HXLINE( 692)							this3 = (int)0;
            						}
            						else {
HXLINE( 692)							this3 = Value4;
            						}
            					}
HXDLIN( 692)					this1 = ((int)this1 | (int)((int)this3 << (int)(int)8));
            				}
            			}
HXDLIN( 692)			{
HXLINE( 692)				Float Value5 = (((int)1 - Yellow1) * ((int)1 - Black));
HXDLIN( 692)				{
HXLINE( 692)					int Value6 = ::Math_obj::round((Value5 * (int)255));
HXDLIN( 692)					this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 692)					int this4;
HXDLIN( 692)					if ((Value6 > (int)255)) {
HXLINE( 692)						this4 = (int)255;
            					}
            					else {
HXLINE( 692)						if ((Value6 < (int)0)) {
HXLINE( 692)							this4 = (int)0;
            						}
            						else {
HXLINE( 692)							this4 = Value6;
            						}
            					}
HXDLIN( 692)					this1 = ((int)this1 | (int)this4);
            				}
            			}
HXDLIN( 692)			{
HXLINE( 692)				int Value7 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 692)				this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 692)				int this5;
HXDLIN( 692)				if ((Value7 > (int)255)) {
HXLINE( 692)					this5 = (int)255;
            				}
            				else {
HXLINE( 692)					if ((Value7 < (int)0)) {
HXLINE( 692)						this5 = (int)0;
            					}
            					else {
HXLINE( 692)						this5 = Value7;
            					}
            				}
HXDLIN( 692)				this1 = ((int)this1 | (int)((int)this5 << (int)(int)24));
            			}
            		}
HXLINE( 693)		return Value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,set_cyan,return )

Float FlxColor_Impl__obj::set_magenta(int this1,Float Value){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_697_set_magenta)
HXLINE( 698)		{
HXLINE( 698)			Float Cyan = (((int)1 - ((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255)) - ((int)1 - ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))));
HXDLIN( 698)			Float Yellow = (((int)1 - ((Float)((int)this1 & (int)(int)255) / (Float)(int)255)) - ((int)1 - ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))));
HXDLIN( 698)			Float Yellow1 = ((Float)Yellow / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 698)			Float Black = ((int)1 - ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 698)			Float Alpha = ((Float)((int)((int)this1 >> (int)(int)24) & (int)(int)255) / (Float)(int)255);
HXDLIN( 698)			{
HXLINE( 698)				Float Value1 = (((int)1 - ((Float)Cyan / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))))) * ((int)1 - Black));
HXDLIN( 698)				{
HXLINE( 698)					int Value2 = ::Math_obj::round((Value1 * (int)255));
HXDLIN( 698)					this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 698)					int this2;
HXDLIN( 698)					if ((Value2 > (int)255)) {
HXLINE( 698)						this2 = (int)255;
            					}
            					else {
HXLINE( 698)						if ((Value2 < (int)0)) {
HXLINE( 698)							this2 = (int)0;
            						}
            						else {
HXLINE( 698)							this2 = Value2;
            						}
            					}
HXDLIN( 698)					this1 = ((int)this1 | (int)((int)this2 << (int)(int)16));
            				}
            			}
HXDLIN( 698)			{
HXLINE( 698)				Float Value3 = (((int)1 - Value) * ((int)1 - Black));
HXDLIN( 698)				{
HXLINE( 698)					int Value4 = ::Math_obj::round((Value3 * (int)255));
HXDLIN( 698)					this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 698)					int this3;
HXDLIN( 698)					if ((Value4 > (int)255)) {
HXLINE( 698)						this3 = (int)255;
            					}
            					else {
HXLINE( 698)						if ((Value4 < (int)0)) {
HXLINE( 698)							this3 = (int)0;
            						}
            						else {
HXLINE( 698)							this3 = Value4;
            						}
            					}
HXDLIN( 698)					this1 = ((int)this1 | (int)((int)this3 << (int)(int)8));
            				}
            			}
HXDLIN( 698)			{
HXLINE( 698)				Float Value5 = (((int)1 - Yellow1) * ((int)1 - Black));
HXDLIN( 698)				{
HXLINE( 698)					int Value6 = ::Math_obj::round((Value5 * (int)255));
HXDLIN( 698)					this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 698)					int this4;
HXDLIN( 698)					if ((Value6 > (int)255)) {
HXLINE( 698)						this4 = (int)255;
            					}
            					else {
HXLINE( 698)						if ((Value6 < (int)0)) {
HXLINE( 698)							this4 = (int)0;
            						}
            						else {
HXLINE( 698)							this4 = Value6;
            						}
            					}
HXDLIN( 698)					this1 = ((int)this1 | (int)this4);
            				}
            			}
HXDLIN( 698)			{
HXLINE( 698)				int Value7 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 698)				this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 698)				int this5;
HXDLIN( 698)				if ((Value7 > (int)255)) {
HXLINE( 698)					this5 = (int)255;
            				}
            				else {
HXLINE( 698)					if ((Value7 < (int)0)) {
HXLINE( 698)						this5 = (int)0;
            					}
            					else {
HXLINE( 698)						this5 = Value7;
            					}
            				}
HXDLIN( 698)				this1 = ((int)this1 | (int)((int)this5 << (int)(int)24));
            			}
            		}
HXLINE( 699)		return Value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,set_magenta,return )

Float FlxColor_Impl__obj::set_yellow(int this1,Float Value){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_703_set_yellow)
HXLINE( 704)		{
HXLINE( 704)			Float Cyan = (((int)1 - ((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255)) - ((int)1 - ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))));
HXDLIN( 704)			Float Magenta = (((int)1 - ((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255)) - ((int)1 - ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))));
HXDLIN( 704)			Float Magenta1 = ((Float)Magenta / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 704)			Float Black = ((int)1 - ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 704)			Float Alpha = ((Float)((int)((int)this1 >> (int)(int)24) & (int)(int)255) / (Float)(int)255);
HXDLIN( 704)			{
HXLINE( 704)				Float Value1 = (((int)1 - ((Float)Cyan / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))))) * ((int)1 - Black));
HXDLIN( 704)				{
HXLINE( 704)					int Value2 = ::Math_obj::round((Value1 * (int)255));
HXDLIN( 704)					this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 704)					int this2;
HXDLIN( 704)					if ((Value2 > (int)255)) {
HXLINE( 704)						this2 = (int)255;
            					}
            					else {
HXLINE( 704)						if ((Value2 < (int)0)) {
HXLINE( 704)							this2 = (int)0;
            						}
            						else {
HXLINE( 704)							this2 = Value2;
            						}
            					}
HXDLIN( 704)					this1 = ((int)this1 | (int)((int)this2 << (int)(int)16));
            				}
            			}
HXDLIN( 704)			{
HXLINE( 704)				Float Value3 = (((int)1 - Magenta1) * ((int)1 - Black));
HXDLIN( 704)				{
HXLINE( 704)					int Value4 = ::Math_obj::round((Value3 * (int)255));
HXDLIN( 704)					this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 704)					int this3;
HXDLIN( 704)					if ((Value4 > (int)255)) {
HXLINE( 704)						this3 = (int)255;
            					}
            					else {
HXLINE( 704)						if ((Value4 < (int)0)) {
HXLINE( 704)							this3 = (int)0;
            						}
            						else {
HXLINE( 704)							this3 = Value4;
            						}
            					}
HXDLIN( 704)					this1 = ((int)this1 | (int)((int)this3 << (int)(int)8));
            				}
            			}
HXDLIN( 704)			{
HXLINE( 704)				Float Value5 = (((int)1 - Value) * ((int)1 - Black));
HXDLIN( 704)				{
HXLINE( 704)					int Value6 = ::Math_obj::round((Value5 * (int)255));
HXDLIN( 704)					this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 704)					int this4;
HXDLIN( 704)					if ((Value6 > (int)255)) {
HXLINE( 704)						this4 = (int)255;
            					}
            					else {
HXLINE( 704)						if ((Value6 < (int)0)) {
HXLINE( 704)							this4 = (int)0;
            						}
            						else {
HXLINE( 704)							this4 = Value6;
            						}
            					}
HXDLIN( 704)					this1 = ((int)this1 | (int)this4);
            				}
            			}
HXDLIN( 704)			{
HXLINE( 704)				int Value7 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 704)				this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 704)				int this5;
HXDLIN( 704)				if ((Value7 > (int)255)) {
HXLINE( 704)					this5 = (int)255;
            				}
            				else {
HXLINE( 704)					if ((Value7 < (int)0)) {
HXLINE( 704)						this5 = (int)0;
            					}
            					else {
HXLINE( 704)						this5 = Value7;
            					}
            				}
HXDLIN( 704)				this1 = ((int)this1 | (int)((int)this5 << (int)(int)24));
            			}
            		}
HXLINE( 705)		return Value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,set_yellow,return )

Float FlxColor_Impl__obj::set_black(int this1,Float Value){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_709_set_black)
HXLINE( 710)		{
HXLINE( 710)			Float Cyan = (((int)1 - ((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255)) - ((int)1 - ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))));
HXDLIN( 710)			Float Magenta = (((int)1 - ((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255)) - ((int)1 - ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))));
HXDLIN( 710)			Float Magenta1 = ((Float)Magenta / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 710)			Float Yellow = (((int)1 - ((Float)((int)this1 & (int)(int)255) / (Float)(int)255)) - ((int)1 - ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))));
HXDLIN( 710)			Float Yellow1 = ((Float)Yellow / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 710)			Float Alpha = ((Float)((int)((int)this1 >> (int)(int)24) & (int)(int)255) / (Float)(int)255);
HXDLIN( 710)			{
HXLINE( 710)				Float Value1 = (((int)1 - ((Float)Cyan / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))))) * ((int)1 - Value));
HXDLIN( 710)				{
HXLINE( 710)					int Value2 = ::Math_obj::round((Value1 * (int)255));
HXDLIN( 710)					this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 710)					int this2;
HXDLIN( 710)					if ((Value2 > (int)255)) {
HXLINE( 710)						this2 = (int)255;
            					}
            					else {
HXLINE( 710)						if ((Value2 < (int)0)) {
HXLINE( 710)							this2 = (int)0;
            						}
            						else {
HXLINE( 710)							this2 = Value2;
            						}
            					}
HXDLIN( 710)					this1 = ((int)this1 | (int)((int)this2 << (int)(int)16));
            				}
            			}
HXDLIN( 710)			{
HXLINE( 710)				Float Value3 = (((int)1 - Magenta1) * ((int)1 - Value));
HXDLIN( 710)				{
HXLINE( 710)					int Value4 = ::Math_obj::round((Value3 * (int)255));
HXDLIN( 710)					this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 710)					int this3;
HXDLIN( 710)					if ((Value4 > (int)255)) {
HXLINE( 710)						this3 = (int)255;
            					}
            					else {
HXLINE( 710)						if ((Value4 < (int)0)) {
HXLINE( 710)							this3 = (int)0;
            						}
            						else {
HXLINE( 710)							this3 = Value4;
            						}
            					}
HXDLIN( 710)					this1 = ((int)this1 | (int)((int)this3 << (int)(int)8));
            				}
            			}
HXDLIN( 710)			{
HXLINE( 710)				Float Value5 = (((int)1 - Yellow1) * ((int)1 - Value));
HXDLIN( 710)				{
HXLINE( 710)					int Value6 = ::Math_obj::round((Value5 * (int)255));
HXDLIN( 710)					this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 710)					int this4;
HXDLIN( 710)					if ((Value6 > (int)255)) {
HXLINE( 710)						this4 = (int)255;
            					}
            					else {
HXLINE( 710)						if ((Value6 < (int)0)) {
HXLINE( 710)							this4 = (int)0;
            						}
            						else {
HXLINE( 710)							this4 = Value6;
            						}
            					}
HXDLIN( 710)					this1 = ((int)this1 | (int)this4);
            				}
            			}
HXDLIN( 710)			{
HXLINE( 710)				int Value7 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 710)				this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 710)				int this5;
HXDLIN( 710)				if ((Value7 > (int)255)) {
HXLINE( 710)					this5 = (int)255;
            				}
            				else {
HXLINE( 710)					if ((Value7 < (int)0)) {
HXLINE( 710)						this5 = (int)0;
            					}
            					else {
HXLINE( 710)						this5 = Value7;
            					}
            				}
HXDLIN( 710)				this1 = ((int)this1 | (int)((int)this5 << (int)(int)24));
            			}
            		}
HXLINE( 711)		return Value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,set_black,return )

Float FlxColor_Impl__obj::get_hue(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_715_get_hue)
HXLINE( 716)		Float hueRad = ::Math_obj::sqrt((int)3);
HXDLIN( 716)		Float hueRad1 = (hueRad * (((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255) - ((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 716)		Float hueRad2 = ::Math_obj::atan2(hueRad1,((((int)2 * ((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255)) - ((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255)) - ((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXLINE( 717)		Float hue = (int)0;
HXLINE( 718)		if ((hueRad2 != (int)0)) {
HXLINE( 720)			Float hue1 = ((Float)(int)180 / (Float)::Math_obj::PI);
HXDLIN( 720)			Float hue2 = ::Math_obj::sqrt((int)3);
HXDLIN( 720)			Float hue3 = (hue2 * (((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255) - ((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 720)			hue = (hue1 * ::Math_obj::atan2(hue3,((((int)2 * ((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255)) - ((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255)) - ((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
            		}
HXLINE( 723)		if ((hue < (int)0)) {
HXLINE( 723)			return (hue + (int)360);
            		}
            		else {
HXLINE( 723)			return hue;
            		}
HXDLIN( 723)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,get_hue,return )

Float FlxColor_Impl__obj::get_brightness(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_728_get_brightness)
HXDLIN( 728)		return ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,get_brightness,return )

Float FlxColor_Impl__obj::get_saturation(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_733_get_saturation)
HXDLIN( 733)		Float _hx_tmp = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 733)		Float _hx_tmp1 = (_hx_tmp - ::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 733)		return ((Float)_hx_tmp1 / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,get_saturation,return )

Float FlxColor_Impl__obj::get_lightness(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_738_get_lightness)
HXDLIN( 738)		Float _hx_tmp = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 738)		return ((Float)(_hx_tmp + ::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))) / (Float)(int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,get_lightness,return )

Float FlxColor_Impl__obj::set_hue(int this1,Float Value){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_742_set_hue)
HXLINE( 743)		{
HXLINE( 743)			Float Saturation = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 743)			Float Saturation1 = (Saturation - ::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 743)			Float Brightness = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 743)			Float Alpha = ((Float)((int)((int)this1 >> (int)(int)24) & (int)(int)255) / (Float)(int)255);
HXDLIN( 743)			Float chroma = (Brightness * ((Float)Saturation1 / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))));
HXDLIN( 743)			Float match = (Brightness - chroma);
HXDLIN( 743)			{
HXLINE( 743)				Float Hue = Value;
HXDLIN( 743)				Float Chroma = chroma;
HXDLIN( 743)				Hue = hx::Mod(Hue,(int)360);
HXDLIN( 743)				Float hueD = ((Float)Hue / (Float)(int)60);
HXDLIN( 743)				Float mid = ((Chroma * ((int)1 - ::Math_obj::abs((hx::Mod(hueD,(int)2) - (int)1)))) + match);
HXDLIN( 743)				Chroma = (Chroma + match);
HXDLIN( 743)				{
HXLINE( 743)					int _g = ::Std_obj::_hx_int(hueD);
HXDLIN( 743)					switch((int)(_g)){
            						case (int)0: {
HXLINE( 743)							{
HXLINE( 743)								int Value1 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 743)								int this2;
HXDLIN( 743)								if ((Value1 > (int)255)) {
HXLINE( 743)									this2 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value1 < (int)0)) {
HXLINE( 743)										this2 = (int)0;
            									}
            									else {
HXLINE( 743)										this2 = Value1;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)((int)this2 << (int)(int)16));
            							}
HXDLIN( 743)							{
HXLINE( 743)								int Value2 = ::Math_obj::round((mid * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 743)								int this3;
HXDLIN( 743)								if ((Value2 > (int)255)) {
HXLINE( 743)									this3 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value2 < (int)0)) {
HXLINE( 743)										this3 = (int)0;
            									}
            									else {
HXLINE( 743)										this3 = Value2;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)((int)this3 << (int)(int)8));
            							}
HXDLIN( 743)							{
HXLINE( 743)								int Value3 = ::Math_obj::round((match * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 743)								int this4;
HXDLIN( 743)								if ((Value3 > (int)255)) {
HXLINE( 743)									this4 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value3 < (int)0)) {
HXLINE( 743)										this4 = (int)0;
            									}
            									else {
HXLINE( 743)										this4 = Value3;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)this4);
            							}
HXDLIN( 743)							{
HXLINE( 743)								int Value4 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 743)								int this5;
HXDLIN( 743)								if ((Value4 > (int)255)) {
HXLINE( 743)									this5 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value4 < (int)0)) {
HXLINE( 743)										this5 = (int)0;
            									}
            									else {
HXLINE( 743)										this5 = Value4;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)((int)this5 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 743)							{
HXLINE( 743)								int Value5 = ::Math_obj::round((mid * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 743)								int this6;
HXDLIN( 743)								if ((Value5 > (int)255)) {
HXLINE( 743)									this6 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value5 < (int)0)) {
HXLINE( 743)										this6 = (int)0;
            									}
            									else {
HXLINE( 743)										this6 = Value5;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)((int)this6 << (int)(int)16));
            							}
HXDLIN( 743)							{
HXLINE( 743)								int Value6 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 743)								int this7;
HXDLIN( 743)								if ((Value6 > (int)255)) {
HXLINE( 743)									this7 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value6 < (int)0)) {
HXLINE( 743)										this7 = (int)0;
            									}
            									else {
HXLINE( 743)										this7 = Value6;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)((int)this7 << (int)(int)8));
            							}
HXDLIN( 743)							{
HXLINE( 743)								int Value7 = ::Math_obj::round((match * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 743)								int this8;
HXDLIN( 743)								if ((Value7 > (int)255)) {
HXLINE( 743)									this8 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value7 < (int)0)) {
HXLINE( 743)										this8 = (int)0;
            									}
            									else {
HXLINE( 743)										this8 = Value7;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)this8);
            							}
HXDLIN( 743)							{
HXLINE( 743)								int Value8 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 743)								int this9;
HXDLIN( 743)								if ((Value8 > (int)255)) {
HXLINE( 743)									this9 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value8 < (int)0)) {
HXLINE( 743)										this9 = (int)0;
            									}
            									else {
HXLINE( 743)										this9 = Value8;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)((int)this9 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 743)							{
HXLINE( 743)								int Value9 = ::Math_obj::round((match * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 743)								int this10;
HXDLIN( 743)								if ((Value9 > (int)255)) {
HXLINE( 743)									this10 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value9 < (int)0)) {
HXLINE( 743)										this10 = (int)0;
            									}
            									else {
HXLINE( 743)										this10 = Value9;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)((int)this10 << (int)(int)16));
            							}
HXDLIN( 743)							{
HXLINE( 743)								int Value10 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 743)								int this11;
HXDLIN( 743)								if ((Value10 > (int)255)) {
HXLINE( 743)									this11 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value10 < (int)0)) {
HXLINE( 743)										this11 = (int)0;
            									}
            									else {
HXLINE( 743)										this11 = Value10;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)((int)this11 << (int)(int)8));
            							}
HXDLIN( 743)							{
HXLINE( 743)								int Value11 = ::Math_obj::round((mid * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 743)								int this12;
HXDLIN( 743)								if ((Value11 > (int)255)) {
HXLINE( 743)									this12 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value11 < (int)0)) {
HXLINE( 743)										this12 = (int)0;
            									}
            									else {
HXLINE( 743)										this12 = Value11;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)this12);
            							}
HXDLIN( 743)							{
HXLINE( 743)								int Value12 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 743)								int this13;
HXDLIN( 743)								if ((Value12 > (int)255)) {
HXLINE( 743)									this13 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value12 < (int)0)) {
HXLINE( 743)										this13 = (int)0;
            									}
            									else {
HXLINE( 743)										this13 = Value12;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)((int)this13 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 743)							{
HXLINE( 743)								int Value13 = ::Math_obj::round((match * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 743)								int this14;
HXDLIN( 743)								if ((Value13 > (int)255)) {
HXLINE( 743)									this14 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value13 < (int)0)) {
HXLINE( 743)										this14 = (int)0;
            									}
            									else {
HXLINE( 743)										this14 = Value13;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)((int)this14 << (int)(int)16));
            							}
HXDLIN( 743)							{
HXLINE( 743)								int Value14 = ::Math_obj::round((mid * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 743)								int this15;
HXDLIN( 743)								if ((Value14 > (int)255)) {
HXLINE( 743)									this15 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value14 < (int)0)) {
HXLINE( 743)										this15 = (int)0;
            									}
            									else {
HXLINE( 743)										this15 = Value14;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)((int)this15 << (int)(int)8));
            							}
HXDLIN( 743)							{
HXLINE( 743)								int Value15 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 743)								int this16;
HXDLIN( 743)								if ((Value15 > (int)255)) {
HXLINE( 743)									this16 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value15 < (int)0)) {
HXLINE( 743)										this16 = (int)0;
            									}
            									else {
HXLINE( 743)										this16 = Value15;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)this16);
            							}
HXDLIN( 743)							{
HXLINE( 743)								int Value16 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 743)								int this17;
HXDLIN( 743)								if ((Value16 > (int)255)) {
HXLINE( 743)									this17 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value16 < (int)0)) {
HXLINE( 743)										this17 = (int)0;
            									}
            									else {
HXLINE( 743)										this17 = Value16;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)((int)this17 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 743)							{
HXLINE( 743)								int Value17 = ::Math_obj::round((mid * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 743)								int this18;
HXDLIN( 743)								if ((Value17 > (int)255)) {
HXLINE( 743)									this18 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value17 < (int)0)) {
HXLINE( 743)										this18 = (int)0;
            									}
            									else {
HXLINE( 743)										this18 = Value17;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)((int)this18 << (int)(int)16));
            							}
HXDLIN( 743)							{
HXLINE( 743)								int Value18 = ::Math_obj::round((match * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 743)								int this19;
HXDLIN( 743)								if ((Value18 > (int)255)) {
HXLINE( 743)									this19 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value18 < (int)0)) {
HXLINE( 743)										this19 = (int)0;
            									}
            									else {
HXLINE( 743)										this19 = Value18;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)((int)this19 << (int)(int)8));
            							}
HXDLIN( 743)							{
HXLINE( 743)								int Value19 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 743)								int this20;
HXDLIN( 743)								if ((Value19 > (int)255)) {
HXLINE( 743)									this20 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value19 < (int)0)) {
HXLINE( 743)										this20 = (int)0;
            									}
            									else {
HXLINE( 743)										this20 = Value19;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)this20);
            							}
HXDLIN( 743)							{
HXLINE( 743)								int Value20 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 743)								int this21;
HXDLIN( 743)								if ((Value20 > (int)255)) {
HXLINE( 743)									this21 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value20 < (int)0)) {
HXLINE( 743)										this21 = (int)0;
            									}
            									else {
HXLINE( 743)										this21 = Value20;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)((int)this21 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 743)							{
HXLINE( 743)								int Value21 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 743)								int this22;
HXDLIN( 743)								if ((Value21 > (int)255)) {
HXLINE( 743)									this22 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value21 < (int)0)) {
HXLINE( 743)										this22 = (int)0;
            									}
            									else {
HXLINE( 743)										this22 = Value21;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)((int)this22 << (int)(int)16));
            							}
HXDLIN( 743)							{
HXLINE( 743)								int Value22 = ::Math_obj::round((match * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 743)								int this23;
HXDLIN( 743)								if ((Value22 > (int)255)) {
HXLINE( 743)									this23 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value22 < (int)0)) {
HXLINE( 743)										this23 = (int)0;
            									}
            									else {
HXLINE( 743)										this23 = Value22;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)((int)this23 << (int)(int)8));
            							}
HXDLIN( 743)							{
HXLINE( 743)								int Value23 = ::Math_obj::round((mid * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 743)								int this24;
HXDLIN( 743)								if ((Value23 > (int)255)) {
HXLINE( 743)									this24 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value23 < (int)0)) {
HXLINE( 743)										this24 = (int)0;
            									}
            									else {
HXLINE( 743)										this24 = Value23;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)this24);
            							}
HXDLIN( 743)							{
HXLINE( 743)								int Value24 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 743)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 743)								int this25;
HXDLIN( 743)								if ((Value24 > (int)255)) {
HXLINE( 743)									this25 = (int)255;
            								}
            								else {
HXLINE( 743)									if ((Value24 < (int)0)) {
HXLINE( 743)										this25 = (int)0;
            									}
            									else {
HXLINE( 743)										this25 = Value24;
            									}
            								}
HXDLIN( 743)								this1 = ((int)this1 | (int)((int)this25 << (int)(int)24));
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
HXLINE( 744)		return Value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,set_hue,return )

Float FlxColor_Impl__obj::set_saturation(int this1,Float Value){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_748_set_saturation)
HXLINE( 749)		{
HXLINE( 749)			Float Hue = ::flixel::util::_FlxColor::FlxColor_Impl__obj::get_hue(this1);
HXDLIN( 749)			Float Brightness = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 749)			Float Alpha = ((Float)((int)((int)this1 >> (int)(int)24) & (int)(int)255) / (Float)(int)255);
HXDLIN( 749)			Float chroma = (Brightness * Value);
HXDLIN( 749)			Float match = (Brightness - chroma);
HXDLIN( 749)			{
HXLINE( 749)				Float Hue1 = Hue;
HXDLIN( 749)				Float Chroma = chroma;
HXDLIN( 749)				Hue1 = hx::Mod(Hue1,(int)360);
HXDLIN( 749)				Float hueD = ((Float)Hue1 / (Float)(int)60);
HXDLIN( 749)				Float mid = ((Chroma * ((int)1 - ::Math_obj::abs((hx::Mod(hueD,(int)2) - (int)1)))) + match);
HXDLIN( 749)				Chroma = (Chroma + match);
HXDLIN( 749)				{
HXLINE( 749)					int _g = ::Std_obj::_hx_int(hueD);
HXDLIN( 749)					switch((int)(_g)){
            						case (int)0: {
HXLINE( 749)							{
HXLINE( 749)								int Value1 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 749)								int this2;
HXDLIN( 749)								if ((Value1 > (int)255)) {
HXLINE( 749)									this2 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value1 < (int)0)) {
HXLINE( 749)										this2 = (int)0;
            									}
            									else {
HXLINE( 749)										this2 = Value1;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)((int)this2 << (int)(int)16));
            							}
HXDLIN( 749)							{
HXLINE( 749)								int Value2 = ::Math_obj::round((mid * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 749)								int this3;
HXDLIN( 749)								if ((Value2 > (int)255)) {
HXLINE( 749)									this3 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value2 < (int)0)) {
HXLINE( 749)										this3 = (int)0;
            									}
            									else {
HXLINE( 749)										this3 = Value2;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)((int)this3 << (int)(int)8));
            							}
HXDLIN( 749)							{
HXLINE( 749)								int Value3 = ::Math_obj::round((match * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 749)								int this4;
HXDLIN( 749)								if ((Value3 > (int)255)) {
HXLINE( 749)									this4 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value3 < (int)0)) {
HXLINE( 749)										this4 = (int)0;
            									}
            									else {
HXLINE( 749)										this4 = Value3;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)this4);
            							}
HXDLIN( 749)							{
HXLINE( 749)								int Value4 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 749)								int this5;
HXDLIN( 749)								if ((Value4 > (int)255)) {
HXLINE( 749)									this5 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value4 < (int)0)) {
HXLINE( 749)										this5 = (int)0;
            									}
            									else {
HXLINE( 749)										this5 = Value4;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)((int)this5 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 749)							{
HXLINE( 749)								int Value5 = ::Math_obj::round((mid * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 749)								int this6;
HXDLIN( 749)								if ((Value5 > (int)255)) {
HXLINE( 749)									this6 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value5 < (int)0)) {
HXLINE( 749)										this6 = (int)0;
            									}
            									else {
HXLINE( 749)										this6 = Value5;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)((int)this6 << (int)(int)16));
            							}
HXDLIN( 749)							{
HXLINE( 749)								int Value6 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 749)								int this7;
HXDLIN( 749)								if ((Value6 > (int)255)) {
HXLINE( 749)									this7 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value6 < (int)0)) {
HXLINE( 749)										this7 = (int)0;
            									}
            									else {
HXLINE( 749)										this7 = Value6;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)((int)this7 << (int)(int)8));
            							}
HXDLIN( 749)							{
HXLINE( 749)								int Value7 = ::Math_obj::round((match * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 749)								int this8;
HXDLIN( 749)								if ((Value7 > (int)255)) {
HXLINE( 749)									this8 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value7 < (int)0)) {
HXLINE( 749)										this8 = (int)0;
            									}
            									else {
HXLINE( 749)										this8 = Value7;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)this8);
            							}
HXDLIN( 749)							{
HXLINE( 749)								int Value8 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 749)								int this9;
HXDLIN( 749)								if ((Value8 > (int)255)) {
HXLINE( 749)									this9 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value8 < (int)0)) {
HXLINE( 749)										this9 = (int)0;
            									}
            									else {
HXLINE( 749)										this9 = Value8;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)((int)this9 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 749)							{
HXLINE( 749)								int Value9 = ::Math_obj::round((match * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 749)								int this10;
HXDLIN( 749)								if ((Value9 > (int)255)) {
HXLINE( 749)									this10 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value9 < (int)0)) {
HXLINE( 749)										this10 = (int)0;
            									}
            									else {
HXLINE( 749)										this10 = Value9;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)((int)this10 << (int)(int)16));
            							}
HXDLIN( 749)							{
HXLINE( 749)								int Value10 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 749)								int this11;
HXDLIN( 749)								if ((Value10 > (int)255)) {
HXLINE( 749)									this11 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value10 < (int)0)) {
HXLINE( 749)										this11 = (int)0;
            									}
            									else {
HXLINE( 749)										this11 = Value10;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)((int)this11 << (int)(int)8));
            							}
HXDLIN( 749)							{
HXLINE( 749)								int Value11 = ::Math_obj::round((mid * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 749)								int this12;
HXDLIN( 749)								if ((Value11 > (int)255)) {
HXLINE( 749)									this12 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value11 < (int)0)) {
HXLINE( 749)										this12 = (int)0;
            									}
            									else {
HXLINE( 749)										this12 = Value11;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)this12);
            							}
HXDLIN( 749)							{
HXLINE( 749)								int Value12 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 749)								int this13;
HXDLIN( 749)								if ((Value12 > (int)255)) {
HXLINE( 749)									this13 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value12 < (int)0)) {
HXLINE( 749)										this13 = (int)0;
            									}
            									else {
HXLINE( 749)										this13 = Value12;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)((int)this13 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 749)							{
HXLINE( 749)								int Value13 = ::Math_obj::round((match * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 749)								int this14;
HXDLIN( 749)								if ((Value13 > (int)255)) {
HXLINE( 749)									this14 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value13 < (int)0)) {
HXLINE( 749)										this14 = (int)0;
            									}
            									else {
HXLINE( 749)										this14 = Value13;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)((int)this14 << (int)(int)16));
            							}
HXDLIN( 749)							{
HXLINE( 749)								int Value14 = ::Math_obj::round((mid * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 749)								int this15;
HXDLIN( 749)								if ((Value14 > (int)255)) {
HXLINE( 749)									this15 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value14 < (int)0)) {
HXLINE( 749)										this15 = (int)0;
            									}
            									else {
HXLINE( 749)										this15 = Value14;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)((int)this15 << (int)(int)8));
            							}
HXDLIN( 749)							{
HXLINE( 749)								int Value15 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 749)								int this16;
HXDLIN( 749)								if ((Value15 > (int)255)) {
HXLINE( 749)									this16 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value15 < (int)0)) {
HXLINE( 749)										this16 = (int)0;
            									}
            									else {
HXLINE( 749)										this16 = Value15;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)this16);
            							}
HXDLIN( 749)							{
HXLINE( 749)								int Value16 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 749)								int this17;
HXDLIN( 749)								if ((Value16 > (int)255)) {
HXLINE( 749)									this17 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value16 < (int)0)) {
HXLINE( 749)										this17 = (int)0;
            									}
            									else {
HXLINE( 749)										this17 = Value16;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)((int)this17 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 749)							{
HXLINE( 749)								int Value17 = ::Math_obj::round((mid * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 749)								int this18;
HXDLIN( 749)								if ((Value17 > (int)255)) {
HXLINE( 749)									this18 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value17 < (int)0)) {
HXLINE( 749)										this18 = (int)0;
            									}
            									else {
HXLINE( 749)										this18 = Value17;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)((int)this18 << (int)(int)16));
            							}
HXDLIN( 749)							{
HXLINE( 749)								int Value18 = ::Math_obj::round((match * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 749)								int this19;
HXDLIN( 749)								if ((Value18 > (int)255)) {
HXLINE( 749)									this19 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value18 < (int)0)) {
HXLINE( 749)										this19 = (int)0;
            									}
            									else {
HXLINE( 749)										this19 = Value18;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)((int)this19 << (int)(int)8));
            							}
HXDLIN( 749)							{
HXLINE( 749)								int Value19 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 749)								int this20;
HXDLIN( 749)								if ((Value19 > (int)255)) {
HXLINE( 749)									this20 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value19 < (int)0)) {
HXLINE( 749)										this20 = (int)0;
            									}
            									else {
HXLINE( 749)										this20 = Value19;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)this20);
            							}
HXDLIN( 749)							{
HXLINE( 749)								int Value20 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 749)								int this21;
HXDLIN( 749)								if ((Value20 > (int)255)) {
HXLINE( 749)									this21 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value20 < (int)0)) {
HXLINE( 749)										this21 = (int)0;
            									}
            									else {
HXLINE( 749)										this21 = Value20;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)((int)this21 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 749)							{
HXLINE( 749)								int Value21 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 749)								int this22;
HXDLIN( 749)								if ((Value21 > (int)255)) {
HXLINE( 749)									this22 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value21 < (int)0)) {
HXLINE( 749)										this22 = (int)0;
            									}
            									else {
HXLINE( 749)										this22 = Value21;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)((int)this22 << (int)(int)16));
            							}
HXDLIN( 749)							{
HXLINE( 749)								int Value22 = ::Math_obj::round((match * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 749)								int this23;
HXDLIN( 749)								if ((Value22 > (int)255)) {
HXLINE( 749)									this23 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value22 < (int)0)) {
HXLINE( 749)										this23 = (int)0;
            									}
            									else {
HXLINE( 749)										this23 = Value22;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)((int)this23 << (int)(int)8));
            							}
HXDLIN( 749)							{
HXLINE( 749)								int Value23 = ::Math_obj::round((mid * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 749)								int this24;
HXDLIN( 749)								if ((Value23 > (int)255)) {
HXLINE( 749)									this24 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value23 < (int)0)) {
HXLINE( 749)										this24 = (int)0;
            									}
            									else {
HXLINE( 749)										this24 = Value23;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)this24);
            							}
HXDLIN( 749)							{
HXLINE( 749)								int Value24 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 749)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 749)								int this25;
HXDLIN( 749)								if ((Value24 > (int)255)) {
HXLINE( 749)									this25 = (int)255;
            								}
            								else {
HXLINE( 749)									if ((Value24 < (int)0)) {
HXLINE( 749)										this25 = (int)0;
            									}
            									else {
HXLINE( 749)										this25 = Value24;
            									}
            								}
HXDLIN( 749)								this1 = ((int)this1 | (int)((int)this25 << (int)(int)24));
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
HXLINE( 750)		return Value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,set_saturation,return )

Float FlxColor_Impl__obj::set_brightness(int this1,Float Value){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_754_set_brightness)
HXLINE( 755)		{
HXLINE( 755)			Float Hue = ::flixel::util::_FlxColor::FlxColor_Impl__obj::get_hue(this1);
HXDLIN( 755)			Float Saturation = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 755)			Float Saturation1 = (Saturation - ::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 755)			Float Alpha = ((Float)((int)((int)this1 >> (int)(int)24) & (int)(int)255) / (Float)(int)255);
HXDLIN( 755)			Float chroma = (Value * ((Float)Saturation1 / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))));
HXDLIN( 755)			Float match = (Value - chroma);
HXDLIN( 755)			{
HXLINE( 755)				Float Hue1 = Hue;
HXDLIN( 755)				Float Chroma = chroma;
HXDLIN( 755)				Hue1 = hx::Mod(Hue1,(int)360);
HXDLIN( 755)				Float hueD = ((Float)Hue1 / (Float)(int)60);
HXDLIN( 755)				Float mid = ((Chroma * ((int)1 - ::Math_obj::abs((hx::Mod(hueD,(int)2) - (int)1)))) + match);
HXDLIN( 755)				Chroma = (Chroma + match);
HXDLIN( 755)				{
HXLINE( 755)					int _g = ::Std_obj::_hx_int(hueD);
HXDLIN( 755)					switch((int)(_g)){
            						case (int)0: {
HXLINE( 755)							{
HXLINE( 755)								int Value1 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 755)								int this2;
HXDLIN( 755)								if ((Value1 > (int)255)) {
HXLINE( 755)									this2 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value1 < (int)0)) {
HXLINE( 755)										this2 = (int)0;
            									}
            									else {
HXLINE( 755)										this2 = Value1;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)((int)this2 << (int)(int)16));
            							}
HXDLIN( 755)							{
HXLINE( 755)								int Value2 = ::Math_obj::round((mid * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 755)								int this3;
HXDLIN( 755)								if ((Value2 > (int)255)) {
HXLINE( 755)									this3 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value2 < (int)0)) {
HXLINE( 755)										this3 = (int)0;
            									}
            									else {
HXLINE( 755)										this3 = Value2;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)((int)this3 << (int)(int)8));
            							}
HXDLIN( 755)							{
HXLINE( 755)								int Value3 = ::Math_obj::round((match * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 755)								int this4;
HXDLIN( 755)								if ((Value3 > (int)255)) {
HXLINE( 755)									this4 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value3 < (int)0)) {
HXLINE( 755)										this4 = (int)0;
            									}
            									else {
HXLINE( 755)										this4 = Value3;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)this4);
            							}
HXDLIN( 755)							{
HXLINE( 755)								int Value4 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 755)								int this5;
HXDLIN( 755)								if ((Value4 > (int)255)) {
HXLINE( 755)									this5 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value4 < (int)0)) {
HXLINE( 755)										this5 = (int)0;
            									}
            									else {
HXLINE( 755)										this5 = Value4;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)((int)this5 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 755)							{
HXLINE( 755)								int Value5 = ::Math_obj::round((mid * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 755)								int this6;
HXDLIN( 755)								if ((Value5 > (int)255)) {
HXLINE( 755)									this6 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value5 < (int)0)) {
HXLINE( 755)										this6 = (int)0;
            									}
            									else {
HXLINE( 755)										this6 = Value5;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)((int)this6 << (int)(int)16));
            							}
HXDLIN( 755)							{
HXLINE( 755)								int Value6 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 755)								int this7;
HXDLIN( 755)								if ((Value6 > (int)255)) {
HXLINE( 755)									this7 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value6 < (int)0)) {
HXLINE( 755)										this7 = (int)0;
            									}
            									else {
HXLINE( 755)										this7 = Value6;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)((int)this7 << (int)(int)8));
            							}
HXDLIN( 755)							{
HXLINE( 755)								int Value7 = ::Math_obj::round((match * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 755)								int this8;
HXDLIN( 755)								if ((Value7 > (int)255)) {
HXLINE( 755)									this8 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value7 < (int)0)) {
HXLINE( 755)										this8 = (int)0;
            									}
            									else {
HXLINE( 755)										this8 = Value7;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)this8);
            							}
HXDLIN( 755)							{
HXLINE( 755)								int Value8 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 755)								int this9;
HXDLIN( 755)								if ((Value8 > (int)255)) {
HXLINE( 755)									this9 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value8 < (int)0)) {
HXLINE( 755)										this9 = (int)0;
            									}
            									else {
HXLINE( 755)										this9 = Value8;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)((int)this9 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 755)							{
HXLINE( 755)								int Value9 = ::Math_obj::round((match * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 755)								int this10;
HXDLIN( 755)								if ((Value9 > (int)255)) {
HXLINE( 755)									this10 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value9 < (int)0)) {
HXLINE( 755)										this10 = (int)0;
            									}
            									else {
HXLINE( 755)										this10 = Value9;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)((int)this10 << (int)(int)16));
            							}
HXDLIN( 755)							{
HXLINE( 755)								int Value10 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 755)								int this11;
HXDLIN( 755)								if ((Value10 > (int)255)) {
HXLINE( 755)									this11 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value10 < (int)0)) {
HXLINE( 755)										this11 = (int)0;
            									}
            									else {
HXLINE( 755)										this11 = Value10;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)((int)this11 << (int)(int)8));
            							}
HXDLIN( 755)							{
HXLINE( 755)								int Value11 = ::Math_obj::round((mid * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 755)								int this12;
HXDLIN( 755)								if ((Value11 > (int)255)) {
HXLINE( 755)									this12 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value11 < (int)0)) {
HXLINE( 755)										this12 = (int)0;
            									}
            									else {
HXLINE( 755)										this12 = Value11;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)this12);
            							}
HXDLIN( 755)							{
HXLINE( 755)								int Value12 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 755)								int this13;
HXDLIN( 755)								if ((Value12 > (int)255)) {
HXLINE( 755)									this13 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value12 < (int)0)) {
HXLINE( 755)										this13 = (int)0;
            									}
            									else {
HXLINE( 755)										this13 = Value12;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)((int)this13 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 755)							{
HXLINE( 755)								int Value13 = ::Math_obj::round((match * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 755)								int this14;
HXDLIN( 755)								if ((Value13 > (int)255)) {
HXLINE( 755)									this14 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value13 < (int)0)) {
HXLINE( 755)										this14 = (int)0;
            									}
            									else {
HXLINE( 755)										this14 = Value13;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)((int)this14 << (int)(int)16));
            							}
HXDLIN( 755)							{
HXLINE( 755)								int Value14 = ::Math_obj::round((mid * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 755)								int this15;
HXDLIN( 755)								if ((Value14 > (int)255)) {
HXLINE( 755)									this15 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value14 < (int)0)) {
HXLINE( 755)										this15 = (int)0;
            									}
            									else {
HXLINE( 755)										this15 = Value14;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)((int)this15 << (int)(int)8));
            							}
HXDLIN( 755)							{
HXLINE( 755)								int Value15 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 755)								int this16;
HXDLIN( 755)								if ((Value15 > (int)255)) {
HXLINE( 755)									this16 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value15 < (int)0)) {
HXLINE( 755)										this16 = (int)0;
            									}
            									else {
HXLINE( 755)										this16 = Value15;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)this16);
            							}
HXDLIN( 755)							{
HXLINE( 755)								int Value16 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 755)								int this17;
HXDLIN( 755)								if ((Value16 > (int)255)) {
HXLINE( 755)									this17 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value16 < (int)0)) {
HXLINE( 755)										this17 = (int)0;
            									}
            									else {
HXLINE( 755)										this17 = Value16;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)((int)this17 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 755)							{
HXLINE( 755)								int Value17 = ::Math_obj::round((mid * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 755)								int this18;
HXDLIN( 755)								if ((Value17 > (int)255)) {
HXLINE( 755)									this18 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value17 < (int)0)) {
HXLINE( 755)										this18 = (int)0;
            									}
            									else {
HXLINE( 755)										this18 = Value17;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)((int)this18 << (int)(int)16));
            							}
HXDLIN( 755)							{
HXLINE( 755)								int Value18 = ::Math_obj::round((match * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 755)								int this19;
HXDLIN( 755)								if ((Value18 > (int)255)) {
HXLINE( 755)									this19 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value18 < (int)0)) {
HXLINE( 755)										this19 = (int)0;
            									}
            									else {
HXLINE( 755)										this19 = Value18;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)((int)this19 << (int)(int)8));
            							}
HXDLIN( 755)							{
HXLINE( 755)								int Value19 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 755)								int this20;
HXDLIN( 755)								if ((Value19 > (int)255)) {
HXLINE( 755)									this20 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value19 < (int)0)) {
HXLINE( 755)										this20 = (int)0;
            									}
            									else {
HXLINE( 755)										this20 = Value19;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)this20);
            							}
HXDLIN( 755)							{
HXLINE( 755)								int Value20 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 755)								int this21;
HXDLIN( 755)								if ((Value20 > (int)255)) {
HXLINE( 755)									this21 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value20 < (int)0)) {
HXLINE( 755)										this21 = (int)0;
            									}
            									else {
HXLINE( 755)										this21 = Value20;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)((int)this21 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 755)							{
HXLINE( 755)								int Value21 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 755)								int this22;
HXDLIN( 755)								if ((Value21 > (int)255)) {
HXLINE( 755)									this22 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value21 < (int)0)) {
HXLINE( 755)										this22 = (int)0;
            									}
            									else {
HXLINE( 755)										this22 = Value21;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)((int)this22 << (int)(int)16));
            							}
HXDLIN( 755)							{
HXLINE( 755)								int Value22 = ::Math_obj::round((match * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 755)								int this23;
HXDLIN( 755)								if ((Value22 > (int)255)) {
HXLINE( 755)									this23 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value22 < (int)0)) {
HXLINE( 755)										this23 = (int)0;
            									}
            									else {
HXLINE( 755)										this23 = Value22;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)((int)this23 << (int)(int)8));
            							}
HXDLIN( 755)							{
HXLINE( 755)								int Value23 = ::Math_obj::round((mid * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 755)								int this24;
HXDLIN( 755)								if ((Value23 > (int)255)) {
HXLINE( 755)									this24 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value23 < (int)0)) {
HXLINE( 755)										this24 = (int)0;
            									}
            									else {
HXLINE( 755)										this24 = Value23;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)this24);
            							}
HXDLIN( 755)							{
HXLINE( 755)								int Value24 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 755)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 755)								int this25;
HXDLIN( 755)								if ((Value24 > (int)255)) {
HXLINE( 755)									this25 = (int)255;
            								}
            								else {
HXLINE( 755)									if ((Value24 < (int)0)) {
HXLINE( 755)										this25 = (int)0;
            									}
            									else {
HXLINE( 755)										this25 = Value24;
            									}
            								}
HXDLIN( 755)								this1 = ((int)this1 | (int)((int)this25 << (int)(int)24));
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
HXLINE( 756)		return Value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,set_brightness,return )

Float FlxColor_Impl__obj::set_lightness(int this1,Float Value){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_760_set_lightness)
HXLINE( 761)		{
HXLINE( 761)			Float Hue = ::flixel::util::_FlxColor::FlxColor_Impl__obj::get_hue(this1);
HXDLIN( 761)			Float Saturation = ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
HXDLIN( 761)			Float Saturation1 = (Saturation - ::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255))));
HXDLIN( 761)			Float Alpha = ((Float)((int)((int)this1 >> (int)(int)24) & (int)(int)255) / (Float)(int)255);
HXDLIN( 761)			Float chroma = (((int)1 - ::Math_obj::abs((((int)2 * Value) - (int)1))) * ((Float)Saturation1 / (Float)::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)))));
HXDLIN( 761)			Float match = (Value - ((Float)chroma / (Float)(int)2));
HXDLIN( 761)			{
HXLINE( 761)				Float Hue1 = Hue;
HXDLIN( 761)				Float Chroma = chroma;
HXDLIN( 761)				Hue1 = hx::Mod(Hue1,(int)360);
HXDLIN( 761)				Float hueD = ((Float)Hue1 / (Float)(int)60);
HXDLIN( 761)				Float mid = ((Chroma * ((int)1 - ::Math_obj::abs((hx::Mod(hueD,(int)2) - (int)1)))) + match);
HXDLIN( 761)				Chroma = (Chroma + match);
HXDLIN( 761)				{
HXLINE( 761)					int _g = ::Std_obj::_hx_int(hueD);
HXDLIN( 761)					switch((int)(_g)){
            						case (int)0: {
HXLINE( 761)							{
HXLINE( 761)								int Value1 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 761)								int this2;
HXDLIN( 761)								if ((Value1 > (int)255)) {
HXLINE( 761)									this2 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value1 < (int)0)) {
HXLINE( 761)										this2 = (int)0;
            									}
            									else {
HXLINE( 761)										this2 = Value1;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)((int)this2 << (int)(int)16));
            							}
HXDLIN( 761)							{
HXLINE( 761)								int Value2 = ::Math_obj::round((mid * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 761)								int this3;
HXDLIN( 761)								if ((Value2 > (int)255)) {
HXLINE( 761)									this3 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value2 < (int)0)) {
HXLINE( 761)										this3 = (int)0;
            									}
            									else {
HXLINE( 761)										this3 = Value2;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)((int)this3 << (int)(int)8));
            							}
HXDLIN( 761)							{
HXLINE( 761)								int Value3 = ::Math_obj::round((match * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 761)								int this4;
HXDLIN( 761)								if ((Value3 > (int)255)) {
HXLINE( 761)									this4 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value3 < (int)0)) {
HXLINE( 761)										this4 = (int)0;
            									}
            									else {
HXLINE( 761)										this4 = Value3;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)this4);
            							}
HXDLIN( 761)							{
HXLINE( 761)								int Value4 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 761)								int this5;
HXDLIN( 761)								if ((Value4 > (int)255)) {
HXLINE( 761)									this5 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value4 < (int)0)) {
HXLINE( 761)										this5 = (int)0;
            									}
            									else {
HXLINE( 761)										this5 = Value4;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)((int)this5 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 761)							{
HXLINE( 761)								int Value5 = ::Math_obj::round((mid * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 761)								int this6;
HXDLIN( 761)								if ((Value5 > (int)255)) {
HXLINE( 761)									this6 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value5 < (int)0)) {
HXLINE( 761)										this6 = (int)0;
            									}
            									else {
HXLINE( 761)										this6 = Value5;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)((int)this6 << (int)(int)16));
            							}
HXDLIN( 761)							{
HXLINE( 761)								int Value6 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 761)								int this7;
HXDLIN( 761)								if ((Value6 > (int)255)) {
HXLINE( 761)									this7 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value6 < (int)0)) {
HXLINE( 761)										this7 = (int)0;
            									}
            									else {
HXLINE( 761)										this7 = Value6;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)((int)this7 << (int)(int)8));
            							}
HXDLIN( 761)							{
HXLINE( 761)								int Value7 = ::Math_obj::round((match * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 761)								int this8;
HXDLIN( 761)								if ((Value7 > (int)255)) {
HXLINE( 761)									this8 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value7 < (int)0)) {
HXLINE( 761)										this8 = (int)0;
            									}
            									else {
HXLINE( 761)										this8 = Value7;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)this8);
            							}
HXDLIN( 761)							{
HXLINE( 761)								int Value8 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 761)								int this9;
HXDLIN( 761)								if ((Value8 > (int)255)) {
HXLINE( 761)									this9 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value8 < (int)0)) {
HXLINE( 761)										this9 = (int)0;
            									}
            									else {
HXLINE( 761)										this9 = Value8;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)((int)this9 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 761)							{
HXLINE( 761)								int Value9 = ::Math_obj::round((match * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 761)								int this10;
HXDLIN( 761)								if ((Value9 > (int)255)) {
HXLINE( 761)									this10 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value9 < (int)0)) {
HXLINE( 761)										this10 = (int)0;
            									}
            									else {
HXLINE( 761)										this10 = Value9;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)((int)this10 << (int)(int)16));
            							}
HXDLIN( 761)							{
HXLINE( 761)								int Value10 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 761)								int this11;
HXDLIN( 761)								if ((Value10 > (int)255)) {
HXLINE( 761)									this11 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value10 < (int)0)) {
HXLINE( 761)										this11 = (int)0;
            									}
            									else {
HXLINE( 761)										this11 = Value10;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)((int)this11 << (int)(int)8));
            							}
HXDLIN( 761)							{
HXLINE( 761)								int Value11 = ::Math_obj::round((mid * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 761)								int this12;
HXDLIN( 761)								if ((Value11 > (int)255)) {
HXLINE( 761)									this12 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value11 < (int)0)) {
HXLINE( 761)										this12 = (int)0;
            									}
            									else {
HXLINE( 761)										this12 = Value11;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)this12);
            							}
HXDLIN( 761)							{
HXLINE( 761)								int Value12 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 761)								int this13;
HXDLIN( 761)								if ((Value12 > (int)255)) {
HXLINE( 761)									this13 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value12 < (int)0)) {
HXLINE( 761)										this13 = (int)0;
            									}
            									else {
HXLINE( 761)										this13 = Value12;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)((int)this13 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 761)							{
HXLINE( 761)								int Value13 = ::Math_obj::round((match * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 761)								int this14;
HXDLIN( 761)								if ((Value13 > (int)255)) {
HXLINE( 761)									this14 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value13 < (int)0)) {
HXLINE( 761)										this14 = (int)0;
            									}
            									else {
HXLINE( 761)										this14 = Value13;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)((int)this14 << (int)(int)16));
            							}
HXDLIN( 761)							{
HXLINE( 761)								int Value14 = ::Math_obj::round((mid * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 761)								int this15;
HXDLIN( 761)								if ((Value14 > (int)255)) {
HXLINE( 761)									this15 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value14 < (int)0)) {
HXLINE( 761)										this15 = (int)0;
            									}
            									else {
HXLINE( 761)										this15 = Value14;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)((int)this15 << (int)(int)8));
            							}
HXDLIN( 761)							{
HXLINE( 761)								int Value15 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 761)								int this16;
HXDLIN( 761)								if ((Value15 > (int)255)) {
HXLINE( 761)									this16 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value15 < (int)0)) {
HXLINE( 761)										this16 = (int)0;
            									}
            									else {
HXLINE( 761)										this16 = Value15;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)this16);
            							}
HXDLIN( 761)							{
HXLINE( 761)								int Value16 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 761)								int this17;
HXDLIN( 761)								if ((Value16 > (int)255)) {
HXLINE( 761)									this17 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value16 < (int)0)) {
HXLINE( 761)										this17 = (int)0;
            									}
            									else {
HXLINE( 761)										this17 = Value16;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)((int)this17 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 761)							{
HXLINE( 761)								int Value17 = ::Math_obj::round((mid * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 761)								int this18;
HXDLIN( 761)								if ((Value17 > (int)255)) {
HXLINE( 761)									this18 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value17 < (int)0)) {
HXLINE( 761)										this18 = (int)0;
            									}
            									else {
HXLINE( 761)										this18 = Value17;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)((int)this18 << (int)(int)16));
            							}
HXDLIN( 761)							{
HXLINE( 761)								int Value18 = ::Math_obj::round((match * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 761)								int this19;
HXDLIN( 761)								if ((Value18 > (int)255)) {
HXLINE( 761)									this19 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value18 < (int)0)) {
HXLINE( 761)										this19 = (int)0;
            									}
            									else {
HXLINE( 761)										this19 = Value18;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)((int)this19 << (int)(int)8));
            							}
HXDLIN( 761)							{
HXLINE( 761)								int Value19 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 761)								int this20;
HXDLIN( 761)								if ((Value19 > (int)255)) {
HXLINE( 761)									this20 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value19 < (int)0)) {
HXLINE( 761)										this20 = (int)0;
            									}
            									else {
HXLINE( 761)										this20 = Value19;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)this20);
            							}
HXDLIN( 761)							{
HXLINE( 761)								int Value20 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 761)								int this21;
HXDLIN( 761)								if ((Value20 > (int)255)) {
HXLINE( 761)									this21 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value20 < (int)0)) {
HXLINE( 761)										this21 = (int)0;
            									}
            									else {
HXLINE( 761)										this21 = Value20;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)((int)this21 << (int)(int)24));
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 761)							{
HXLINE( 761)								int Value21 = ::Math_obj::round((Chroma * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)-16711681);
HXDLIN( 761)								int this22;
HXDLIN( 761)								if ((Value21 > (int)255)) {
HXLINE( 761)									this22 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value21 < (int)0)) {
HXLINE( 761)										this22 = (int)0;
            									}
            									else {
HXLINE( 761)										this22 = Value21;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)((int)this22 << (int)(int)16));
            							}
HXDLIN( 761)							{
HXLINE( 761)								int Value22 = ::Math_obj::round((match * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)-65281);
HXDLIN( 761)								int this23;
HXDLIN( 761)								if ((Value22 > (int)255)) {
HXLINE( 761)									this23 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value22 < (int)0)) {
HXLINE( 761)										this23 = (int)0;
            									}
            									else {
HXLINE( 761)										this23 = Value22;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)((int)this23 << (int)(int)8));
            							}
HXDLIN( 761)							{
HXLINE( 761)								int Value23 = ::Math_obj::round((mid * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)-256);
HXDLIN( 761)								int this24;
HXDLIN( 761)								if ((Value23 > (int)255)) {
HXLINE( 761)									this24 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value23 < (int)0)) {
HXLINE( 761)										this24 = (int)0;
            									}
            									else {
HXLINE( 761)										this24 = Value23;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)this24);
            							}
HXDLIN( 761)							{
HXLINE( 761)								int Value24 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 761)								this1 = ((int)this1 & (int)(int)16777215);
HXDLIN( 761)								int this25;
HXDLIN( 761)								if ((Value24 > (int)255)) {
HXLINE( 761)									this25 = (int)255;
            								}
            								else {
HXLINE( 761)									if ((Value24 < (int)0)) {
HXLINE( 761)										this25 = (int)0;
            									}
            									else {
HXLINE( 761)										this25 = Value24;
            									}
            								}
HXDLIN( 761)								this1 = ((int)this1 | (int)((int)this25 << (int)(int)24));
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
HXLINE( 762)		return Value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,set_lightness,return )

Float FlxColor_Impl__obj::maxColor(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_767_maxColor)
HXDLIN( 767)		return ::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::max(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,maxColor,return )

Float FlxColor_Impl__obj::minColor(int this1){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_772_minColor)
HXDLIN( 772)		return ::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)16) & (int)(int)255) / (Float)(int)255),::Math_obj::min(((Float)((int)((int)this1 >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this1 & (int)(int)255) / (Float)(int)255)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxColor_Impl__obj,minColor,return )

int FlxColor_Impl__obj::boundChannel(int this1,int Value){
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_777_boundChannel)
HXDLIN( 777)		if ((Value > (int)255)) {
HXDLIN( 777)			return (int)255;
            		}
            		else {
HXDLIN( 777)			if ((Value < (int)0)) {
HXDLIN( 777)				return (int)0;
            			}
            			else {
HXDLIN( 777)				return Value;
            			}
            		}
HXDLIN( 777)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxColor_Impl__obj,boundChannel,return )


FlxColor_Impl__obj::FlxColor_Impl__obj()
{
}

bool FlxColor_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"setRGB") ) { outValue = setRGB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setHSB") ) { outValue = setHSB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setHSL") ) { outValue = setHSL_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromRGB") ) { outValue = fromRGB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromHSB") ) { outValue = fromHSB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromHSL") ) { outValue = fromHSL_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"to24Bit") ) { outValue = to24Bit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setCMYK") ) { outValue = setCMYK_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getThis") ) { outValue = getThis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_red") ) { outValue = get_red_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_red") ) { outValue = set_red_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_hue") ) { outValue = get_hue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_hue") ) { outValue = set_hue_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromCMYK") ) { outValue = fromCMYK_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gradient") ) { outValue = gradient_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"multiply") ) { outValue = multiply_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"validate") ) { outValue = validate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_blue") ) { outValue = get_blue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_blue") ) { outValue = set_blue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_cyan") ) { outValue = get_cyan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_cyan") ) { outValue = set_cyan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"maxColor") ) { outValue = maxColor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"minColor") ) { outValue = minColor_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_green") ) { outValue = get_green_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { outValue = get_alpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_green") ) { outValue = set_green_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { outValue = set_alpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_black") ) { outValue = get_black_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_black") ) { outValue = set_black_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_yellow") ) { outValue = get_yellow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_yellow") ) { outValue = set_yellow_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHexString") ) { outValue = toHexString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toWebString") ) { outValue = toWebString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getDarkened") ) { outValue = getDarkened_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getInverted") ) { outValue = getInverted_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setRGBFloat") ) { outValue = setRGBFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_magenta") ) { outValue = get_magenta_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_magenta") ) { outValue = set_magenta_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromRGBFloat") ) { outValue = fromRGBFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getColorInfo") ) { outValue = getColorInfo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getLightened") ) { outValue = getLightened_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_redFloat") ) { outValue = get_redFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_redFloat") ) { outValue = set_redFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"boundChannel") ) { outValue = boundChannel_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_blueFloat") ) { outValue = get_blueFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_blueFloat") ) { outValue = set_blueFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_lightness") ) { outValue = get_lightness_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_lightness") ) { outValue = set_lightness_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_greenFloat") ) { outValue = get_greenFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_alphaFloat") ) { outValue = get_alphaFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_greenFloat") ) { outValue = set_greenFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_alphaFloat") ) { outValue = set_alphaFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_brightness") ) { outValue = get_brightness_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_saturation") ) { outValue = get_saturation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_saturation") ) { outValue = set_saturation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_brightness") ) { outValue = set_brightness_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getHSBColorWheel") ) { outValue = getHSBColorWheel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setHSChromaMatch") ) { outValue = setHSChromaMatch_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getTriadicHarmony") ) { outValue = getTriadicHarmony_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getAnalogousHarmony") ) { outValue = getAnalogousHarmony_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getComplementHarmony") ) { outValue = getComplementHarmony_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"getSplitComplementHarmony") ) { outValue = getSplitComplementHarmony_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FlxColor_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo FlxColor_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &FlxColor_Impl__obj::TRANSPARENT,HX_HCSTRING("TRANSPARENT","\x32","\x37","\xf6","\xf8")},
	{hx::fsInt,(void *) &FlxColor_Impl__obj::WHITE,HX_HCSTRING("WHITE","\x89","\x82","\xab","\x47")},
	{hx::fsInt,(void *) &FlxColor_Impl__obj::GRAY,HX_HCSTRING("GRAY","\xe3","\x97","\x2c","\x2f")},
	{hx::fsInt,(void *) &FlxColor_Impl__obj::BLACK,HX_HCSTRING("BLACK","\x9f","\x0d","\xe0","\x32")},
	{hx::fsInt,(void *) &FlxColor_Impl__obj::GREEN,HX_HCSTRING("GREEN","\xa3","\x46","\xdb","\x17")},
	{hx::fsInt,(void *) &FlxColor_Impl__obj::LIME,HX_HCSTRING("LIME","\x15","\xdf","\x73","\x32")},
	{hx::fsInt,(void *) &FlxColor_Impl__obj::YELLOW,HX_HCSTRING("YELLOW","\x74","\x4b","\xdf","\x82")},
	{hx::fsInt,(void *) &FlxColor_Impl__obj::ORANGE,HX_HCSTRING("ORANGE","\xee","\x5e","\x3f","\xf8")},
	{hx::fsInt,(void *) &FlxColor_Impl__obj::RED,HX_HCSTRING("RED","\x31","\x75","\x3e","\x00")},
	{hx::fsInt,(void *) &FlxColor_Impl__obj::PURPLE,HX_HCSTRING("PURPLE","\x3c","\xa2","\x0c","\x24")},
	{hx::fsInt,(void *) &FlxColor_Impl__obj::BLUE,HX_HCSTRING("BLUE","\x9a","\x0a","\xda","\x2b")},
	{hx::fsInt,(void *) &FlxColor_Impl__obj::BROWN,HX_HCSTRING("BROWN","\x56","\x06","\xe2","\x36")},
	{hx::fsInt,(void *) &FlxColor_Impl__obj::PINK,HX_HCSTRING("PINK","\x76","\xba","\x18","\x35")},
	{hx::fsInt,(void *) &FlxColor_Impl__obj::MAGENTA,HX_HCSTRING("MAGENTA","\x09","\x8e","\x71","\x8e")},
	{hx::fsInt,(void *) &FlxColor_Impl__obj::CYAN,HX_HCSTRING("CYAN","\x23","\x0d","\x8d","\x2c")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &FlxColor_Impl__obj::colorLookup,HX_HCSTRING("colorLookup","\x3d","\x34","\xde","\x1b")},
	{hx::fsObject /*::EReg*/ ,(void *) &FlxColor_Impl__obj::COLOR_REGEX,HX_HCSTRING("COLOR_REGEX","\x6b","\x2b","\xe2","\x09")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void FlxColor_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxColor_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxColor_Impl__obj::TRANSPARENT,"TRANSPARENT");
	HX_MARK_MEMBER_NAME(FlxColor_Impl__obj::WHITE,"WHITE");
	HX_MARK_MEMBER_NAME(FlxColor_Impl__obj::GRAY,"GRAY");
	HX_MARK_MEMBER_NAME(FlxColor_Impl__obj::BLACK,"BLACK");
	HX_MARK_MEMBER_NAME(FlxColor_Impl__obj::GREEN,"GREEN");
	HX_MARK_MEMBER_NAME(FlxColor_Impl__obj::LIME,"LIME");
	HX_MARK_MEMBER_NAME(FlxColor_Impl__obj::YELLOW,"YELLOW");
	HX_MARK_MEMBER_NAME(FlxColor_Impl__obj::ORANGE,"ORANGE");
	HX_MARK_MEMBER_NAME(FlxColor_Impl__obj::RED,"RED");
	HX_MARK_MEMBER_NAME(FlxColor_Impl__obj::PURPLE,"PURPLE");
	HX_MARK_MEMBER_NAME(FlxColor_Impl__obj::BLUE,"BLUE");
	HX_MARK_MEMBER_NAME(FlxColor_Impl__obj::BROWN,"BROWN");
	HX_MARK_MEMBER_NAME(FlxColor_Impl__obj::PINK,"PINK");
	HX_MARK_MEMBER_NAME(FlxColor_Impl__obj::MAGENTA,"MAGENTA");
	HX_MARK_MEMBER_NAME(FlxColor_Impl__obj::CYAN,"CYAN");
	HX_MARK_MEMBER_NAME(FlxColor_Impl__obj::colorLookup,"colorLookup");
	HX_MARK_MEMBER_NAME(FlxColor_Impl__obj::COLOR_REGEX,"COLOR_REGEX");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxColor_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxColor_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxColor_Impl__obj::TRANSPARENT,"TRANSPARENT");
	HX_VISIT_MEMBER_NAME(FlxColor_Impl__obj::WHITE,"WHITE");
	HX_VISIT_MEMBER_NAME(FlxColor_Impl__obj::GRAY,"GRAY");
	HX_VISIT_MEMBER_NAME(FlxColor_Impl__obj::BLACK,"BLACK");
	HX_VISIT_MEMBER_NAME(FlxColor_Impl__obj::GREEN,"GREEN");
	HX_VISIT_MEMBER_NAME(FlxColor_Impl__obj::LIME,"LIME");
	HX_VISIT_MEMBER_NAME(FlxColor_Impl__obj::YELLOW,"YELLOW");
	HX_VISIT_MEMBER_NAME(FlxColor_Impl__obj::ORANGE,"ORANGE");
	HX_VISIT_MEMBER_NAME(FlxColor_Impl__obj::RED,"RED");
	HX_VISIT_MEMBER_NAME(FlxColor_Impl__obj::PURPLE,"PURPLE");
	HX_VISIT_MEMBER_NAME(FlxColor_Impl__obj::BLUE,"BLUE");
	HX_VISIT_MEMBER_NAME(FlxColor_Impl__obj::BROWN,"BROWN");
	HX_VISIT_MEMBER_NAME(FlxColor_Impl__obj::PINK,"PINK");
	HX_VISIT_MEMBER_NAME(FlxColor_Impl__obj::MAGENTA,"MAGENTA");
	HX_VISIT_MEMBER_NAME(FlxColor_Impl__obj::CYAN,"CYAN");
	HX_VISIT_MEMBER_NAME(FlxColor_Impl__obj::colorLookup,"colorLookup");
	HX_VISIT_MEMBER_NAME(FlxColor_Impl__obj::COLOR_REGEX,"COLOR_REGEX");
};

#endif

hx::Class FlxColor_Impl__obj::__mClass;

static ::String FlxColor_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("TRANSPARENT","\x32","\x37","\xf6","\xf8"),
	HX_HCSTRING("WHITE","\x89","\x82","\xab","\x47"),
	HX_HCSTRING("GRAY","\xe3","\x97","\x2c","\x2f"),
	HX_HCSTRING("BLACK","\x9f","\x0d","\xe0","\x32"),
	HX_HCSTRING("GREEN","\xa3","\x46","\xdb","\x17"),
	HX_HCSTRING("LIME","\x15","\xdf","\x73","\x32"),
	HX_HCSTRING("YELLOW","\x74","\x4b","\xdf","\x82"),
	HX_HCSTRING("ORANGE","\xee","\x5e","\x3f","\xf8"),
	HX_HCSTRING("RED","\x31","\x75","\x3e","\x00"),
	HX_HCSTRING("PURPLE","\x3c","\xa2","\x0c","\x24"),
	HX_HCSTRING("BLUE","\x9a","\x0a","\xda","\x2b"),
	HX_HCSTRING("BROWN","\x56","\x06","\xe2","\x36"),
	HX_HCSTRING("PINK","\x76","\xba","\x18","\x35"),
	HX_HCSTRING("MAGENTA","\x09","\x8e","\x71","\x8e"),
	HX_HCSTRING("CYAN","\x23","\x0d","\x8d","\x2c"),
	HX_HCSTRING("colorLookup","\x3d","\x34","\xde","\x1b"),
	HX_HCSTRING("COLOR_REGEX","\x6b","\x2b","\xe2","\x09"),
	HX_HCSTRING("fromInt","\xa5","\xdd","\xfa","\x57"),
	HX_HCSTRING("fromRGB","\xc3","\x8f","\x01","\x58"),
	HX_HCSTRING("fromRGBFloat","\xd9","\xa2","\x53","\x9a"),
	HX_HCSTRING("fromCMYK","\x66","\xa9","\x76","\x9f"),
	HX_HCSTRING("fromHSB","\xad","\x03","\xfa","\x57"),
	HX_HCSTRING("fromHSL","\xb7","\x03","\xfa","\x57"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("getHSBColorWheel","\x99","\x27","\x93","\x2f"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("gradient","\xf0","\x39","\x3f","\x2a"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("getComplementHarmony","\x4a","\x20","\xb6","\xd3"),
	HX_HCSTRING("getAnalogousHarmony","\xdf","\x79","\xe2","\xa4"),
	HX_HCSTRING("getSplitComplementHarmony","\xbc","\xbe","\x30","\x75"),
	HX_HCSTRING("getTriadicHarmony","\xf4","\x5d","\xd3","\xab"),
	HX_HCSTRING("to24Bit","\xd0","\x66","\xf1","\x25"),
	HX_HCSTRING("toHexString","\x11","\x69","\xb3","\x6d"),
	HX_HCSTRING("toWebString","\x8a","\x5b","\x00","\x37"),
	HX_HCSTRING("getColorInfo","\xfb","\x5f","\x7f","\x30"),
	HX_HCSTRING("getDarkened","\x34","\xe7","\xef","\xb2"),
	HX_HCSTRING("getLightened","\x68","\xad","\xb1","\xe0"),
	HX_HCSTRING("getInverted","\xab","\x73","\x25","\x1b"),
	HX_HCSTRING("setRGB","\x8b","\x4c","\x6e","\x6f"),
	HX_HCSTRING("setRGBFloat","\x11","\x91","\x9d","\x2a"),
	HX_HCSTRING("setCMYK","\x9e","\x1b","\x2f","\x07"),
	HX_HCSTRING("setHSB","\x75","\xc0","\x66","\x6f"),
	HX_HCSTRING("setHSL","\x7f","\xc0","\x66","\x6f"),
	HX_HCSTRING("setHSChromaMatch","\xc2","\x69","\x0f","\x10"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("getThis","\x14","\xb6","\x7e","\x1f"),
	HX_HCSTRING("validate","\x96","\xd0","\xe3","\x04"),
	HX_HCSTRING("get_red","\xe8","\xa1","\xcb","\x26"),
	HX_HCSTRING("get_green","\x1a","\x6b","\x96","\xdd"),
	HX_HCSTRING("get_blue","\x23","\xfe","\xd3","\xc0"),
	HX_HCSTRING("get_alpha","\xb5","\x03","\x40","\x65"),
	HX_HCSTRING("get_redFloat","\x94","\xaa","\xfc","\x26"),
	HX_HCSTRING("get_greenFloat","\x22","\x4c","\x51","\x4d"),
	HX_HCSTRING("get_blueFloat","\x79","\x18","\x35","\x9c"),
	HX_HCSTRING("get_alphaFloat","\xa7","\xa1","\x31","\x99"),
	HX_HCSTRING("set_red","\xf4","\x32","\xcd","\x19"),
	HX_HCSTRING("set_green","\x26","\x57","\xe7","\xc0"),
	HX_HCSTRING("set_blue","\x97","\x57","\x31","\x6f"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("set_redFloat","\x08","\xce","\xf5","\x3b"),
	HX_HCSTRING("set_greenFloat","\x96","\x34","\x71","\x6d"),
	HX_HCSTRING("set_blueFloat","\x85","\xfa","\x3a","\xe1"),
	HX_HCSTRING("set_alphaFloat","\x1b","\x8a","\x51","\xb9"),
	HX_HCSTRING("get_cyan","\xac","\x00","\x87","\xc1"),
	HX_HCSTRING("get_magenta","\x40","\x1a","\x98","\x94"),
	HX_HCSTRING("get_yellow","\x3d","\x0f","\xe4","\xc0"),
	HX_HCSTRING("get_black","\x16","\x32","\x9b","\xf8"),
	HX_HCSTRING("set_cyan","\x20","\x5a","\xe4","\x6f"),
	HX_HCSTRING("set_magenta","\x4c","\x21","\x05","\x9f"),
	HX_HCSTRING("set_yellow","\xb1","\xad","\x61","\xc4"),
	HX_HCSTRING("set_black","\x22","\x1e","\xec","\xdb"),
	HX_HCSTRING("get_hue","\x4f","\x19","\xc4","\x26"),
	HX_HCSTRING("get_brightness","\x1a","\x16","\x67","\xdb"),
	HX_HCSTRING("get_saturation","\x1b","\x5c","\x97","\x6c"),
	HX_HCSTRING("get_lightness","\x44","\x08","\xab","\x98"),
	HX_HCSTRING("set_hue","\x5b","\xaa","\xc5","\x19"),
	HX_HCSTRING("set_saturation","\x8f","\x44","\xb7","\x8c"),
	HX_HCSTRING("set_brightness","\x8e","\xfe","\x86","\xfb"),
	HX_HCSTRING("set_lightness","\x50","\xea","\xb0","\xdd"),
	HX_HCSTRING("maxColor","\x1f","\xc4","\x79","\xf4"),
	HX_HCSTRING("minColor","\x71","\xde","\x93","\x41"),
	HX_HCSTRING("boundChannel","\x25","\x1c","\x54","\x83"),
	::String(null())
};

void FlxColor_Impl__obj::__register()
{
	hx::Object *dummy = new FlxColor_Impl__obj;
	FlxColor_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.util._FlxColor.FlxColor_Impl_","\x09","\xb7","\xa9","\xef");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxColor_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxColor_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxColor_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< FlxColor_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxColor_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxColor_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxColor_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxColor_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_20_boot)
HXDLIN(  20)		TRANSPARENT = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_21_boot)
HXDLIN(  21)		WHITE = (int)-1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_22_boot)
HXDLIN(  22)		GRAY = (int)-8355712;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_23_boot)
HXDLIN(  23)		BLACK = (int)-16777216;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_25_boot)
HXDLIN(  25)		GREEN = (int)-16744448;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_26_boot)
HXDLIN(  26)		LIME = (int)-16711936;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_27_boot)
HXDLIN(  27)		YELLOW = (int)-256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_28_boot)
HXDLIN(  28)		ORANGE = (int)-23296;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_29_boot)
HXDLIN(  29)		RED = (int)-65536;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_30_boot)
HXDLIN(  30)		PURPLE = (int)-8388480;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_31_boot)
HXDLIN(  31)		BLUE = (int)-16776961;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_32_boot)
HXDLIN(  32)		BROWN = (int)-7650029;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_33_boot)
HXDLIN(  33)		PINK = (int)-16181;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_34_boot)
HXDLIN(  34)		MAGENTA = (int)-65281;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_35_boot)
HXDLIN(  35)		CYAN = (int)-16711681;
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_0c1a490149f50aaa_53_boot)
HXDLIN(  53)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  53)			_g->set(HX_("TRANSPARENT",32,37,f6,f8),(int)0);
HXDLIN(  53)			_g->set(HX_("WHITE",89,82,ab,47),(int)-1);
HXDLIN(  53)			_g->set(HX_("GRAY",e3,97,2c,2f),(int)-8355712);
HXDLIN(  53)			_g->set(HX_("BLACK",9f,0d,e0,32),(int)-16777216);
HXDLIN(  53)			_g->set(HX_("GREEN",a3,46,db,17),(int)-16744448);
HXDLIN(  53)			_g->set(HX_("LIME",15,df,73,32),(int)-16711936);
HXDLIN(  53)			_g->set(HX_("YELLOW",74,4b,df,82),(int)-256);
HXDLIN(  53)			_g->set(HX_("ORANGE",ee,5e,3f,f8),(int)-23296);
HXDLIN(  53)			_g->set(HX_("RED",31,75,3e,00),(int)-65536);
HXDLIN(  53)			_g->set(HX_("PURPLE",3c,a2,0c,24),(int)-8388480);
HXDLIN(  53)			_g->set(HX_("BLUE",9a,0a,da,2b),(int)-16776961);
HXDLIN(  53)			_g->set(HX_("BROWN",56,06,e2,36),(int)-7650029);
HXDLIN(  53)			_g->set(HX_("PINK",76,ba,18,35),(int)-16181);
HXDLIN(  53)			_g->set(HX_("MAGENTA",09,8e,71,8e),(int)-65281);
HXDLIN(  53)			_g->set(HX_("CYAN",23,0d,8d,2c),(int)-16711681);
HXDLIN(  53)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_0c1a490149f50aaa_53_boot)
HXDLIN(  53)		colorLookup =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_fda63b7a1987bfd7_76_boot)
HXDLIN(  76)		COLOR_REGEX =  ::EReg_obj::__alloc( HX_CTX ,HX_("^(0x|#)(([A-F0-9]{2}){3,4})$",25,93,28,2c),HX_("i",69,00,00,00));
            	}
}

} // end namespace flixel
} // end namespace util
} // end namespace _FlxColor
