// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_util_LabelValuePair
#include <flixel/util/FlxPool_flixel_util_LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetType
#include <openfl/_legacy/AssetType.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_30_formatTicks,"flixel.util.FlxStringUtil","formatTicks",0xe4bb609c,"flixel.util.FlxStringUtil.formatTicks","flixel/util/FlxStringUtil.hx",30,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_41_formatTime,"flixel.util.FlxStringUtil","formatTime",0xcfa9a0a7,"flixel.util.FlxStringUtil.formatTime","flixel/util/FlxStringUtil.hx",41,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_71_formatArray,"flixel.util.FlxStringUtil","formatArray",0xfa1c9fbf,"flixel.util.FlxStringUtil.formatArray","flixel/util/FlxStringUtil.hx",71,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_93_formatStringMap,"flixel.util.FlxStringUtil","formatStringMap",0x51016f71,"flixel.util.FlxStringUtil.formatStringMap","flixel/util/FlxStringUtil.hx",93,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_116_formatMoney,"flixel.util.FlxStringUtil","formatMoney",0xe0ecec66,"flixel.util.FlxStringUtil.formatMoney","flixel/util/FlxStringUtil.hx",116,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_163_formatBytes,"flixel.util.FlxStringUtil","formatBytes",0x92253a91,"flixel.util.FlxStringUtil.formatBytes","flixel/util/FlxStringUtil.hx",163,0x4e012e33)
static const ::String _hx_array_data_03bd21cb_10[] = {
	HX_("Bytes",4b,78,c5,50),HX_("kB",77,5d,00,00),HX_("MB",55,43,00,00),HX_("GB",1b,3e,00,00),HX_("TB",6e,49,00,00),HX_("PB",f2,45,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_181_filterDigits,"flixel.util.FlxStringUtil","filterDigits",0xab6a2081,"flixel.util.FlxStringUtil.filterDigits","flixel/util/FlxStringUtil.hx",181,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_207_htmlFormat,"flixel.util.FlxStringUtil","htmlFormat",0x8e97acc5,"flixel.util.FlxStringUtil.htmlFormat","flixel/util/FlxStringUtil.hx",207,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_238_getClassName,"flixel.util.FlxStringUtil","getClassName",0xd57e17b0,"flixel.util.FlxStringUtil.getClassName","flixel/util/FlxStringUtil.hx",238,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_270_getHost,"flixel.util.FlxStringUtil","getHost",0x4b5a657b,"flixel.util.FlxStringUtil.getHost","flixel/util/FlxStringUtil.hx",270,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_289_getDomain,"flixel.util.FlxStringUtil","getDomain",0x05683217,"flixel.util.FlxStringUtil.getDomain","flixel/util/FlxStringUtil.hx",289,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_313_sameClassName,"flixel.util.FlxStringUtil","sameClassName",0x3be7dc7a,"flixel.util.FlxStringUtil.sameClassName","flixel/util/FlxStringUtil.hx",313,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_323_toIntArray,"flixel.util.FlxStringUtil","toIntArray",0xa370d488,"flixel.util.FlxStringUtil.toIntArray","flixel/util/FlxStringUtil.hx",323,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_344_toFloatArray,"flixel.util.FlxStringUtil","toFloatArray",0xcff15c3b,"flixel.util.FlxStringUtil.toFloatArray","flixel/util/FlxStringUtil.hx",344,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_367_arrayToCSV,"flixel.util.FlxStringUtil","arrayToCSV",0xd181e275,"flixel.util.FlxStringUtil.arrayToCSV","flixel/util/FlxStringUtil.hx",367,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_432_bitmapToCSV,"flixel.util.FlxStringUtil","bitmapToCSV",0x6fd72f79,"flixel.util.FlxStringUtil.bitmapToCSV","flixel/util/FlxStringUtil.hx",432,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_546_imageToCSV,"flixel.util.FlxStringUtil","imageToCSV",0xe3229173,"flixel.util.FlxStringUtil.imageToCSV","flixel/util/FlxStringUtil.hx",546,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_568_getDebugString,"flixel.util.FlxStringUtil","getDebugString",0x47d891d1,"flixel.util.FlxStringUtil.getDebugString","flixel/util/FlxStringUtil.hx",568,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_588_contains,"flixel.util.FlxStringUtil","contains",0x45000522,"flixel.util.FlxStringUtil.contains","flixel/util/FlxStringUtil.hx",588,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_596_remove,"flixel.util.FlxStringUtil","remove",0xf6fd7087,"flixel.util.FlxStringUtil.remove","flixel/util/FlxStringUtil.hx",596,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_604_insert,"flixel.util.FlxStringUtil","insert",0x9052177c,"flixel.util.FlxStringUtil.insert","flixel/util/FlxStringUtil.hx",604,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_610_sortAlphabetically,"flixel.util.FlxStringUtil","sortAlphabetically",0xf5002ac6,"flixel.util.FlxStringUtil.sortAlphabetically","flixel/util/FlxStringUtil.hx",610,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_608_sortAlphabetically,"flixel.util.FlxStringUtil","sortAlphabetically",0xf5002ac6,"flixel.util.FlxStringUtil.sortAlphabetically","flixel/util/FlxStringUtil.hx",608,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_626_isNullOrEmpty,"flixel.util.FlxStringUtil","isNullOrEmpty",0x99779cf6,"flixel.util.FlxStringUtil.isNullOrEmpty","flixel/util/FlxStringUtil.hx",626,0x4e012e33)
namespace flixel{
namespace util{

void FlxStringUtil_obj::__construct() { }

Dynamic FlxStringUtil_obj::__CreateEmpty() { return new FlxStringUtil_obj; }

void *FlxStringUtil_obj::_hx_vtable = 0;

Dynamic FlxStringUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxStringUtil_obj > _hx_result = new FlxStringUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxStringUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x38165b63;
}

::String FlxStringUtil_obj::formatTicks(int StartTicks,int EndTicks){
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_30_formatTicks)
HXDLIN(  30)		return (((Float)::Math_obj::abs((EndTicks - StartTicks)) / (Float)(int)1000) + HX_("s",73,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxStringUtil_obj,formatTicks,return )

::String FlxStringUtil_obj::formatTime(Float Seconds,hx::Null< bool >  __o_ShowMS){
bool ShowMS = __o_ShowMS.Default(false);
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_41_formatTime)
HXLINE(  42)		::String timeString = (::Std_obj::_hx_int(((Float)Seconds / (Float)(int)60)) + HX_(":",3a,00,00,00));
HXLINE(  43)		int timeStringHelper = hx::Mod(::Std_obj::_hx_int(Seconds),(int)60);
HXLINE(  44)		if ((timeStringHelper < (int)10)) {
HXLINE(  46)			timeString = (timeString + HX_("0",30,00,00,00));
            		}
HXLINE(  48)		timeString = (timeString + timeStringHelper);
HXLINE(  49)		if (ShowMS) {
HXLINE(  51)			timeString = (timeString + HX_(".",2e,00,00,00));
HXLINE(  52)			timeStringHelper = ::Std_obj::_hx_int(((Seconds - ::Std_obj::_hx_int(Seconds)) * (int)100));
HXLINE(  53)			if ((timeStringHelper < (int)10)) {
HXLINE(  55)				timeString = (timeString + HX_("0",30,00,00,00));
            			}
HXLINE(  57)			timeString = (timeString + timeStringHelper);
            		}
HXLINE(  60)		return timeString;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxStringUtil_obj,formatTime,return )

::String FlxStringUtil_obj::formatArray(::cpp::VirtualArray AnyArray){
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_71_formatArray)
HXLINE(  72)		::String string = HX_("",00,00,00,00);
HXLINE(  73)		bool _hx_tmp;
HXDLIN(  73)		if (hx::IsNotNull( AnyArray )) {
HXLINE(  73)			_hx_tmp = (AnyArray->get_length() > (int)0);
            		}
            		else {
HXLINE(  73)			_hx_tmp = false;
            		}
HXDLIN(  73)		if (_hx_tmp) {
HXLINE(  75)			string = ::Std_obj::string(AnyArray->__get((int)0));
HXLINE(  76)			int i = (int)1;
HXLINE(  77)			int l = AnyArray->get_length();
HXLINE(  78)			while((i < l)){
HXLINE(  80)				i = (i + (int)1);
HXDLIN(  80)				string = (string + (HX_(", ",74,26,00,00) + ::Std_obj::string(AnyArray->__get((i - (int)1)))));
            			}
            		}
HXLINE(  83)		return string;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxStringUtil_obj,formatArray,return )

::String FlxStringUtil_obj::formatStringMap( ::haxe::ds::StringMap AnyMap){
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_93_formatStringMap)
HXLINE(  94)		::String string = HX_("",00,00,00,00);
HXLINE(  95)		{
HXLINE(  95)			 ::Dynamic key = AnyMap->keys();
HXDLIN(  95)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  95)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(  97)				string = (string + ::Std_obj::string(key1));
HXLINE(  98)				string = (string + HX_(", ",74,26,00,00));
            			}
            		}
HXLINE( 101)		return string.substring((int)0,(string.length - (int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxStringUtil_obj,formatStringMap,return )

::String FlxStringUtil_obj::formatMoney(Float Amount,hx::Null< bool >  __o_ShowDecimal,hx::Null< bool >  __o_EnglishStyle){
bool ShowDecimal = __o_ShowDecimal.Default(true);
bool EnglishStyle = __o_EnglishStyle.Default(true);
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_116_formatMoney)
HXLINE( 117)		bool isNegative = (Amount < (int)0);
HXLINE( 118)		Amount = ::Math_obj::abs(Amount);
HXLINE( 120)		::String string = HX_("",00,00,00,00);
HXLINE( 121)		::String comma = HX_("",00,00,00,00);
HXLINE( 122)		int amount = ::Math_obj::floor(Amount);
HXLINE( 123)		while((amount > (int)0)){
HXLINE( 125)			bool _hx_tmp;
HXDLIN( 125)			if ((string.length > (int)0)) {
HXLINE( 125)				_hx_tmp = (comma.length <= (int)0);
            			}
            			else {
HXLINE( 125)				_hx_tmp = false;
            			}
HXDLIN( 125)			if (_hx_tmp) {
HXLINE( 126)				if (EnglishStyle) {
HXLINE( 126)					comma = HX_(",",2c,00,00,00);
            				}
            				else {
HXLINE( 126)					comma = HX_(".",2e,00,00,00);
            				}
            			}
HXLINE( 128)			::String zeroes = HX_("",00,00,00,00);
HXLINE( 129)			int helper = (amount - (::Math_obj::floor(((Float)amount / (Float)(int)1000)) * (int)1000));
HXLINE( 130)			amount = ::Math_obj::floor(((Float)amount / (Float)(int)1000));
HXLINE( 131)			if ((amount > (int)0)) {
HXLINE( 133)				if ((helper < (int)100)) {
HXLINE( 134)					zeroes = (zeroes + HX_("0",30,00,00,00));
            				}
HXLINE( 135)				if ((helper < (int)10)) {
HXLINE( 136)					zeroes = (zeroes + HX_("0",30,00,00,00));
            				}
            			}
HXLINE( 138)			string = (((zeroes + helper) + comma) + string);
            		}
HXLINE( 141)		if ((string == HX_("",00,00,00,00))) {
HXLINE( 142)			string = HX_("0",30,00,00,00);
            		}
HXLINE( 144)		if (ShowDecimal) {
HXLINE( 146)			int amount1 = ::Math_obj::floor((Amount * (int)100));
HXDLIN( 146)			amount = (amount1 - (::Math_obj::floor(Amount) * (int)100));
HXLINE( 147)			::String string1;
HXDLIN( 147)			if (EnglishStyle) {
HXLINE( 147)				string1 = HX_(".",2e,00,00,00);
            			}
            			else {
HXLINE( 147)				string1 = HX_(",",2c,00,00,00);
            			}
HXDLIN( 147)			string = (string + string1);
HXLINE( 148)			if ((amount < (int)10)) {
HXLINE( 149)				string = (string + HX_("0",30,00,00,00));
            			}
HXLINE( 150)			string = (string + amount);
            		}
HXLINE( 153)		if (isNegative) {
HXLINE( 154)			string = (HX_("-",2d,00,00,00) + string);
            		}
HXLINE( 155)		return string;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxStringUtil_obj,formatMoney,return )

::String FlxStringUtil_obj::formatBytes(Float Bytes,hx::Null< int >  __o_Precision){
int Precision = __o_Precision.Default(2);
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_163_formatBytes)
HXLINE( 164)		::Array< ::String > units = ::Array_obj< ::String >::fromData( _hx_array_data_03bd21cb_10,6);
HXLINE( 165)		int curUnit = (int)0;
HXLINE( 166)		while(true){
HXLINE( 166)			bool _hx_tmp;
HXDLIN( 166)			if ((Bytes >= (int)1024)) {
HXLINE( 166)				_hx_tmp = (curUnit < (units->length - (int)1));
            			}
            			else {
HXLINE( 166)				_hx_tmp = false;
            			}
HXDLIN( 166)			if (!(_hx_tmp)) {
HXLINE( 166)				goto _hx_goto_8;
            			}
HXLINE( 168)			Bytes = ((Float)Bytes / (Float)(int)1024);
HXLINE( 169)			curUnit = (curUnit + (int)1);
            		}
            		_hx_goto_8:;
HXLINE( 171)		Float _hx_tmp1 = ::flixel::math::FlxMath_obj::roundDecimal(Bytes,Precision);
HXDLIN( 171)		return (_hx_tmp1 + units->__get(curUnit));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxStringUtil_obj,formatBytes,return )

::String FlxStringUtil_obj::filterDigits(::String Input){
            	HX_GC_STACKFRAME(&_hx_pos_85c2c6c527e56776_181_filterDigits)
HXLINE( 182)		 ::StringBuf output =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 183)		{
HXLINE( 183)			int _g1 = (int)0;
HXDLIN( 183)			int _g = Input.length;
HXDLIN( 183)			while((_g1 < _g)){
HXLINE( 183)				_g1 = (_g1 + (int)1);
HXDLIN( 183)				int i = (_g1 - (int)1);
HXLINE( 185)				 ::Dynamic c = Input.charCodeAt(i);
HXLINE( 186)				bool _hx_tmp;
HXDLIN( 186)				if (hx::IsGreaterEq( c,(int)48 )) {
HXLINE( 186)					_hx_tmp = hx::IsLessEq( c,(int)57 );
            				}
            				else {
HXLINE( 186)					_hx_tmp = false;
            				}
HXDLIN( 186)				if (_hx_tmp) {
HXLINE( 188)					if (hx::IsNull( output->charBuf )) {
HXLINE( 188)						output->charBuf = ::Array_obj< char >::__new();
            					}
HXDLIN( 188)					output->charBuf->push(c);
            				}
            			}
            		}
HXLINE( 191)		return output->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxStringUtil_obj,filterDigits,return )

::String FlxStringUtil_obj::htmlFormat(::String Text,hx::Null< int >  __o_Size,::String __o_Color,hx::Null< bool >  __o_Bold,hx::Null< bool >  __o_Italic,hx::Null< bool >  __o_Underlined){
int Size = __o_Size.Default(12);
::String Color = __o_Color.Default(HX_HCSTRING("FFFFFF","\xc0","\x27","\x82","\x79"));
bool Bold = __o_Bold.Default(false);
bool Italic = __o_Italic.Default(false);
bool Underlined = __o_Underlined.Default(false);
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_207_htmlFormat)
HXLINE( 208)		::String prefix = ((((HX_("<font size='",c0,5b,1a,a4) + Size) + HX_("' color='#",2f,1d,64,33)) + Color) + HX_("'>",37,22,00,00));
HXLINE( 209)		::String suffix = HX_("</font>",3c,82,5f,8e);
HXLINE( 211)		if (Bold) {
HXLINE( 213)			prefix = (HX_("<b>",d8,dc,2d,00) + prefix);
HXLINE( 214)			suffix = (suffix + HX_("</b>",cf,cc,cc,27));
            		}
HXLINE( 216)		if (Italic) {
HXLINE( 218)			prefix = (HX_("<i>",f1,e2,2d,00) + prefix);
HXLINE( 219)			suffix = (suffix + HX_("</i>",e8,d2,cc,27));
            		}
HXLINE( 221)		if (Underlined) {
HXLINE( 223)			prefix = (HX_("<u>",65,ed,2d,00) + prefix);
HXLINE( 224)			suffix = (suffix + HX_("</u>",5c,dd,cc,27));
            		}
HXLINE( 227)		return ((prefix + Text) + suffix);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(FlxStringUtil_obj,htmlFormat,return )

::String FlxStringUtil_obj::getClassName( ::Dynamic Obj,hx::Null< bool >  __o_Simple){
bool Simple = __o_Simple.Default(false);
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_238_getClassName)
HXLINE( 239)		hx::Class cl;
HXLINE( 240)		if (::Std_obj::is(Obj,hx::ClassOf< ::hx::Class >())) {
HXLINE( 242)			cl = Obj;
            		}
            		else {
HXLINE( 246)			cl = ::Type_obj::getClass(Obj);
            		}
HXLINE( 249)		::String s = ::Type_obj::getClassName(cl);
HXLINE( 250)		if (hx::IsNotNull( s )) {
HXLINE( 252)			s = ::StringTools_obj::replace(s,HX_("::",c0,32,00,00),HX_(".",2e,00,00,00));
HXLINE( 253)			if (Simple) {
HXLINE( 255)				s = s.substr((s.lastIndexOf(HX_(".",2e,00,00,00),null()) + (int)1),null());
            			}
            		}
HXLINE( 258)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxStringUtil_obj,getClassName,return )

::String FlxStringUtil_obj::getHost(::String url){
            	HX_GC_STACKFRAME(&_hx_pos_85c2c6c527e56776_270_getHost)
HXLINE( 271)		 ::EReg hostFromURL =  ::EReg_obj::__alloc( HX_CTX ,HX_("^(?:[a-z][a-z0-9+\\-.]*://)?(?:[a-z0-9\\-._~%!$&'()*+,;=]+@)?([a-z0-9\\-._~%]{3,}|\\[[a-f0-9:.]+\\])?(?::[0-9]+)?",f7,89,6d,75),HX_("i",69,00,00,00));
HXLINE( 272)		if (hostFromURL->match(url)) {
HXLINE( 274)			::String host = hostFromURL->matched((int)1);
HXLINE( 275)			if (hx::IsNotNull( host )) {
HXLINE( 275)				return ::StringTools_obj::urlDecode(host).toLowerCase();
            			}
            			else {
HXLINE( 275)				return HX_("",00,00,00,00);
            			}
            		}
HXLINE( 278)		return HX_("",00,00,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxStringUtil_obj,getHost,return )

::String FlxStringUtil_obj::getDomain(::String url){
            	HX_GC_STACKFRAME(&_hx_pos_85c2c6c527e56776_289_getDomain)
HXLINE( 290)		::String host = ::flixel::util::FlxStringUtil_obj::getHost(url);
HXLINE( 292)		 ::EReg isLocalhostOrIpAddress =  ::EReg_obj::__alloc( HX_CTX ,HX_("^(localhost|[0-9.]+|\\[[a-f0-9:.]+\\])$",88,fe,57,f1),HX_("i",69,00,00,00));
HXLINE( 293)		 ::EReg domainFromHost =  ::EReg_obj::__alloc( HX_CTX ,HX_("^(?:[a-z0-9\\-]+\\.)*([a-z0-9\\-]+\\.[a-z0-9\\-]+)$",9b,e9,08,2b),HX_("i",69,00,00,00));
HXLINE( 294)		bool _hx_tmp;
HXDLIN( 294)		if (!(isLocalhostOrIpAddress->match(host))) {
HXLINE( 294)			_hx_tmp = domainFromHost->match(host);
            		}
            		else {
HXLINE( 294)			_hx_tmp = false;
            		}
HXDLIN( 294)		if (_hx_tmp) {
HXLINE( 296)			::String domain = domainFromHost->matched((int)1);
HXLINE( 297)			if (hx::IsNotNull( domain )) {
HXLINE( 297)				return domain.toLowerCase();
            			}
            			else {
HXLINE( 297)				return HX_("",00,00,00,00);
            			}
            		}
HXLINE( 300)		return HX_("",00,00,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxStringUtil_obj,getDomain,return )

bool FlxStringUtil_obj::sameClassName( ::Dynamic Obj1, ::Dynamic Obj2,hx::Null< bool >  __o_Simple){
bool Simple = __o_Simple.Default(true);
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_313_sameClassName)
HXDLIN( 313)		::String _hx_tmp = ::flixel::util::FlxStringUtil_obj::getClassName(Obj1,Simple);
HXDLIN( 313)		return (_hx_tmp == ::flixel::util::FlxStringUtil_obj::getClassName(Obj2,Simple));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxStringUtil_obj,sameClassName,return )

::Array< int > FlxStringUtil_obj::toIntArray(::String Data){
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_323_toIntArray)
HXLINE( 324)		bool _hx_tmp;
HXDLIN( 324)		if (hx::IsNotNull( Data )) {
HXLINE( 324)			_hx_tmp = (Data != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 324)			_hx_tmp = false;
            		}
HXDLIN( 324)		if (_hx_tmp) {
HXLINE( 326)			::Array< ::String > strArray = Data.split(HX_(",",2c,00,00,00));
HXLINE( 327)			::Array< int > iArray = ::Array_obj< int >::__new();
HXLINE( 328)			{
HXLINE( 328)				int _g = (int)0;
HXDLIN( 328)				while((_g < strArray->length)){
HXLINE( 328)					::String str = strArray->__get(_g);
HXDLIN( 328)					_g = (_g + (int)1);
HXLINE( 330)					iArray->push(::Std_obj::parseInt(str));
            				}
            			}
HXLINE( 332)			return iArray;
            		}
HXLINE( 334)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxStringUtil_obj,toIntArray,return )

::Array< Float > FlxStringUtil_obj::toFloatArray(::String Data){
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_344_toFloatArray)
HXLINE( 345)		bool _hx_tmp;
HXDLIN( 345)		if (hx::IsNotNull( Data )) {
HXLINE( 345)			_hx_tmp = (Data != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 345)			_hx_tmp = false;
            		}
HXDLIN( 345)		if (_hx_tmp) {
HXLINE( 347)			::Array< ::String > strArray = Data.split(HX_(",",2c,00,00,00));
HXLINE( 348)			::Array< Float > fArray = ::Array_obj< Float >::__new();
HXLINE( 349)			{
HXLINE( 349)				int _g = (int)0;
HXDLIN( 349)				while((_g < strArray->length)){
HXLINE( 349)					::String str = strArray->__get(_g);
HXDLIN( 349)					_g = (_g + (int)1);
HXLINE( 351)					fArray->push(::Std_obj::parseFloat(str));
            				}
            			}
HXLINE( 353)			return fArray;
            		}
HXLINE( 355)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxStringUtil_obj,toFloatArray,return )

::String FlxStringUtil_obj::arrayToCSV(::Array< int > Data,int Width,hx::Null< bool >  __o_Invert){
bool Invert = __o_Invert.Default(false);
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_367_arrayToCSV)
HXLINE( 368)		int row = (int)0;
HXLINE( 369)		int column;
HXLINE( 370)		::String csv = HX_("",00,00,00,00);
HXLINE( 371)		int height = ::Std_obj::_hx_int(((Float)Data->length / (Float)Width));
HXLINE( 372)		int index;
HXLINE( 373)		int offset = (int)0;
HXLINE( 375)		while((row < height)){
HXLINE( 377)			column = (int)0;
HXLINE( 379)			while((column < Width)){
HXLINE( 381)				index = Data->__get(offset);
HXLINE( 383)				if (Invert) {
HXLINE( 385)					if ((index == (int)0)) {
HXLINE( 387)						index = (int)1;
            					}
            					else {
HXLINE( 389)						if ((index == (int)1)) {
HXLINE( 391)							index = (int)0;
            						}
            					}
            				}
HXLINE( 395)				if ((column == (int)0)) {
HXLINE( 397)					if ((row == (int)0)) {
HXLINE( 399)						csv = (csv + index);
            					}
            					else {
HXLINE( 403)						csv = (csv + (HX_("\n",0a,00,00,00) + index));
            					}
            				}
            				else {
HXLINE( 408)					csv = (csv + (HX_(", ",74,26,00,00) + index));
            				}
HXLINE( 411)				column = (column + (int)1);
HXLINE( 412)				offset = (offset + (int)1);
            			}
HXLINE( 415)			row = (row + (int)1);
            		}
HXLINE( 418)		return csv;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxStringUtil_obj,arrayToCSV,return )

::String FlxStringUtil_obj::bitmapToCSV( ::openfl::_legacy::display::BitmapData Bitmap,hx::Null< bool >  __o_Invert,hx::Null< int >  __o_Scale,::Array< int > ColorMap){
bool Invert = __o_Invert.Default(false);
int Scale = __o_Scale.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_85c2c6c527e56776_432_bitmapToCSV)
HXLINE( 433)		if ((Scale < (int)1)) {
HXLINE( 435)			Scale = (int)1;
            		}
HXLINE( 439)		if ((Scale > (int)1)) {
HXLINE( 441)			 ::openfl::_legacy::display::BitmapData bd = Bitmap;
HXLINE( 442)			int Bitmap1 = (Bitmap->get_width() * Scale);
HXDLIN( 442)			Bitmap =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,Bitmap1,(Bitmap->get_height() * Scale),null(),null(),null());
HXLINE( 445)			int bdW = bd->get_width();
HXLINE( 446)			int bdH = bd->get_height();
HXLINE( 447)			int pCol = (int)0;
HXLINE( 449)			{
HXLINE( 449)				int _g1 = (int)0;
HXDLIN( 449)				int _g = bdW;
HXDLIN( 449)				while((_g1 < _g)){
HXLINE( 449)					_g1 = (_g1 + (int)1);
HXDLIN( 449)					int i = (_g1 - (int)1);
HXLINE( 451)					{
HXLINE( 451)						int _g3 = (int)0;
HXDLIN( 451)						int _g2 = bdH;
HXDLIN( 451)						while((_g3 < _g2)){
HXLINE( 451)							_g3 = (_g3 + (int)1);
HXDLIN( 451)							int j = (_g3 - (int)1);
HXLINE( 453)							pCol = bd->getPixel(i,j);
HXLINE( 455)							{
HXLINE( 455)								int _g5 = (int)0;
HXDLIN( 455)								int _g4 = Scale;
HXDLIN( 455)								while((_g5 < _g4)){
HXLINE( 455)									_g5 = (_g5 + (int)1);
HXDLIN( 455)									int k = (_g5 - (int)1);
HXLINE( 457)									{
HXLINE( 457)										int _g7 = (int)0;
HXDLIN( 457)										int _g6 = Scale;
HXDLIN( 457)										while((_g7 < _g6)){
HXLINE( 457)											_g7 = (_g7 + (int)1);
HXDLIN( 457)											int m = (_g7 - (int)1);
HXLINE( 459)											Bitmap->setPixel(((i * Scale) + k),((j * Scale) + m),pCol);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 471)		if (hx::IsNotNull( ColorMap )) {
HXLINE( 473)			int _g11 = (int)0;
HXDLIN( 473)			int _g8 = ColorMap->length;
HXDLIN( 473)			while((_g11 < _g8)){
HXLINE( 473)				_g11 = (_g11 + (int)1);
HXDLIN( 473)				int i1 = (_g11 - (int)1);
HXLINE( 475)				ColorMap[i1] = ((int)ColorMap->__get(i1) & (int)(int)16777215);
            			}
            		}
HXLINE( 480)		int row = (int)0;
HXLINE( 481)		int column;
HXLINE( 482)		int pixel;
HXLINE( 483)		::String csv = HX_("",00,00,00,00);
HXLINE( 484)		int bitmapWidth = Bitmap->get_width();
HXLINE( 485)		int bitmapHeight = Bitmap->get_height();
HXLINE( 487)		while((row < bitmapHeight)){
HXLINE( 489)			column = (int)0;
HXLINE( 491)			while((column < bitmapWidth)){
HXLINE( 494)				pixel = Bitmap->getPixel(column,row);
HXLINE( 496)				if (hx::IsNotNull( ColorMap )) {
HXLINE( 498)					pixel = ColorMap->indexOf(pixel,null());
            				}
            				else {
HXLINE( 500)					bool _hx_tmp;
HXDLIN( 500)					bool _hx_tmp1;
HXDLIN( 500)					if (Invert) {
HXLINE( 500)						_hx_tmp1 = (pixel > (int)0);
            					}
            					else {
HXLINE( 500)						_hx_tmp1 = false;
            					}
HXDLIN( 500)					if (!(_hx_tmp1)) {
HXLINE( 500)						if (!(Invert)) {
HXLINE( 500)							_hx_tmp = (pixel == (int)0);
            						}
            						else {
HXLINE( 500)							_hx_tmp = false;
            						}
            					}
            					else {
HXLINE( 500)						_hx_tmp = true;
            					}
HXDLIN( 500)					if (_hx_tmp) {
HXLINE( 502)						pixel = (int)1;
            					}
            					else {
HXLINE( 506)						pixel = (int)0;
            					}
            				}
HXLINE( 510)				if ((column == (int)0)) {
HXLINE( 512)					if ((row == (int)0)) {
HXLINE( 514)						csv = (csv + pixel);
            					}
            					else {
HXLINE( 518)						csv = (csv + (HX_("\n",0a,00,00,00) + pixel));
            					}
            				}
            				else {
HXLINE( 523)					csv = (csv + (HX_(", ",74,26,00,00) + pixel));
            				}
HXLINE( 526)				column = (column + (int)1);
            			}
HXLINE( 529)			row = (row + (int)1);
            		}
HXLINE( 532)		return csv;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxStringUtil_obj,bitmapToCSV,return )

::String FlxStringUtil_obj::imageToCSV( ::Dynamic ImageFile,hx::Null< bool >  __o_Invert,hx::Null< int >  __o_Scale,::Array< int > ColorMap){
bool Invert = __o_Invert.Default(false);
int Scale = __o_Scale.Default(1);
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_546_imageToCSV)
HXLINE( 547)		 ::openfl::_legacy::display::BitmapData tempBitmapData;
HXLINE( 549)		if (::Std_obj::is(ImageFile,hx::ClassOf< ::String >())) {
HXLINE( 551)			::String id = ( (::String)(ImageFile) );
HXDLIN( 551)			if (::openfl::_legacy::Assets_obj::exists(id,null())) {
HXLINE( 551)				tempBitmapData = ::openfl::_legacy::Assets_obj::getBitmapData(id,false);
            			}
            			else {
HXLINE( 551)				::flixel::FlxG_obj::log->advanced(((HX_("Could not find a BitmapData asset with ID '",5f,79,a9,21) + id) + HX_("'.",27,22,00,00)),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXDLIN( 551)				tempBitmapData = null();
            			}
            		}
            		else {
HXLINE( 555)			tempBitmapData = ( ( ::openfl::_legacy::display::BitmapData)(::Type_obj::createInstance(ImageFile,::cpp::VirtualArray_obj::__new(0))->__Field(HX_("bitmapData",b9,b5,c0,33),hx::paccDynamic)) );
            		}
HXLINE( 558)		return ::flixel::util::FlxStringUtil_obj::bitmapToCSV(tempBitmapData,Invert,Scale,ColorMap);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxStringUtil_obj,imageToCSV,return )

::String FlxStringUtil_obj::getDebugString(::Array< ::Dynamic> LabelValuePairs){
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_568_getDebugString)
HXLINE( 569)		::String output = HX_("(",28,00,00,00);
HXLINE( 570)		{
HXLINE( 570)			int _g = (int)0;
HXDLIN( 570)			while((_g < LabelValuePairs->length)){
HXLINE( 570)				 ::flixel::util::LabelValuePair pair = LabelValuePairs->__get(_g).StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN( 570)				_g = (_g + (int)1);
HXLINE( 572)				output = (output + (pair->label + HX_(": ",a6,32,00,00)));
HXLINE( 573)				 ::Dynamic value = pair->value;
HXLINE( 574)				if (::Std_obj::is(value,hx::ClassOf< ::Float >())) {
HXLINE( 576)					value = ::flixel::math::FlxMath_obj::roundDecimal(( (Float)(value) ),::flixel::FlxG_obj::debugger->precision);
            				}
HXLINE( 578)				output = (output + (::Std_obj::string(value) + HX_(" | ",44,b4,18,00)));
HXLINE( 579)				::flixel::util::LabelValuePair_obj::_pool->put(pair);
            			}
            		}
HXLINE( 582)		output = ::StringTools_obj::trim(output.substr((int)0,(output.length - (int)2)));
HXLINE( 583)		return (output + HX_(")",29,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxStringUtil_obj,getDebugString,return )

bool FlxStringUtil_obj::contains(::String s,::String str){
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_588_contains)
HXDLIN( 588)		return (s.indexOf(str,null()) != (int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxStringUtil_obj,contains,return )

::String FlxStringUtil_obj::remove(::String s,::String sub){
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_596_remove)
HXDLIN( 596)		return ::StringTools_obj::replace(s,sub,HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxStringUtil_obj,remove,return )

::String FlxStringUtil_obj::insert(::String s,int pos,::String insertion){
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_604_insert)
HXDLIN( 604)		::String _hx_tmp = (s.substring((int)0,pos) + insertion);
HXDLIN( 604)		return (_hx_tmp + s.substr(pos,null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxStringUtil_obj,insert,return )

::Array< ::String > FlxStringUtil_obj::sortAlphabetically(::Array< ::String > list){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run(::String a,::String b){
            			HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_610_sortAlphabetically)
HXLINE( 611)			a = a.toLowerCase();
HXLINE( 612)			b = b.toLowerCase();
HXLINE( 613)			if ((a < b)) {
HXLINE( 613)				return (int)-1;
            			}
HXLINE( 614)			if ((a > b)) {
HXLINE( 614)				return (int)1;
            			}
HXLINE( 615)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_608_sortAlphabetically)
HXLINE( 609)		list->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 617)		return list;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxStringUtil_obj,sortAlphabetically,return )

bool FlxStringUtil_obj::isNullOrEmpty(::String s){
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_626_isNullOrEmpty)
HXDLIN( 626)		if (hx::IsNotNull( s )) {
HXDLIN( 626)			return (s.length == (int)0);
            		}
            		else {
HXDLIN( 626)			return true;
            		}
HXDLIN( 626)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxStringUtil_obj,isNullOrEmpty,return )


FlxStringUtil_obj::FlxStringUtil_obj()
{
}

bool FlxStringUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { outValue = remove_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"insert") ) { outValue = insert_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getHost") ) { outValue = getHost_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contains") ) { outValue = contains_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getDomain") ) { outValue = getDomain_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"formatTime") ) { outValue = formatTime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"htmlFormat") ) { outValue = htmlFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toIntArray") ) { outValue = toIntArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"arrayToCSV") ) { outValue = arrayToCSV_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imageToCSV") ) { outValue = imageToCSV_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"formatTicks") ) { outValue = formatTicks_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"formatArray") ) { outValue = formatArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"formatMoney") ) { outValue = formatMoney_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"formatBytes") ) { outValue = formatBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bitmapToCSV") ) { outValue = bitmapToCSV_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"filterDigits") ) { outValue = filterDigits_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getClassName") ) { outValue = getClassName_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toFloatArray") ) { outValue = toFloatArray_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sameClassName") ) { outValue = sameClassName_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isNullOrEmpty") ) { outValue = isNullOrEmpty_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getDebugString") ) { outValue = getDebugString_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"formatStringMap") ) { outValue = formatStringMap_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"sortAlphabetically") ) { outValue = sortAlphabetically_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FlxStringUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *FlxStringUtil_obj_sStaticStorageInfo = 0;
#endif

static void FlxStringUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxStringUtil_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxStringUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxStringUtil_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxStringUtil_obj::__mClass;

static ::String FlxStringUtil_obj_sStaticFields[] = {
	HX_HCSTRING("formatTicks","\xbf","\x87","\x47","\xc9"),
	HX_HCSTRING("formatTime","\xe4","\xee","\x61","\x0c"),
	HX_HCSTRING("formatArray","\xe2","\xc6","\xa8","\xde"),
	HX_HCSTRING("formatStringMap","\x14","\x64","\x33","\x33"),
	HX_HCSTRING("formatMoney","\x89","\x13","\x79","\xc5"),
	HX_HCSTRING("formatBytes","\xb4","\x61","\xb1","\x76"),
	HX_HCSTRING("filterDigits","\xfe","\x37","\x80","\xc1"),
	HX_HCSTRING("htmlFormat","\x02","\xfb","\x4f","\xcb"),
	HX_HCSTRING("getClassName","\x2d","\x2f","\x94","\xeb"),
	HX_HCSTRING("getHost","\x1e","\x7f","\x95","\x17"),
	HX_HCSTRING("getDomain","\x7a","\x3a","\xd7","\xa9"),
	HX_HCSTRING("sameClassName","\x5d","\x52","\x26","\x79"),
	HX_HCSTRING("toIntArray","\xc5","\x22","\x29","\xe0"),
	HX_HCSTRING("toFloatArray","\xb8","\x73","\x07","\xe6"),
	HX_HCSTRING("arrayToCSV","\xb2","\x30","\x3a","\x0e"),
	HX_HCSTRING("bitmapToCSV","\x9c","\x56","\x63","\x54"),
	HX_HCSTRING("imageToCSV","\xb0","\xdf","\xda","\x1f"),
	HX_HCSTRING("getDebugString","\x8e","\x42","\x41","\xa1"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("sortAlphabetically","\x03","\x7e","\x3c","\x7b"),
	HX_HCSTRING("isNullOrEmpty","\xd9","\x12","\xb6","\xd6"),
	::String(null())
};

void FlxStringUtil_obj::__register()
{
	hx::Object *dummy = new FlxStringUtil_obj;
	FlxStringUtil_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.util.FlxStringUtil","\xcb","\x21","\xbd","\x03");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxStringUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxStringUtil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxStringUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< FlxStringUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxStringUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxStringUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxStringUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace util
