// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxTileFrames
#include <flixel/graphics/frames/FlxTileFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawBaseItem
#include <flixel/graphics/tile/FlxDrawBaseItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawTilesItem
#include <flixel/graphics/tile/FlxDrawTilesItem.h>
#endif
#ifndef INCLUDED_flixel_math_FlxCallbackPoint
#include <flixel/math/FlxCallbackPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTile
#include <flixel/tile/FlxTile.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemapBuffer
#include <flixel/tile/FlxTilemapBuffer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxColorTransformUtil
#include <flixel/util/FlxColorTransformUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal1
#include <flixel/util/_FlxSignal/FlxSignal1.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal2
#include <flixel/util/_FlxSignal/FlxSignal2.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BlendMode
#include <openfl/_legacy/display/BlendMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_CapsStyle
#include <openfl/_legacy/display/CapsStyle.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Graphics
#include <openfl/_legacy/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_JointStyle
#include <openfl/_legacy/display/JointStyle.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_LineScaleMode
#include <openfl/_legacy/display/LineScaleMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_ColorTransform
#include <openfl/_legacy/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1146cbfc6764fb25_43_new,"flixel.tile.FlxTilemap","new",0xbe02531c,"flixel.tile.FlxTilemap.new","flixel/tile/FlxTilemap.hx",43,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_180_destroy,"flixel.tile.FlxTilemap","destroy",0xa7f2bdb6,"flixel.tile.FlxTilemap.destroy","flixel/tile/FlxTilemap.hx",180,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_227_set_frames,"flixel.tile.FlxTilemap","set_frames",0xb39c4aa7,"flixel.tile.FlxTilemap.set_frames","flixel/tile/FlxTilemap.hx",227,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_244_onGameResized,"flixel.tile.FlxTilemap","onGameResized",0x240fb4fb,"flixel.tile.FlxTilemap.onGameResized","flixel/tile/FlxTilemap.hx",244,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_249_onCameraChanged,"flixel.tile.FlxTilemap","onCameraChanged",0xe013f4ec,"flixel.tile.FlxTilemap.onCameraChanged","flixel/tile/FlxTilemap.hx",249,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_253_cacheGraphics,"flixel.tile.FlxTilemap","cacheGraphics",0x759126e9,"flixel.tile.FlxTilemap.cacheGraphics","flixel/tile/FlxTilemap.hx",253,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_277_initTileObjects,"flixel.tile.FlxTilemap","initTileObjects",0xb20b6ad2,"flixel.tile.FlxTilemap.initTileObjects","flixel/tile/FlxTilemap.hx",277,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_302_updateDebugTileBoundingBoxSolid,"flixel.tile.FlxTilemap","updateDebugTileBoundingBoxSolid",0xf2502658,"flixel.tile.FlxTilemap.updateDebugTileBoundingBoxSolid","flixel/tile/FlxTilemap.hx",302,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_307_updateDebugTileBoundingBoxNotSolid,"flixel.tile.FlxTilemap","updateDebugTileBoundingBoxNotSolid",0x299bee0b,"flixel.tile.FlxTilemap.updateDebugTileBoundingBoxNotSolid","flixel/tile/FlxTilemap.hx",307,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_312_updateDebugTileBoundingBoxPartial,"flixel.tile.FlxTilemap","updateDebugTileBoundingBoxPartial",0xa959eeee,"flixel.tile.FlxTilemap.updateDebugTileBoundingBoxPartial","flixel/tile/FlxTilemap.hx",312,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_316_updateDebugTile,"flixel.tile.FlxTilemap","updateDebugTile",0x0398ec94,"flixel.tile.FlxTilemap.updateDebugTile","flixel/tile/FlxTilemap.hx",316,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_340_computeDimensions,"flixel.tile.FlxTilemap","computeDimensions",0x3602f860,"flixel.tile.FlxTilemap.computeDimensions","flixel/tile/FlxTilemap.hx",340,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_350_updateMap,"flixel.tile.FlxTilemap","updateMap",0x271f1fcf,"flixel.tile.FlxTilemap.updateMap","flixel/tile/FlxTilemap.hx",350,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_363_drawDebugOnCamera,"flixel.tile.FlxTilemap","drawDebugOnCamera",0x0d929baf,"flixel.tile.FlxTilemap.drawDebugOnCamera","flixel/tile/FlxTilemap.hx",363,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_441_isOnScreen,"flixel.tile.FlxTilemap","isOnScreen",0xb4cad0b9,"flixel.tile.FlxTilemap.isOnScreen","flixel/tile/FlxTilemap.hx",441,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_456_draw,"flixel.tile.FlxTilemap","draw",0x7d740dc8,"flixel.tile.FlxTilemap.draw","flixel/tile/FlxTilemap.hx",456,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_509_refreshBuffers,"flixel.tile.FlxTilemap","refreshBuffers",0x89f6f19c,"flixel.tile.FlxTilemap.refreshBuffers","flixel/tile/FlxTilemap.hx",509,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_529_setDirty,"flixel.tile.FlxTilemap","setDirty",0x6396ccd4,"flixel.tile.FlxTilemap.setDirty","flixel/tile/FlxTilemap.hx",529,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_550_overlapsWithCallback,"flixel.tile.FlxTilemap","overlapsWithCallback",0xe7b56cdb,"flixel.tile.FlxTilemap.overlapsWithCallback","flixel/tile/FlxTilemap.hx",550,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_651_getTileIndexByCoords,"flixel.tile.FlxTilemap","getTileIndexByCoords",0xb5ce22c7,"flixel.tile.FlxTilemap.getTileIndexByCoords","flixel/tile/FlxTilemap.hx",651,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_663_getTileCoordsByIndex,"flixel.tile.FlxTilemap","getTileCoordsByIndex",0xe0680d7d,"flixel.tile.FlxTilemap.getTileCoordsByIndex","flixel/tile/FlxTilemap.hx",663,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_681_getTileCoords,"flixel.tile.FlxTilemap","getTileCoords",0x02899bde,"flixel.tile.FlxTilemap.getTileCoords","flixel/tile/FlxTilemap.hx",681,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_718_follow,"flixel.tile.FlxTilemap","follow",0xe6a96c35,"flixel.tile.FlxTilemap.follow","flixel/tile/FlxTilemap.hx",718,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_736_ray,"flixel.tile.FlxTilemap","ray",0xbe0558a6,"flixel.tile.FlxTilemap.ray","flixel/tile/FlxTilemap.hx",736,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_846_tileToSprite,"flixel.tile.FlxTilemap","tileToSprite",0xe7482ef2,"flixel.tile.FlxTilemap.tileToSprite","flixel/tile/FlxTilemap.hx",846,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_873_updateBuffers,"flixel.tile.FlxTilemap","updateBuffers",0xf5face26,"flixel.tile.FlxTilemap.updateBuffers","flixel/tile/FlxTilemap.hx",873,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_886_drawTilemap,"flixel.tile.FlxTilemap","drawTilemap",0x2b20d346,"flixel.tile.FlxTilemap.drawTilemap","flixel/tile/FlxTilemap.hx",886,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1034_makeDebugTile,"flixel.tile.FlxTilemap","makeDebugTile",0xa1ed2d0f,"flixel.tile.FlxTilemap.makeDebugTile","flixel/tile/FlxTilemap.hx",1034,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1045_drawDebugTile,"flixel.tile.FlxTilemap","drawDebugTile",0x086b4839,"flixel.tile.FlxTilemap.drawDebugTile","flixel/tile/FlxTilemap.hx",1045,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1062_onDrawDebugChanged,"flixel.tile.FlxTilemap","onDrawDebugChanged",0x3243d108,"flixel.tile.FlxTilemap.onDrawDebugChanged","flixel/tile/FlxTilemap.hx",1062,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1072_updateTile,"flixel.tile.FlxTilemap","updateTile",0x18c3429b,"flixel.tile.FlxTilemap.updateTile","flixel/tile/FlxTilemap.hx",1072,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1081_createBuffer,"flixel.tile.FlxTilemap","createBuffer",0x170b42e0,"flixel.tile.FlxTilemap.createBuffer","flixel/tile/FlxTilemap.hx",1081,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1089_set_antialiasing,"flixel.tile.FlxTilemap","set_antialiasing",0x6cc568b5,"flixel.tile.FlxTilemap.set_antialiasing","flixel/tile/FlxTilemap.hx",1089,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1100_set_graphic,"flixel.tile.FlxTilemap","set_graphic",0xa0b86087,"flixel.tile.FlxTilemap.set_graphic","flixel/tile/FlxTilemap.hx",1100,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1117_set_pixelPerfectRender,"flixel.tile.FlxTilemap","set_pixelPerfectRender",0x5122f25e,"flixel.tile.FlxTilemap.set_pixelPerfectRender","flixel/tile/FlxTilemap.hx",1117,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1126_set_alpha,"flixel.tile.FlxTilemap","set_alpha",0xecd0277d,"flixel.tile.FlxTilemap.set_alpha","flixel/tile/FlxTilemap.hx",1126,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1133_set_color,"flixel.tile.FlxTilemap","set_color",0x1595f182,"flixel.tile.FlxTilemap.set_color","flixel/tile/FlxTilemap.hx",1133,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1143_updateColorTransform,"flixel.tile.FlxTilemap","updateColorTransform",0x6f14b936,"flixel.tile.FlxTilemap.updateColorTransform","flixel/tile/FlxTilemap.hx",1143,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1156_set_blend,"flixel.tile.FlxTilemap","set_blend",0x802e6870,"flixel.tile.FlxTilemap.set_blend","flixel/tile/FlxTilemap.hx",1156,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1162_setScaleXYCallback,"flixel.tile.FlxTilemap","setScaleXYCallback",0x2287ee32,"flixel.tile.FlxTilemap.setScaleXYCallback","flixel/tile/FlxTilemap.hx",1162,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1168_setScaleXCallback,"flixel.tile.FlxTilemap","setScaleXCallback",0x45b95971,"flixel.tile.FlxTilemap.setScaleXCallback","flixel/tile/FlxTilemap.hx",1168,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1181_setScaleYCallback,"flixel.tile.FlxTilemap","setScaleYCallback",0x18aac272,"flixel.tile.FlxTilemap.setScaleYCallback","flixel/tile/FlxTilemap.hx",1181,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1200_defaultTileToSprite,"flixel.tile.FlxTilemap","defaultTileToSprite",0xb4e0664b,"flixel.tile.FlxTilemap.defaultTileToSprite","flixel/tile/FlxTilemap.hx",1200,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1211_set_allowCollisions,"flixel.tile.FlxTilemap","set_allowCollisions",0x96e24689,"flixel.tile.FlxTilemap.set_allowCollisions","flixel/tile/FlxTilemap.hx",1211,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1221_set_debugBoundingBoxColorSolid,"flixel.tile.FlxTilemap","set_debugBoundingBoxColorSolid",0x6fe5cfdd,"flixel.tile.FlxTilemap.set_debugBoundingBoxColorSolid","flixel/tile/FlxTilemap.hx",1221,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1228_set_debugBoundingBoxColorNotSolid,"flixel.tile.FlxTilemap","set_debugBoundingBoxColorNotSolid",0xa41f45a6,"flixel.tile.FlxTilemap.set_debugBoundingBoxColorNotSolid","flixel/tile/FlxTilemap.hx",1228,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1235_set_debugBoundingBoxColorPartial,"flixel.tile.FlxTilemap","set_debugBoundingBoxColorPartial",0xf6d0c3b3,"flixel.tile.FlxTilemap.set_debugBoundingBoxColorPartial","flixel/tile/FlxTilemap.hx",1235,0x448feb74)
namespace flixel{
namespace tile{

void FlxTilemap_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_43_new)
HXLINE( 146)		this->_checkBufferChanges = false;
HXLINE( 124)		this->_scaledTileHeight = ((Float)0);
HXLINE( 123)		this->_scaledTileWidth = ((Float)0);
HXLINE( 121)		this->_tileHeight = (int)0;
HXLINE( 117)		this->_tileWidth = (int)0;
HXLINE( 113)		this->_buffers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 109)		this->_flashRect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 105)		this->_flashPoint =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  92)		this->blend = null();
HXLINE(  87)		this->colorTransform =  ::openfl::_legacy::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  85)		this->alpha = ((Float)1.0);
HXLINE(  80)		this->color = (int)16777215;
HXLINE(  68)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  68)		point->_inPool = false;
HXDLIN(  68)		this->offset = point;
HXLINE(  62)		this->antialiasing = false;
HXLINE(  50)		this->useScaleHack = true;
HXLINE( 150)		super::__construct();
HXLINE( 152)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 154)			this->_helperPoint =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 155)			this->_matrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE( 158)		this->scale =  ::flixel::math::FlxCallbackPoint_obj::__alloc( HX_CTX ,this->setScaleXCallback_dyn(),this->setScaleYCallback_dyn(),this->setScaleXYCallback_dyn());
HXLINE( 159)		this->scale->set((int)1,(int)1);
HXLINE( 161)		::flixel::FlxG_obj::signals->gameResized->add(this->onGameResized_dyn());
HXLINE( 162)		::flixel::FlxG_obj::cameras->cameraAdded->add(this->onCameraChanged_dyn());
HXLINE( 163)		::flixel::FlxG_obj::cameras->cameraRemoved->add(this->onCameraChanged_dyn());
HXLINE( 164)		::flixel::FlxG_obj::cameras->cameraResized->add(this->onCameraChanged_dyn());
HXLINE( 167)		this->set_debugBoundingBoxColorSolid((int)-16744448);
HXLINE( 168)		this->set_debugBoundingBoxColorPartial((int)-16181);
HXLINE( 169)		this->set_debugBoundingBoxColorNotSolid((int)0);
HXLINE( 171)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 172)			::flixel::FlxG_obj::debugger->drawDebugChanged->add(this->onDrawDebugChanged_dyn());
            		}
            	}

Dynamic FlxTilemap_obj::__CreateEmpty() { return new FlxTilemap_obj; }

void *FlxTilemap_obj::_hx_vtable = 0;

Dynamic FlxTilemap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTilemap_obj > _hx_result = new FlxTilemap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxTilemap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e105115) {
		if (inClassId<=(int)0x25a685e0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x25a685e0;
		} else {
			return inClassId==(int)0x2e105115;
		}
	} else {
		return inClassId==(int)0x725f80f5 || inClassId==(int)0x75a66d6a;
	}
}

void FlxTilemap_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_180_destroy)
HXLINE( 181)		this->_flashPoint = null();
HXLINE( 182)		this->_flashRect = null();
HXLINE( 184)		this->_tileObjects = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_tileObjects);
HXLINE( 185)		this->_buffers = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_buffers);
HXLINE( 187)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 190)			this->_debugRect = null();
HXLINE( 191)			this->_debugTileNotSolid = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_debugTileNotSolid);
HXLINE( 192)			this->_debugTilePartial = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_debugTilePartial);
HXLINE( 193)			this->_debugTileSolid = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_debugTileSolid);
            		}
            		else {
HXLINE( 198)			this->_helperPoint = null();
HXLINE( 199)			this->_matrix = null();
            		}
HXLINE( 202)		this->set_frames(null());
HXLINE( 203)		this->set_graphic(null());
HXLINE( 206)		this->scale = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::destroy(this->scale)) );
HXLINE( 207)		this->offset = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->offset)) );
HXLINE( 209)		this->colorTransform = null();
HXLINE( 211)		::flixel::FlxG_obj::signals->gameResized->remove(this->onGameResized_dyn());
HXLINE( 212)		::flixel::FlxG_obj::cameras->cameraAdded->remove(this->onCameraChanged_dyn());
HXLINE( 213)		::flixel::FlxG_obj::cameras->cameraRemoved->remove(this->onCameraChanged_dyn());
HXLINE( 214)		::flixel::FlxG_obj::cameras->cameraResized->remove(this->onCameraChanged_dyn());
HXLINE( 217)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 218)			::flixel::FlxG_obj::debugger->drawDebugChanged->remove(this->onDrawDebugChanged_dyn());
            		}
HXLINE( 221)		this->shader = null();
HXLINE( 223)		this->super::destroy();
            	}


 ::flixel::graphics::frames::FlxFramesCollection FlxTilemap_obj::set_frames( ::flixel::graphics::frames::FlxFramesCollection value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_227_set_frames)
HXLINE( 228)		this->frames = value;
HXLINE( 230)		if (hx::IsNotNull( value )) {
HXLINE( 232)			this->_tileWidth = ::Std_obj::_hx_int(value->frames->__get((int)0).StaticCast<  ::flixel::graphics::frames::FlxFrame >()->sourceSize->x);
HXLINE( 233)			this->_tileHeight = ::Std_obj::_hx_int(value->frames->__get((int)0).StaticCast<  ::flixel::graphics::frames::FlxFrame >()->sourceSize->y);
HXLINE( 234)			this->_flashRect->setTo((int)0,(int)0,this->_tileWidth,this->_tileHeight);
HXLINE( 235)			this->set_graphic(value->parent);
HXLINE( 236)			this->postGraphicLoad();
            		}
HXLINE( 239)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_frames,return )

void FlxTilemap_obj::onGameResized(int _,int _1){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_244_onGameResized)
HXDLIN( 244)		this->_checkBufferChanges = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTilemap_obj,onGameResized,(void))

void FlxTilemap_obj::onCameraChanged( ::flixel::FlxCamera _){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_249_onCameraChanged)
HXDLIN( 249)		this->_checkBufferChanges = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,onCameraChanged,(void))

void FlxTilemap_obj::cacheGraphics(int TileWidth,int TileHeight, ::Dynamic TileGraphic){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_253_cacheGraphics)
HXLINE( 254)		if (::Std_obj::is(TileGraphic,hx::ClassOf< ::flixel::graphics::frames::FlxFramesCollection >())) {
HXLINE( 256)			this->set_frames(( ( ::flixel::graphics::frames::FlxFramesCollection)(TileGraphic) ));
HXLINE( 257)			return;
            		}
HXLINE( 260)		 ::flixel::graphics::FlxGraphic graph = ::flixel::FlxG_obj::bitmap->add(TileGraphic,null(),null());
HXLINE( 261)		if (hx::IsNull( graph )) {
HXLINE( 262)			return;
            		}
HXLINE( 265)		this->_tileWidth = TileWidth;
HXLINE( 266)		if ((this->_tileWidth <= (int)0)) {
HXLINE( 267)			this->_tileWidth = graph->height;
            		}
HXLINE( 269)		this->_tileHeight = TileHeight;
HXLINE( 270)		if ((this->_tileHeight <= (int)0)) {
HXLINE( 271)			this->_tileHeight = this->_tileWidth;
            		}
HXLINE( 273)		Float X = this->_tileWidth;
HXDLIN( 273)		Float Y = this->_tileHeight;
HXDLIN( 273)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 273)		point->_inPool = false;
HXDLIN( 273)		this->set_frames(::flixel::graphics::frames::FlxTileFrames_obj::fromGraphic(graph,point,null(),null()));
            	}


void FlxTilemap_obj::initTileObjects(){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_277_initTileObjects)
HXLINE( 278)		if (hx::IsNull( this->frames )) {
HXLINE( 279)			return;
            		}
HXLINE( 281)		this->_tileObjects = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_tileObjects);
HXLINE( 283)		this->_tileObjects = ::Array_obj< ::Dynamic>::__new();
HXLINE( 285)		int length = this->frames->frames->length;
HXLINE( 286)		length = (length + this->_startingIndex);
HXLINE( 288)		{
HXLINE( 288)			int _g1 = (int)0;
HXDLIN( 288)			int _g = length;
HXDLIN( 288)			while((_g1 < _g)){
HXLINE( 288)				_g1 = (_g1 + (int)1);
HXDLIN( 288)				int i = (_g1 - (int)1);
HXLINE( 289)				::Array< ::Dynamic> _hx_tmp = this->_tileObjects;
HXDLIN( 289)				int _hx_tmp1 = this->_tileWidth;
HXDLIN( 289)				int _hx_tmp2 = this->_tileHeight;
HXDLIN( 289)				int _hx_tmp3;
HXDLIN( 289)				if ((i >= this->_collideIndex)) {
HXLINE( 289)					_hx_tmp3 = this->allowCollisions;
            				}
            				else {
HXLINE( 289)					_hx_tmp3 = (int)0;
            				}
HXDLIN( 289)				_hx_tmp[i] =  ::flixel::tile::FlxTile_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),i,_hx_tmp1,_hx_tmp2,(i >= this->_drawIndex),_hx_tmp3);
            			}
            		}
HXLINE( 293)		this->updateDebugTileBoundingBoxSolid();
HXLINE( 294)		this->updateDebugTileBoundingBoxNotSolid();
HXLINE( 295)		this->updateDebugTileBoundingBoxPartial();
            	}


void FlxTilemap_obj::updateDebugTileBoundingBoxSolid(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_302_updateDebugTileBoundingBoxSolid)
HXDLIN( 302)		this->_debugTileSolid = this->updateDebugTile(this->_debugTileSolid,this->debugBoundingBoxColorSolid);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,updateDebugTileBoundingBoxSolid,(void))

void FlxTilemap_obj::updateDebugTileBoundingBoxNotSolid(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_307_updateDebugTileBoundingBoxNotSolid)
HXDLIN( 307)		this->_debugTileNotSolid = this->updateDebugTile(this->_debugTileNotSolid,this->debugBoundingBoxColorNotSolid);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,updateDebugTileBoundingBoxNotSolid,(void))

void FlxTilemap_obj::updateDebugTileBoundingBoxPartial(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_312_updateDebugTileBoundingBoxPartial)
HXDLIN( 312)		this->_debugTilePartial = this->updateDebugTile(this->_debugTilePartial,this->debugBoundingBoxColorPartial);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,updateDebugTileBoundingBoxPartial,(void))

 ::openfl::_legacy::display::BitmapData FlxTilemap_obj::updateDebugTile( ::openfl::_legacy::display::BitmapData tileBitmap,int color){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_316_updateDebugTile)
HXLINE( 317)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 318)			return null();
            		}
HXLINE( 320)		bool _hx_tmp;
HXDLIN( 320)		if ((this->_tileWidth > (int)0)) {
HXLINE( 320)			_hx_tmp = (this->_tileHeight <= (int)0);
            		}
            		else {
HXLINE( 320)			_hx_tmp = true;
            		}
HXDLIN( 320)		if (_hx_tmp) {
HXLINE( 321)			return tileBitmap;
            		}
HXLINE( 323)		bool _hx_tmp1;
HXDLIN( 323)		if (hx::IsNotNull( tileBitmap )) {
HXLINE( 323)			int _hx_tmp2 = tileBitmap->get_width();
HXDLIN( 323)			if ((_hx_tmp2 == this->_tileWidth)) {
HXLINE( 323)				int _hx_tmp3 = tileBitmap->get_height();
HXDLIN( 323)				_hx_tmp1 = (_hx_tmp3 != this->_tileHeight);
            			}
            			else {
HXLINE( 323)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE( 323)			_hx_tmp1 = false;
            		}
HXDLIN( 323)		if (_hx_tmp1) {
HXLINE( 324)			tileBitmap = ::flixel::util::FlxDestroyUtil_obj::dispose(tileBitmap);
            		}
HXLINE( 326)		if (hx::IsNull( tileBitmap )) {
HXLINE( 327)			tileBitmap = this->makeDebugTile(color);
            		}
            		else {
HXLINE( 330)			tileBitmap->fillRect(tileBitmap->get_rect(),(int)0);
HXLINE( 331)			this->drawDebugTile(tileBitmap,color);
            		}
HXLINE( 334)		this->setDirty(null());
HXLINE( 335)		return tileBitmap;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTilemap_obj,updateDebugTile,return )

void FlxTilemap_obj::computeDimensions(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_340_computeDimensions)
HXLINE( 341)		this->_scaledTileWidth = (this->_tileWidth * this->scale->x);
HXLINE( 342)		this->_scaledTileHeight = (this->_tileHeight * this->scale->y);
HXLINE( 345)		this->set_width((this->widthInTiles * this->_scaledTileWidth));
HXLINE( 346)		this->set_height((this->heightInTiles * this->_scaledTileHeight));
            	}


void FlxTilemap_obj::updateMap(){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_350_updateMap)
HXLINE( 352)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 353)			this->_debugRect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,this->_tileWidth,this->_tileHeight);
            		}
HXLINE( 356)		int numTiles = this->_tileObjects->get_length();
HXLINE( 357)		{
HXLINE( 357)			int _g1 = (int)0;
HXDLIN( 357)			int _g = numTiles;
HXDLIN( 357)			while((_g1 < _g)){
HXLINE( 357)				_g1 = (_g1 + (int)1);
HXDLIN( 357)				int i = (_g1 - (int)1);
HXLINE( 358)				this->updateTile(i);
            			}
            		}
            	}


void FlxTilemap_obj::drawDebugOnCamera( ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_363_drawDebugOnCamera)
HXLINE( 364)		if (!(::flixel::FlxG_obj::renderTile)) {
HXLINE( 365)			return;
            		}
HXLINE( 367)		 ::flixel::tile::FlxTilemapBuffer buffer = null();
HXLINE( 368)		int l = ::flixel::FlxG_obj::cameras->list->length;
HXLINE( 370)		{
HXLINE( 370)			int _g1 = (int)0;
HXDLIN( 370)			int _g = l;
HXDLIN( 370)			while((_g1 < _g)){
HXLINE( 370)				_g1 = (_g1 + (int)1);
HXDLIN( 370)				int i = (_g1 - (int)1);
HXLINE( 372)				if (hx::IsEq( ::flixel::FlxG_obj::cameras->list->__get(i).StaticCast<  ::flixel::FlxCamera >(),Camera )) {
HXLINE( 374)					buffer = this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXLINE( 375)					goto _hx_goto_15;
            				}
            			}
            			_hx_goto_15:;
            		}
HXLINE( 379)		if (hx::IsNull( buffer )) {
HXLINE( 380)			return;
            		}
HXLINE( 383)		Float _hx_tmp = this->x;
HXDLIN( 383)		this->_helperPoint->x = (_hx_tmp - (Camera->scroll->x * this->scrollFactor->x));
HXLINE( 384)		Float _hx_tmp1 = this->y;
HXDLIN( 384)		this->_helperPoint->y = (_hx_tmp1 - (Camera->scroll->y * this->scrollFactor->y));
HXLINE( 386)		Float rectWidth = this->_scaledTileWidth;
HXLINE( 387)		Float rectHeight = this->_scaledTileHeight;
HXLINE( 388)		 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 388)		_this->x = (int)0;
HXDLIN( 388)		_this->y = (int)0;
HXDLIN( 388)		_this->width = rectWidth;
HXDLIN( 388)		_this->height = rectHeight;
HXDLIN( 388)		 ::flixel::math::FlxRect rect = _this;
HXDLIN( 388)		rect->_inPool = false;
HXDLIN( 388)		 ::flixel::math::FlxRect rect1 = rect;
HXLINE( 392)		 ::flixel::math::FlxPoint _hx_tmp2 = this->_point;
HXDLIN( 392)		_hx_tmp2->set_x(((Camera->scroll->x * this->scrollFactor->x) - this->x));
HXLINE( 393)		 ::flixel::math::FlxPoint _hx_tmp3 = this->_point;
HXDLIN( 393)		_hx_tmp3->set_y(((Camera->scroll->y * this->scrollFactor->y) - this->y));
HXLINE( 394)		int screenXInTiles = ::Math_obj::floor(((Float)this->_point->x / (Float)this->_scaledTileWidth));
HXLINE( 395)		int screenYInTiles = ::Math_obj::floor(((Float)this->_point->y / (Float)this->_scaledTileHeight));
HXLINE( 396)		int screenRows = buffer->rows;
HXLINE( 397)		int screenColumns = buffer->columns;
HXLINE( 400)		 ::Dynamic Max = (this->widthInTiles - screenColumns);
HXDLIN( 400)		Float lowerBound;
HXDLIN( 400)		if ((screenXInTiles < (int)0)) {
HXLINE( 400)			lowerBound = (int)0;
            		}
            		else {
HXLINE( 400)			lowerBound = screenXInTiles;
            		}
HXDLIN( 400)		Float screenXInTiles1;
HXDLIN( 400)		bool screenXInTiles2;
HXDLIN( 400)		if (hx::IsNotNull( Max )) {
HXLINE( 400)			screenXInTiles2 = hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE( 400)			screenXInTiles2 = false;
            		}
HXDLIN( 400)		if (screenXInTiles2) {
HXLINE( 400)			screenXInTiles1 = Max;
            		}
            		else {
HXLINE( 400)			screenXInTiles1 = lowerBound;
            		}
HXDLIN( 400)		screenXInTiles = ::Std_obj::_hx_int(screenXInTiles1);
HXLINE( 401)		 ::Dynamic Max1 = (this->heightInTiles - screenRows);
HXDLIN( 401)		Float lowerBound1;
HXDLIN( 401)		if ((screenYInTiles < (int)0)) {
HXLINE( 401)			lowerBound1 = (int)0;
            		}
            		else {
HXLINE( 401)			lowerBound1 = screenYInTiles;
            		}
HXDLIN( 401)		Float screenYInTiles1;
HXDLIN( 401)		bool screenYInTiles2;
HXDLIN( 401)		if (hx::IsNotNull( Max1 )) {
HXLINE( 401)			screenYInTiles2 = hx::IsGreater( lowerBound1,Max1 );
            		}
            		else {
HXLINE( 401)			screenYInTiles2 = false;
            		}
HXDLIN( 401)		if (screenYInTiles2) {
HXLINE( 401)			screenYInTiles1 = Max1;
            		}
            		else {
HXLINE( 401)			screenYInTiles1 = lowerBound1;
            		}
HXDLIN( 401)		screenYInTiles = ::Std_obj::_hx_int(screenYInTiles1);
HXLINE( 403)		int rowIndex = ((screenYInTiles * this->widthInTiles) + screenXInTiles);
HXLINE( 404)		int columnIndex;
HXLINE( 405)		 ::flixel::tile::FlxTile tile;
HXLINE( 407)		{
HXLINE( 407)			int _g11 = (int)0;
HXDLIN( 407)			int _g2 = screenRows;
HXDLIN( 407)			while((_g11 < _g2)){
HXLINE( 407)				_g11 = (_g11 + (int)1);
HXDLIN( 407)				int row = (_g11 - (int)1);
HXLINE( 409)				columnIndex = rowIndex;
HXLINE( 411)				{
HXLINE( 411)					int _g3 = (int)0;
HXDLIN( 411)					int _g21 = screenColumns;
HXDLIN( 411)					while((_g3 < _g21)){
HXLINE( 411)						_g3 = (_g3 + (int)1);
HXDLIN( 411)						int column = (_g3 - (int)1);
HXLINE( 413)						::Array< ::Dynamic> tile1 = this->_tileObjects;
HXDLIN( 413)						tile = tile1->__get(this->_data->__get(columnIndex)).StaticCast<  ::flixel::tile::FlxTile >();
HXLINE( 415)						bool _hx_tmp4;
HXDLIN( 415)						if (hx::IsNotNull( tile )) {
HXLINE( 415)							_hx_tmp4 = tile->visible;
            						}
            						else {
HXLINE( 415)							_hx_tmp4 = false;
            						}
HXDLIN( 415)						if (_hx_tmp4) {
HXLINE( 417)							Float _hx_tmp5 = this->_helperPoint->x;
HXDLIN( 417)							rect1->x = (_hx_tmp5 + (hx::Mod(columnIndex,this->widthInTiles) * rectWidth));
HXLINE( 418)							Float _hx_tmp6 = this->_helperPoint->y;
HXDLIN( 418)							rect1->y = (_hx_tmp6 + (::Math_obj::floor(((Float)columnIndex / (Float)this->widthInTiles)) * rectHeight));
HXLINE( 419)							 ::openfl::_legacy::display::Graphics _hx_tmp7 = Camera->debugLayer->get_graphics();
HXLINE( 420)							int tile2 = tile->allowCollisions;
HXLINE( 419)							this->drawDebugBoundingBox(_hx_tmp7,rect1,tile2,(tile->allowCollisions != (int)4369));
            						}
HXLINE( 423)						columnIndex = (columnIndex + (int)1);
            					}
            				}
HXLINE( 426)				rowIndex = (rowIndex + this->widthInTiles);
            			}
            		}
HXLINE( 429)		if (!(rect1->_inPool)) {
HXLINE( 429)			rect1->_inPool = true;
HXDLIN( 429)			rect1->_weak = false;
HXDLIN( 429)			::flixel::math::FlxRect_obj::_pool->putUnsafe(rect1);
            		}
            	}


bool FlxTilemap_obj::isOnScreen( ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_441_isOnScreen)
HXLINE( 442)		if (hx::IsNull( Camera )) {
HXLINE( 443)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 445)		Float minX = (this->x - this->offset->x);
HXDLIN( 445)		Float minX1 = (minX - (Camera->scroll->x * this->scrollFactor->x));
HXLINE( 446)		Float minY = (this->y - this->offset->y);
HXDLIN( 446)		Float minY1 = (minY - (Camera->scroll->y * this->scrollFactor->y));
HXLINE( 448)		this->_point->set(minX1,minY1);
HXLINE( 449)		 ::flixel::math::FlxPoint point = this->_point;
HXDLIN( 449)		bool _hx_tmp;
HXDLIN( 449)		bool _hx_tmp1;
HXDLIN( 449)		if (((point->x + (this->_scaledTileWidth * this->widthInTiles)) > Camera->viewOffsetX)) {
HXLINE( 449)			_hx_tmp1 = (point->x < Camera->viewOffsetWidth);
            		}
            		else {
HXLINE( 449)			_hx_tmp1 = false;
            		}
HXDLIN( 449)		if (_hx_tmp1) {
HXLINE( 449)			_hx_tmp = ((point->y + (this->_scaledTileHeight * this->heightInTiles)) > Camera->viewOffsetY);
            		}
            		else {
HXLINE( 449)			_hx_tmp = false;
            		}
HXDLIN( 449)		if (_hx_tmp) {
HXLINE( 449)			return (point->y < Camera->viewOffsetHeight);
            		}
            		else {
HXLINE( 449)			return false;
            		}
HXDLIN( 449)		return false;
            	}


void FlxTilemap_obj::draw(){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_456_draw)
HXLINE( 458)		if (hx::IsNull( this->graphic )) {
HXLINE( 459)			return;
            		}
HXLINE( 461)		if (this->_checkBufferChanges) {
HXLINE( 463)			this->refreshBuffers();
HXLINE( 464)			this->_checkBufferChanges = false;
            		}
HXLINE( 467)		 ::flixel::FlxCamera camera;
HXLINE( 468)		 ::flixel::tile::FlxTilemapBuffer buffer;
HXLINE( 469)		int l = this->get_cameras()->length;
HXLINE( 471)		{
HXLINE( 471)			int _g1 = (int)0;
HXDLIN( 471)			int _g = l;
HXDLIN( 471)			while((_g1 < _g)){
HXLINE( 471)				_g1 = (_g1 + (int)1);
HXDLIN( 471)				int i = (_g1 - (int)1);
HXLINE( 473)				camera = this->get_cameras()->__get(i).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 475)				bool _hx_tmp;
HXDLIN( 475)				bool _hx_tmp1;
HXDLIN( 475)				if (!(!(camera->visible))) {
HXLINE( 475)					_hx_tmp1 = !(camera->exists);
            				}
            				else {
HXLINE( 475)					_hx_tmp1 = true;
            				}
HXDLIN( 475)				if (!(_hx_tmp1)) {
HXLINE( 475)					_hx_tmp = !(this->isOnScreen(camera));
            				}
            				else {
HXLINE( 475)					_hx_tmp = true;
            				}
HXDLIN( 475)				if (_hx_tmp) {
HXLINE( 476)					continue;
            				}
HXLINE( 478)				if (hx::IsNull( this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >() )) {
HXLINE( 479)					::Array< ::Dynamic> _hx_tmp2 = this->_buffers;
HXDLIN( 479)					 ::flixel::tile::FlxTilemapBuffer buffer1 =  ::flixel::tile::FlxTilemapBuffer_obj::__alloc( HX_CTX ,this->_tileWidth,this->_tileHeight,this->widthInTiles,this->heightInTiles,camera,this->scale->x,this->scale->y);
HXDLIN( 479)					buffer1->pixelPerfectRender = this->pixelPerfectRender;
HXDLIN( 479)					buffer1->antialiasing = this->antialiasing;
HXDLIN( 479)					_hx_tmp2[i] = buffer1;
            				}
HXLINE( 481)				buffer = this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXLINE( 483)				if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 485)					if (buffer->isDirty(hx::ObjectPtr<OBJ_>(this),camera)) {
HXLINE( 486)						this->drawTilemap(buffer,camera);
            					}
HXLINE( 488)					{
HXLINE( 488)						 ::flixel::math::FlxPoint _this = this->getScreenPosition(this->_point,camera)->subtractPoint(this->offset);
HXDLIN( 488)						Float Y = buffer->y;
HXDLIN( 488)						{
HXLINE( 488)							 ::flixel::math::FlxPoint _g2 = _this;
HXDLIN( 488)							_g2->set_x((_g2->x + buffer->x));
            						}
HXDLIN( 488)						{
HXLINE( 488)							 ::flixel::math::FlxPoint _g3 = _this;
HXDLIN( 488)							_g3->set_y((_g3->y + Y));
            						}
HXDLIN( 488)						 ::flixel::math::FlxPoint _this1 = _this;
HXDLIN( 488)						 ::openfl::_legacy::geom::Point FlashPoint = this->_flashPoint;
HXDLIN( 488)						if (hx::IsNull( FlashPoint )) {
HXLINE( 488)							FlashPoint =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            						}
HXDLIN( 488)						FlashPoint->x = _this1->x;
HXDLIN( 488)						FlashPoint->y = _this1->y;
            					}
HXLINE( 489)					buffer->draw(camera,this->_flashPoint,this->scale->x,this->scale->y);
            				}
            				else {
HXLINE( 493)					this->drawTilemap(buffer,camera);
            				}
HXLINE( 497)				::flixel::FlxBasic_obj::visibleCount++;
            			}
            		}
HXLINE( 502)		if (::flixel::FlxG_obj::debugger->drawDebug) {
HXLINE( 503)			this->drawDebug();
            		}
            	}


void FlxTilemap_obj::refreshBuffers(){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_509_refreshBuffers)
HXDLIN( 509)		int _g1 = (int)0;
HXDLIN( 509)		int _g = this->get_cameras()->length;
HXDLIN( 509)		while((_g1 < _g)){
HXDLIN( 509)			_g1 = (_g1 + (int)1);
HXDLIN( 509)			int i = (_g1 - (int)1);
HXLINE( 511)			 ::flixel::FlxCamera camera = this->get_cameras()->__get(i).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 512)			 ::flixel::tile::FlxTilemapBuffer buffer = this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXLINE( 515)			if (hx::IsNull( buffer )) {
HXLINE( 516)				::Array< ::Dynamic> _hx_tmp = this->_buffers;
HXDLIN( 516)				 ::flixel::tile::FlxTilemapBuffer buffer1 =  ::flixel::tile::FlxTilemapBuffer_obj::__alloc( HX_CTX ,this->_tileWidth,this->_tileHeight,this->widthInTiles,this->heightInTiles,camera,this->scale->x,this->scale->y);
HXDLIN( 516)				buffer1->pixelPerfectRender = this->pixelPerfectRender;
HXDLIN( 516)				buffer1->antialiasing = this->antialiasing;
HXDLIN( 516)				_hx_tmp[i] = buffer1;
            			}
            			else {
HXLINE( 518)				buffer->resize(this->_tileWidth,this->_tileHeight,this->widthInTiles,this->heightInTiles,camera,this->scale->x,this->scale->y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,refreshBuffers,(void))

void FlxTilemap_obj::setDirty(hx::Null< bool >  __o_Dirty){
bool Dirty = __o_Dirty.Default(true);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_529_setDirty)
HXLINE( 530)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 531)			return;
            		}
HXLINE( 533)		{
HXLINE( 533)			int _g = (int)0;
HXDLIN( 533)			::Array< ::Dynamic> _g1 = this->_buffers;
HXDLIN( 533)			while((_g < _g1->length)){
HXLINE( 533)				 ::flixel::tile::FlxTilemapBuffer buffer = _g1->__get(_g).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXDLIN( 533)				_g = (_g + (int)1);
HXLINE( 534)				if (hx::IsNotNull( buffer )) {
HXLINE( 535)					buffer->dirty = Dirty;
            				}
            			}
            		}
            	}


bool FlxTilemap_obj::overlapsWithCallback( ::flixel::FlxObject Object, ::Dynamic Callback,hx::Null< bool >  __o_FlipCallbackParams, ::flixel::math::FlxPoint Position){
bool FlipCallbackParams = __o_FlipCallbackParams.Default(false);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_550_overlapsWithCallback)
HXLINE( 551)		bool results = false;
HXLINE( 553)		Float xPos = this->x;
HXLINE( 554)		Float yPos = this->y;
HXLINE( 556)		if (hx::IsNotNull( Position )) {
HXLINE( 558)			xPos = Position->x;
HXLINE( 559)			yPos = Position->y;
            		}
HXLINE( 563)		int selectionX = ::Math_obj::floor(((Float)(Object->x - xPos) / (Float)this->_scaledTileWidth));
HXLINE( 564)		int selectionY = ::Math_obj::floor(((Float)(Object->y - yPos) / (Float)this->_scaledTileHeight));
HXLINE( 565)		Float selectionWidth = Object->get_width();
HXDLIN( 565)		int selectionWidth1 = ((selectionX + ::Math_obj::ceil(((Float)selectionWidth / (Float)this->_scaledTileWidth))) + (int)1);
HXLINE( 566)		Float selectionHeight = Object->get_height();
HXDLIN( 566)		int selectionHeight1 = ((selectionY + ::Math_obj::ceil(((Float)selectionHeight / (Float)this->_scaledTileHeight))) + (int)1);
HXLINE( 569)		 ::Dynamic Max = this->widthInTiles;
HXDLIN( 569)		Float lowerBound;
HXDLIN( 569)		if ((selectionX < (int)0)) {
HXLINE( 569)			lowerBound = (int)0;
            		}
            		else {
HXLINE( 569)			lowerBound = selectionX;
            		}
HXDLIN( 569)		Float selectionX1;
HXDLIN( 569)		bool selectionX2;
HXDLIN( 569)		if (hx::IsNotNull( Max )) {
HXLINE( 569)			selectionX2 = hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE( 569)			selectionX2 = false;
            		}
HXDLIN( 569)		if (selectionX2) {
HXLINE( 569)			selectionX1 = Max;
            		}
            		else {
HXLINE( 569)			selectionX1 = lowerBound;
            		}
HXDLIN( 569)		selectionX = ::Std_obj::_hx_int(selectionX1);
HXLINE( 570)		 ::Dynamic Max1 = this->heightInTiles;
HXDLIN( 570)		Float lowerBound1;
HXDLIN( 570)		if ((selectionY < (int)0)) {
HXLINE( 570)			lowerBound1 = (int)0;
            		}
            		else {
HXLINE( 570)			lowerBound1 = selectionY;
            		}
HXDLIN( 570)		Float selectionY1;
HXDLIN( 570)		bool selectionY2;
HXDLIN( 570)		if (hx::IsNotNull( Max1 )) {
HXLINE( 570)			selectionY2 = hx::IsGreater( lowerBound1,Max1 );
            		}
            		else {
HXLINE( 570)			selectionY2 = false;
            		}
HXDLIN( 570)		if (selectionY2) {
HXLINE( 570)			selectionY1 = Max1;
            		}
            		else {
HXLINE( 570)			selectionY1 = lowerBound1;
            		}
HXDLIN( 570)		selectionY = ::Std_obj::_hx_int(selectionY1);
HXLINE( 571)		 ::Dynamic Max2 = this->widthInTiles;
HXDLIN( 571)		Float lowerBound2;
HXDLIN( 571)		if ((selectionWidth1 < (int)0)) {
HXLINE( 571)			lowerBound2 = (int)0;
            		}
            		else {
HXLINE( 571)			lowerBound2 = selectionWidth1;
            		}
HXDLIN( 571)		Float selectionWidth2;
HXDLIN( 571)		bool selectionWidth3;
HXDLIN( 571)		if (hx::IsNotNull( Max2 )) {
HXLINE( 571)			selectionWidth3 = hx::IsGreater( lowerBound2,Max2 );
            		}
            		else {
HXLINE( 571)			selectionWidth3 = false;
            		}
HXDLIN( 571)		if (selectionWidth3) {
HXLINE( 571)			selectionWidth2 = Max2;
            		}
            		else {
HXLINE( 571)			selectionWidth2 = lowerBound2;
            		}
HXDLIN( 571)		selectionWidth1 = ::Std_obj::_hx_int(selectionWidth2);
HXLINE( 572)		 ::Dynamic Max3 = this->heightInTiles;
HXDLIN( 572)		Float lowerBound3;
HXDLIN( 572)		if ((selectionHeight1 < (int)0)) {
HXLINE( 572)			lowerBound3 = (int)0;
            		}
            		else {
HXLINE( 572)			lowerBound3 = selectionHeight1;
            		}
HXDLIN( 572)		Float selectionHeight2;
HXDLIN( 572)		bool selectionHeight3;
HXDLIN( 572)		if (hx::IsNotNull( Max3 )) {
HXLINE( 572)			selectionHeight3 = hx::IsGreater( lowerBound3,Max3 );
            		}
            		else {
HXLINE( 572)			selectionHeight3 = false;
            		}
HXDLIN( 572)		if (selectionHeight3) {
HXLINE( 572)			selectionHeight2 = Max3;
            		}
            		else {
HXLINE( 572)			selectionHeight2 = lowerBound3;
            		}
HXDLIN( 572)		selectionHeight1 = ::Std_obj::_hx_int(selectionHeight2);
HXLINE( 575)		int rowStart = (selectionY * this->widthInTiles);
HXLINE( 576)		int column;
HXLINE( 577)		 ::flixel::tile::FlxTile tile;
HXLINE( 578)		bool overlapFound;
HXLINE( 579)		Float deltaX = (xPos - this->last->x);
HXLINE( 580)		Float deltaY = (yPos - this->last->y);
HXLINE( 582)		{
HXLINE( 582)			int _g1 = selectionY;
HXDLIN( 582)			int _g = selectionHeight1;
HXDLIN( 582)			while((_g1 < _g)){
HXLINE( 582)				_g1 = (_g1 + (int)1);
HXDLIN( 582)				int row = (_g1 - (int)1);
HXLINE( 584)				column = selectionX;
HXLINE( 586)				while((column < selectionWidth1)){
HXLINE( 588)					int index = (rowStart + column);
HXLINE( 589)					bool _hx_tmp;
HXDLIN( 589)					if ((index >= (int)0)) {
HXLINE( 589)						_hx_tmp = (index > (this->_data->length - (int)1));
            					}
            					else {
HXLINE( 589)						_hx_tmp = true;
            					}
HXDLIN( 589)					if (_hx_tmp) {
HXLINE( 591)						column = (column + (int)1);
HXLINE( 592)						continue;
            					}
HXLINE( 595)					int dataIndex = this->_data->__get(index);
HXLINE( 596)					if ((dataIndex < (int)0)) {
HXLINE( 598)						column = (column + (int)1);
HXLINE( 599)						continue;
            					}
HXLINE( 602)					tile = Dynamic( this->_tileObjects->__get(dataIndex)).StaticCast<  ::flixel::tile::FlxTile >();
HXLINE( 603)					tile->set_width(this->_scaledTileWidth);
HXLINE( 604)					tile->set_height(this->_scaledTileHeight);
HXLINE( 605)					tile->set_x((xPos + (column * tile->get_width())));
HXLINE( 606)					tile->set_y((yPos + (row * tile->get_height())));
HXLINE( 607)					 ::flixel::math::FlxPoint tile1 = tile->last;
HXDLIN( 607)					tile1->set_x((tile->x - deltaX));
HXLINE( 608)					 ::flixel::math::FlxPoint tile2 = tile->last;
HXDLIN( 608)					tile2->set_y((tile->y - deltaY));
HXLINE( 611)					bool overlapFound1;
HXDLIN( 611)					bool overlapFound2;
HXDLIN( 611)					Float Object1 = Object->x;
HXDLIN( 611)					Float overlapFound3 = (Object1 + Object->get_width());
HXDLIN( 611)					if ((overlapFound3 > tile->x)) {
HXLINE( 611)						Float Object2 = Object->x;
HXDLIN( 611)						Float tile3 = tile->x;
HXDLIN( 611)						overlapFound2 = (Object2 < (tile3 + tile->get_width()));
            					}
            					else {
HXLINE( 611)						overlapFound2 = false;
            					}
HXDLIN( 611)					if (overlapFound2) {
HXLINE( 612)						Float Object3 = Object->y;
HXDLIN( 612)						Float overlapFound4 = (Object3 + Object->get_height());
HXLINE( 611)						overlapFound1 = (overlapFound4 > tile->y);
            					}
            					else {
HXLINE( 611)						overlapFound1 = false;
            					}
HXDLIN( 611)					if (overlapFound1) {
HXLINE( 612)						Float Object4 = Object->y;
HXDLIN( 612)						Float tile4 = tile->y;
HXDLIN( 612)						overlapFound = (Object4 < (tile4 + tile->get_height()));
            					}
            					else {
HXLINE( 611)						overlapFound = false;
            					}
HXLINE( 614)					if ((tile->allowCollisions != (int)0)) {
HXLINE( 616)						if (hx::IsNotNull( Callback )) {
HXLINE( 618)							if (FlipCallbackParams) {
HXLINE( 620)								overlapFound = ( (bool)(Callback(Object,tile)) );
            							}
            							else {
HXLINE( 624)								overlapFound = ( (bool)(Callback(tile,Object)) );
            							}
            						}
            					}
HXLINE( 629)					if (overlapFound) {
HXLINE( 631)						bool _hx_tmp1;
HXDLIN( 631)						if (hx::IsNotNull( tile->callbackFunction )) {
HXLINE( 631)							if (hx::IsNotNull( tile->filter )) {
HXLINE( 631)								_hx_tmp1 = ::Std_obj::is(Object,tile->filter);
            							}
            							else {
HXLINE( 631)								_hx_tmp1 = true;
            							}
            						}
            						else {
HXLINE( 631)							_hx_tmp1 = false;
            						}
HXDLIN( 631)						if (_hx_tmp1) {
HXLINE( 633)							tile->mapIndex = (rowStart + column);
HXLINE( 634)							tile->callbackFunction(tile,Object);
            						}
HXLINE( 637)						if ((tile->allowCollisions != (int)0)) {
HXLINE( 638)							results = true;
            						}
            					}
HXLINE( 641)					column = (column + (int)1);
            				}
HXLINE( 644)				rowStart = (rowStart + this->widthInTiles);
            			}
            		}
HXLINE( 647)		return results;
            	}


int FlxTilemap_obj::getTileIndexByCoords( ::flixel::math::FlxPoint Coord){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_651_getTileIndexByCoords)
HXLINE( 652)		Float localX = (Coord->x - this->x);
HXLINE( 653)		Float localY = (Coord->y - this->y);
HXLINE( 654)		if (Coord->_weak) {
HXLINE( 654)			Coord->put();
            		}
HXLINE( 656)		bool _hx_tmp;
HXDLIN( 656)		bool _hx_tmp1;
HXDLIN( 656)		bool _hx_tmp2;
HXDLIN( 656)		if (!((localX < (int)0))) {
HXLINE( 656)			_hx_tmp2 = (localY < (int)0);
            		}
            		else {
HXLINE( 656)			_hx_tmp2 = true;
            		}
HXDLIN( 656)		if (!(_hx_tmp2)) {
HXLINE( 656)			_hx_tmp1 = (localX >= this->get_width());
            		}
            		else {
HXLINE( 656)			_hx_tmp1 = true;
            		}
HXDLIN( 656)		if (!(_hx_tmp1)) {
HXLINE( 656)			_hx_tmp = (localY >= this->get_height());
            		}
            		else {
HXLINE( 656)			_hx_tmp = true;
            		}
HXDLIN( 656)		if (_hx_tmp) {
HXLINE( 657)			return (int)-1;
            		}
HXLINE( 659)		int _hx_tmp3 = ::Std_obj::_hx_int(((Float)localY / (Float)this->_scaledTileHeight));
HXDLIN( 659)		int _hx_tmp4 = (_hx_tmp3 * this->widthInTiles);
HXDLIN( 659)		return (_hx_tmp4 + ::Std_obj::_hx_int(((Float)localX / (Float)this->_scaledTileWidth)));
            	}


 ::flixel::math::FlxPoint FlxTilemap_obj::getTileCoordsByIndex(int Index,hx::Null< bool >  __o_Midpoint){
bool Midpoint = __o_Midpoint.Default(true);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_663_getTileCoordsByIndex)
HXLINE( 664)		Float X = this->x;
HXDLIN( 664)		Float X1 = (X + (hx::Mod(Index,this->widthInTiles) * this->_scaledTileWidth));
HXDLIN( 664)		Float Y = this->y;
HXDLIN( 664)		int Y1 = ::Std_obj::_hx_int(((Float)Index / (Float)this->widthInTiles));
HXDLIN( 664)		Float Y2 = (Y + (Y1 * this->_scaledTileHeight));
HXDLIN( 664)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,Y2);
HXDLIN( 664)		point->_inPool = false;
HXDLIN( 664)		 ::flixel::math::FlxPoint point1 = point;
HXLINE( 665)		if (Midpoint) {
HXLINE( 667)			{
HXLINE( 667)				 ::flixel::math::FlxPoint _g = point1;
HXDLIN( 667)				Float _g1 = _g->x;
HXDLIN( 667)				_g->set_x((_g1 + (this->_scaledTileWidth * ((Float)0.5))));
            			}
HXLINE( 668)			{
HXLINE( 668)				 ::flixel::math::FlxPoint _g2 = point1;
HXDLIN( 668)				Float _g3 = _g2->y;
HXDLIN( 668)				_g2->set_y((_g3 + (this->_scaledTileHeight * ((Float)0.5))));
            			}
            		}
HXLINE( 670)		return point1;
            	}


::Array< ::Dynamic> FlxTilemap_obj::getTileCoords(int Index,hx::Null< bool >  __o_Midpoint){
bool Midpoint = __o_Midpoint.Default(true);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_681_getTileCoords)
HXLINE( 682)		::Array< ::Dynamic> array = null();
HXLINE( 684)		 ::flixel::math::FlxPoint point;
HXLINE( 685)		int l = (this->widthInTiles * this->heightInTiles);
HXLINE( 687)		{
HXLINE( 687)			int _g1 = (int)0;
HXDLIN( 687)			int _g = l;
HXDLIN( 687)			while((_g1 < _g)){
HXLINE( 687)				_g1 = (_g1 + (int)1);
HXDLIN( 687)				int i = (_g1 - (int)1);
HXLINE( 689)				if ((this->_data->__get(i) == Index)) {
HXLINE( 691)					Float X = this->x;
HXDLIN( 691)					Float X1 = (X + (hx::Mod(i,this->widthInTiles) * this->_scaledTileWidth));
HXDLIN( 691)					Float Y = this->y;
HXDLIN( 691)					int Y1 = ::Std_obj::_hx_int(((Float)i / (Float)this->widthInTiles));
HXDLIN( 691)					Float Y2 = (Y + (Y1 * this->_scaledTileHeight));
HXDLIN( 691)					 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,Y2);
HXDLIN( 691)					point1->_inPool = false;
HXDLIN( 691)					point = point1;
HXLINE( 693)					if (Midpoint) {
HXLINE( 695)						{
HXLINE( 695)							 ::flixel::math::FlxPoint _g2 = point;
HXDLIN( 695)							Float _g21 = _g2->x;
HXDLIN( 695)							_g2->set_x((_g21 + (this->_scaledTileWidth * ((Float)0.5))));
            						}
HXLINE( 696)						{
HXLINE( 696)							 ::flixel::math::FlxPoint _g22 = point;
HXDLIN( 696)							Float _g23 = _g22->y;
HXDLIN( 696)							_g22->set_y((_g23 + (this->_scaledTileHeight * ((Float)0.5))));
            						}
            					}
HXLINE( 699)					if (hx::IsNull( array )) {
HXLINE( 701)						array = ::Array_obj< ::Dynamic>::__new();
            					}
HXLINE( 703)					array->push(point);
            				}
            			}
            		}
HXLINE( 707)		return array;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTilemap_obj,getTileCoords,return )

void FlxTilemap_obj::follow( ::flixel::FlxCamera Camera,hx::Null< int >  __o_Border,hx::Null< bool >  __o_UpdateWorld){
int Border = __o_Border.Default(0);
bool UpdateWorld = __o_UpdateWorld.Default(true);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_718_follow)
HXLINE( 719)		if (hx::IsNull( Camera )) {
HXLINE( 720)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 722)		Float _hx_tmp = this->x;
HXDLIN( 722)		Float _hx_tmp1 = (_hx_tmp + (Border * this->_scaledTileWidth));
HXDLIN( 722)		Float _hx_tmp2 = this->y;
HXDLIN( 722)		Float _hx_tmp3 = (_hx_tmp2 + (Border * this->_scaledTileHeight));
HXDLIN( 722)		Float _hx_tmp4 = this->get_width();
HXDLIN( 722)		Float _hx_tmp5 = (_hx_tmp4 - ((Border * this->_scaledTileWidth) * (int)2));
HXDLIN( 722)		Float _hx_tmp6 = this->get_height();
HXDLIN( 722)		Camera->setScrollBoundsRect(_hx_tmp1,_hx_tmp3,_hx_tmp5,(_hx_tmp6 - ((Border * this->_scaledTileHeight) * (int)2)),UpdateWorld);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxTilemap_obj,follow,(void))

bool FlxTilemap_obj::ray( ::flixel::math::FlxPoint Start, ::flixel::math::FlxPoint End, ::flixel::math::FlxPoint Result,hx::Null< Float >  __o_Resolution){
Float Resolution = __o_Resolution.Default(1);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_736_ray)
HXLINE( 737)		Float step = this->_scaledTileWidth;
HXLINE( 739)		if ((this->_scaledTileHeight < this->_scaledTileWidth)) {
HXLINE( 740)			step = this->_scaledTileHeight;
            		}
HXLINE( 742)		step = ((Float)step / (Float)Resolution);
HXLINE( 743)		Float deltaX = (End->x - Start->x);
HXLINE( 744)		Float deltaY = (End->y - Start->y);
HXLINE( 745)		Float distance = ::Math_obj::sqrt(((deltaX * deltaX) + (deltaY * deltaY)));
HXLINE( 746)		int steps = ::Math_obj::ceil(((Float)distance / (Float)step));
HXLINE( 747)		Float stepX = ((Float)deltaX / (Float)steps);
HXLINE( 748)		Float stepY = ((Float)deltaY / (Float)steps);
HXLINE( 749)		Float curX = ((Start->x - stepX) - this->x);
HXLINE( 750)		Float curY = ((Start->y - stepY) - this->y);
HXLINE( 751)		int tileX;
HXLINE( 752)		int tileY;
HXLINE( 753)		int i = (int)0;
HXLINE( 755)		if (Start->_weak) {
HXLINE( 755)			Start->put();
            		}
HXLINE( 756)		if (End->_weak) {
HXLINE( 756)			End->put();
            		}
HXLINE( 758)		while((i < steps)){
HXLINE( 760)			curX = (curX + stepX);
HXLINE( 761)			curY = (curY + stepY);
HXLINE( 763)			bool _hx_tmp;
HXDLIN( 763)			bool _hx_tmp1;
HXDLIN( 763)			bool _hx_tmp2;
HXDLIN( 763)			if (!((curX < (int)0))) {
HXLINE( 763)				_hx_tmp2 = (curX > this->get_width());
            			}
            			else {
HXLINE( 763)				_hx_tmp2 = true;
            			}
HXDLIN( 763)			if (!(_hx_tmp2)) {
HXLINE( 763)				_hx_tmp1 = (curY < (int)0);
            			}
            			else {
HXLINE( 763)				_hx_tmp1 = true;
            			}
HXDLIN( 763)			if (!(_hx_tmp1)) {
HXLINE( 763)				_hx_tmp = (curY > this->get_height());
            			}
            			else {
HXLINE( 763)				_hx_tmp = true;
            			}
HXDLIN( 763)			if (_hx_tmp) {
HXLINE( 765)				i = (i + (int)1);
HXLINE( 766)				continue;
            			}
HXLINE( 769)			tileX = ::Math_obj::floor(((Float)curX / (Float)this->_scaledTileWidth));
HXLINE( 770)			tileY = ::Math_obj::floor(((Float)curY / (Float)this->_scaledTileHeight));
HXLINE( 772)			::Array< ::Dynamic> _hx_tmp3 = this->_tileObjects;
HXDLIN( 772)			::Array< int > _hx_tmp4 = this->_data;
HXDLIN( 772)			if ((_hx_tmp3->__get(_hx_tmp4->__get(((tileY * this->widthInTiles) + tileX))).StaticCast<  ::flixel::tile::FlxTile >()->allowCollisions != (int)0)) {
HXLINE( 775)				tileX = (tileX * ::Std_obj::_hx_int(this->_scaledTileWidth));
HXLINE( 776)				tileY = (tileY * ::Std_obj::_hx_int(this->_scaledTileHeight));
HXLINE( 777)				Float rx = (int)0;
HXLINE( 778)				Float ry = (int)0;
HXLINE( 779)				Float q;
HXLINE( 780)				Float lx = (curX - stepX);
HXLINE( 781)				Float ly = (curY - stepY);
HXLINE( 784)				q = tileX;
HXLINE( 786)				if ((deltaX < (int)0)) {
HXLINE( 788)					q = (q + this->_scaledTileWidth);
            				}
HXLINE( 791)				rx = q;
HXLINE( 792)				ry = (ly + (stepY * ((Float)(q - lx) / (Float)stepX)));
HXLINE( 794)				bool _hx_tmp5;
HXDLIN( 794)				if ((ry >= tileY)) {
HXLINE( 794)					_hx_tmp5 = (ry <= (tileY + this->_scaledTileHeight));
            				}
            				else {
HXLINE( 794)					_hx_tmp5 = false;
            				}
HXDLIN( 794)				if (_hx_tmp5) {
HXLINE( 796)					if (hx::IsNull( Result )) {
HXLINE( 798)						 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 798)						point->_inPool = false;
HXDLIN( 798)						Result = point;
            					}
HXLINE( 801)					Result->set(rx,ry);
HXLINE( 802)					return false;
            				}
HXLINE( 806)				q = tileY;
HXLINE( 808)				if ((deltaY < (int)0)) {
HXLINE( 810)					q = (q + this->_scaledTileHeight);
            				}
HXLINE( 813)				rx = (lx + (stepX * ((Float)(q - ly) / (Float)stepY)));
HXLINE( 814)				ry = q;
HXLINE( 816)				bool _hx_tmp6;
HXDLIN( 816)				if ((rx >= tileX)) {
HXLINE( 816)					_hx_tmp6 = (rx <= (tileX + this->_scaledTileWidth));
            				}
            				else {
HXLINE( 816)					_hx_tmp6 = false;
            				}
HXDLIN( 816)				if (_hx_tmp6) {
HXLINE( 818)					if (hx::IsNull( Result )) {
HXLINE( 820)						 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 820)						point1->_inPool = false;
HXDLIN( 820)						Result = point1;
            					}
HXLINE( 823)					Result->set(rx,ry);
HXLINE( 824)					return false;
            				}
HXLINE( 827)				return true;
            			}
HXLINE( 829)			i = (i + (int)1);
            		}
HXLINE( 832)		return true;
            	}


 ::flixel::FlxSprite FlxTilemap_obj::tileToSprite(int X,int Y,hx::Null< int >  __o_NewTile, ::Dynamic SpriteFactory){
int NewTile = __o_NewTile.Default(0);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_846_tileToSprite)
HXLINE( 847)		if (hx::IsNull( SpriteFactory )) {
HXLINE( 848)			SpriteFactory = this->defaultTileToSprite_dyn();
            		}
HXLINE( 850)		int rowIndex = (X + (Y * this->widthInTiles));
HXLINE( 851)		::Array< ::Dynamic> tile = this->_tileObjects;
HXDLIN( 851)		 ::flixel::tile::FlxTile tile1 = tile->__get(this->_data->__get(rowIndex)).StaticCast<  ::flixel::tile::FlxTile >();
HXLINE( 852)		 ::flixel::graphics::frames::FlxImageFrame image = null();
HXLINE( 854)		bool _hx_tmp;
HXDLIN( 854)		if (hx::IsNotNull( tile1 )) {
HXLINE( 854)			_hx_tmp = tile1->visible;
            		}
            		else {
HXLINE( 854)			_hx_tmp = false;
            		}
HXDLIN( 854)		if (_hx_tmp) {
HXLINE( 855)			image = ::flixel::graphics::frames::FlxImageFrame_obj::fromFrame(tile1->frame);
            		}
            		else {
HXLINE( 857)			 ::flixel::graphics::FlxGraphic image1 = this->graphic;
HXDLIN( 857)			Float Width = this->_tileWidth;
HXDLIN( 857)			Float Height = this->_tileHeight;
HXDLIN( 857)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 857)			_this->x = (int)0;
HXDLIN( 857)			_this->y = (int)0;
HXDLIN( 857)			_this->width = Width;
HXDLIN( 857)			_this->height = Height;
HXDLIN( 857)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 857)			rect->_inPool = false;
HXDLIN( 857)			image = ::flixel::graphics::frames::FlxImageFrame_obj::fromEmptyFrame(image1,rect);
            		}
HXLINE( 859)		Float tileX = (((X * this->_tileWidth) * this->scale->x) + this->x);
HXLINE( 860)		Float tileY = (((Y * this->_tileHeight) * this->scale->y) + this->y);
HXLINE( 861)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 861)		point->_inPool = false;
HXDLIN( 861)		 ::flixel::math::FlxPoint _this1 = point;
HXDLIN( 861)		 ::flixel::math::FlxPoint point1 = this->scale;
HXDLIN( 861)		_this1->set_x(point1->x);
HXDLIN( 861)		_this1->set_y(point1->y);
HXDLIN( 861)		if (point1->_weak) {
HXLINE( 861)			point1->put();
            		}
HXDLIN( 861)		 ::flixel::FlxSprite tileSprite = ( ( ::flixel::FlxSprite)(SpriteFactory( ::Dynamic(hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("blend",51,e8,f4,b4),this->blend)
            			->setFixed(1,HX_("x",78,00,00,00),tileX)
            			->setFixed(2,HX_("y",79,00,00,00),tileY)
            			->setFixed(3,HX_("alpha",5e,a7,96,21),this->alpha)
            			->setFixed(4,HX_("graphic",a8,5a,07,74),image)
            			->setFixed(5,HX_("scale",8a,ce,ce,78),_this1)))) );
HXLINE( 863)		if ((NewTile >= (int)0)) {
HXLINE( 864)			this->setTile(X,Y,NewTile,null());
            		}
HXLINE( 866)		return tileSprite;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxTilemap_obj,tileToSprite,return )

void FlxTilemap_obj::updateBuffers(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_873_updateBuffers)
HXLINE( 874)		::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_buffers);
HXLINE( 875)		this->_buffers = ::Array_obj< ::Dynamic>::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,updateBuffers,(void))

void FlxTilemap_obj::drawTilemap( ::flixel::tile::FlxTilemapBuffer Buffer, ::flixel::FlxCamera Camera){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_886_drawTilemap)
HXLINE( 887)		bool isColored;
HXDLIN( 887)		if ((this->alpha == (int)1)) {
HXLINE( 887)			isColored = (this->color != (int)16777215);
            		}
            		else {
HXLINE( 887)			isColored = true;
            		}
HXLINE( 890)		Float drawX = (int)0;
HXLINE( 891)		Float drawY = (int)0;
HXLINE( 892)		Float scaledWidth = (int)0;
HXLINE( 893)		Float scaledHeight = (int)0;
HXLINE( 894)		 ::flixel::graphics::tile::FlxDrawTilesItem drawItem = null();
HXLINE( 896)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 898)			Buffer->fill(null());
            		}
            		else {
HXLINE( 902)			{
HXLINE( 902)				 ::flixel::math::FlxPoint _this = this->getScreenPosition(this->_point,Camera)->subtractPoint(this->offset);
HXDLIN( 902)				 ::openfl::_legacy::geom::Point FlashPoint = this->_helperPoint;
HXDLIN( 902)				if (hx::IsNull( FlashPoint )) {
HXLINE( 902)					FlashPoint =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            				}
HXDLIN( 902)				FlashPoint->x = _this->x;
HXDLIN( 902)				FlashPoint->y = _this->y;
            			}
HXLINE( 904)			Float _hx_tmp;
HXDLIN( 904)			if (this->isPixelPerfectRender(Camera)) {
HXLINE( 904)				_hx_tmp = ::Math_obj::floor(this->_helperPoint->x);
            			}
            			else {
HXLINE( 904)				_hx_tmp = this->_helperPoint->x;
            			}
HXDLIN( 904)			this->_helperPoint->x = _hx_tmp;
HXLINE( 905)			Float _hx_tmp1;
HXDLIN( 905)			if (this->isPixelPerfectRender(Camera)) {
HXLINE( 905)				_hx_tmp1 = ::Math_obj::floor(this->_helperPoint->y);
            			}
            			else {
HXLINE( 905)				_hx_tmp1 = this->_helperPoint->y;
            			}
HXDLIN( 905)			this->_helperPoint->y = _hx_tmp1;
HXLINE( 907)			scaledWidth = this->_scaledTileWidth;
HXLINE( 908)			scaledHeight = this->_scaledTileHeight;
HXLINE( 910)			bool hasColorOffsets;
HXDLIN( 910)			if (hx::IsNotNull( this->colorTransform )) {
HXLINE( 910)				hasColorOffsets = ::flixel::util::FlxColorTransformUtil_obj::hasRGBAOffsets(this->colorTransform);
            			}
            			else {
HXLINE( 910)				hasColorOffsets = false;
            			}
HXLINE( 911)			drawItem = Camera->startQuadBatch(this->graphic,isColored,hasColorOffsets,this->blend,this->antialiasing,this->shader);
            		}
HXLINE( 915)		 ::flixel::math::FlxPoint _hx_tmp2 = this->_point;
HXDLIN( 915)		_hx_tmp2->set_x(((((Camera->scroll->x * this->scrollFactor->x) - this->x) - this->offset->x) + Camera->viewOffsetX));
HXLINE( 916)		 ::flixel::math::FlxPoint _hx_tmp3 = this->_point;
HXDLIN( 916)		_hx_tmp3->set_y(((((Camera->scroll->y * this->scrollFactor->y) - this->y) - this->offset->y) + Camera->viewOffsetY));
HXLINE( 918)		int screenXInTiles = ::Math_obj::floor(((Float)this->_point->x / (Float)this->_scaledTileWidth));
HXLINE( 919)		int screenYInTiles = ::Math_obj::floor(((Float)this->_point->y / (Float)this->_scaledTileHeight));
HXLINE( 920)		int screenRows = Buffer->rows;
HXLINE( 921)		int screenColumns = Buffer->columns;
HXLINE( 924)		 ::Dynamic Max = (this->widthInTiles - screenColumns);
HXDLIN( 924)		Float lowerBound;
HXDLIN( 924)		if ((screenXInTiles < (int)0)) {
HXLINE( 924)			lowerBound = (int)0;
            		}
            		else {
HXLINE( 924)			lowerBound = screenXInTiles;
            		}
HXDLIN( 924)		Float screenXInTiles1;
HXDLIN( 924)		bool screenXInTiles2;
HXDLIN( 924)		if (hx::IsNotNull( Max )) {
HXLINE( 924)			screenXInTiles2 = hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE( 924)			screenXInTiles2 = false;
            		}
HXDLIN( 924)		if (screenXInTiles2) {
HXLINE( 924)			screenXInTiles1 = Max;
            		}
            		else {
HXLINE( 924)			screenXInTiles1 = lowerBound;
            		}
HXDLIN( 924)		screenXInTiles = ::Std_obj::_hx_int(screenXInTiles1);
HXLINE( 925)		 ::Dynamic Max1 = (this->heightInTiles - screenRows);
HXDLIN( 925)		Float lowerBound1;
HXDLIN( 925)		if ((screenYInTiles < (int)0)) {
HXLINE( 925)			lowerBound1 = (int)0;
            		}
            		else {
HXLINE( 925)			lowerBound1 = screenYInTiles;
            		}
HXDLIN( 925)		Float screenYInTiles1;
HXDLIN( 925)		bool screenYInTiles2;
HXDLIN( 925)		if (hx::IsNotNull( Max1 )) {
HXLINE( 925)			screenYInTiles2 = hx::IsGreater( lowerBound1,Max1 );
            		}
            		else {
HXLINE( 925)			screenYInTiles2 = false;
            		}
HXDLIN( 925)		if (screenYInTiles2) {
HXLINE( 925)			screenYInTiles1 = Max1;
            		}
            		else {
HXLINE( 925)			screenYInTiles1 = lowerBound1;
            		}
HXDLIN( 925)		screenYInTiles = ::Std_obj::_hx_int(screenYInTiles1);
HXLINE( 927)		int rowIndex = ((screenYInTiles * this->widthInTiles) + screenXInTiles);
HXLINE( 928)		this->_flashPoint->y = (int)0;
HXLINE( 929)		int columnIndex;
HXLINE( 930)		 ::flixel::tile::FlxTile tile;
HXLINE( 931)		 ::flixel::graphics::frames::FlxFrame frame;
HXLINE( 934)		 ::openfl::_legacy::display::BitmapData debugTile;
HXLINE( 937)		{
HXLINE( 937)			int _g1 = (int)0;
HXDLIN( 937)			int _g = screenRows;
HXDLIN( 937)			while((_g1 < _g)){
HXLINE( 937)				_g1 = (_g1 + (int)1);
HXDLIN( 937)				int row = (_g1 - (int)1);
HXLINE( 939)				columnIndex = rowIndex;
HXLINE( 940)				this->_flashPoint->x = (int)0;
HXLINE( 942)				{
HXLINE( 942)					int _g3 = (int)0;
HXDLIN( 942)					int _g2 = screenColumns;
HXDLIN( 942)					while((_g3 < _g2)){
HXLINE( 942)						_g3 = (_g3 + (int)1);
HXDLIN( 942)						int column = (_g3 - (int)1);
HXLINE( 944)						::Array< ::Dynamic> tile1 = this->_tileObjects;
HXDLIN( 944)						tile = tile1->__get(this->_data->__get(columnIndex)).StaticCast<  ::flixel::tile::FlxTile >();
HXLINE( 946)						bool _hx_tmp4;
HXDLIN( 946)						bool _hx_tmp5;
HXDLIN( 946)						if (hx::IsNotNull( tile )) {
HXLINE( 946)							_hx_tmp5 = tile->visible;
            						}
            						else {
HXLINE( 946)							_hx_tmp5 = false;
            						}
HXDLIN( 946)						if (_hx_tmp5) {
HXLINE( 946)							_hx_tmp4 = (tile->frame->type != (int)2);
            						}
            						else {
HXLINE( 946)							_hx_tmp4 = false;
            						}
HXDLIN( 946)						if (_hx_tmp4) {
HXLINE( 948)							frame = tile->frame;
HXLINE( 950)							if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 952)								frame->paint(Buffer->pixels,this->_flashPoint,true,null());
HXLINE( 955)								bool _hx_tmp6;
HXDLIN( 955)								if (::flixel::FlxG_obj::debugger->drawDebug) {
HXLINE( 955)									_hx_tmp6 = !(this->ignoreDrawDebug);
            								}
            								else {
HXLINE( 955)									_hx_tmp6 = false;
            								}
HXDLIN( 955)								if (_hx_tmp6) {
HXLINE( 957)									if ((tile->allowCollisions <= (int)0)) {
HXLINE( 959)										debugTile = this->_debugTileNotSolid;
            									}
            									else {
HXLINE( 961)										if ((tile->allowCollisions != (int)4369)) {
HXLINE( 963)											debugTile = this->_debugTilePartial;
            										}
            										else {
HXLINE( 967)											debugTile = this->_debugTileSolid;
            										}
            									}
HXLINE( 970)									{
HXLINE( 970)										 ::flixel::math::FlxPoint _this1 = this->offset;
HXDLIN( 970)										 ::openfl::_legacy::geom::Point FlashPoint1 = this->_flashPoint;
HXDLIN( 970)										 ::openfl::_legacy::geom::Point FlashPoint2 = FlashPoint1;
HXDLIN( 970)										FlashPoint2->x = (FlashPoint2->x + _this1->x);
HXDLIN( 970)										 ::openfl::_legacy::geom::Point FlashPoint3 = FlashPoint1;
HXDLIN( 970)										FlashPoint3->y = (FlashPoint3->y + _this1->y);
            									}
HXLINE( 971)									Buffer->pixels->copyPixels(debugTile,this->_debugRect,this->_flashPoint,null(),null(),true);
HXLINE( 972)									{
HXLINE( 972)										 ::flixel::math::FlxPoint _this2 = this->offset;
HXDLIN( 972)										 ::openfl::_legacy::geom::Point FlashPoint4 = this->_flashPoint;
HXDLIN( 972)										 ::openfl::_legacy::geom::Point FlashPoint5 = FlashPoint4;
HXDLIN( 972)										FlashPoint5->x = (FlashPoint5->x - _this2->x);
HXDLIN( 972)										 ::openfl::_legacy::geom::Point FlashPoint6 = FlashPoint4;
HXDLIN( 972)										FlashPoint6->y = (FlashPoint6->y - _this2->y);
            									}
            								}
            							}
            							else {
HXLINE( 978)								Float drawX1 = this->_helperPoint->x;
HXDLIN( 978)								drawX = (drawX1 + (hx::Mod(columnIndex,this->widthInTiles) * scaledWidth));
HXLINE( 979)								Float drawY1 = this->_helperPoint->y;
HXDLIN( 979)								drawY = (drawY1 + (::Math_obj::floor(((Float)columnIndex / (Float)this->widthInTiles)) * scaledHeight));
HXLINE( 981)								this->_matrix->identity();
HXLINE( 983)								if ((frame->angle != (int)0)) {
HXLINE( 985)									frame->prepareMatrix(this->_matrix,null(),null(),null());
            								}
HXLINE( 988)								Float scaleX = this->scale->x;
HXLINE( 989)								Float scaleY = this->scale->y;
HXLINE( 991)								if (this->useScaleHack) {
HXLINE( 993)									scaleX = (scaleX + ((Float)(int)1 / (Float)(frame->sourceSize->x * Camera->totalScaleX)));
HXLINE( 994)									scaleY = (scaleY + ((Float)(int)1 / (Float)(frame->sourceSize->y * Camera->totalScaleY)));
            								}
HXLINE( 997)								this->_matrix->scale(scaleX,scaleY);
HXLINE( 998)								this->_matrix->translate(drawX,drawY);
HXLINE(1000)								drawItem->addQuad(frame,this->_matrix,this->colorTransform);
            							}
            						}
HXLINE(1004)						if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1005)							 ::openfl::_legacy::geom::Point _hx_tmp7 = this->_flashPoint;
HXDLIN(1005)							_hx_tmp7->x = (_hx_tmp7->x + this->_tileWidth);
            						}
HXLINE(1007)						columnIndex = (columnIndex + (int)1);
            					}
            				}
HXLINE(1010)				if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1011)					 ::openfl::_legacy::geom::Point _hx_tmp8 = this->_flashPoint;
HXDLIN(1011)					_hx_tmp8->y = (_hx_tmp8->y + this->_tileHeight);
            				}
HXLINE(1012)				rowIndex = (rowIndex + this->widthInTiles);
            			}
            		}
HXLINE(1015)		Buffer->x = (screenXInTiles * this->_scaledTileWidth);
HXLINE(1016)		Buffer->y = (screenYInTiles * this->_scaledTileHeight);
HXLINE(1018)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1020)			if (isColored) {
HXLINE(1021)				Buffer->colorTransform(this->colorTransform);
            			}
HXLINE(1022)			Buffer->blend = this->blend;
            		}
HXLINE(1025)		Buffer->dirty = false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTilemap_obj,drawTilemap,(void))

 ::openfl::_legacy::display::BitmapData FlxTilemap_obj::makeDebugTile(int color){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1034_makeDebugTile)
HXLINE(1035)		if (::flixel::FlxG_obj::renderTile) {
HXLINE(1036)			return null();
            		}
HXLINE(1038)		 ::openfl::_legacy::display::BitmapData debugTile =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,this->_tileWidth,this->_tileHeight,true,(int)0,null());
HXLINE(1039)		this->drawDebugTile(debugTile,color);
HXLINE(1040)		return debugTile;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,makeDebugTile,return )

void FlxTilemap_obj::drawDebugTile( ::openfl::_legacy::display::BitmapData debugTile,int color){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1045_drawDebugTile)
HXDLIN(1045)		if ((color != (int)0)) {
HXLINE(1047)			 ::openfl::_legacy::display::Graphics gfx = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXLINE(1048)			gfx->clear();
HXLINE(1049)			gfx->moveTo((int)0,(int)0);
HXLINE(1050)			gfx->lineStyle((int)1,color,((Float)0.5),null(),null(),null(),null(),null());
HXLINE(1051)			gfx->lineTo((this->_tileWidth - (int)1),(int)0);
HXLINE(1052)			int _hx_tmp = (this->_tileWidth - (int)1);
HXDLIN(1052)			gfx->lineTo(_hx_tmp,(this->_tileHeight - (int)1));
HXLINE(1053)			gfx->lineTo((int)0,(this->_tileHeight - (int)1));
HXLINE(1054)			gfx->lineTo((int)0,(int)0);
HXLINE(1056)			debugTile->draw(::flixel::util::FlxSpriteUtil_obj::flashGfxSprite,null(),null(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTilemap_obj,drawDebugTile,(void))

void FlxTilemap_obj::onDrawDebugChanged(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1062_onDrawDebugChanged)
HXDLIN(1062)		this->setDirty(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,onDrawDebugChanged,(void))

void FlxTilemap_obj::updateTile(int Index){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1072_updateTile)
HXLINE(1073)		 ::flixel::tile::FlxTile tile = Dynamic( this->_tileObjects->__get(Index)).StaticCast<  ::flixel::tile::FlxTile >();
HXLINE(1074)		bool _hx_tmp;
HXDLIN(1074)		if (hx::IsNotNull( tile )) {
HXLINE(1074)			_hx_tmp = !(tile->visible);
            		}
            		else {
HXLINE(1074)			_hx_tmp = true;
            		}
HXDLIN(1074)		if (_hx_tmp) {
HXLINE(1075)			return;
            		}
HXLINE(1077)		::Array< ::Dynamic> _hx_tmp1 = this->frames->frames;
HXDLIN(1077)		tile->frame = _hx_tmp1->__get((Index - this->_startingIndex)).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
            	}


 ::flixel::tile::FlxTilemapBuffer FlxTilemap_obj::createBuffer( ::flixel::FlxCamera camera){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1081_createBuffer)
HXLINE(1082)		 ::flixel::tile::FlxTilemapBuffer buffer =  ::flixel::tile::FlxTilemapBuffer_obj::__alloc( HX_CTX ,this->_tileWidth,this->_tileHeight,this->widthInTiles,this->heightInTiles,camera,this->scale->x,this->scale->y);
HXLINE(1083)		buffer->pixelPerfectRender = this->pixelPerfectRender;
HXLINE(1084)		buffer->antialiasing = this->antialiasing;
HXLINE(1085)		return buffer;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,createBuffer,return )

bool FlxTilemap_obj::set_antialiasing(bool value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1089_set_antialiasing)
HXLINE(1090)		{
HXLINE(1090)			int _g = (int)0;
HXDLIN(1090)			::Array< ::Dynamic> _g1 = this->_buffers;
HXDLIN(1090)			while((_g < _g1->length)){
HXLINE(1090)				 ::flixel::tile::FlxTilemapBuffer buffer = _g1->__get(_g).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXDLIN(1090)				_g = (_g + (int)1);
HXLINE(1091)				buffer->antialiasing = value;
            			}
            		}
HXLINE(1092)		return (this->antialiasing = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_antialiasing,return )

 ::flixel::graphics::FlxGraphic FlxTilemap_obj::set_graphic( ::flixel::graphics::FlxGraphic Value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1100_set_graphic)
HXLINE(1102)		if (hx::IsNotEq( this->graphic,Value )) {
HXLINE(1105)			if (hx::IsNotNull( Value )) {
HXLINE(1106)				 ::flixel::graphics::FlxGraphic _g = Value;
HXDLIN(1106)				int _g1 = _g->get_useCount();
HXDLIN(1106)				_g->set_useCount((_g1 + (int)1));
            			}
HXLINE(1109)			if (hx::IsNotNull( this->graphic )) {
HXLINE(1110)				 ::flixel::graphics::FlxGraphic _g2 = this->graphic;
HXDLIN(1110)				int _g11 = _g2->get_useCount();
HXDLIN(1110)				_g2->set_useCount((_g11 - (int)1));
            			}
            		}
HXLINE(1113)		return (this->graphic = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_graphic,return )

bool FlxTilemap_obj::set_pixelPerfectRender(bool Value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1117_set_pixelPerfectRender)
HXLINE(1118)		if (hx::IsNotNull( this->_buffers )) {
HXLINE(1119)			int _g = (int)0;
HXDLIN(1119)			::Array< ::Dynamic> _g1 = this->_buffers;
HXDLIN(1119)			while((_g < _g1->length)){
HXLINE(1119)				 ::flixel::tile::FlxTilemapBuffer buffer = _g1->__get(_g).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXDLIN(1119)				_g = (_g + (int)1);
HXLINE(1120)				buffer->pixelPerfectRender = Value;
            			}
            		}
HXLINE(1122)		return (this->pixelPerfectRender = Value);
            	}


Float FlxTilemap_obj::set_alpha(Float Alpha){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1126_set_alpha)
HXLINE(1127)		Float lowerBound;
HXDLIN(1127)		if ((Alpha < (int)0)) {
HXLINE(1127)			lowerBound = (int)0;
            		}
            		else {
HXLINE(1127)			lowerBound = Alpha;
            		}
HXDLIN(1127)		 ::Dynamic _hx_tmp;
HXDLIN(1127)		if ((lowerBound > (int)1)) {
HXLINE(1127)			_hx_tmp = (int)1;
            		}
            		else {
HXLINE(1127)			_hx_tmp = lowerBound;
            		}
HXDLIN(1127)		this->alpha = _hx_tmp;
HXLINE(1128)		this->updateColorTransform();
HXLINE(1129)		return this->alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_alpha,return )

int FlxTilemap_obj::set_color(int Color){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1133_set_color)
HXLINE(1134)		if ((this->color == Color)) {
HXLINE(1135)			return Color;
            		}
HXLINE(1137)		this->color = Color;
HXLINE(1138)		this->updateColorTransform();
HXLINE(1139)		return this->color;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_color,return )

void FlxTilemap_obj::updateColorTransform(){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1143_updateColorTransform)
HXLINE(1144)		if (hx::IsNull( this->colorTransform )) {
HXLINE(1145)			this->colorTransform =  ::openfl::_legacy::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1147)		bool _hx_tmp;
HXDLIN(1147)		if ((this->alpha == (int)1)) {
HXLINE(1147)			_hx_tmp = (this->color != (int)16777215);
            		}
            		else {
HXLINE(1147)			_hx_tmp = true;
            		}
HXDLIN(1147)		if (_hx_tmp) {
HXLINE(1148)			::flixel::util::FlxColorTransformUtil_obj::setMultipliers(this->colorTransform,((Float)((int)((int)this->color >> (int)(int)16) & (int)(int)255) / (Float)(int)255),((Float)((int)((int)this->color >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this->color & (int)(int)255) / (Float)(int)255),this->alpha);
            		}
            		else {
HXLINE(1150)			::flixel::util::FlxColorTransformUtil_obj::setMultipliers(this->colorTransform,(int)1,(int)1,(int)1,(int)1);
            		}
HXLINE(1152)		this->setDirty(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,updateColorTransform,(void))

 ::openfl::_legacy::display::BlendMode FlxTilemap_obj::set_blend( ::openfl::_legacy::display::BlendMode Value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1156_set_blend)
HXLINE(1157)		this->setDirty(null());
HXLINE(1158)		return (this->blend = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_blend,return )

void FlxTilemap_obj::setScaleXYCallback( ::flixel::math::FlxPoint Scale){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1162_setScaleXYCallback)
HXLINE(1163)		this->setScaleXCallback(Scale);
HXLINE(1164)		this->setScaleYCallback(Scale);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,setScaleXYCallback,(void))

void FlxTilemap_obj::setScaleXCallback( ::flixel::math::FlxPoint Scale){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1168_setScaleXCallback)
HXLINE(1169)		this->_scaledTileWidth = (this->_tileWidth * this->scale->x);
HXLINE(1170)		this->set_width((this->widthInTiles * this->_scaledTileWidth));
HXLINE(1172)		if (hx::IsNull( this->get_cameras() )) {
HXLINE(1173)			return;
            		}
HXLINE(1175)		{
HXLINE(1175)			int _g1 = (int)0;
HXDLIN(1175)			int _g = this->get_cameras()->length;
HXDLIN(1175)			while((_g1 < _g)){
HXLINE(1175)				_g1 = (_g1 + (int)1);
HXDLIN(1175)				int i = (_g1 - (int)1);
HXLINE(1176)				if (hx::IsNotNull( this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >() )) {
HXLINE(1177)					 ::flixel::tile::FlxTilemapBuffer _hx_tmp = this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXDLIN(1177)					int _hx_tmp1 = this->_tileWidth;
HXDLIN(1177)					int _hx_tmp2 = this->widthInTiles;
HXDLIN(1177)					Float _hx_tmp3 = this->scale->x;
HXDLIN(1177)					_hx_tmp->updateColumns(_hx_tmp1,_hx_tmp2,_hx_tmp3,this->get_cameras()->__get(i).StaticCast<  ::flixel::FlxCamera >());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,setScaleXCallback,(void))

void FlxTilemap_obj::setScaleYCallback( ::flixel::math::FlxPoint Scale){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1181_setScaleYCallback)
HXLINE(1182)		this->_scaledTileHeight = (this->_tileHeight * this->scale->y);
HXLINE(1183)		this->set_height((this->heightInTiles * this->_scaledTileHeight));
HXLINE(1185)		if (hx::IsNull( this->get_cameras() )) {
HXLINE(1186)			return;
            		}
HXLINE(1188)		{
HXLINE(1188)			int _g1 = (int)0;
HXDLIN(1188)			int _g = this->get_cameras()->length;
HXDLIN(1188)			while((_g1 < _g)){
HXLINE(1188)				_g1 = (_g1 + (int)1);
HXDLIN(1188)				int i = (_g1 - (int)1);
HXLINE(1189)				if (hx::IsNotNull( this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >() )) {
HXLINE(1190)					 ::flixel::tile::FlxTilemapBuffer _hx_tmp = this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXDLIN(1190)					int _hx_tmp1 = this->_tileHeight;
HXDLIN(1190)					int _hx_tmp2 = this->heightInTiles;
HXDLIN(1190)					Float _hx_tmp3 = this->scale->y;
HXDLIN(1190)					_hx_tmp->updateRows(_hx_tmp1,_hx_tmp2,_hx_tmp3,this->get_cameras()->__get(i).StaticCast<  ::flixel::FlxCamera >());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,setScaleYCallback,(void))

 ::flixel::FlxSprite FlxTilemap_obj::defaultTileToSprite( ::Dynamic TileProperties){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1200_defaultTileToSprite)
HXLINE(1201)		 ::flixel::FlxSprite tileSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX , ::Dynamic(TileProperties->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(TileProperties->__Field(HX_("y",79,00,00,00),hx::paccDynamic)),null());
HXLINE(1202)		tileSprite->set_frames(( ( ::flixel::graphics::frames::FlxFramesCollection)(TileProperties->__Field(HX_("graphic",a8,5a,07,74),hx::paccDynamic)) ));
HXLINE(1203)		{
HXLINE(1203)			 ::flixel::math::FlxPoint _this = tileSprite->scale;
HXDLIN(1203)			 ::flixel::math::FlxPoint point = ( ( ::flixel::math::FlxPoint)(TileProperties->__Field(HX_("scale",8a,ce,ce,78),hx::paccDynamic)) );
HXDLIN(1203)			_this->set_x(point->x);
HXDLIN(1203)			_this->set_y(point->y);
HXDLIN(1203)			if (point->_weak) {
HXLINE(1203)				point->put();
            			}
            		}
HXLINE(1204)		TileProperties->__SetField(HX_("scale",8a,ce,ce,78),( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put( ::Dynamic(TileProperties->__Field(HX_("scale",8a,ce,ce,78),hx::paccDynamic)))) ),hx::paccDynamic);
HXLINE(1205)		tileSprite->set_alpha(( (Float)(TileProperties->__Field(HX_("alpha",5e,a7,96,21),hx::paccDynamic)) ));
HXLINE(1206)		tileSprite->set_blend(TileProperties->__Field(HX_("blend",51,e8,f4,b4),hx::paccDynamic));
HXLINE(1207)		return tileSprite;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,defaultTileToSprite,return )

int FlxTilemap_obj::set_allowCollisions(int Value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1211_set_allowCollisions)
HXLINE(1212)		{
HXLINE(1212)			int _g = (int)0;
HXDLIN(1212)			::Array< ::Dynamic> _g1 = this->_tileObjects;
HXDLIN(1212)			while((_g < _g1->length)){
HXLINE(1212)				 ::flixel::tile::FlxTile tile = _g1->__get(_g).StaticCast<  ::flixel::tile::FlxTile >();
HXDLIN(1212)				_g = (_g + (int)1);
HXLINE(1213)				if ((tile->index >= this->_collideIndex)) {
HXLINE(1214)					tile->set_allowCollisions(Value);
            				}
            			}
            		}
HXLINE(1216)		return this->super::set_allowCollisions(Value);
            	}


int FlxTilemap_obj::set_debugBoundingBoxColorSolid(int color){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1221_set_debugBoundingBoxColorSolid)
HXLINE(1222)		this->super::set_debugBoundingBoxColorSolid(color);
HXLINE(1223)		this->updateDebugTileBoundingBoxSolid();
HXLINE(1224)		return color;
            	}


int FlxTilemap_obj::set_debugBoundingBoxColorNotSolid(int color){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1228_set_debugBoundingBoxColorNotSolid)
HXLINE(1229)		this->super::set_debugBoundingBoxColorNotSolid(color);
HXLINE(1230)		this->updateDebugTileBoundingBoxNotSolid();
HXLINE(1231)		return color;
            	}


int FlxTilemap_obj::set_debugBoundingBoxColorPartial(int color){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1235_set_debugBoundingBoxColorPartial)
HXLINE(1236)		this->super::set_debugBoundingBoxColorPartial(color);
HXLINE(1237)		this->updateDebugTileBoundingBoxPartial();
HXLINE(1238)		return color;
            	}



hx::ObjectPtr< FlxTilemap_obj > FlxTilemap_obj::__new() {
	hx::ObjectPtr< FlxTilemap_obj > __this = new FlxTilemap_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FlxTilemap_obj > FlxTilemap_obj::__alloc(hx::Ctx *_hx_ctx) {
	FlxTilemap_obj *__this = (FlxTilemap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxTilemap_obj), true, "flixel.tile.FlxTilemap"));
	*(void **)__this = FlxTilemap_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxTilemap_obj::FlxTilemap_obj()
{
}

void FlxTilemap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTilemap);
	HX_MARK_MEMBER_NAME(useScaleHack,"useScaleHack");
	HX_MARK_MEMBER_NAME(scale,"scale");
	HX_MARK_MEMBER_NAME(antialiasing,"antialiasing");
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(frames,"frames");
	HX_MARK_MEMBER_NAME(graphic,"graphic");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_MEMBER_NAME(colorTransform,"colorTransform");
	HX_MARK_MEMBER_NAME(blend,"blend");
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_MARK_MEMBER_NAME(_flashRect,"_flashRect");
	HX_MARK_MEMBER_NAME(_buffers,"_buffers");
	HX_MARK_MEMBER_NAME(_tileWidth,"_tileWidth");
	HX_MARK_MEMBER_NAME(_tileHeight,"_tileHeight");
	HX_MARK_MEMBER_NAME(_scaledTileWidth,"_scaledTileWidth");
	HX_MARK_MEMBER_NAME(_scaledTileHeight,"_scaledTileHeight");
	HX_MARK_MEMBER_NAME(_debugTileNotSolid,"_debugTileNotSolid");
	HX_MARK_MEMBER_NAME(_debugTilePartial,"_debugTilePartial");
	HX_MARK_MEMBER_NAME(_debugTileSolid,"_debugTileSolid");
	HX_MARK_MEMBER_NAME(_debugRect,"_debugRect");
	HX_MARK_MEMBER_NAME(_helperPoint,"_helperPoint");
	HX_MARK_MEMBER_NAME(_matrix,"_matrix");
	HX_MARK_MEMBER_NAME(_checkBufferChanges,"_checkBufferChanges");
	 ::flixel::tile::FlxBaseTilemap_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTilemap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(useScaleHack,"useScaleHack");
	HX_VISIT_MEMBER_NAME(scale,"scale");
	HX_VISIT_MEMBER_NAME(antialiasing,"antialiasing");
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(frames,"frames");
	HX_VISIT_MEMBER_NAME(graphic,"graphic");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
	HX_VISIT_MEMBER_NAME(colorTransform,"colorTransform");
	HX_VISIT_MEMBER_NAME(blend,"blend");
	HX_VISIT_MEMBER_NAME(shader,"shader");
	HX_VISIT_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_VISIT_MEMBER_NAME(_flashRect,"_flashRect");
	HX_VISIT_MEMBER_NAME(_buffers,"_buffers");
	HX_VISIT_MEMBER_NAME(_tileWidth,"_tileWidth");
	HX_VISIT_MEMBER_NAME(_tileHeight,"_tileHeight");
	HX_VISIT_MEMBER_NAME(_scaledTileWidth,"_scaledTileWidth");
	HX_VISIT_MEMBER_NAME(_scaledTileHeight,"_scaledTileHeight");
	HX_VISIT_MEMBER_NAME(_debugTileNotSolid,"_debugTileNotSolid");
	HX_VISIT_MEMBER_NAME(_debugTilePartial,"_debugTilePartial");
	HX_VISIT_MEMBER_NAME(_debugTileSolid,"_debugTileSolid");
	HX_VISIT_MEMBER_NAME(_debugRect,"_debugRect");
	HX_VISIT_MEMBER_NAME(_helperPoint,"_helperPoint");
	HX_VISIT_MEMBER_NAME(_matrix,"_matrix");
	HX_VISIT_MEMBER_NAME(_checkBufferChanges,"_checkBufferChanges");
	 ::flixel::tile::FlxBaseTilemap_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxTilemap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ray") ) { return hx::Val( ray_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale ); }
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"alpha") ) { return hx::Val( alpha ); }
		if (HX_FIELD_EQ(inName,"blend") ) { return hx::Val( blend ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { return hx::Val( offset ); }
		if (HX_FIELD_EQ(inName,"frames") ) { return hx::Val( frames ); }
		if (HX_FIELD_EQ(inName,"shader") ) { return hx::Val( shader ); }
		if (HX_FIELD_EQ(inName,"follow") ) { return hx::Val( follow_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"graphic") ) { return hx::Val( graphic ); }
		if (HX_FIELD_EQ(inName,"_matrix") ) { return hx::Val( _matrix ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_buffers") ) { return hx::Val( _buffers ); }
		if (HX_FIELD_EQ(inName,"setDirty") ) { return hx::Val( setDirty_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"updateMap") ) { return hx::Val( updateMap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blend") ) { return hx::Val( set_blend_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_flashRect") ) { return hx::Val( _flashRect ); }
		if (HX_FIELD_EQ(inName,"_tileWidth") ) { return hx::Val( _tileWidth ); }
		if (HX_FIELD_EQ(inName,"_debugRect") ) { return hx::Val( _debugRect ); }
		if (HX_FIELD_EQ(inName,"set_frames") ) { return hx::Val( set_frames_dyn() ); }
		if (HX_FIELD_EQ(inName,"isOnScreen") ) { return hx::Val( isOnScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTile") ) { return hx::Val( updateTile_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { return hx::Val( _flashPoint ); }
		if (HX_FIELD_EQ(inName,"_tileHeight") ) { return hx::Val( _tileHeight ); }
		if (HX_FIELD_EQ(inName,"drawTilemap") ) { return hx::Val( drawTilemap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_graphic") ) { return hx::Val( set_graphic_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"useScaleHack") ) { return hx::Val( useScaleHack ); }
		if (HX_FIELD_EQ(inName,"antialiasing") ) { return hx::Val( antialiasing ); }
		if (HX_FIELD_EQ(inName,"_helperPoint") ) { return hx::Val( _helperPoint ); }
		if (HX_FIELD_EQ(inName,"tileToSprite") ) { return hx::Val( tileToSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"createBuffer") ) { return hx::Val( createBuffer_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onGameResized") ) { return hx::Val( onGameResized_dyn() ); }
		if (HX_FIELD_EQ(inName,"cacheGraphics") ) { return hx::Val( cacheGraphics_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTileCoords") ) { return hx::Val( getTileCoords_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateBuffers") ) { return hx::Val( updateBuffers_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeDebugTile") ) { return hx::Val( makeDebugTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawDebugTile") ) { return hx::Val( drawDebugTile_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform ); }
		if (HX_FIELD_EQ(inName,"refreshBuffers") ) { return hx::Val( refreshBuffers_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_debugTileSolid") ) { return hx::Val( _debugTileSolid ); }
		if (HX_FIELD_EQ(inName,"onCameraChanged") ) { return hx::Val( onCameraChanged_dyn() ); }
		if (HX_FIELD_EQ(inName,"initTileObjects") ) { return hx::Val( initTileObjects_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateDebugTile") ) { return hx::Val( updateDebugTile_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_scaledTileWidth") ) { return hx::Val( _scaledTileWidth ); }
		if (HX_FIELD_EQ(inName,"set_antialiasing") ) { return hx::Val( set_antialiasing_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_scaledTileHeight") ) { return hx::Val( _scaledTileHeight ); }
		if (HX_FIELD_EQ(inName,"_debugTilePartial") ) { return hx::Val( _debugTilePartial ); }
		if (HX_FIELD_EQ(inName,"computeDimensions") ) { return hx::Val( computeDimensions_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawDebugOnCamera") ) { return hx::Val( drawDebugOnCamera_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScaleXCallback") ) { return hx::Val( setScaleXCallback_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScaleYCallback") ) { return hx::Val( setScaleYCallback_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_debugTileNotSolid") ) { return hx::Val( _debugTileNotSolid ); }
		if (HX_FIELD_EQ(inName,"onDrawDebugChanged") ) { return hx::Val( onDrawDebugChanged_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScaleXYCallback") ) { return hx::Val( setScaleXYCallback_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_checkBufferChanges") ) { return hx::Val( _checkBufferChanges ); }
		if (HX_FIELD_EQ(inName,"defaultTileToSprite") ) { return hx::Val( defaultTileToSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_allowCollisions") ) { return hx::Val( set_allowCollisions_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"overlapsWithCallback") ) { return hx::Val( overlapsWithCallback_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTileIndexByCoords") ) { return hx::Val( getTileIndexByCoords_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTileCoordsByIndex") ) { return hx::Val( getTileCoordsByIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateColorTransform") ) { return hx::Val( updateColorTransform_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"set_pixelPerfectRender") ) { return hx::Val( set_pixelPerfectRender_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"set_debugBoundingBoxColorSolid") ) { return hx::Val( set_debugBoundingBoxColorSolid_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"updateDebugTileBoundingBoxSolid") ) { return hx::Val( updateDebugTileBoundingBoxSolid_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"set_debugBoundingBoxColorPartial") ) { return hx::Val( set_debugBoundingBoxColorPartial_dyn() ); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"updateDebugTileBoundingBoxPartial") ) { return hx::Val( updateDebugTileBoundingBoxPartial_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_debugBoundingBoxColorNotSolid") ) { return hx::Val( set_debugBoundingBoxColorNotSolid_dyn() ); }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"updateDebugTileBoundingBoxNotSolid") ) { return hx::Val( updateDebugTileBoundingBoxNotSolid_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxTilemap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { scale=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue.Cast< int >()) );color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue.Cast< Float >()) );alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blend") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blend(inValue.Cast<  ::openfl::_legacy::display::BlendMode >()) );blend=inValue.Cast<  ::openfl::_legacy::display::BlendMode >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frames") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frames(inValue.Cast<  ::flixel::graphics::frames::FlxFramesCollection >()) );frames=inValue.Cast<  ::flixel::graphics::frames::FlxFramesCollection >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"graphic") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_graphic(inValue.Cast<  ::flixel::graphics::FlxGraphic >()) );graphic=inValue.Cast<  ::flixel::graphics::FlxGraphic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_matrix") ) { _matrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_buffers") ) { _buffers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_flashRect") ) { _flashRect=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tileWidth") ) { _tileWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_debugRect") ) { _debugRect=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { _flashPoint=inValue.Cast<  ::openfl::_legacy::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tileHeight") ) { _tileHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"useScaleHack") ) { useScaleHack=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"antialiasing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_antialiasing(inValue.Cast< bool >()) );antialiasing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_helperPoint") ) { _helperPoint=inValue.Cast<  ::openfl::_legacy::geom::Point >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { colorTransform=inValue.Cast<  ::openfl::_legacy::geom::ColorTransform >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_debugTileSolid") ) { _debugTileSolid=inValue.Cast<  ::openfl::_legacy::display::BitmapData >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_scaledTileWidth") ) { _scaledTileWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_scaledTileHeight") ) { _scaledTileHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_debugTilePartial") ) { _debugTilePartial=inValue.Cast<  ::openfl::_legacy::display::BitmapData >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_debugTileNotSolid") ) { _debugTileNotSolid=inValue.Cast<  ::openfl::_legacy::display::BitmapData >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_checkBufferChanges") ) { _checkBufferChanges=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTilemap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("useScaleHack","\x44","\x9c","\x16","\x98"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	outFields->push(HX_HCSTRING("antialiasing","\xf4","\x16","\xb3","\x48"));
	outFields->push(HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"));
	outFields->push(HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"));
	outFields->push(HX_HCSTRING("graphic","\xa8","\x5a","\x07","\x74"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"));
	outFields->push(HX_HCSTRING("blend","\x51","\xe8","\xf4","\xb4"));
	outFields->push(HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"));
	outFields->push(HX_HCSTRING("_flashPoint","\x9f","\x1d","\x2a","\xb7"));
	outFields->push(HX_HCSTRING("_flashRect","\xb5","\xc2","\xf3","\x5d"));
	outFields->push(HX_HCSTRING("_buffers","\xf4","\xfc","\x48","\xeb"));
	outFields->push(HX_HCSTRING("_tileWidth","\xb9","\x8f","\x60","\xb1"));
	outFields->push(HX_HCSTRING("_tileHeight","\xd4","\xaa","\x6c","\x39"));
	outFields->push(HX_HCSTRING("_scaledTileWidth","\x7f","\x28","\x09","\x38"));
	outFields->push(HX_HCSTRING("_scaledTileHeight","\x4e","\xbf","\x49","\x86"));
	outFields->push(HX_HCSTRING("_debugTileNotSolid","\x1a","\xdf","\x89","\x53"));
	outFields->push(HX_HCSTRING("_debugTilePartial","\xbf","\x14","\x2d","\x78"));
	outFields->push(HX_HCSTRING("_debugTileSolid","\xe9","\x85","\xdf","\xf6"));
	outFields->push(HX_HCSTRING("_debugRect","\xd8","\x6c","\x95","\x8a"));
	outFields->push(HX_HCSTRING("_helperPoint","\x03","\xe6","\x14","\xf8"));
	outFields->push(HX_HCSTRING("_matrix","\xe0","\x47","\x3f","\x2a"));
	outFields->push(HX_HCSTRING("_checkBufferChanges","\x1a","\x1a","\x89","\x0b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTilemap_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(FlxTilemap_obj,useScaleHack),HX_HCSTRING("useScaleHack","\x44","\x9c","\x16","\x98")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxTilemap_obj,scale),HX_HCSTRING("scale","\x8a","\xce","\xce","\x78")},
	{hx::fsBool,(int)offsetof(FlxTilemap_obj,antialiasing),HX_HCSTRING("antialiasing","\xf4","\x16","\xb3","\x48")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxTilemap_obj,offset),HX_HCSTRING("offset","\x93","\x97","\x3f","\x60")},
	{hx::fsObject /*::flixel::graphics::frames::FlxFramesCollection*/ ,(int)offsetof(FlxTilemap_obj,frames),HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac")},
	{hx::fsObject /*::flixel::graphics::FlxGraphic*/ ,(int)offsetof(FlxTilemap_obj,graphic),HX_HCSTRING("graphic","\xa8","\x5a","\x07","\x74")},
	{hx::fsInt,(int)offsetof(FlxTilemap_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsFloat,(int)offsetof(FlxTilemap_obj,alpha),HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21")},
	{hx::fsObject /*::openfl::_legacy::geom::ColorTransform*/ ,(int)offsetof(FlxTilemap_obj,colorTransform),HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad")},
	{hx::fsObject /*::openfl::_legacy::display::BlendMode*/ ,(int)offsetof(FlxTilemap_obj,blend),HX_HCSTRING("blend","\x51","\xe8","\xf4","\xb4")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTilemap_obj,shader),HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d")},
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(int)offsetof(FlxTilemap_obj,_flashPoint),HX_HCSTRING("_flashPoint","\x9f","\x1d","\x2a","\xb7")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(FlxTilemap_obj,_flashRect),HX_HCSTRING("_flashRect","\xb5","\xc2","\xf3","\x5d")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxTilemap_obj,_buffers),HX_HCSTRING("_buffers","\xf4","\xfc","\x48","\xeb")},
	{hx::fsInt,(int)offsetof(FlxTilemap_obj,_tileWidth),HX_HCSTRING("_tileWidth","\xb9","\x8f","\x60","\xb1")},
	{hx::fsInt,(int)offsetof(FlxTilemap_obj,_tileHeight),HX_HCSTRING("_tileHeight","\xd4","\xaa","\x6c","\x39")},
	{hx::fsFloat,(int)offsetof(FlxTilemap_obj,_scaledTileWidth),HX_HCSTRING("_scaledTileWidth","\x7f","\x28","\x09","\x38")},
	{hx::fsFloat,(int)offsetof(FlxTilemap_obj,_scaledTileHeight),HX_HCSTRING("_scaledTileHeight","\x4e","\xbf","\x49","\x86")},
	{hx::fsObject /*::openfl::_legacy::display::BitmapData*/ ,(int)offsetof(FlxTilemap_obj,_debugTileNotSolid),HX_HCSTRING("_debugTileNotSolid","\x1a","\xdf","\x89","\x53")},
	{hx::fsObject /*::openfl::_legacy::display::BitmapData*/ ,(int)offsetof(FlxTilemap_obj,_debugTilePartial),HX_HCSTRING("_debugTilePartial","\xbf","\x14","\x2d","\x78")},
	{hx::fsObject /*::openfl::_legacy::display::BitmapData*/ ,(int)offsetof(FlxTilemap_obj,_debugTileSolid),HX_HCSTRING("_debugTileSolid","\xe9","\x85","\xdf","\xf6")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(FlxTilemap_obj,_debugRect),HX_HCSTRING("_debugRect","\xd8","\x6c","\x95","\x8a")},
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(int)offsetof(FlxTilemap_obj,_helperPoint),HX_HCSTRING("_helperPoint","\x03","\xe6","\x14","\xf8")},
	{hx::fsObject /*::flixel::math::FlxMatrix*/ ,(int)offsetof(FlxTilemap_obj,_matrix),HX_HCSTRING("_matrix","\xe0","\x47","\x3f","\x2a")},
	{hx::fsBool,(int)offsetof(FlxTilemap_obj,_checkBufferChanges),HX_HCSTRING("_checkBufferChanges","\x1a","\x1a","\x89","\x0b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTilemap_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTilemap_obj_sMemberFields[] = {
	HX_HCSTRING("useScaleHack","\x44","\x9c","\x16","\x98"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("antialiasing","\xf4","\x16","\xb3","\x48"),
	HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"),
	HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"),
	HX_HCSTRING("graphic","\xa8","\x5a","\x07","\x74"),
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"),
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("blend","\x51","\xe8","\xf4","\xb4"),
	HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"),
	HX_HCSTRING("_flashPoint","\x9f","\x1d","\x2a","\xb7"),
	HX_HCSTRING("_flashRect","\xb5","\xc2","\xf3","\x5d"),
	HX_HCSTRING("_buffers","\xf4","\xfc","\x48","\xeb"),
	HX_HCSTRING("_tileWidth","\xb9","\x8f","\x60","\xb1"),
	HX_HCSTRING("_tileHeight","\xd4","\xaa","\x6c","\x39"),
	HX_HCSTRING("_scaledTileWidth","\x7f","\x28","\x09","\x38"),
	HX_HCSTRING("_scaledTileHeight","\x4e","\xbf","\x49","\x86"),
	HX_HCSTRING("_debugTileNotSolid","\x1a","\xdf","\x89","\x53"),
	HX_HCSTRING("_debugTilePartial","\xbf","\x14","\x2d","\x78"),
	HX_HCSTRING("_debugTileSolid","\xe9","\x85","\xdf","\xf6"),
	HX_HCSTRING("_debugRect","\xd8","\x6c","\x95","\x8a"),
	HX_HCSTRING("_helperPoint","\x03","\xe6","\x14","\xf8"),
	HX_HCSTRING("_matrix","\xe0","\x47","\x3f","\x2a"),
	HX_HCSTRING("_checkBufferChanges","\x1a","\x1a","\x89","\x0b"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("set_frames","\xe3","\xbd","\x8a","\xa0"),
	HX_HCSTRING("onGameResized","\x3f","\xef","\x13","\xab"),
	HX_HCSTRING("onCameraChanged","\x30","\x48","\x4e","\x5c"),
	HX_HCSTRING("cacheGraphics","\x2d","\x61","\x95","\xfc"),
	HX_HCSTRING("initTileObjects","\x16","\xbe","\x45","\x2e"),
	HX_HCSTRING("updateDebugTileBoundingBoxSolid","\x9c","\x41","\x64","\xd8"),
	HX_HCSTRING("updateDebugTileBoundingBoxNotSolid","\x47","\x35","\xbd","\x4d"),
	HX_HCSTRING("updateDebugTileBoundingBoxPartial","\x32","\x63","\x1e","\x51"),
	HX_HCSTRING("updateDebugTile","\xd8","\x3f","\xd3","\x7f"),
	HX_HCSTRING("computeDimensions","\xa4","\xa4","\xeb","\xf3"),
	HX_HCSTRING("updateMap","\x13","\xe8","\xdf","\x82"),
	HX_HCSTRING("drawDebugOnCamera","\xf3","\x47","\x7b","\xcb"),
	HX_HCSTRING("isOnScreen","\xf5","\x43","\xb9","\xa1"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("refreshBuffers","\xd8","\xb2","\xa5","\x26"),
	HX_HCSTRING("setDirty","\x10","\xb9","\x04","\xe8"),
	HX_HCSTRING("overlapsWithCallback","\x17","\xc3","\x72","\xa8"),
	HX_HCSTRING("getTileIndexByCoords","\x03","\x79","\x8b","\x76"),
	HX_HCSTRING("getTileCoordsByIndex","\xb9","\x63","\x25","\xa1"),
	HX_HCSTRING("getTileCoords","\x22","\xd6","\x8d","\x89"),
	HX_HCSTRING("follow","\x71","\x91","\x96","\xf9"),
	HX_HCSTRING("ray","\xea","\xd5","\x56","\x00"),
	HX_HCSTRING("tileToSprite","\x2e","\xe9","\x26","\xc3"),
	HX_HCSTRING("updateBuffers","\x6a","\x08","\xff","\x7c"),
	HX_HCSTRING("drawTilemap","\x8a","\x34","\xd7","\x8e"),
	HX_HCSTRING("makeDebugTile","\x53","\x67","\xf1","\x28"),
	HX_HCSTRING("drawDebugTile","\x7d","\x82","\x6f","\x8f"),
	HX_HCSTRING("onDrawDebugChanged","\x44","\xe0","\xf1","\x9f"),
	HX_HCSTRING("updateTile","\xd7","\xb5","\xb1","\x05"),
	HX_HCSTRING("createBuffer","\x1c","\xfd","\xe9","\xf2"),
	HX_HCSTRING("set_antialiasing","\xf1","\xf0","\x93","\xa3"),
	HX_HCSTRING("set_graphic","\xcb","\xc1","\x6e","\x04"),
	HX_HCSTRING("set_pixelPerfectRender","\x9a","\x4f","\x8f","\xbc"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("updateColorTransform","\x72","\x0f","\xd2","\x2f"),
	HX_HCSTRING("set_blend","\xb4","\x30","\xef","\xdb"),
	HX_HCSTRING("setScaleXYCallback","\x6e","\xfd","\x35","\x90"),
	HX_HCSTRING("setScaleXCallback","\xb5","\x05","\xa2","\x03"),
	HX_HCSTRING("setScaleYCallback","\xb6","\x6e","\x93","\xd6"),
	HX_HCSTRING("defaultTileToSprite","\x8f","\xab","\x7f","\x3f"),
	HX_HCSTRING("set_allowCollisions","\xcd","\x8b","\x81","\x21"),
	HX_HCSTRING("set_debugBoundingBoxColorSolid","\x19","\xc9","\x0b","\x4b"),
	HX_HCSTRING("set_debugBoundingBoxColorNotSolid","\xea","\xb9","\xe3","\x4b"),
	HX_HCSTRING("set_debugBoundingBoxColorPartial","\xef","\x83","\x54","\x62"),
	::String(null()) };

static void FlxTilemap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTilemap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTilemap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTilemap_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxTilemap_obj::__mClass;

void FlxTilemap_obj::__register()
{
	hx::Object *dummy = new FlxTilemap_obj;
	FlxTilemap_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.tile.FlxTilemap","\x2a","\xd5","\x63","\x29");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTilemap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTilemap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTilemap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTilemap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTilemap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTilemap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace tile
