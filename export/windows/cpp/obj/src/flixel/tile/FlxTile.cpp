// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTile
#include <flixel/tile/FlxTile.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b6cd3463ece44f41_11_new,"flixel.tile.FlxTile","new",0xe45c12a4,"flixel.tile.FlxTile.new","flixel/tile/FlxTile.hx",11,0x7142a1ac)
HX_LOCAL_STACK_FRAME(_hx_pos_b6cd3463ece44f41_75_destroy,"flixel.tile.FlxTile","destroy",0x4616e13e,"flixel.tile.FlxTile.destroy","flixel/tile/FlxTile.hx",75,0x7142a1ac)
namespace flixel{
namespace tile{

void FlxTile_obj::__construct( ::flixel::tile::FlxTilemap Tilemap,int Index,Float Width,Float Height,bool Visible,int AllowCollisions){
            	HX_STACKFRAME(&_hx_pos_b6cd3463ece44f41_11_new)
HXLINE(  41)		this->mapIndex = (int)0;
HXLINE(  18)		this->callbackFunction = null();
HXLINE(  60)		super::__construct((int)0,(int)0,Width,Height);
HXLINE(  62)		this->set_immovable(true);
HXLINE(  63)		this->set_moves(false);
HXLINE(  65)		this->tilemap = Tilemap;
HXLINE(  66)		this->index = Index;
HXLINE(  67)		this->set_visible(Visible);
HXLINE(  68)		this->set_allowCollisions(AllowCollisions);
            	}

Dynamic FlxTile_obj::__CreateEmpty() { return new FlxTile_obj; }

void *FlxTile_obj::_hx_vtable = 0;

Dynamic FlxTile_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTile_obj > _hx_result = new FlxTile_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool FlxTile_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e105115) {
		if (inClassId<=(int)0x25a685e0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x25a685e0;
		} else {
			return inClassId==(int)0x2e105115;
		}
	} else {
		return inClassId==(int)0x56bcf072;
	}
}

void FlxTile_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_b6cd3463ece44f41_75_destroy)
HXLINE(  76)		this->callbackFunction = null();
HXLINE(  77)		this->tilemap = null();
HXLINE(  78)		this->frame = null();
HXLINE(  80)		this->super::destroy();
            	}



hx::ObjectPtr< FlxTile_obj > FlxTile_obj::__new( ::flixel::tile::FlxTilemap Tilemap,int Index,Float Width,Float Height,bool Visible,int AllowCollisions) {
	hx::ObjectPtr< FlxTile_obj > __this = new FlxTile_obj();
	__this->__construct(Tilemap,Index,Width,Height,Visible,AllowCollisions);
	return __this;
}

hx::ObjectPtr< FlxTile_obj > FlxTile_obj::__alloc(hx::Ctx *_hx_ctx, ::flixel::tile::FlxTilemap Tilemap,int Index,Float Width,Float Height,bool Visible,int AllowCollisions) {
	FlxTile_obj *__this = (FlxTile_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxTile_obj), true, "flixel.tile.FlxTile"));
	*(void **)__this = FlxTile_obj::_hx_vtable;
	__this->__construct(Tilemap,Index,Width,Height,Visible,AllowCollisions);
	return __this;
}

FlxTile_obj::FlxTile_obj()
{
}

void FlxTile_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTile);
	HX_MARK_MEMBER_NAME(callbackFunction,"callbackFunction");
	HX_MARK_MEMBER_NAME(filter,"filter");
	HX_MARK_MEMBER_NAME(tilemap,"tilemap");
	HX_MARK_MEMBER_NAME(index,"index");
	HX_MARK_MEMBER_NAME(mapIndex,"mapIndex");
	HX_MARK_MEMBER_NAME(frame,"frame");
	 ::flixel::FlxObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTile_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(callbackFunction,"callbackFunction");
	HX_VISIT_MEMBER_NAME(filter,"filter");
	HX_VISIT_MEMBER_NAME(tilemap,"tilemap");
	HX_VISIT_MEMBER_NAME(index,"index");
	HX_VISIT_MEMBER_NAME(mapIndex,"mapIndex");
	HX_VISIT_MEMBER_NAME(frame,"frame");
	 ::flixel::FlxObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxTile_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { return hx::Val( index ); }
		if (HX_FIELD_EQ(inName,"frame") ) { return hx::Val( frame ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"filter") ) { return hx::Val( filter ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tilemap") ) { return hx::Val( tilemap ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mapIndex") ) { return hx::Val( mapIndex ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"callbackFunction") ) { return hx::Val( callbackFunction ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxTile_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frame") ) { frame=inValue.Cast<  ::flixel::graphics::frames::FlxFrame >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"filter") ) { filter=inValue.Cast< hx::Class >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tilemap") ) { tilemap=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mapIndex") ) { mapIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"callbackFunction") ) { callbackFunction=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTile_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85"));
	outFields->push(HX_HCSTRING("tilemap","\x2e","\xf0","\x8e","\x45"));
	outFields->push(HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"));
	outFields->push(HX_HCSTRING("mapIndex","\xd6","\x0a","\x57","\x35"));
	outFields->push(HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTile_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTile_obj,callbackFunction),HX_HCSTRING("callbackFunction","\xfd","\xcd","\x91","\x7e")},
	{hx::fsObject /*::hx::Class*/ ,(int)offsetof(FlxTile_obj,filter),HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(FlxTile_obj,tilemap),HX_HCSTRING("tilemap","\x2e","\xf0","\x8e","\x45")},
	{hx::fsInt,(int)offsetof(FlxTile_obj,index),HX_HCSTRING("index","\x12","\x9b","\x14","\xbe")},
	{hx::fsInt,(int)offsetof(FlxTile_obj,mapIndex),HX_HCSTRING("mapIndex","\xd6","\x0a","\x57","\x35")},
	{hx::fsObject /*::flixel::graphics::frames::FlxFrame*/ ,(int)offsetof(FlxTile_obj,frame),HX_HCSTRING("frame","\x2d","\x78","\x83","\x06")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTile_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTile_obj_sMemberFields[] = {
	HX_HCSTRING("callbackFunction","\xfd","\xcd","\x91","\x7e"),
	HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85"),
	HX_HCSTRING("tilemap","\x2e","\xf0","\x8e","\x45"),
	HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"),
	HX_HCSTRING("mapIndex","\xd6","\x0a","\x57","\x35"),
	HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void FlxTile_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTile_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTile_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTile_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxTile_obj::__mClass;

void FlxTile_obj::__register()
{
	hx::Object *dummy = new FlxTile_obj;
	FlxTile_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.tile.FlxTile","\xb2","\x30","\xf5","\x6d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTile_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTile_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTile_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTile_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTile_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTile_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace tile
