// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAnalogStick
#include <flixel/input/gamepad/FlxGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAttachment
#include <flixel/input/gamepad/FlxGamepadAttachment.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadModel
#include <flixel/input/gamepad/FlxGamepadModel.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_MovieClip
#include <openfl/_legacy/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Stage
#include <openfl/_legacy/display/Stage.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_JoystickEvent
#include <openfl/_legacy/events/JoystickEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dd40c6c1396c027e_18_new,"flixel.input.gamepad.FlxGamepadManager","new",0x05218fad,"flixel.input.gamepad.FlxGamepadManager.new","flixel/input/gamepad/FlxGamepadManager.hx",18,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_62_getByID,"flixel.input.gamepad.FlxGamepadManager","getByID",0xe19992f5,"flixel.input.gamepad.FlxGamepadManager.getByID","flixel/input/gamepad/FlxGamepadManager.hx",62,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_66_removeByID,"flixel.input.gamepad.FlxGamepadManager","removeByID",0x7466a829,"flixel.input.gamepad.FlxGamepadManager.removeByID","flixel/input/gamepad/FlxGamepadManager.hx",66,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_86_createByID,"flixel.input.gamepad.FlxGamepadManager","createByID",0x09d52ee1,"flixel.input.gamepad.FlxGamepadManager.createByID","flixel/input/gamepad/FlxGamepadManager.hx",86,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_123_getActiveGamepadIDs,"flixel.input.gamepad.FlxGamepadManager","getActiveGamepadIDs",0x2dbae5a0,"flixel.input.gamepad.FlxGamepadManager.getActiveGamepadIDs","flixel/input/gamepad/FlxGamepadManager.hx",123,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_141_getActiveGamepads,"flixel.input.gamepad.FlxGamepadManager","getActiveGamepads",0xd3d79bdb,"flixel.input.gamepad.FlxGamepadManager.getActiveGamepads","flixel/input/gamepad/FlxGamepadManager.hx",141,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_157_getFirstActiveGamepadID,"flixel.input.gamepad.FlxGamepadManager","getFirstActiveGamepadID",0x40a7d549,"flixel.input.gamepad.FlxGamepadManager.getFirstActiveGamepadID","flixel/input/gamepad/FlxGamepadManager.hx",157,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_167_getFirstActiveGamepad,"flixel.input.gamepad.FlxGamepadManager","getFirstActiveGamepad",0x4c49bdee,"flixel.input.gamepad.FlxGamepadManager.getFirstActiveGamepad","flixel/input/gamepad/FlxGamepadManager.hx",167,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_179_anyButton,"flixel.input.gamepad.FlxGamepadManager","anyButton",0x595b810b,"flixel.input.gamepad.FlxGamepadManager.anyButton","flixel/input/gamepad/FlxGamepadManager.hx",179,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_191_anyInput,"flixel.input.gamepad.FlxGamepadManager","anyInput",0xa448cb11,"flixel.input.gamepad.FlxGamepadManager.anyInput","flixel/input/gamepad/FlxGamepadManager.hx",191,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_204_anyPressed,"flixel.input.gamepad.FlxGamepadManager","anyPressed",0x4626e969,"flixel.input.gamepad.FlxGamepadManager.anyPressed","flixel/input/gamepad/FlxGamepadManager.hx",204,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_212_anyJustPressed,"flixel.input.gamepad.FlxGamepadManager","anyJustPressed",0x8467941d,"flixel.input.gamepad.FlxGamepadManager.anyJustPressed","flixel/input/gamepad/FlxGamepadManager.hx",212,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_220_anyJustReleased,"flixel.input.gamepad.FlxGamepadManager","anyJustReleased",0x5d1012e2,"flixel.input.gamepad.FlxGamepadManager.anyJustReleased","flixel/input/gamepad/FlxGamepadManager.hx",220,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_224_anyHasState,"flixel.input.gamepad.FlxGamepadManager","anyHasState",0xbc3797b0,"flixel.input.gamepad.FlxGamepadManager.anyHasState","flixel/input/gamepad/FlxGamepadManager.hx",224,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_239_anyMovedXAxis,"flixel.input.gamepad.FlxGamepadManager","anyMovedXAxis",0x17da8f9f,"flixel.input.gamepad.FlxGamepadManager.anyMovedXAxis","flixel/input/gamepad/FlxGamepadManager.hx",239,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_260_anyMovedYAxis,"flixel.input.gamepad.FlxGamepadManager","anyMovedYAxis",0xab412420,"flixel.input.gamepad.FlxGamepadManager.anyMovedYAxis","flixel/input/gamepad/FlxGamepadManager.hx",260,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_279_destroy,"flixel.input.gamepad.FlxGamepadManager","destroy",0xf27a16c7,"flixel.input.gamepad.FlxGamepadManager.destroy","flixel/input/gamepad/FlxGamepadManager.hx",279,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_298_reset,"flixel.input.gamepad.FlxGamepadManager","reset",0x09fe365c,"flixel.input.gamepad.FlxGamepadManager.reset","flixel/input/gamepad/FlxGamepadManager.hx",298,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_408_getModelFromJoystick,"flixel.input.gamepad.FlxGamepadManager","getModelFromJoystick",0x94fdf62c,"flixel.input.gamepad.FlxGamepadManager.getModelFromJoystick","flixel/input/gamepad/FlxGamepadManager.hx",408,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_421_handleButtonDownEvent,"flixel.input.gamepad.FlxGamepadManager","handleButtonDownEvent",0x228bc3cb,"flixel.input.gamepad.FlxGamepadManager.handleButtonDownEvent","flixel/input/gamepad/FlxGamepadManager.hx",421,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_425_handleButtonDown,"flixel.input.gamepad.FlxGamepadManager","handleButtonDown",0x9a9405cf,"flixel.input.gamepad.FlxGamepadManager.handleButtonDown","flixel/input/gamepad/FlxGamepadManager.hx",425,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_433_handleButtonUpEvent,"flixel.input.gamepad.FlxGamepadManager","handleButtonUpEvent",0x75a63c72,"flixel.input.gamepad.FlxGamepadManager.handleButtonUpEvent","flixel/input/gamepad/FlxGamepadManager.hx",433,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_437_handleButtonUp,"flixel.input.gamepad.FlxGamepadManager","handleButtonUp",0x87ba4e88,"flixel.input.gamepad.FlxGamepadManager.handleButtonUp","flixel/input/gamepad/FlxGamepadManager.hx",437,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_444_handleAxisMove,"flixel.input.gamepad.FlxGamepadManager","handleAxisMove",0xbb7c51ed,"flixel.input.gamepad.FlxGamepadManager.handleAxisMove","flixel/input/gamepad/FlxGamepadManager.hx",444,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_473_copyToPointWithDeadzone,"flixel.input.gamepad.FlxGamepadManager","copyToPointWithDeadzone",0xd4338883,"flixel.input.gamepad.FlxGamepadManager.copyToPointWithDeadzone","flixel/input/gamepad/FlxGamepadManager.hx",473,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_479_handleBallMove,"flixel.input.gamepad.FlxGamepadManager","handleBallMove",0x63851e4b,"flixel.input.gamepad.FlxGamepadManager.handleBallMove","flixel/input/gamepad/FlxGamepadManager.hx",479,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_485_handleHatMove,"flixel.input.gamepad.FlxGamepadManager","handleHatMove",0x5f7942d1,"flixel.input.gamepad.FlxGamepadManager.handleHatMove","flixel/input/gamepad/FlxGamepadManager.hx",485,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_502_checkDpadAxisChange,"flixel.input.gamepad.FlxGamepadManager","checkDpadAxisChange",0x1e10a175,"flixel.input.gamepad.FlxGamepadManager.checkDpadAxisChange","flixel/input/gamepad/FlxGamepadManager.hx",502,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_522_handleDeviceAdded,"flixel.input.gamepad.FlxGamepadManager","handleDeviceAdded",0x86fef98f,"flixel.input.gamepad.FlxGamepadManager.handleDeviceAdded","flixel/input/gamepad/FlxGamepadManager.hx",522,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_527_handleDeviceRemoved,"flixel.input.gamepad.FlxGamepadManager","handleDeviceRemoved",0xde69562f,"flixel.input.gamepad.FlxGamepadManager.handleDeviceRemoved","flixel/input/gamepad/FlxGamepadManager.hx",527,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_536_update,"flixel.input.gamepad.FlxGamepadManager","update",0x32fe94dc,"flixel.input.gamepad.FlxGamepadManager.update","flixel/input/gamepad/FlxGamepadManager.hx",536,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_541_onFocus,"flixel.input.gamepad.FlxGamepadManager","onFocus",0x68bae806,"flixel.input.gamepad.FlxGamepadManager.onFocus","flixel/input/gamepad/FlxGamepadManager.hx",541,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_545_onFocusLost,"flixel.input.gamepad.FlxGamepadManager","onFocusLost",0xeb47390a,"flixel.input.gamepad.FlxGamepadManager.onFocusLost","flixel/input/gamepad/FlxGamepadManager.hx",545,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_549_get_numActiveGamepads,"flixel.input.gamepad.FlxGamepadManager","get_numActiveGamepads",0x4cfd1ae2,"flixel.input.gamepad.FlxGamepadManager.get_numActiveGamepads","flixel/input/gamepad/FlxGamepadManager.hx",549,0xccfee0a6)
namespace flixel{
namespace input{
namespace gamepad{

void FlxGamepadManager_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_18_new)
HXLINE(  47)		this->_activeGamepads = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  43)		this->_gamepads = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 307)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->addEventListener(HX_("axisMove",52,90,f4,8f),this->handleAxisMove_dyn(),null(),null(),null());
HXLINE( 308)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->addEventListener(HX_("ballMove",b0,5c,fd,37),this->handleBallMove_dyn(),null(),null(),null());
HXLINE( 309)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->addEventListener(HX_("buttonDown",74,67,64,ac),this->handleButtonDownEvent_dyn(),null(),null(),null());
HXLINE( 310)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->addEventListener(HX_("buttonUp",ed,8c,32,5c),this->handleButtonUpEvent_dyn(),null(),null(),null());
HXLINE( 311)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->addEventListener(HX_("hatMove",0c,98,0b,ab),this->handleHatMove_dyn(),null(),null(),null());
HXLINE( 312)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->addEventListener(HX_("deviceRemoved",aa,c9,5b,59),this->handleDeviceRemoved_dyn(),null(),null(),null());
HXLINE( 313)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->addEventListener(HX_("deviceAdded",4a,08,84,0b),this->handleDeviceAdded_dyn(),null(),null(),null());
            	}

Dynamic FlxGamepadManager_obj::__CreateEmpty() { return new FlxGamepadManager_obj; }

void *FlxGamepadManager_obj::_hx_vtable = 0;

Dynamic FlxGamepadManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxGamepadManager_obj > _hx_result = new FlxGamepadManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxGamepadManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4b9a9f2b;
}

static ::flixel::input::IFlxInputManager_obj _hx_flixel_input_gamepad_FlxGamepadManager__hx_flixel_input_IFlxInputManager= {
	( void (hx::Object::*)())&::flixel::input::gamepad::FlxGamepadManager_obj::destroy,
	( void (hx::Object::*)())&::flixel::input::gamepad::FlxGamepadManager_obj::reset,
	( void (hx::Object::*)())&::flixel::input::gamepad::FlxGamepadManager_obj::update,
	( void (hx::Object::*)())&::flixel::input::gamepad::FlxGamepadManager_obj::onFocus,
	( void (hx::Object::*)())&::flixel::input::gamepad::FlxGamepadManager_obj::onFocusLost,
};

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_input_gamepad_FlxGamepadManager__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::input::gamepad::FlxGamepadManager_obj::destroy,
};

void *FlxGamepadManager_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x65dd217a: return &_hx_flixel_input_gamepad_FlxGamepadManager__hx_flixel_input_IFlxInputManager;
		case (int)0xd4fe2fcd: return &_hx_flixel_input_gamepad_FlxGamepadManager__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::flixel::input::gamepad::FlxGamepad FlxGamepadManager_obj::getByID(int GamepadID){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_62_getByID)
HXDLIN(  62)		return this->_activeGamepads->__get(GamepadID).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,getByID,return )

void FlxGamepadManager_obj::removeByID(int GamepadID){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_66_removeByID)
HXLINE(  67)		 ::flixel::input::gamepad::FlxGamepad gamepad = this->_gamepads->__get(GamepadID).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE(  68)		if (hx::IsNotNull( gamepad )) {
HXLINE(  70)			::flixel::util::FlxDestroyUtil_obj::destroy(gamepad);
HXLINE(  71)			this->_gamepads[GamepadID] = null();
HXLINE(  73)			int i = this->_activeGamepads->indexOf(gamepad,null());
HXLINE(  74)			if ((i != (int)-1)) {
HXLINE(  75)				this->_activeGamepads[i] = null();
            			}
            		}
HXLINE(  78)		if (hx::IsEq( this->lastActive,gamepad )) {
HXLINE(  79)			this->lastActive = null();
            		}
HXLINE(  81)		if (hx::IsEq( this->firstActive,gamepad )) {
HXLINE(  82)			this->firstActive = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,removeByID,(void))

 ::flixel::input::gamepad::FlxGamepad FlxGamepadManager_obj::createByID(int GamepadID, ::flixel::input::gamepad::FlxGamepadModel Model){
            	HX_GC_STACKFRAME(&_hx_pos_dd40c6c1396c027e_86_createByID)
HXLINE(  87)		 ::flixel::input::gamepad::FlxGamepad gamepad = this->_gamepads->__get(GamepadID).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE(  88)		if (hx::IsNull( gamepad )) {
HXLINE(  90)			gamepad =  ::flixel::input::gamepad::FlxGamepad_obj::__alloc( HX_CTX ,GamepadID,hx::ObjectPtr<OBJ_>(this),Model,null());
HXLINE(  91)			this->_gamepads[GamepadID] = gamepad;
HXLINE(  94)			bool nullFound = false;
HXLINE(  95)			{
HXLINE(  95)				int _g1 = (int)0;
HXDLIN(  95)				int _g = this->_activeGamepads->length;
HXDLIN(  95)				while((_g1 < _g)){
HXLINE(  95)					_g1 = (_g1 + (int)1);
HXDLIN(  95)					int i = (_g1 - (int)1);
HXLINE(  97)					if (hx::IsNull( this->_activeGamepads->__get(i).StaticCast<  ::flixel::input::gamepad::FlxGamepad >() )) {
HXLINE(  99)						this->_activeGamepads[i] = gamepad;
HXLINE( 100)						nullFound = true;
HXLINE( 101)						goto _hx_goto_3;
            					}
            				}
            				_hx_goto_3:;
            			}
HXLINE( 105)			if (!(nullFound)) {
HXLINE( 106)				this->_activeGamepads->push(gamepad);
            			}
            		}
HXLINE( 109)		this->lastActive = gamepad;
HXLINE( 110)		if (hx::IsNull( this->firstActive )) {
HXLINE( 111)			this->firstActive = gamepad;
            		}
HXLINE( 113)		return gamepad;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepadManager_obj,createByID,return )

::Array< int > FlxGamepadManager_obj::getActiveGamepadIDs(::Array< int > IDsArray){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_123_getActiveGamepadIDs)
HXLINE( 124)		if (hx::IsNull( IDsArray )) {
HXLINE( 125)			IDsArray = ::Array_obj< int >::__new(0);
            		}
HXLINE( 127)		{
HXLINE( 127)			int _g = (int)0;
HXDLIN( 127)			::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 127)			while((_g < _g1->length)){
HXLINE( 127)				 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 127)				_g = (_g + (int)1);
HXLINE( 128)				bool _hx_tmp;
HXDLIN( 128)				if (hx::IsNotNull( gamepad )) {
HXLINE( 128)					_hx_tmp = gamepad->anyInput();
            				}
            				else {
HXLINE( 128)					_hx_tmp = false;
            				}
HXDLIN( 128)				if (_hx_tmp) {
HXLINE( 129)					IDsArray->push(gamepad->id);
            				}
            			}
            		}
HXLINE( 131)		return IDsArray;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,getActiveGamepadIDs,return )

::Array< ::Dynamic> FlxGamepadManager_obj::getActiveGamepads(::Array< ::Dynamic> GamepadArray){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_141_getActiveGamepads)
HXLINE( 142)		if (hx::IsNull( GamepadArray )) {
HXLINE( 143)			GamepadArray = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 145)		{
HXLINE( 145)			int _g = (int)0;
HXDLIN( 145)			::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 145)			while((_g < _g1->length)){
HXLINE( 145)				 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 145)				_g = (_g + (int)1);
HXLINE( 146)				bool _hx_tmp;
HXDLIN( 146)				if (hx::IsNotNull( gamepad )) {
HXLINE( 146)					_hx_tmp = gamepad->anyInput();
            				}
            				else {
HXLINE( 146)					_hx_tmp = false;
            				}
HXDLIN( 146)				if (_hx_tmp) {
HXLINE( 147)					GamepadArray->push(gamepad);
            				}
            			}
            		}
HXLINE( 149)		return GamepadArray;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,getActiveGamepads,return )

int FlxGamepadManager_obj::getFirstActiveGamepadID(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_157_getFirstActiveGamepadID)
HXLINE( 158)		 ::flixel::input::gamepad::FlxGamepad firstActive = this->getFirstActiveGamepad();
HXLINE( 159)		if (hx::IsNull( firstActive )) {
HXLINE( 159)			return (int)-1;
            		}
            		else {
HXLINE( 159)			return firstActive->id;
            		}
HXDLIN( 159)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadManager_obj,getFirstActiveGamepadID,return )

 ::flixel::input::gamepad::FlxGamepad FlxGamepadManager_obj::getFirstActiveGamepad(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_167_getFirstActiveGamepad)
HXLINE( 168)		{
HXLINE( 168)			int _g = (int)0;
HXDLIN( 168)			::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 168)			while((_g < _g1->length)){
HXLINE( 168)				 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 168)				_g = (_g + (int)1);
HXLINE( 169)				bool _hx_tmp;
HXDLIN( 169)				if (hx::IsNotNull( gamepad )) {
HXLINE( 169)					_hx_tmp = gamepad->anyInput();
            				}
            				else {
HXLINE( 169)					_hx_tmp = false;
            				}
HXDLIN( 169)				if (_hx_tmp) {
HXLINE( 170)					return gamepad;
            				}
            			}
            		}
HXLINE( 172)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadManager_obj,getFirstActiveGamepad,return )

bool FlxGamepadManager_obj::anyButton(hx::Null< int >  __o_state){
int state = __o_state.Default(1);
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_179_anyButton)
HXLINE( 180)		{
HXLINE( 180)			int _g = (int)0;
HXDLIN( 180)			::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 180)			while((_g < _g1->length)){
HXLINE( 180)				 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 180)				_g = (_g + (int)1);
HXLINE( 181)				bool _hx_tmp;
HXDLIN( 181)				if (hx::IsNotNull( gamepad )) {
HXLINE( 181)					_hx_tmp = gamepad->anyButton(state);
            				}
            				else {
HXLINE( 181)					_hx_tmp = false;
            				}
HXDLIN( 181)				if (_hx_tmp) {
HXLINE( 182)					return true;
            				}
            			}
            		}
HXLINE( 184)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,anyButton,return )

bool FlxGamepadManager_obj::anyInput(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_191_anyInput)
HXLINE( 192)		{
HXLINE( 192)			int _g = (int)0;
HXDLIN( 192)			::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 192)			while((_g < _g1->length)){
HXLINE( 192)				 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 192)				_g = (_g + (int)1);
HXLINE( 193)				bool _hx_tmp;
HXDLIN( 193)				if (hx::IsNotNull( gamepad )) {
HXLINE( 193)					_hx_tmp = gamepad->anyInput();
            				}
            				else {
HXLINE( 193)					_hx_tmp = false;
            				}
HXDLIN( 193)				if (_hx_tmp) {
HXLINE( 194)					return true;
            				}
            			}
            		}
HXLINE( 196)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadManager_obj,anyInput,return )

bool FlxGamepadManager_obj::anyPressed(int buttonID){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_204_anyPressed)
HXDLIN( 204)		return this->anyHasState(buttonID,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,anyPressed,return )

bool FlxGamepadManager_obj::anyJustPressed(int buttonID){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_212_anyJustPressed)
HXDLIN( 212)		return this->anyHasState(buttonID,(int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,anyJustPressed,return )

bool FlxGamepadManager_obj::anyJustReleased(int buttonID){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_220_anyJustReleased)
HXDLIN( 220)		return this->anyHasState(buttonID,(int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,anyJustReleased,return )

bool FlxGamepadManager_obj::anyHasState(int buttonID,int state){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_224_anyHasState)
HXLINE( 225)		{
HXLINE( 225)			int _g = (int)0;
HXDLIN( 225)			::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 225)			while((_g < _g1->length)){
HXLINE( 225)				 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 225)				_g = (_g + (int)1);
HXLINE( 226)				bool _hx_tmp;
HXDLIN( 226)				if (hx::IsNotNull( gamepad )) {
HXLINE( 226)					_hx_tmp = gamepad->checkStatusRaw(gamepad->mapping->getRawID(buttonID),state);
            				}
            				else {
HXLINE( 226)					_hx_tmp = false;
            				}
HXDLIN( 226)				if (_hx_tmp) {
HXLINE( 227)					return true;
            				}
            			}
            		}
HXLINE( 229)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepadManager_obj,anyHasState,return )

Float FlxGamepadManager_obj::anyMovedXAxis( ::flixel::input::gamepad::FlxGamepadAnalogStick RawAxisID){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_239_anyMovedXAxis)
HXLINE( 240)		{
HXLINE( 240)			int _g = (int)0;
HXDLIN( 240)			::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 240)			while((_g < _g1->length)){
HXLINE( 240)				 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 240)				_g = (_g + (int)1);
HXLINE( 242)				if (hx::IsNull( gamepad )) {
HXLINE( 243)					continue;
            				}
HXLINE( 245)				Float value = gamepad->getAnalogXAxisValue(RawAxisID);
HXLINE( 246)				if ((value != (int)0)) {
HXLINE( 247)					return value;
            				}
            			}
            		}
HXLINE( 250)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,anyMovedXAxis,return )

Float FlxGamepadManager_obj::anyMovedYAxis( ::flixel::input::gamepad::FlxGamepadAnalogStick RawAxisID){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_260_anyMovedYAxis)
HXLINE( 261)		{
HXLINE( 261)			int _g = (int)0;
HXDLIN( 261)			::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 261)			while((_g < _g1->length)){
HXLINE( 261)				 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 261)				_g = (_g + (int)1);
HXLINE( 263)				if (hx::IsNull( gamepad )) {
HXLINE( 264)					continue;
            				}
HXLINE( 266)				Float value = gamepad->getYAxisRaw(RawAxisID);
HXLINE( 267)				if ((value != (int)0)) {
HXLINE( 268)					return value;
            				}
            			}
            		}
HXLINE( 271)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,anyMovedYAxis,return )

void FlxGamepadManager_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_279_destroy)
HXLINE( 280)		this->_gamepads = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_gamepads);
HXLINE( 282)		this->firstActive = null();
HXLINE( 283)		this->lastActive = null();
HXLINE( 284)		this->_gamepads = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadManager_obj,destroy,(void))

void FlxGamepadManager_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_298_reset)
HXDLIN( 298)		int _g = (int)0;
HXDLIN( 298)		::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 298)		while((_g < _g1->length)){
HXDLIN( 298)			 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 298)			_g = (_g + (int)1);
HXLINE( 299)			if (hx::IsNotNull( gamepad )) {
HXLINE( 300)				gamepad->reset();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadManager_obj,reset,(void))

 ::flixel::input::gamepad::FlxGamepadModel FlxGamepadManager_obj::getModelFromJoystick(Float id){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_408_getModelFromJoystick)
HXDLIN( 408)		int _g = ::Math_obj::round(id);
HXDLIN( 408)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 410)				return ::flixel::input::gamepad::FlxGamepadModel_obj::XINPUT_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 411)				return ::flixel::input::gamepad::FlxGamepadModel_obj::PS4_dyn();
            			}
            			break;
            			case (int)3: {
HXLINE( 412)				return ::flixel::input::gamepad::FlxGamepadModel_obj::OUYA_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 413)				return ::flixel::input::gamepad::FlxGamepadModel_obj::MAYFLASH_WII_REMOTE_dyn();
            			}
            			break;
            			case (int)5: {
HXLINE( 414)				return ::flixel::input::gamepad::FlxGamepadModel_obj::WII_REMOTE_dyn();
            			}
            			break;
            			default:{
HXLINE( 415)				return ::flixel::input::gamepad::FlxGamepadModel_obj::UNKNOWN_dyn();
            			}
            		}
HXLINE( 408)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,getModelFromJoystick,return )

void FlxGamepadManager_obj::handleButtonDownEvent( ::openfl::_legacy::events::JoystickEvent event){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_421_handleButtonDownEvent)
HXDLIN( 421)		this->handleButtonDown(event->device,event->id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,handleButtonDownEvent,(void))

void FlxGamepadManager_obj::handleButtonDown(int device,int id){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_425_handleButtonDown)
HXLINE( 426)		 ::flixel::input::gamepad::FlxGamepadButton button = this->createByID(device,null())->getButton(id);
HXLINE( 427)		if (hx::IsNotNull( button )) {
HXLINE( 428)			button->press();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepadManager_obj,handleButtonDown,(void))

void FlxGamepadManager_obj::handleButtonUpEvent( ::openfl::_legacy::events::JoystickEvent event){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_433_handleButtonUpEvent)
HXDLIN( 433)		this->handleButtonUp(event->device,event->id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,handleButtonUpEvent,(void))

void FlxGamepadManager_obj::handleButtonUp(int device,int id){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_437_handleButtonUp)
HXLINE( 438)		 ::flixel::input::gamepad::FlxGamepadButton button = this->createByID(device,null())->getButton(id);
HXLINE( 439)		if (hx::IsNotNull( button )) {
HXLINE( 440)			button->release();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepadManager_obj,handleButtonUp,(void))

void FlxGamepadManager_obj::handleAxisMove( ::openfl::_legacy::events::JoystickEvent event){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_444_handleAxisMove)
HXLINE( 445)		int device = event->device;
HXLINE( 446)		 ::flixel::input::gamepad::FlxGamepad gamepad = this->createByID(device,null());
HXLINE( 448)		::Array< Float > oldAxis = gamepad->axis;
HXLINE( 449)		::Array< Float > newAxis = event->axis;
HXLINE( 451)		{
HXLINE( 451)			int _g1 = (int)0;
HXDLIN( 451)			int _g = newAxis->length;
HXDLIN( 451)			while((_g1 < _g)){
HXLINE( 451)				_g1 = (_g1 + (int)1);
HXDLIN( 451)				int i = (_g1 - (int)1);
HXLINE( 453)				bool isForStick = gamepad->isAxisForAnalogStick(i);
HXLINE( 454)				bool isForMotion = gamepad->mapping->isAxisForMotion(i);
HXLINE( 456)				bool _hx_tmp;
HXDLIN( 456)				if (!(isForStick)) {
HXLINE( 456)					_hx_tmp = !(isForMotion);
            				}
            				else {
HXLINE( 456)					_hx_tmp = false;
            				}
HXDLIN( 456)				if (_hx_tmp) {
HXLINE( 460)					newAxis[i] = ((Float)(newAxis->__get(i) + (int)1) / (Float)(int)2);
            				}
            				else {
HXLINE( 462)					if (isForStick) {
HXLINE( 464)						Float _hx_tmp1;
HXDLIN( 464)						bool _hx_tmp2;
HXDLIN( 464)						if ((i >= (int)0)) {
HXLINE( 464)							_hx_tmp2 = (i < oldAxis->length);
            						}
            						else {
HXLINE( 464)							_hx_tmp2 = false;
            						}
HXDLIN( 464)						if (_hx_tmp2) {
HXLINE( 464)							_hx_tmp1 = oldAxis->__get(i);
            						}
            						else {
HXLINE( 464)							_hx_tmp1 = (int)0;
            						}
HXDLIN( 464)						gamepad->handleAxisMove(i,newAxis->__get(i),_hx_tmp1);
            					}
            				}
            			}
            		}
HXLINE( 468)		gamepad->axis = newAxis;
HXLINE( 469)		gamepad->axisActive = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,handleAxisMove,(void))

void FlxGamepadManager_obj::copyToPointWithDeadzone( ::flixel::input::gamepad::FlxGamepad gamepad, ::flixel::math::FlxPoint point, ::openfl::_legacy::events::JoystickEvent event){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_473_copyToPointWithDeadzone)
HXLINE( 474)		Float _hx_tmp;
HXDLIN( 474)		Float _hx_tmp1 = ::Math_obj::abs(event->x);
HXDLIN( 474)		if ((_hx_tmp1 < gamepad->get_deadZone())) {
HXLINE( 474)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE( 474)			_hx_tmp = event->x;
            		}
HXDLIN( 474)		point->set_x(_hx_tmp);
HXLINE( 475)		Float _hx_tmp2;
HXDLIN( 475)		Float _hx_tmp3 = ::Math_obj::abs(event->y);
HXDLIN( 475)		if ((_hx_tmp3 < gamepad->get_deadZone())) {
HXLINE( 475)			_hx_tmp2 = (int)0;
            		}
            		else {
HXLINE( 475)			_hx_tmp2 = event->y;
            		}
HXDLIN( 475)		point->set_y(_hx_tmp2);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxGamepadManager_obj,copyToPointWithDeadzone,(void))

void FlxGamepadManager_obj::handleBallMove( ::openfl::_legacy::events::JoystickEvent event){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_479_handleBallMove)
HXLINE( 480)		 ::flixel::input::gamepad::FlxGamepad gamepad = this->createByID(event->device,null());
HXLINE( 481)		this->copyToPointWithDeadzone(gamepad,gamepad->ball,event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,handleBallMove,(void))

void FlxGamepadManager_obj::handleHatMove( ::openfl::_legacy::events::JoystickEvent event){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_485_handleHatMove)
HXLINE( 486)		int device = event->device;
HXLINE( 487)		 ::flixel::input::gamepad::FlxGamepad gamepad = this->createByID(device,null());
HXLINE( 489)		Float oldX = gamepad->hat->x;
HXLINE( 490)		Float oldY = gamepad->hat->y;
HXLINE( 492)		this->copyToPointWithDeadzone(gamepad,gamepad->hat,event);
HXLINE( 494)		this->checkDpadAxisChange(device,oldX,gamepad->hat->x,(int)13,(int)14);
HXLINE( 496)		this->checkDpadAxisChange(device,oldY,gamepad->hat->y,(int)11,(int)12);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,handleHatMove,(void))

void FlxGamepadManager_obj::checkDpadAxisChange(int device,Float oldValue,Float newValue,int negativeID,int positiveID){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_502_checkDpadAxisChange)
HXLINE( 503)		if ((oldValue == newValue)) {
HXLINE( 504)			return;
            		}
HXLINE( 506)		int rawNegativeID = this->createByID(device,null())->mapping->getRawID(negativeID);
HXLINE( 507)		int rawPositiveID = this->createByID(device,null())->mapping->getRawID(positiveID);
HXLINE( 509)		if ((oldValue == (int)-1)) {
HXLINE( 510)			this->handleButtonUp(device,rawNegativeID);
            		}
            		else {
HXLINE( 511)			if ((oldValue == (int)1)) {
HXLINE( 512)				this->handleButtonUp(device,rawPositiveID);
            			}
            		}
HXLINE( 514)		if ((newValue == (int)-1)) {
HXLINE( 515)			this->handleButtonDown(device,rawNegativeID);
            		}
            		else {
HXLINE( 516)			if ((newValue == (int)1)) {
HXLINE( 517)				this->handleButtonDown(device,rawPositiveID);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxGamepadManager_obj,checkDpadAxisChange,(void))

void FlxGamepadManager_obj::handleDeviceAdded( ::openfl::_legacy::events::JoystickEvent event){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_522_handleDeviceAdded)
HXDLIN( 522)		int event1 = event->device;
HXDLIN( 522)		this->createByID(event1,this->getModelFromJoystick(event->x));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,handleDeviceAdded,(void))

void FlxGamepadManager_obj::handleDeviceRemoved( ::openfl::_legacy::events::JoystickEvent event){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_527_handleDeviceRemoved)
HXDLIN( 527)		this->removeByID(event->device);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,handleDeviceRemoved,(void))

void FlxGamepadManager_obj::update(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_536_update)
HXDLIN( 536)		int _g = (int)0;
HXDLIN( 536)		::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 536)		while((_g < _g1->length)){
HXDLIN( 536)			 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 536)			_g = (_g + (int)1);
HXLINE( 537)			if (hx::IsNotNull( gamepad )) {
HXLINE( 538)				gamepad->update();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadManager_obj,update,(void))

void FlxGamepadManager_obj::onFocus(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_541_onFocus)
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadManager_obj,onFocus,(void))

void FlxGamepadManager_obj::onFocusLost(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_545_onFocusLost)
HXDLIN( 545)		this->reset();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadManager_obj,onFocusLost,(void))

int FlxGamepadManager_obj::get_numActiveGamepads(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_549_get_numActiveGamepads)
HXLINE( 550)		int count = (int)0;
HXLINE( 551)		{
HXLINE( 551)			int _g = (int)0;
HXDLIN( 551)			::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 551)			while((_g < _g1->length)){
HXLINE( 551)				 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 551)				_g = (_g + (int)1);
HXLINE( 552)				if (hx::IsNotNull( gamepad )) {
HXLINE( 553)					count = (count + (int)1);
            				}
            			}
            		}
HXLINE( 554)		return count;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadManager_obj,get_numActiveGamepads,return )


hx::ObjectPtr< FlxGamepadManager_obj > FlxGamepadManager_obj::__new() {
	hx::ObjectPtr< FlxGamepadManager_obj > __this = new FlxGamepadManager_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FlxGamepadManager_obj > FlxGamepadManager_obj::__alloc(hx::Ctx *_hx_ctx) {
	FlxGamepadManager_obj *__this = (FlxGamepadManager_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxGamepadManager_obj), true, "flixel.input.gamepad.FlxGamepadManager"));
	*(void **)__this = FlxGamepadManager_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxGamepadManager_obj::FlxGamepadManager_obj()
{
}

void FlxGamepadManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxGamepadManager);
	HX_MARK_MEMBER_NAME(firstActive,"firstActive");
	HX_MARK_MEMBER_NAME(lastActive,"lastActive");
	HX_MARK_MEMBER_NAME(numActiveGamepads,"numActiveGamepads");
	HX_MARK_MEMBER_NAME(globalDeadZone,"globalDeadZone");
	HX_MARK_MEMBER_NAME(_gamepads,"_gamepads");
	HX_MARK_MEMBER_NAME(_activeGamepads,"_activeGamepads");
	HX_MARK_END_CLASS();
}

void FlxGamepadManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(firstActive,"firstActive");
	HX_VISIT_MEMBER_NAME(lastActive,"lastActive");
	HX_VISIT_MEMBER_NAME(numActiveGamepads,"numActiveGamepads");
	HX_VISIT_MEMBER_NAME(globalDeadZone,"globalDeadZone");
	HX_VISIT_MEMBER_NAME(_gamepads,"_gamepads");
	HX_VISIT_MEMBER_NAME(_activeGamepads,"_activeGamepads");
}

hx::Val FlxGamepadManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getByID") ) { return hx::Val( getByID_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return hx::Val( onFocus_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"anyInput") ) { return hx::Val( anyInput_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_gamepads") ) { return hx::Val( _gamepads ); }
		if (HX_FIELD_EQ(inName,"anyButton") ) { return hx::Val( anyButton_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastActive") ) { return hx::Val( lastActive ); }
		if (HX_FIELD_EQ(inName,"removeByID") ) { return hx::Val( removeByID_dyn() ); }
		if (HX_FIELD_EQ(inName,"createByID") ) { return hx::Val( createByID_dyn() ); }
		if (HX_FIELD_EQ(inName,"anyPressed") ) { return hx::Val( anyPressed_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"firstActive") ) { return hx::Val( firstActive ); }
		if (HX_FIELD_EQ(inName,"anyHasState") ) { return hx::Val( anyHasState_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return hx::Val( onFocusLost_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"anyMovedXAxis") ) { return hx::Val( anyMovedXAxis_dyn() ); }
		if (HX_FIELD_EQ(inName,"anyMovedYAxis") ) { return hx::Val( anyMovedYAxis_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleHatMove") ) { return hx::Val( handleHatMove_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"globalDeadZone") ) { return hx::Val( globalDeadZone ); }
		if (HX_FIELD_EQ(inName,"anyJustPressed") ) { return hx::Val( anyJustPressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleButtonUp") ) { return hx::Val( handleButtonUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleAxisMove") ) { return hx::Val( handleAxisMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleBallMove") ) { return hx::Val( handleBallMove_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_activeGamepads") ) { return hx::Val( _activeGamepads ); }
		if (HX_FIELD_EQ(inName,"anyJustReleased") ) { return hx::Val( anyJustReleased_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"handleButtonDown") ) { return hx::Val( handleButtonDown_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"numActiveGamepads") ) { return hx::Val( inCallProp == hx::paccAlways ? get_numActiveGamepads() : numActiveGamepads ); }
		if (HX_FIELD_EQ(inName,"getActiveGamepads") ) { return hx::Val( getActiveGamepads_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleDeviceAdded") ) { return hx::Val( handleDeviceAdded_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getActiveGamepadIDs") ) { return hx::Val( getActiveGamepadIDs_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleButtonUpEvent") ) { return hx::Val( handleButtonUpEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkDpadAxisChange") ) { return hx::Val( checkDpadAxisChange_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleDeviceRemoved") ) { return hx::Val( handleDeviceRemoved_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getModelFromJoystick") ) { return hx::Val( getModelFromJoystick_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getFirstActiveGamepad") ) { return hx::Val( getFirstActiveGamepad_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleButtonDownEvent") ) { return hx::Val( handleButtonDownEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numActiveGamepads") ) { return hx::Val( get_numActiveGamepads_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getFirstActiveGamepadID") ) { return hx::Val( getFirstActiveGamepadID_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyToPointWithDeadzone") ) { return hx::Val( copyToPointWithDeadzone_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxGamepadManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_gamepads") ) { _gamepads=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastActive") ) { lastActive=inValue.Cast<  ::flixel::input::gamepad::FlxGamepad >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"firstActive") ) { firstActive=inValue.Cast<  ::flixel::input::gamepad::FlxGamepad >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"globalDeadZone") ) { globalDeadZone=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_activeGamepads") ) { _activeGamepads=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"numActiveGamepads") ) { numActiveGamepads=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxGamepadManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("firstActive","\x16","\x72","\xe8","\xfa"));
	outFields->push(HX_HCSTRING("lastActive","\xbc","\x24","\x21","\xe1"));
	outFields->push(HX_HCSTRING("numActiveGamepads","\x7e","\x81","\x36","\x4b"));
	outFields->push(HX_HCSTRING("globalDeadZone","\x73","\xc7","\x06","\xa4"));
	outFields->push(HX_HCSTRING("_gamepads","\x11","\xa4","\x34","\x13"));
	outFields->push(HX_HCSTRING("_activeGamepads","\x37","\x29","\x57","\x2d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxGamepadManager_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepad*/ ,(int)offsetof(FlxGamepadManager_obj,firstActive),HX_HCSTRING("firstActive","\x16","\x72","\xe8","\xfa")},
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepad*/ ,(int)offsetof(FlxGamepadManager_obj,lastActive),HX_HCSTRING("lastActive","\xbc","\x24","\x21","\xe1")},
	{hx::fsInt,(int)offsetof(FlxGamepadManager_obj,numActiveGamepads),HX_HCSTRING("numActiveGamepads","\x7e","\x81","\x36","\x4b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxGamepadManager_obj,globalDeadZone),HX_HCSTRING("globalDeadZone","\x73","\xc7","\x06","\xa4")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxGamepadManager_obj,_gamepads),HX_HCSTRING("_gamepads","\x11","\xa4","\x34","\x13")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxGamepadManager_obj,_activeGamepads),HX_HCSTRING("_activeGamepads","\x37","\x29","\x57","\x2d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxGamepadManager_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxGamepadManager_obj_sMemberFields[] = {
	HX_HCSTRING("firstActive","\x16","\x72","\xe8","\xfa"),
	HX_HCSTRING("lastActive","\xbc","\x24","\x21","\xe1"),
	HX_HCSTRING("numActiveGamepads","\x7e","\x81","\x36","\x4b"),
	HX_HCSTRING("globalDeadZone","\x73","\xc7","\x06","\xa4"),
	HX_HCSTRING("_gamepads","\x11","\xa4","\x34","\x13"),
	HX_HCSTRING("_activeGamepads","\x37","\x29","\x57","\x2d"),
	HX_HCSTRING("getByID","\x28","\xa9","\xa5","\x13"),
	HX_HCSTRING("removeByID","\xd6","\x33","\x42","\xbe"),
	HX_HCSTRING("createByID","\x8e","\xba","\xb0","\x53"),
	HX_HCSTRING("getActiveGamepadIDs","\x53","\xfc","\xe8","\xb1"),
	HX_HCSTRING("getActiveGamepads","\xce","\x8f","\x6a","\x56"),
	HX_HCSTRING("getFirstActiveGamepadID","\x7c","\xc1","\x52","\x55"),
	HX_HCSTRING("getFirstActiveGamepad","\x61","\x27","\x31","\xc9"),
	HX_HCSTRING("anyButton","\xfe","\xc9","\x3f","\x37"),
	HX_HCSTRING("anyInput","\x7e","\x21","\xd0","\x3c"),
	HX_HCSTRING("anyPressed","\x16","\x75","\x02","\x90"),
	HX_HCSTRING("anyJustPressed","\x4a","\xfa","\xb6","\xa6"),
	HX_HCSTRING("anyJustReleased","\x15","\x14","\x3a","\x40"),
	HX_HCSTRING("anyHasState","\x63","\x43","\x76","\x12"),
	HX_HCSTRING("anyMovedXAxis","\x12","\xce","\xe1","\x7b"),
	HX_HCSTRING("anyMovedYAxis","\x93","\x62","\x48","\x0f"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("getModelFromJoystick","\x19","\xbc","\x23","\xb9"),
	HX_HCSTRING("handleButtonDownEvent","\x3e","\x2d","\x73","\x9f"),
	HX_HCSTRING("handleButtonDown","\x3c","\x11","\x2b","\x7c"),
	HX_HCSTRING("handleButtonUpEvent","\x25","\x53","\xd4","\xf9"),
	HX_HCSTRING("handleButtonUp","\xb5","\xb4","\x09","\xaa"),
	HX_HCSTRING("handleAxisMove","\x1a","\xb8","\xcb","\xdd"),
	HX_HCSTRING("copyToPointWithDeadzone","\xb6","\x74","\xde","\xe8"),
	HX_HCSTRING("handleBallMove","\x78","\x84","\xd4","\x85"),
	HX_HCSTRING("handleHatMove","\x44","\x81","\x80","\xc3"),
	HX_HCSTRING("checkDpadAxisChange","\x28","\xb8","\x3e","\xa2"),
	HX_HCSTRING("handleDeviceAdded","\x82","\xed","\x91","\x09"),
	HX_HCSTRING("handleDeviceRemoved","\xe2","\x6c","\x97","\x62"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("onFocus","\x39","\xfe","\xc6","\x9a"),
	HX_HCSTRING("onFocusLost","\xbd","\xe4","\x85","\x41"),
	HX_HCSTRING("get_numActiveGamepads","\x55","\x84","\xe4","\xc9"),
	::String(null()) };

static void FlxGamepadManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxGamepadManager_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxGamepadManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxGamepadManager_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxGamepadManager_obj::__mClass;

void FlxGamepadManager_obj::__register()
{
	hx::Object *dummy = new FlxGamepadManager_obj;
	FlxGamepadManager_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.input.gamepad.FlxGamepadManager","\x3b","\x35","\x83","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxGamepadManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxGamepadManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxGamepadManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxGamepadManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxGamepadManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxGamepadManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace input
} // end namespace gamepad
