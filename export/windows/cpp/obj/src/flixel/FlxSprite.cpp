// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxTileFrames
#include <flixel/graphics/frames/FlxTileFrames.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxBitmapDataUtil
#include <flixel/util/FlxBitmapDataUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxColorTransformUtil
#include <flixel/util/FlxColorTransformUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_util_LabelValuePair
#include <flixel/util/FlxPool_flixel_util_LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BlendMode
#include <openfl/_legacy/display/BlendMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_ColorTransform
#include <openfl/_legacy/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cfd221447aa7194b_39_new,"flixel.FlxSprite","new",0x4dfa64d7,"flixel.FlxSprite.new","flixel/FlxSprite.hx",39,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_254_initVars,"flixel.FlxSprite","initVars",0x31793705,"flixel.FlxSprite.initVars","flixel/FlxSprite.hx",254,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_282_destroy,"flixel.FlxSprite","destroy",0x0fb5c8f1,"flixel.FlxSprite.destroy","flixel/FlxSprite.hx",282,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_312_clone,"flixel.FlxSprite","clone",0x3c30f394,"flixel.FlxSprite.clone","flixel/FlxSprite.hx",312,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_323_loadGraphicFromSprite,"flixel.FlxSprite","loadGraphicFromSprite",0xd0637b08,"flixel.FlxSprite.loadGraphicFromSprite","flixel/FlxSprite.hx",323,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_361_loadGraphic,"flixel.FlxSprite","loadGraphic",0x47377c99,"flixel.FlxSprite.loadGraphic","flixel/FlxSprite.hx",361,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_404_loadRotatedGraphic,"flixel.FlxSprite","loadRotatedGraphic",0xceb71e2e,"flixel.FlxSprite.loadRotatedGraphic","flixel/FlxSprite.hx",404,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_466_loadRotatedFrame,"flixel.FlxSprite","loadRotatedFrame",0xe0d52e33,"flixel.FlxSprite.loadRotatedFrame","flixel/FlxSprite.hx",466,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_502_makeGraphic,"flixel.FlxSprite","makeGraphic",0xbaa3e5d1,"flixel.FlxSprite.makeGraphic","flixel/FlxSprite.hx",502,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_511_graphicLoaded,"flixel.FlxSprite","graphicLoaded",0xacabf404,"flixel.FlxSprite.graphicLoaded","flixel/FlxSprite.hx",511,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_517_resetSize,"flixel.FlxSprite","resetSize",0x5d8771e7,"flixel.FlxSprite.resetSize","flixel/FlxSprite.hx",517,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_528_resetFrameSize,"flixel.FlxSprite","resetFrameSize",0xb7baa4a8,"flixel.FlxSprite.resetFrameSize","flixel/FlxSprite.hx",528,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_542_resetSizeFromFrame,"flixel.FlxSprite","resetSizeFromFrame",0xf893db7c,"flixel.FlxSprite.resetSizeFromFrame","flixel/FlxSprite.hx",542,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_555_resetFrame,"flixel.FlxSprite","resetFrame",0x02a6a847,"flixel.FlxSprite.resetFrame","flixel/FlxSprite.hx",555,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_566_setGraphicSize,"flixel.FlxSprite","setGraphicSize",0x516eb7f0,"flixel.FlxSprite.setGraphicSize","flixel/FlxSprite.hx",566,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_585_updateHitbox,"flixel.FlxSprite","updateHitbox",0x9470392a,"flixel.FlxSprite.updateHitbox","flixel/FlxSprite.hx",585,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_597_resetHelpers,"flixel.FlxSprite","resetHelpers",0x6fc22ddf,"flixel.FlxSprite.resetHelpers","flixel/FlxSprite.hx",597,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_619_update,"flixel.FlxSprite","update",0xe75bd5f2,"flixel.FlxSprite.update","flixel/FlxSprite.hx",619,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_629_updateAnimation,"flixel.FlxSprite","updateAnimation",0x7e6eaab2,"flixel.FlxSprite.updateAnimation","flixel/FlxSprite.hx",629,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_635_checkEmptyFrame,"flixel.FlxSprite","checkEmptyFrame",0xe3dea03f,"flixel.FlxSprite.checkEmptyFrame","flixel/FlxSprite.hx",635,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_643_draw,"flixel.FlxSprite","draw",0xe68b7fad,"flixel.FlxSprite.draw","flixel/FlxSprite.hx",643,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_677_drawSimple,"flixel.FlxSprite","drawSimple",0x0dc977bf,"flixel.FlxSprite.drawSimple","flixel/FlxSprite.hx",677,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_688_drawComplex,"flixel.FlxSprite","drawComplex",0xcf4c0e03,"flixel.FlxSprite.drawComplex","flixel/FlxSprite.hx",688,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_722_stamp,"flixel.FlxSprite","stamp",0x77d9503a,"flixel.FlxSprite.stamp","flixel/FlxSprite.hx",722,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_769_drawFrame,"flixel.FlxSprite","drawFrame",0x99d67540,"flixel.FlxSprite.drawFrame","flixel/FlxSprite.hx",769,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_790_centerOffsets,"flixel.FlxSprite","centerOffsets",0x583e0f62,"flixel.FlxSprite.centerOffsets","flixel/FlxSprite.hx",790,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_806_centerOrigin,"flixel.FlxSprite","centerOrigin",0x4cbae644,"flixel.FlxSprite.centerOrigin","flixel/FlxSprite.hx",806,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_819_replaceColor,"flixel.FlxSprite","replaceColor",0x7b700138,"flixel.FlxSprite.replaceColor","flixel/FlxSprite.hx",819,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_841_setColorTransform,"flixel.FlxSprite","setColorTransform",0xa09a3582,"flixel.FlxSprite.setColorTransform","flixel/FlxSprite.hx",841,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_853_updateColorTransform,"flixel.FlxSprite","updateColorTransform",0x79f9051b,"flixel.FlxSprite.updateColorTransform","flixel/FlxSprite.hx",853,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_876_pixelsOverlapPoint,"flixel.FlxSprite","pixelsOverlapPoint",0x4c878b7f,"flixel.FlxSprite.pixelsOverlapPoint","flixel/FlxSprite.hx",876,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_907_calcFrame,"flixel.FlxSprite","calcFrame",0xc4d45b0f,"flixel.FlxSprite.calcFrame","flixel/FlxSprite.hx",907,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_920_updateFramePixels,"flixel.FlxSprite","updateFramePixels",0x2cd43e68,"flixel.FlxSprite.updateFramePixels","flixel/FlxSprite.hx",920,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_970_getGraphicMidpoint,"flixel.FlxSprite","getGraphicMidpoint",0xc420be03,"flixel.FlxSprite.getGraphicMidpoint","flixel/FlxSprite.hx",970,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_984_isOnScreen,"flixel.FlxSprite","isOnScreen",0xb5403c5e,"flixel.FlxSprite.isOnScreen","flixel/FlxSprite.hx",984,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1035_isSimpleRender,"flixel.FlxSprite","isSimpleRender",0x6aa0d51b,"flixel.FlxSprite.isSimpleRender","flixel/FlxSprite.hx",1035,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1051_isSimpleRenderBlit,"flixel.FlxSprite","isSimpleRenderBlit",0x4bf362f0,"flixel.FlxSprite.isSimpleRenderBlit","flixel/FlxSprite.hx",1051,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1070_setFacingFlip,"flixel.FlxSprite","setFacingFlip",0x6816c060,"flixel.FlxSprite.setFacingFlip","flixel/FlxSprite.hx",1070,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1082_setFrames,"flixel.FlxSprite","setFrames",0xd774ec9f,"flixel.FlxSprite.setFrames","flixel/FlxSprite.hx",1082,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1119_get_pixels,"flixel.FlxSprite","get_pixels",0x90b8575f,"flixel.FlxSprite.get_pixels","flixel/FlxSprite.hx",1119,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1124_set_pixels,"flixel.FlxSprite","set_pixels",0x9435f5d3,"flixel.FlxSprite.set_pixels","flixel/FlxSprite.hx",1124,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1143_set_frame,"flixel.FlxSprite","set_frame",0xf8c58847,"flixel.FlxSprite.set_frame","flixel/FlxSprite.hx",1143,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1179_set_facing,"flixel.FlxSprite","set_facing",0xeb9145c0,"flixel.FlxSprite.set_facing","flixel/FlxSprite.hx",1179,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1192_set_alpha,"flixel.FlxSprite","set_alpha",0x13d8b778,"flixel.FlxSprite.set_alpha","flixel/FlxSprite.hx",1192,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1204_set_color,"flixel.FlxSprite","set_color",0x3c9e817d,"flixel.FlxSprite.set_color","flixel/FlxSprite.hx",1204,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1216_set_angle,"flixel.FlxSprite","set_angle",0x152453ed,"flixel.FlxSprite.set_angle","flixel/FlxSprite.hx",1216,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1230_updateTrig,"flixel.FlxSprite","updateTrig",0x193f7fee,"flixel.FlxSprite.updateTrig","flixel/FlxSprite.hx",1230,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1242_set_blend,"flixel.FlxSprite","set_blend",0xa736f86b,"flixel.FlxSprite.set_blend","flixel/FlxSprite.hx",1242,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1251_set_graphic,"flixel.FlxSprite","set_graphic",0x07012542,"flixel.FlxSprite.set_graphic","flixel/FlxSprite.hx",1251,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1269_set_clipRect,"flixel.FlxSprite","set_clipRect",0x60020c3a,"flixel.FlxSprite.set_clipRect","flixel/FlxSprite.hx",1269,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1290_set_frames,"flixel.FlxSprite","set_frames",0xb411b64c,"flixel.FlxSprite.set_frames","flixel/FlxSprite.hx",1290,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1320_set_flipX,"flixel.FlxSprite","set_flipX",0xf4d45525,"flixel.FlxSprite.set_flipX","flixel/FlxSprite.hx",1320,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1331_set_flipY,"flixel.FlxSprite","set_flipY",0xf4d45526,"flixel.FlxSprite.set_flipY","flixel/FlxSprite.hx",1331,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1343_set_antialiasing,"flixel.FlxSprite","set_antialiasing",0xf8f29e1a,"flixel.FlxSprite.set_antialiasing","flixel/FlxSprite.hx",1343,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1349_set_useFramePixels,"flixel.FlxSprite","set_useFramePixels",0x72e62ad9,"flixel.FlxSprite.set_useFramePixels","flixel/FlxSprite.hx",1349,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1373_checkFlipX,"flixel.FlxSprite","checkFlipX",0x26093f8c,"flixel.FlxSprite.checkFlipX","flixel/FlxSprite.hx",1373,0x0384bffa)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd221447aa7194b_1384_checkFlipY,"flixel.FlxSprite","checkFlipY",0x26093f8d,"flixel.FlxSprite.checkFlipY","flixel/FlxSprite.hx",1384,0x0384bffa)
namespace flixel{

void FlxSprite_obj::__construct( ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic SimpleGraphic){
 ::Dynamic X = __o_X.Default(0);
 ::Dynamic Y = __o_Y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_cfd221447aa7194b_39_new)
HXLINE( 232)		this->_facingFlip =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 227)		this->_angleChanged = true;
HXLINE( 225)		this->_cosAngle = ((Float)1);
HXLINE( 223)		this->_sinAngle = ((Float)0);
HXLINE( 184)		this->_facingVerticalMult = (int)1;
HXLINE( 182)		this->_facingHorizontalMult = (int)1;
HXLINE( 151)		this->useColorTransform = false;
HXLINE( 144)		this->color = (int)16777215;
HXLINE( 117)		this->flipY = false;
HXLINE( 113)		this->flipX = false;
HXLINE( 109)		this->facing = (int)16;
HXLINE( 104)		this->alpha = ((Float)1.0);
HXLINE( 100)		this->bakedRotationAngle = ((Float)0);
HXLINE(  90)		this->numFrames = (int)0;
HXLINE(  85)		this->frameHeight = (int)0;
HXLINE(  81)		this->frameWidth = (int)0;
HXLINE(  67)		this->dirty = true;
HXLINE(  62)		this->antialiasing = false;
HXLINE(  57)		this->useFramePixels = true;
HXLINE( 245)		super::__construct(X,Y,null(),null());
HXLINE( 247)		this->set_useFramePixels(::flixel::FlxG_obj::renderBlit);
HXLINE( 248)		if (hx::IsNotNull( SimpleGraphic )) {
HXLINE( 249)			this->loadGraphic(SimpleGraphic,null(),null(),null(),null(),null());
            		}
            	}

Dynamic FlxSprite_obj::__CreateEmpty() { return new FlxSprite_obj; }

void *FlxSprite_obj::_hx_vtable = 0;

Dynamic FlxSprite_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxSprite_obj > _hx_result = new FlxSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool FlxSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115;
	}
}

void FlxSprite_obj::initVars(){
            	HX_GC_STACKFRAME(&_hx_pos_cfd221447aa7194b_254_initVars)
HXLINE( 255)		this->super::initVars();
HXLINE( 257)		this->animation =  ::flixel::animation::FlxAnimationController_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 259)		this->_flashPoint =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 260)		this->_flashRect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 261)		this->_flashRect2 =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 262)		this->_flashPointZero =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 263)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 263)		point->_inPool = false;
HXDLIN( 263)		this->offset = point;
HXLINE( 264)		 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 264)		point1->_inPool = false;
HXDLIN( 264)		this->origin = point1;
HXLINE( 265)		 ::flixel::math::FlxPoint point2 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)1,(int)1);
HXDLIN( 265)		point2->_inPool = false;
HXDLIN( 265)		this->scale = point2;
HXLINE( 266)		 ::flixel::math::FlxPoint point3 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 266)		point3->_inPool = false;
HXDLIN( 266)		this->_halfSize = point3;
HXLINE( 267)		this->_matrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 268)		this->colorTransform =  ::openfl::_legacy::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            	}


void FlxSprite_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_282_destroy)
HXLINE( 283)		this->super::destroy();
HXLINE( 285)		this->animation = ( ( ::flixel::animation::FlxAnimationController)(::flixel::util::FlxDestroyUtil_obj::destroy(this->animation)) );
HXLINE( 287)		this->offset = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->offset)) );
HXLINE( 288)		this->origin = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->origin)) );
HXLINE( 289)		this->scale = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->scale)) );
HXLINE( 290)		this->_halfSize = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->_halfSize)) );
HXLINE( 292)		this->framePixels = ::flixel::util::FlxDestroyUtil_obj::dispose(this->framePixels);
HXLINE( 294)		this->_flashPoint = null();
HXLINE( 295)		this->_flashRect = null();
HXLINE( 296)		this->_flashRect2 = null();
HXLINE( 297)		this->_flashPointZero = null();
HXLINE( 298)		this->_matrix = null();
HXLINE( 299)		this->colorTransform = null();
HXLINE( 300)		this->set_blend(null());
HXLINE( 302)		this->set_frames(null());
HXLINE( 303)		this->set_graphic(null());
HXLINE( 304)		this->_frame = ( ( ::flixel::graphics::frames::FlxFrame)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_frame)) );
HXLINE( 305)		this->_frameGraphic = ( ( ::flixel::graphics::FlxGraphic)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_frameGraphic)) );
HXLINE( 307)		this->shader = null();
            	}


 ::flixel::FlxSprite FlxSprite_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_cfd221447aa7194b_312_clone)
HXDLIN( 312)		return  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->loadGraphicFromSprite(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,clone,return )

 ::flixel::FlxSprite FlxSprite_obj::loadGraphicFromSprite( ::flixel::FlxSprite Sprite){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_323_loadGraphicFromSprite)
HXLINE( 324)		this->set_frames(Sprite->frames);
HXLINE( 325)		this->bakedRotationAngle = Sprite->bakedRotationAngle;
HXLINE( 326)		if ((this->bakedRotationAngle > (int)0)) {
HXLINE( 328)			this->set_width(Sprite->get_width());
HXLINE( 329)			this->set_height(Sprite->get_height());
HXLINE( 330)			this->centerOffsets(null());
            		}
HXLINE( 332)		this->set_antialiasing(Sprite->antialiasing);
HXLINE( 333)		this->animation->copyFrom(Sprite->animation);
HXLINE( 334)		this->graphicLoaded();
HXLINE( 335)		this->set_clipRect(Sprite->clipRect);
HXLINE( 336)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,loadGraphicFromSprite,return )

 ::flixel::FlxSprite FlxSprite_obj::loadGraphic( ::Dynamic Graphic,hx::Null< bool >  __o_Animated,hx::Null< int >  __o_Width,hx::Null< int >  __o_Height,hx::Null< bool >  __o_Unique,::String Key){
bool Animated = __o_Animated.Default(false);
int Width = __o_Width.Default(0);
int Height = __o_Height.Default(0);
bool Unique = __o_Unique.Default(false);
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_361_loadGraphic)
HXLINE( 362)		 ::flixel::graphics::FlxGraphic graph = ::flixel::FlxG_obj::bitmap->add(Graphic,Unique,Key);
HXLINE( 363)		if (hx::IsNull( graph )) {
HXLINE( 364)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 366)		if ((Width == (int)0)) {
HXLINE( 368)			if (Animated) {
HXLINE( 368)				Width = graph->height;
            			}
            			else {
HXLINE( 368)				Width = graph->width;
            			}
HXLINE( 369)			if ((Width > graph->width)) {
HXLINE( 369)				Width = graph->width;
            			}
            			else {
HXLINE( 369)				Width = Width;
            			}
            		}
HXLINE( 372)		if ((Height == (int)0)) {
HXLINE( 374)			if (Animated) {
HXLINE( 374)				Height = Width;
            			}
            			else {
HXLINE( 374)				Height = graph->height;
            			}
HXLINE( 375)			if ((Height > graph->height)) {
HXLINE( 375)				Height = graph->height;
            			}
            			else {
HXLINE( 375)				Height = Height;
            			}
            		}
HXLINE( 378)		if (Animated) {
HXLINE( 379)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(Width,Height);
HXDLIN( 379)			point->_inPool = false;
HXDLIN( 379)			this->set_frames(::flixel::graphics::frames::FlxTileFrames_obj::fromGraphic(graph,point,null(),null()));
            		}
            		else {
HXLINE( 381)			this->set_frames(graph->get_imageFrame());
            		}
HXLINE( 383)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxSprite_obj,loadGraphic,return )

 ::flixel::FlxSprite FlxSprite_obj::loadRotatedGraphic( ::Dynamic Graphic,hx::Null< int >  __o_Rotations,hx::Null< int >  __o_Frame,hx::Null< bool >  __o_AntiAliasing,hx::Null< bool >  __o_AutoBuffer,::String Key){
int Rotations = __o_Rotations.Default(16);
int Frame = __o_Frame.Default(-1);
bool AntiAliasing = __o_AntiAliasing.Default(false);
bool AutoBuffer = __o_AutoBuffer.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_cfd221447aa7194b_404_loadRotatedGraphic)
HXLINE( 405)		 ::flixel::graphics::FlxGraphic brushGraphic = ::flixel::FlxG_obj::bitmap->add(Graphic,false,Key);
HXLINE( 406)		if (hx::IsNull( brushGraphic )) {
HXLINE( 407)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 409)		 ::openfl::_legacy::display::BitmapData brush = brushGraphic->bitmap;
HXLINE( 410)		::String key = brushGraphic->key;
HXLINE( 412)		if ((Frame >= (int)0)) {
HXLINE( 415)			int brushSize = brush->get_height();
HXLINE( 416)			int framesNum = ::Std_obj::_hx_int(((Float)brush->get_width() / (Float)brushSize));
HXLINE( 417)			if ((framesNum > Frame)) {
HXLINE( 417)				Frame = Frame;
            			}
            			else {
HXLINE( 417)				Frame = hx::Mod(Frame,framesNum);
            			}
HXLINE( 418)			key = (key + (HX_(":",3a,00,00,00) + Frame));
HXLINE( 420)			 ::openfl::_legacy::display::BitmapData full = brush;
HXLINE( 421)			brush =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,brushSize,brushSize,true,(int)0,null());
HXLINE( 422)			 ::openfl::_legacy::geom::Rectangle _hx_tmp = this->_flashRect;
HXDLIN( 422)			_hx_tmp->setTo((Frame * brushSize),(int)0,brushSize,brushSize);
HXLINE( 423)			brush->copyPixels(full,this->_flashRect,this->_flashPointZero,null(),null(),null());
            		}
HXLINE( 426)		key = (key + (((HX_(":",3a,00,00,00) + Rotations) + HX_(":",3a,00,00,00)) + ::Std_obj::string(AutoBuffer)));
HXLINE( 429)		 ::flixel::graphics::FlxGraphic tempGraph = ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,key)) );
HXLINE( 430)		if (hx::IsNull( tempGraph )) {
HXLINE( 432)			 ::openfl::_legacy::display::BitmapData bitmap = ::flixel::util::FlxBitmapDataUtil_obj::generateRotations(brush,Rotations,AntiAliasing,AutoBuffer);
HXLINE( 433)			tempGraph = ::flixel::graphics::FlxGraphic_obj::fromBitmapData(bitmap,false,key,null());
            		}
HXLINE( 436)		int max;
HXDLIN( 436)		int max1 = brush->get_height();
HXDLIN( 436)		if ((max1 > brush->get_width())) {
HXLINE( 436)			max = brush->get_height();
            		}
            		else {
HXLINE( 436)			max = brush->get_width();
            		}
HXLINE( 437)		if (AutoBuffer) {
HXLINE( 437)			max = ::Std_obj::_hx_int((max * ((Float)1.5)));
            		}
            		else {
HXLINE( 437)			max = max;
            		}
HXLINE( 439)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(max,max);
HXDLIN( 439)		point->_inPool = false;
HXDLIN( 439)		this->set_frames(::flixel::graphics::frames::FlxTileFrames_obj::fromGraphic(tempGraph,point,null(),null()));
HXLINE( 441)		if (AutoBuffer) {
HXLINE( 443)			this->set_width(brush->get_width());
HXLINE( 444)			this->set_height(brush->get_height());
HXLINE( 445)			this->centerOffsets(null());
            		}
HXLINE( 448)		this->bakedRotationAngle = ((Float)(int)360 / (Float)Rotations);
HXLINE( 449)		this->animation->createPrerotated(null());
HXLINE( 450)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxSprite_obj,loadRotatedGraphic,return )

 ::flixel::FlxSprite FlxSprite_obj::loadRotatedFrame( ::flixel::graphics::frames::FlxFrame Frame,hx::Null< int >  __o_Rotations,hx::Null< bool >  __o_AntiAliasing,hx::Null< bool >  __o_AutoBuffer){
int Rotations = __o_Rotations.Default(16);
bool AntiAliasing = __o_AntiAliasing.Default(false);
bool AutoBuffer = __o_AutoBuffer.Default(false);
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_466_loadRotatedFrame)
HXLINE( 467)		::String key = Frame->parent->key;
HXLINE( 468)		if (hx::IsNotNull( Frame->name )) {
HXLINE( 469)			key = (key + (HX_(":",3a,00,00,00) + Frame->name));
            		}
            		else {
HXLINE( 471)			 ::flixel::math::FlxRect _this = Frame->frame;
HXDLIN( 471)			 ::Dynamic value = _this->x;
HXDLIN( 471)			 ::flixel::util::LabelValuePair _this1 = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 471)			_this1->label = HX_("x",78,00,00,00);
HXDLIN( 471)			_this1->value = value;
HXDLIN( 471)			 ::flixel::util::LabelValuePair key1 = _this1;
HXDLIN( 471)			 ::Dynamic value1 = _this->y;
HXDLIN( 471)			 ::flixel::util::LabelValuePair _this2 = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 471)			_this2->label = HX_("y",79,00,00,00);
HXDLIN( 471)			_this2->value = value1;
HXDLIN( 471)			 ::flixel::util::LabelValuePair key2 = _this2;
HXDLIN( 471)			 ::Dynamic value2 = _this->width;
HXDLIN( 471)			 ::flixel::util::LabelValuePair _this3 = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 471)			_this3->label = HX_("w",77,00,00,00);
HXDLIN( 471)			_this3->value = value2;
HXDLIN( 471)			 ::flixel::util::LabelValuePair key3 = _this3;
HXDLIN( 471)			 ::Dynamic value3 = _this->height;
HXDLIN( 471)			 ::flixel::util::LabelValuePair _this4 = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 471)			_this4->label = HX_("h",68,00,00,00);
HXDLIN( 471)			_this4->value = value3;
HXDLIN( 471)			key = (key + (HX_(":",3a,00,00,00) + ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(4)->init(0,key1)->init(1,key2)->init(2,key3)->init(3,_this4))));
            		}
HXLINE( 473)		 ::flixel::graphics::FlxGraphic graphic = ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,key)) );
HXLINE( 474)		if (hx::IsNull( graphic )) {
HXLINE( 475)			graphic = ::flixel::graphics::FlxGraphic_obj::fromBitmapData(Frame->paint(null(),null(),null(),null()),false,key,null());
            		}
HXLINE( 477)		return this->loadRotatedGraphic(graphic,Rotations,(int)-1,AntiAliasing,AutoBuffer,null());
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxSprite_obj,loadRotatedFrame,return )

 ::flixel::FlxSprite FlxSprite_obj::makeGraphic(int Width,int Height,hx::Null< int >  __o_Color,hx::Null< bool >  __o_Unique,::String Key){
int Color = __o_Color.Default(-1);
bool Unique = __o_Unique.Default(false);
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_502_makeGraphic)
HXLINE( 503)		 ::flixel::graphics::FlxGraphic graph = ::flixel::FlxG_obj::bitmap->create(Width,Height,Color,Unique,Key);
HXLINE( 504)		this->set_frames(graph->get_imageFrame());
HXLINE( 505)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxSprite_obj,makeGraphic,return )

void FlxSprite_obj::graphicLoaded(){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_511_graphicLoaded)
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,graphicLoaded,(void))

void FlxSprite_obj::resetSize(){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_517_resetSize)
HXLINE( 518)		this->_flashRect->x = (int)0;
HXLINE( 519)		this->_flashRect->y = (int)0;
HXLINE( 520)		this->_flashRect->width = this->frameWidth;
HXLINE( 521)		this->_flashRect->height = this->frameHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,resetSize,(void))

void FlxSprite_obj::resetFrameSize(){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_528_resetFrameSize)
HXLINE( 529)		if (hx::IsNotNull( this->frame )) {
HXLINE( 531)			this->frameWidth = ::Std_obj::_hx_int(this->frame->sourceSize->x);
HXLINE( 532)			this->frameHeight = ::Std_obj::_hx_int(this->frame->sourceSize->y);
            		}
HXLINE( 534)		 ::flixel::math::FlxPoint _hx_tmp = this->_halfSize;
HXDLIN( 534)		Float _hx_tmp1 = (((Float)0.5) * this->frameWidth);
HXDLIN( 534)		_hx_tmp->set(_hx_tmp1,(((Float)0.5) * this->frameHeight));
HXLINE( 535)		{
HXLINE( 535)			this->_flashRect->x = (int)0;
HXDLIN( 535)			this->_flashRect->y = (int)0;
HXDLIN( 535)			this->_flashRect->width = this->frameWidth;
HXDLIN( 535)			this->_flashRect->height = this->frameHeight;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,resetFrameSize,(void))

void FlxSprite_obj::resetSizeFromFrame(){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_542_resetSizeFromFrame)
HXLINE( 543)		this->set_width(this->frameWidth);
HXLINE( 544)		this->set_height(this->frameHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,resetSizeFromFrame,(void))

void FlxSprite_obj::resetFrame(){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_555_resetFrame)
HXDLIN( 555)		this->set_frame(this->frame);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,resetFrame,(void))

void FlxSprite_obj::setGraphicSize(hx::Null< int >  __o_Width,hx::Null< int >  __o_Height){
int Width = __o_Width.Default(0);
int Height = __o_Height.Default(0);
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_566_setGraphicSize)
HXLINE( 567)		bool _hx_tmp;
HXDLIN( 567)		if ((Width <= (int)0)) {
HXLINE( 567)			_hx_tmp = (Height <= (int)0);
            		}
            		else {
HXLINE( 567)			_hx_tmp = false;
            		}
HXDLIN( 567)		if (_hx_tmp) {
HXLINE( 568)			return;
            		}
HXLINE( 570)		Float newScaleX = ((Float)Width / (Float)this->frameWidth);
HXLINE( 571)		Float newScaleY = ((Float)Height / (Float)this->frameHeight);
HXLINE( 572)		this->scale->set(newScaleX,newScaleY);
HXLINE( 574)		if ((Width <= (int)0)) {
HXLINE( 575)			this->scale->set_x(newScaleY);
            		}
            		else {
HXLINE( 576)			if ((Height <= (int)0)) {
HXLINE( 577)				this->scale->set_y(newScaleX);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxSprite_obj,setGraphicSize,(void))

void FlxSprite_obj::updateHitbox(){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_585_updateHitbox)
HXLINE( 586)		this->set_width((::Math_obj::abs(this->scale->x) * this->frameWidth));
HXLINE( 587)		this->set_height((::Math_obj::abs(this->scale->y) * this->frameHeight));
HXLINE( 588)		 ::flixel::math::FlxPoint _hx_tmp = this->offset;
HXDLIN( 588)		Float _hx_tmp1 = this->get_width();
HXDLIN( 588)		Float _hx_tmp2 = (((Float)-0.5) * (_hx_tmp1 - this->frameWidth));
HXDLIN( 588)		Float _hx_tmp3 = this->get_height();
HXDLIN( 588)		_hx_tmp->set(_hx_tmp2,(((Float)-0.5) * (_hx_tmp3 - this->frameHeight)));
HXLINE( 589)		 ::flixel::math::FlxPoint _hx_tmp4 = this->origin;
HXDLIN( 589)		Float _hx_tmp5 = (this->frameWidth * ((Float)0.5));
HXDLIN( 589)		_hx_tmp4->set(_hx_tmp5,(this->frameHeight * ((Float)0.5)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,updateHitbox,(void))

void FlxSprite_obj::resetHelpers(){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_597_resetHelpers)
HXLINE( 598)		{
HXLINE( 598)			if (hx::IsNotNull( this->frame )) {
HXLINE( 598)				this->frameWidth = ::Std_obj::_hx_int(this->frame->sourceSize->x);
HXDLIN( 598)				this->frameHeight = ::Std_obj::_hx_int(this->frame->sourceSize->y);
            			}
HXDLIN( 598)			 ::flixel::math::FlxPoint _hx_tmp = this->_halfSize;
HXDLIN( 598)			Float _hx_tmp1 = (((Float)0.5) * this->frameWidth);
HXDLIN( 598)			_hx_tmp->set(_hx_tmp1,(((Float)0.5) * this->frameHeight));
HXDLIN( 598)			{
HXLINE( 598)				this->_flashRect->x = (int)0;
HXDLIN( 598)				this->_flashRect->y = (int)0;
HXDLIN( 598)				this->_flashRect->width = this->frameWidth;
HXDLIN( 598)				this->_flashRect->height = this->frameHeight;
            			}
            		}
HXLINE( 599)		{
HXLINE( 599)			this->set_width(this->frameWidth);
HXDLIN( 599)			this->set_height(this->frameHeight);
            		}
HXLINE( 600)		this->_flashRect2->x = (int)0;
HXLINE( 601)		this->_flashRect2->y = (int)0;
HXLINE( 603)		if (hx::IsNotNull( this->graphic )) {
HXLINE( 605)			this->_flashRect2->width = this->graphic->width;
HXLINE( 606)			this->_flashRect2->height = this->graphic->height;
            		}
HXLINE( 609)		 ::flixel::math::FlxPoint _hx_tmp2 = this->origin;
HXDLIN( 609)		Float _hx_tmp3 = (this->frameWidth * ((Float)0.5));
HXDLIN( 609)		_hx_tmp2->set(_hx_tmp3,(this->frameHeight * ((Float)0.5)));
HXLINE( 611)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 613)			this->dirty = true;
HXLINE( 614)			this->updateFramePixels();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,resetHelpers,(void))

void FlxSprite_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_619_update)
HXLINE( 620)		this->super::update(elapsed);
HXLINE( 621)		this->updateAnimation(elapsed);
            	}


void FlxSprite_obj::updateAnimation(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_629_updateAnimation)
HXDLIN( 629)		this->animation->update(elapsed);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,updateAnimation,(void))

void FlxSprite_obj::checkEmptyFrame(){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_635_checkEmptyFrame)
HXDLIN( 635)		if (hx::IsNull( this->_frame )) {
HXLINE( 636)			this->loadGraphic(HX_("flixel/images/logo/default.png",1c,39,3e,0e),null(),null(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,checkEmptyFrame,(void))

void FlxSprite_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_643_draw)
HXLINE( 644)		this->checkEmptyFrame();
HXLINE( 646)		bool _hx_tmp;
HXDLIN( 646)		if ((this->alpha != (int)0)) {
HXLINE( 646)			_hx_tmp = (this->_frame->type == (int)2);
            		}
            		else {
HXLINE( 646)			_hx_tmp = true;
            		}
HXDLIN( 646)		if (_hx_tmp) {
HXLINE( 647)			return;
            		}
HXLINE( 649)		if (this->dirty) {
HXLINE( 650)			this->calcFrame(this->useFramePixels);
            		}
HXLINE( 652)		{
HXLINE( 652)			int _g = (int)0;
HXDLIN( 652)			::Array< ::Dynamic> _g1 = this->get_cameras();
HXDLIN( 652)			while((_g < _g1->length)){
HXLINE( 652)				 ::flixel::FlxCamera camera = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 652)				_g = (_g + (int)1);
HXLINE( 654)				bool _hx_tmp1;
HXDLIN( 654)				bool _hx_tmp2;
HXDLIN( 654)				if (!(!(camera->visible))) {
HXLINE( 654)					_hx_tmp2 = !(camera->exists);
            				}
            				else {
HXLINE( 654)					_hx_tmp2 = true;
            				}
HXDLIN( 654)				if (!(_hx_tmp2)) {
HXLINE( 654)					_hx_tmp1 = !(this->isOnScreen(camera));
            				}
            				else {
HXLINE( 654)					_hx_tmp1 = true;
            				}
HXDLIN( 654)				if (_hx_tmp1) {
HXLINE( 655)					continue;
            				}
HXLINE( 657)				this->getScreenPosition(this->_point,camera)->subtractPoint(this->offset);
HXLINE( 659)				if (this->isSimpleRender(camera)) {
HXLINE( 660)					this->drawSimple(camera);
            				}
            				else {
HXLINE( 662)					this->drawComplex(camera);
            				}
HXLINE( 665)				::flixel::FlxBasic_obj::visibleCount++;
            			}
            		}
HXLINE( 670)		if (::flixel::FlxG_obj::debugger->drawDebug) {
HXLINE( 671)			this->drawDebug();
            		}
            	}


void FlxSprite_obj::drawSimple( ::flixel::FlxCamera camera){
            	HX_GC_STACKFRAME(&_hx_pos_cfd221447aa7194b_677_drawSimple)
HXLINE( 678)		if (this->isPixelPerfectRender(camera)) {
HXLINE( 679)			 ::flixel::math::FlxPoint _this = this->_point;
HXDLIN( 679)			_this->set_x(::Math_obj::floor(_this->x));
HXDLIN( 679)			_this->set_y(::Math_obj::floor(_this->y));
            		}
HXLINE( 681)		{
HXLINE( 681)			 ::flixel::math::FlxPoint _this1 = this->_point;
HXDLIN( 681)			 ::openfl::_legacy::geom::Point FlashPoint = this->_flashPoint;
HXDLIN( 681)			if (hx::IsNull( FlashPoint )) {
HXLINE( 681)				FlashPoint =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            			}
HXDLIN( 681)			FlashPoint->x = _this1->x;
HXDLIN( 681)			FlashPoint->y = _this1->y;
            		}
HXLINE( 682)		camera->copyPixels(this->_frame,this->framePixels,this->_flashRect,this->_flashPoint,this->colorTransform,this->blend,this->antialiasing,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,drawSimple,(void))

void FlxSprite_obj::drawComplex( ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_688_drawComplex)
HXLINE( 689)		bool doFlipX = (this->flipX != this->_frame->flipX);
HXDLIN( 689)		bool _hx_tmp;
HXDLIN( 689)		if (hx::IsNotNull( this->animation->_curAnim )) {
HXLINE( 689)			_hx_tmp = (doFlipX != this->animation->_curAnim->flipX);
            		}
            		else {
HXLINE( 689)			_hx_tmp = doFlipX;
            		}
HXDLIN( 689)		bool doFlipY = (this->flipY != this->_frame->flipY);
HXDLIN( 689)		bool _hx_tmp1;
HXDLIN( 689)		if (hx::IsNotNull( this->animation->_curAnim )) {
HXLINE( 689)			_hx_tmp1 = (doFlipY != this->animation->_curAnim->flipY);
            		}
            		else {
HXLINE( 689)			_hx_tmp1 = doFlipY;
            		}
HXDLIN( 689)		this->_frame->prepareMatrix(this->_matrix,(int)0,_hx_tmp,_hx_tmp1);
HXLINE( 690)		this->_matrix->translate(-(this->origin->x),-(this->origin->y));
HXLINE( 691)		this->_matrix->scale(this->scale->x,this->scale->y);
HXLINE( 693)		if ((this->bakedRotationAngle <= (int)0)) {
HXLINE( 695)			if (this->_angleChanged) {
HXLINE( 695)				Float radians = this->angle;
HXDLIN( 695)				Float radians1 = (radians * ((Float)::Math_obj::PI / (Float)(int)180));
HXDLIN( 695)				this->_sinAngle = ::Math_obj::sin(radians1);
HXDLIN( 695)				this->_cosAngle = ::Math_obj::cos(radians1);
HXDLIN( 695)				this->_angleChanged = false;
            			}
HXLINE( 697)			if ((this->angle != (int)0)) {
HXLINE( 698)				 ::flixel::math::FlxMatrix _this = this->_matrix;
HXDLIN( 698)				Float cos = this->_cosAngle;
HXDLIN( 698)				Float sin = this->_sinAngle;
HXDLIN( 698)				Float a1 = (_this->a * cos);
HXDLIN( 698)				Float a11 = (a1 - (_this->b * sin));
HXDLIN( 698)				Float _hx_tmp2 = (_this->a * sin);
HXDLIN( 698)				_this->b = (_hx_tmp2 + (_this->b * cos));
HXDLIN( 698)				_this->a = a11;
HXDLIN( 698)				Float c1 = (_this->c * cos);
HXDLIN( 698)				Float c11 = (c1 - (_this->d * sin));
HXDLIN( 698)				Float _hx_tmp3 = (_this->c * sin);
HXDLIN( 698)				_this->d = (_hx_tmp3 + (_this->d * cos));
HXDLIN( 698)				_this->c = c11;
HXDLIN( 698)				Float tx1 = (_this->tx * cos);
HXDLIN( 698)				Float tx11 = (tx1 - (_this->ty * sin));
HXDLIN( 698)				Float _hx_tmp4 = (_this->tx * sin);
HXDLIN( 698)				_this->ty = (_hx_tmp4 + (_this->ty * cos));
HXDLIN( 698)				_this->tx = tx11;
            			}
            		}
HXLINE( 701)		{
HXLINE( 701)			 ::flixel::math::FlxPoint _this1 = this->_point;
HXDLIN( 701)			Float Y = this->origin->y;
HXDLIN( 701)			{
HXLINE( 701)				 ::flixel::math::FlxPoint _g = _this1;
HXDLIN( 701)				_g->set_x((_g->x + this->origin->x));
            			}
HXDLIN( 701)			{
HXLINE( 701)				 ::flixel::math::FlxPoint _g1 = _this1;
HXDLIN( 701)				_g1->set_y((_g1->y + Y));
            			}
            		}
HXLINE( 702)		this->_matrix->translate(this->_point->x,this->_point->y);
HXLINE( 704)		if (this->isPixelPerfectRender(camera)) {
HXLINE( 706)			this->_matrix->tx = ::Math_obj::floor(this->_matrix->tx);
HXLINE( 707)			this->_matrix->ty = ::Math_obj::floor(this->_matrix->ty);
            		}
HXLINE( 710)		camera->drawPixels(this->_frame,this->framePixels,this->_matrix,this->colorTransform,this->blend,this->antialiasing,this->shader);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,drawComplex,(void))

void FlxSprite_obj::stamp( ::flixel::FlxSprite Brush,hx::Null< int >  __o_X,hx::Null< int >  __o_Y){
int X = __o_X.Default(0);
int Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_722_stamp)
HXLINE( 723)		Brush->drawFrame(null());
HXLINE( 725)		bool _hx_tmp;
HXDLIN( 725)		if (hx::IsNotNull( this->graphic )) {
HXLINE( 725)			_hx_tmp = hx::IsNull( Brush->graphic );
            		}
            		else {
HXLINE( 725)			_hx_tmp = true;
            		}
HXDLIN( 725)		if (_hx_tmp) {
HXLINE( 726)			HX_STACK_DO_THROW(HX_("Cannot stamp to or from a FlxSprite with no graphics.",72,0b,d4,aa));
            		}
HXLINE( 728)		 ::openfl::_legacy::display::BitmapData bitmapData = Brush->framePixels;
HXLINE( 730)		if (this->isSimpleRenderBlit(null())) {
HXLINE( 732)			this->_flashPoint->x = (X + this->frame->frame->x);
HXLINE( 733)			this->_flashPoint->y = (Y + this->frame->frame->y);
HXLINE( 734)			this->_flashRect2->width = bitmapData->get_width();
HXLINE( 735)			this->_flashRect2->height = bitmapData->get_height();
HXLINE( 736)			this->graphic->bitmap->copyPixels(bitmapData,this->_flashRect2,this->_flashPoint,null(),null(),true);
HXLINE( 737)			this->_flashRect2->width = this->graphic->bitmap->get_width();
HXLINE( 738)			this->_flashRect2->height = this->graphic->bitmap->get_height();
            		}
            		else {
HXLINE( 742)			this->_matrix->identity();
HXLINE( 743)			this->_matrix->translate(-(Brush->origin->x),-(Brush->origin->y));
HXLINE( 744)			this->_matrix->scale(Brush->scale->x,Brush->scale->y);
HXLINE( 745)			if ((Brush->angle != (int)0)) {
HXLINE( 747)				 ::flixel::math::FlxMatrix _hx_tmp1 = this->_matrix;
HXDLIN( 747)				Float Brush1 = Brush->angle;
HXDLIN( 747)				_hx_tmp1->rotate((Brush1 * ((Float)::Math_obj::PI / (Float)(int)180)));
            			}
HXLINE( 749)			 ::flixel::math::FlxMatrix _hx_tmp2 = this->_matrix;
HXDLIN( 749)			Float _hx_tmp3 = ((X + this->frame->frame->x) + Brush->origin->x);
HXDLIN( 749)			_hx_tmp2->translate(_hx_tmp3,((Y + this->frame->frame->y) + Brush->origin->y));
HXLINE( 750)			 ::openfl::_legacy::display::BlendMode brushBlend = Brush->blend;
HXLINE( 751)			this->graphic->bitmap->draw(bitmapData,this->_matrix,null(),brushBlend,null(),Brush->antialiasing);
            		}
HXLINE( 754)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 756)			this->dirty = true;
HXLINE( 757)			this->calcFrame(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxSprite_obj,stamp,(void))

void FlxSprite_obj::drawFrame(hx::Null< bool >  __o_Force){
bool Force = __o_Force.Default(false);
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_769_drawFrame)
HXDLIN( 769)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 771)			bool _hx_tmp;
HXDLIN( 771)			if (!(Force)) {
HXLINE( 771)				_hx_tmp = this->dirty;
            			}
            			else {
HXLINE( 771)				_hx_tmp = true;
            			}
HXDLIN( 771)			if (_hx_tmp) {
HXLINE( 773)				this->dirty = true;
HXLINE( 774)				this->calcFrame(null());
            			}
            		}
            		else {
HXLINE( 779)			this->dirty = true;
HXLINE( 780)			this->calcFrame(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,drawFrame,(void))

void FlxSprite_obj::centerOffsets(hx::Null< bool >  __o_AdjustPosition){
bool AdjustPosition = __o_AdjustPosition.Default(false);
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_790_centerOffsets)
HXLINE( 791)		 ::flixel::math::FlxPoint _hx_tmp = this->offset;
HXDLIN( 791)		int _hx_tmp1 = this->frameWidth;
HXDLIN( 791)		_hx_tmp->set_x(((_hx_tmp1 - this->get_width()) * ((Float)0.5)));
HXLINE( 792)		 ::flixel::math::FlxPoint _hx_tmp2 = this->offset;
HXDLIN( 792)		int _hx_tmp3 = this->frameHeight;
HXDLIN( 792)		_hx_tmp2->set_y(((_hx_tmp3 - this->get_height()) * ((Float)0.5)));
HXLINE( 793)		if (AdjustPosition) {
HXLINE( 795)			{
HXLINE( 795)				 ::flixel::FlxSprite _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 795)				_g->set_x((_g->x + this->offset->x));
            			}
HXLINE( 796)			{
HXLINE( 796)				 ::flixel::FlxSprite _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 796)				_g1->set_y((_g1->y + this->offset->y));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,centerOffsets,(void))

void FlxSprite_obj::centerOrigin(){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_806_centerOrigin)
HXDLIN( 806)		 ::flixel::math::FlxPoint _hx_tmp = this->origin;
HXDLIN( 806)		Float _hx_tmp1 = (this->frameWidth * ((Float)0.5));
HXDLIN( 806)		_hx_tmp->set(_hx_tmp1,(this->frameHeight * ((Float)0.5)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,centerOrigin,(void))

::Array< ::Dynamic> FlxSprite_obj::replaceColor(int Color,int NewColor,hx::Null< bool >  __o_FetchPositions){
bool FetchPositions = __o_FetchPositions.Default(false);
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_819_replaceColor)
HXLINE( 820)		::Array< ::Dynamic> positions = ::flixel::util::FlxBitmapDataUtil_obj::replaceColor(this->graphic->bitmap,Color,NewColor,FetchPositions,null());
HXLINE( 821)		if (hx::IsNotNull( positions )) {
HXLINE( 822)			this->dirty = true;
            		}
HXLINE( 823)		return positions;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxSprite_obj,replaceColor,return )

void FlxSprite_obj::setColorTransform(hx::Null< Float >  __o_redMultiplier,hx::Null< Float >  __o_greenMultiplier,hx::Null< Float >  __o_blueMultiplier,hx::Null< Float >  __o_alphaMultiplier,hx::Null< int >  __o_redOffset,hx::Null< int >  __o_greenOffset,hx::Null< int >  __o_blueOffset,hx::Null< int >  __o_alphaOffset){
Float redMultiplier = __o_redMultiplier.Default(((Float)1.0));
Float greenMultiplier = __o_greenMultiplier.Default(((Float)1.0));
Float blueMultiplier = __o_blueMultiplier.Default(((Float)1.0));
Float alphaMultiplier = __o_alphaMultiplier.Default(((Float)1.0));
int redOffset = __o_redOffset.Default(0);
int greenOffset = __o_greenOffset.Default(0);
int blueOffset = __o_blueOffset.Default(0);
int alphaOffset = __o_alphaOffset.Default(0);
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_841_setColorTransform)
HXLINE( 842)		Float Alpha = (int)1;
HXDLIN( 842)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 842)		{
HXLINE( 842)			int Value = ::Math_obj::round((redMultiplier * (int)255));
HXDLIN( 842)			color = ((int)color & (int)(int)-16711681);
HXDLIN( 842)			int color1;
HXDLIN( 842)			if ((Value > (int)255)) {
HXLINE( 842)				color1 = (int)255;
            			}
            			else {
HXLINE( 842)				if ((Value < (int)0)) {
HXLINE( 842)					color1 = (int)0;
            				}
            				else {
HXLINE( 842)					color1 = Value;
            				}
            			}
HXDLIN( 842)			color = ((int)color | (int)((int)color1 << (int)(int)16));
            		}
HXDLIN( 842)		{
HXLINE( 842)			int Value1 = ::Math_obj::round((greenMultiplier * (int)255));
HXDLIN( 842)			color = ((int)color & (int)(int)-65281);
HXDLIN( 842)			int color2;
HXDLIN( 842)			if ((Value1 > (int)255)) {
HXLINE( 842)				color2 = (int)255;
            			}
            			else {
HXLINE( 842)				if ((Value1 < (int)0)) {
HXLINE( 842)					color2 = (int)0;
            				}
            				else {
HXLINE( 842)					color2 = Value1;
            				}
            			}
HXDLIN( 842)			color = ((int)color | (int)((int)color2 << (int)(int)8));
            		}
HXDLIN( 842)		{
HXLINE( 842)			int Value2 = ::Math_obj::round((blueMultiplier * (int)255));
HXDLIN( 842)			color = ((int)color & (int)(int)-256);
HXDLIN( 842)			int color3;
HXDLIN( 842)			if ((Value2 > (int)255)) {
HXLINE( 842)				color3 = (int)255;
            			}
            			else {
HXLINE( 842)				if ((Value2 < (int)0)) {
HXLINE( 842)					color3 = (int)0;
            				}
            				else {
HXLINE( 842)					color3 = Value2;
            				}
            			}
HXDLIN( 842)			color = ((int)color | (int)color3);
            		}
HXDLIN( 842)		{
HXLINE( 842)			int Value3 = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 842)			color = ((int)color & (int)(int)16777215);
HXDLIN( 842)			int color4;
HXDLIN( 842)			if ((Value3 > (int)255)) {
HXLINE( 842)				color4 = (int)255;
            			}
            			else {
HXLINE( 842)				if ((Value3 < (int)0)) {
HXLINE( 842)					color4 = (int)0;
            				}
            				else {
HXLINE( 842)					color4 = Value3;
            				}
            			}
HXDLIN( 842)			color = ((int)color | (int)((int)color4 << (int)(int)24));
            		}
HXDLIN( 842)		this->set_color(((int)color & (int)(int)16777215));
HXLINE( 843)		this->set_alpha(alphaMultiplier);
HXLINE( 845)		::flixel::util::FlxColorTransformUtil_obj::setMultipliers(this->colorTransform,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
HXLINE( 846)		::flixel::util::FlxColorTransformUtil_obj::setOffsets(this->colorTransform,redOffset,greenOffset,blueOffset,alphaOffset);
HXLINE( 848)		bool _hx_tmp;
HXDLIN( 848)		bool _hx_tmp1;
HXDLIN( 848)		if ((this->alpha == (int)1)) {
HXLINE( 848)			_hx_tmp1 = (this->color != (int)16777215);
            		}
            		else {
HXLINE( 848)			_hx_tmp1 = true;
            		}
HXDLIN( 848)		if (!(_hx_tmp1)) {
HXLINE( 848)			_hx_tmp = ::flixel::util::FlxColorTransformUtil_obj::hasRGBOffsets(this->colorTransform);
            		}
            		else {
HXLINE( 848)			_hx_tmp = true;
            		}
HXDLIN( 848)		this->useColorTransform = _hx_tmp;
HXLINE( 849)		this->dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC8(FlxSprite_obj,setColorTransform,(void))

void FlxSprite_obj::updateColorTransform(){
            	HX_GC_STACKFRAME(&_hx_pos_cfd221447aa7194b_853_updateColorTransform)
HXLINE( 854)		if (hx::IsNull( this->colorTransform )) {
HXLINE( 855)			this->colorTransform =  ::openfl::_legacy::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE( 857)		bool _hx_tmp;
HXDLIN( 857)		if ((this->alpha == (int)1)) {
HXLINE( 857)			_hx_tmp = (this->color != (int)16777215);
            		}
            		else {
HXLINE( 857)			_hx_tmp = true;
            		}
HXDLIN( 857)		this->useColorTransform = _hx_tmp;
HXLINE( 858)		if (this->useColorTransform) {
HXLINE( 859)			::flixel::util::FlxColorTransformUtil_obj::setMultipliers(this->colorTransform,((Float)((int)((int)this->color >> (int)(int)16) & (int)(int)255) / (Float)(int)255),((Float)((int)((int)this->color >> (int)(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)this->color & (int)(int)255) / (Float)(int)255),this->alpha);
            		}
            		else {
HXLINE( 861)			::flixel::util::FlxColorTransformUtil_obj::setMultipliers(this->colorTransform,(int)1,(int)1,(int)1,(int)1);
            		}
HXLINE( 863)		this->dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,updateColorTransform,(void))

bool FlxSprite_obj::pixelsOverlapPoint( ::flixel::math::FlxPoint point,hx::Null< int >  __o_Mask, ::flixel::FlxCamera Camera){
int Mask = __o_Mask.Default(255);
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_876_pixelsOverlapPoint)
HXLINE( 877)		if (hx::IsNull( Camera )) {
HXLINE( 878)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 880)		this->getScreenPosition(this->_point,Camera);
HXLINE( 881)		this->_point->subtractPoint(this->offset);
HXLINE( 882)		this->_flashPoint->x = ((point->x - Camera->scroll->x) - this->_point->x);
HXLINE( 883)		this->_flashPoint->y = ((point->y - Camera->scroll->y) - this->_point->y);
HXLINE( 885)		if (point->_weak) {
HXLINE( 885)			point->put();
            		}
HXLINE( 888)		bool _hx_tmp;
HXDLIN( 888)		bool _hx_tmp1;
HXDLIN( 888)		bool _hx_tmp2;
HXDLIN( 888)		if (!((this->_flashPoint->x < (int)0))) {
HXLINE( 888)			_hx_tmp2 = (this->_flashPoint->x > this->frameWidth);
            		}
            		else {
HXLINE( 888)			_hx_tmp2 = true;
            		}
HXDLIN( 888)		if (!(_hx_tmp2)) {
HXLINE( 888)			_hx_tmp1 = (this->_flashPoint->y < (int)0);
            		}
            		else {
HXLINE( 888)			_hx_tmp1 = true;
            		}
HXDLIN( 888)		if (!(_hx_tmp1)) {
HXLINE( 888)			_hx_tmp = (this->_flashPoint->y > this->frameHeight);
            		}
            		else {
HXLINE( 888)			_hx_tmp = true;
            		}
HXDLIN( 888)		if (_hx_tmp) {
HXLINE( 890)			return false;
            		}
            		else {
HXLINE( 894)			 ::openfl::_legacy::display::BitmapData frameData = this->updateFramePixels();
HXLINE( 895)			int pixelColor = ::Std_obj::_hx_int(this->_flashPoint->x);
HXDLIN( 895)			int pixelColor1 = frameData->getPixel32(pixelColor,::Std_obj::_hx_int(this->_flashPoint->y));
HXLINE( 896)			return ((((int)((int)pixelColor1 >> (int)(int)24) & (int)(int)255) * this->alpha) >= Mask);
            		}
HXLINE( 888)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxSprite_obj,pixelsOverlapPoint,return )

void FlxSprite_obj::calcFrame(hx::Null< bool >  __o_RunOnCpp){
bool RunOnCpp = __o_RunOnCpp.Default(false);
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_907_calcFrame)
HXLINE( 908)		this->checkEmptyFrame();
HXLINE( 910)		bool _hx_tmp;
HXDLIN( 910)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 910)			_hx_tmp = !(RunOnCpp);
            		}
            		else {
HXLINE( 910)			_hx_tmp = false;
            		}
HXDLIN( 910)		if (_hx_tmp) {
HXLINE( 911)			return;
            		}
HXLINE( 913)		this->updateFramePixels();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,calcFrame,(void))

 ::openfl::_legacy::display::BitmapData FlxSprite_obj::updateFramePixels(){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_920_updateFramePixels)
HXLINE( 921)		bool _hx_tmp;
HXDLIN( 921)		if (hx::IsNotNull( this->_frame )) {
HXLINE( 921)			_hx_tmp = !(this->dirty);
            		}
            		else {
HXLINE( 921)			_hx_tmp = true;
            		}
HXDLIN( 921)		if (_hx_tmp) {
HXLINE( 922)			return this->framePixels;
            		}
HXLINE( 926)		bool _hx_tmp1;
HXDLIN( 926)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 926)			_hx_tmp1 = hx::IsNotNull( this->_frameGraphic );
            		}
            		else {
HXLINE( 926)			_hx_tmp1 = false;
            		}
HXDLIN( 926)		if (_hx_tmp1) {
HXLINE( 928)			this->dirty = false;
HXLINE( 929)			return this->framePixels;
            		}
HXLINE( 932)		bool doFlipX = (this->flipX != this->_frame->flipX);
HXDLIN( 932)		bool doFlipX1;
HXDLIN( 932)		if (hx::IsNotNull( this->animation->_curAnim )) {
HXLINE( 932)			doFlipX1 = (doFlipX != this->animation->_curAnim->flipX);
            		}
            		else {
HXLINE( 932)			doFlipX1 = doFlipX;
            		}
HXLINE( 933)		bool doFlipY = (this->flipY != this->_frame->flipY);
HXDLIN( 933)		bool doFlipY1;
HXDLIN( 933)		if (hx::IsNotNull( this->animation->_curAnim )) {
HXLINE( 933)			doFlipY1 = (doFlipY != this->animation->_curAnim->flipY);
            		}
            		else {
HXLINE( 933)			doFlipY1 = doFlipY;
            		}
HXLINE( 935)		bool _hx_tmp2;
HXDLIN( 935)		bool _hx_tmp3;
HXDLIN( 935)		if (!(doFlipX1)) {
HXLINE( 935)			_hx_tmp3 = !(doFlipY1);
            		}
            		else {
HXLINE( 935)			_hx_tmp3 = false;
            		}
HXDLIN( 935)		if (_hx_tmp3) {
HXLINE( 935)			_hx_tmp2 = (this->_frame->type == (int)0);
            		}
            		else {
HXLINE( 935)			_hx_tmp2 = false;
            		}
HXDLIN( 935)		if (_hx_tmp2) {
HXLINE( 937)			this->framePixels = this->_frame->paint(this->framePixels,this->_flashPointZero,false,true);
            		}
            		else {
HXLINE( 941)			this->framePixels = this->_frame->paintRotatedAndFlipped(this->framePixels,this->_flashPointZero,(int)0,doFlipX1,doFlipY1,false,true);
            		}
HXLINE( 945)		if (this->useColorTransform) {
HXLINE( 947)			this->framePixels->colorTransform(this->_flashRect,this->colorTransform);
            		}
HXLINE( 950)		bool _hx_tmp4;
HXDLIN( 950)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 950)			_hx_tmp4 = this->useFramePixels;
            		}
            		else {
HXLINE( 950)			_hx_tmp4 = false;
            		}
HXDLIN( 950)		if (_hx_tmp4) {
HXLINE( 953)			this->_frameGraphic = ( ( ::flixel::graphics::FlxGraphic)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_frameGraphic)) );
HXLINE( 954)			this->_frameGraphic = ::flixel::graphics::FlxGraphic_obj::fromBitmapData(this->framePixels,false,null(),false);
HXLINE( 955)			this->_frame = this->_frameGraphic->get_imageFrame()->get_frame()->copyTo(this->_frame);
            		}
HXLINE( 958)		this->dirty = false;
HXLINE( 959)		return this->framePixels;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,updateFramePixels,return )

 ::flixel::math::FlxPoint FlxSprite_obj::getGraphicMidpoint( ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_970_getGraphicMidpoint)
HXLINE( 971)		if (hx::IsNull( point )) {
HXLINE( 972)			 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 972)			point1->_inPool = false;
HXDLIN( 972)			point = point1;
            		}
HXLINE( 973)		Float _hx_tmp = this->x;
HXDLIN( 973)		Float _hx_tmp1 = (_hx_tmp + (this->frameWidth * ((Float)0.5)));
HXDLIN( 973)		Float _hx_tmp2 = this->y;
HXDLIN( 973)		return point->set(_hx_tmp1,(_hx_tmp2 + (this->frameHeight * ((Float)0.5))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,getGraphicMidpoint,return )

bool FlxSprite_obj::isOnScreen( ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_984_isOnScreen)
HXLINE( 985)		if (hx::IsNull( Camera )) {
HXLINE( 986)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 988)		Float minX = (this->x - this->offset->x);
HXDLIN( 988)		Float minX1 = (minX - (Camera->scroll->x * this->scrollFactor->x));
HXLINE( 989)		Float minY = (this->y - this->offset->y);
HXDLIN( 989)		Float minY1 = (minY - (Camera->scroll->y * this->scrollFactor->y));
HXLINE( 991)		bool _hx_tmp;
HXDLIN( 991)		bool _hx_tmp1;
HXDLIN( 991)		bool _hx_tmp2;
HXDLIN( 991)		if ((this->angle != (int)0)) {
HXLINE( 991)			_hx_tmp2 = (this->bakedRotationAngle > (int)0);
            		}
            		else {
HXLINE( 991)			_hx_tmp2 = true;
            		}
HXDLIN( 991)		if (_hx_tmp2) {
HXLINE( 991)			_hx_tmp1 = (this->scale->x == (int)1);
            		}
            		else {
HXLINE( 991)			_hx_tmp1 = false;
            		}
HXDLIN( 991)		if (_hx_tmp1) {
HXLINE( 991)			_hx_tmp = (this->scale->y == (int)1);
            		}
            		else {
HXLINE( 991)			_hx_tmp = false;
            		}
HXDLIN( 991)		if (_hx_tmp) {
HXLINE( 993)			this->_point->set(minX1,minY1);
HXLINE( 994)			 ::flixel::math::FlxPoint point = this->_point;
HXDLIN( 994)			bool _hx_tmp3;
HXDLIN( 994)			bool _hx_tmp4;
HXDLIN( 994)			if (((point->x + this->frameWidth) > Camera->viewOffsetX)) {
HXLINE( 994)				_hx_tmp4 = (point->x < Camera->viewOffsetWidth);
            			}
            			else {
HXLINE( 994)				_hx_tmp4 = false;
            			}
HXDLIN( 994)			if (_hx_tmp4) {
HXLINE( 994)				_hx_tmp3 = ((point->y + this->frameHeight) > Camera->viewOffsetY);
            			}
            			else {
HXLINE( 994)				_hx_tmp3 = false;
            			}
HXDLIN( 994)			if (_hx_tmp3) {
HXLINE( 994)				return (point->y < Camera->viewOffsetHeight);
            			}
            			else {
HXLINE( 994)				return false;
            			}
            		}
HXLINE( 997)		Float radiusX = this->_halfSize->x;
HXLINE( 998)		Float radiusY = this->_halfSize->y;
HXLINE(1000)		Float ox = this->origin->x;
HXLINE(1001)		if ((ox != radiusX)) {
HXLINE(1003)			Float x1 = ::Math_obj::abs(ox);
HXLINE(1004)			Float x2 = ::Math_obj::abs((this->frameWidth - ox));
HXLINE(1005)			radiusX = ::Math_obj::max(x2,x1);
            		}
HXLINE(1008)		Float oy = this->origin->y;
HXLINE(1009)		if ((oy != radiusY)) {
HXLINE(1011)			Float y1 = ::Math_obj::abs(oy);
HXLINE(1012)			Float y2 = ::Math_obj::abs((this->frameHeight - oy));
HXLINE(1013)			radiusY = ::Math_obj::max(y2,y1);
            		}
HXLINE(1016)		radiusX = (radiusX * ::Math_obj::abs(this->scale->x));
HXLINE(1017)		radiusY = (radiusY * ::Math_obj::abs(this->scale->y));
HXLINE(1018)		Float radius = ::Math_obj::max(radiusX,radiusY);
HXLINE(1019)		radius = (radius * ((Float)1.41421356237));
HXLINE(1021)		minX1 = (minX1 + (ox - radius));
HXLINE(1022)		minY1 = (minY1 + (oy - radius));
HXLINE(1024)		Float doubleRadius = ((int)2 * radius);
HXLINE(1026)		this->_point->set(minX1,minY1);
HXLINE(1027)		 ::flixel::math::FlxPoint point1 = this->_point;
HXDLIN(1027)		bool _hx_tmp5;
HXDLIN(1027)		bool _hx_tmp6;
HXDLIN(1027)		if (((point1->x + doubleRadius) > Camera->viewOffsetX)) {
HXLINE(1027)			_hx_tmp6 = (point1->x < Camera->viewOffsetWidth);
            		}
            		else {
HXLINE(1027)			_hx_tmp6 = false;
            		}
HXDLIN(1027)		if (_hx_tmp6) {
HXLINE(1027)			_hx_tmp5 = ((point1->y + doubleRadius) > Camera->viewOffsetY);
            		}
            		else {
HXLINE(1027)			_hx_tmp5 = false;
            		}
HXDLIN(1027)		if (_hx_tmp5) {
HXLINE(1027)			return (point1->y < Camera->viewOffsetHeight);
            		}
            		else {
HXLINE(1027)			return false;
            		}
HXDLIN(1027)		return false;
            	}


bool FlxSprite_obj::isSimpleRender( ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1035_isSimpleRender)
HXLINE(1036)		if (::flixel::FlxG_obj::renderTile) {
HXLINE(1037)			return false;
            		}
HXLINE(1039)		return this->isSimpleRenderBlit(camera);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,isSimpleRender,return )

bool FlxSprite_obj::isSimpleRenderBlit( ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1051_isSimpleRenderBlit)
HXLINE(1052)		bool result;
HXDLIN(1052)		bool result1;
HXDLIN(1052)		bool result2;
HXDLIN(1052)		bool result3;
HXDLIN(1052)		if ((this->angle != (int)0)) {
HXLINE(1052)			result3 = (this->bakedRotationAngle > (int)0);
            		}
            		else {
HXLINE(1052)			result3 = true;
            		}
HXDLIN(1052)		if (result3) {
HXLINE(1052)			result2 = (this->scale->x == (int)1);
            		}
            		else {
HXLINE(1052)			result2 = false;
            		}
HXDLIN(1052)		if (result2) {
HXLINE(1052)			result1 = (this->scale->y == (int)1);
            		}
            		else {
HXLINE(1052)			result1 = false;
            		}
HXDLIN(1052)		if (result1) {
HXLINE(1052)			result = hx::IsNull( this->blend );
            		}
            		else {
HXLINE(1052)			result = false;
            		}
HXLINE(1054)		if (result) {
HXLINE(1054)			if (hx::IsNotNull( camera )) {
HXLINE(1054)				result = this->isPixelPerfectRender(camera);
            			}
            			else {
HXLINE(1054)				result = this->pixelPerfectRender;
            			}
            		}
            		else {
HXLINE(1054)			result = false;
            		}
HXLINE(1055)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,isSimpleRenderBlit,return )

void FlxSprite_obj::setFacingFlip(int Direction,bool FlipX,bool FlipY){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1070_setFacingFlip)
HXDLIN(1070)		this->_facingFlip->set(Direction, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),FlipX)
            			->setFixed(1,HX_("y",79,00,00,00),FlipY)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxSprite_obj,setFacingFlip,(void))

 ::flixel::FlxSprite FlxSprite_obj::setFrames( ::flixel::graphics::frames::FlxFramesCollection Frames,hx::Null< bool >  __o_saveAnimations){
bool saveAnimations = __o_saveAnimations.Default(true);
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1082_setFrames)
HXLINE(1083)		if (saveAnimations) {
HXLINE(1085)			 ::haxe::ds::StringMap animations = this->animation->_animations;
HXLINE(1086)			bool reverse = false;
HXLINE(1087)			int index = (int)0;
HXLINE(1088)			int frameIndex = this->animation->frameIndex;
HXLINE(1089)			::String currName = null();
HXLINE(1091)			if (hx::IsNotNull( this->animation->_curAnim )) {
HXLINE(1093)				reverse = this->animation->_curAnim->reversed;
HXLINE(1094)				index = this->animation->_curAnim->curFrame;
HXLINE(1095)				currName = this->animation->_curAnim->name;
            			}
HXLINE(1098)			this->animation->_animations = null();
HXLINE(1099)			this->set_frames(Frames);
HXLINE(1100)			this->set_frame(this->frames->frames->__get(frameIndex).StaticCast<  ::flixel::graphics::frames::FlxFrame >());
HXLINE(1101)			this->animation->_animations = animations;
HXLINE(1103)			if (hx::IsNotNull( currName )) {
HXLINE(1105)				this->animation->play(currName,false,reverse,index);
            			}
            		}
            		else {
HXLINE(1110)			this->set_frames(Frames);
            		}
HXLINE(1113)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxSprite_obj,setFrames,return )

 ::openfl::_legacy::display::BitmapData FlxSprite_obj::get_pixels(){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1119_get_pixels)
HXDLIN(1119)		if (hx::IsNull( this->graphic )) {
HXDLIN(1119)			return null();
            		}
            		else {
HXDLIN(1119)			return this->graphic->bitmap;
            		}
HXDLIN(1119)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,get_pixels,return )

 ::openfl::_legacy::display::BitmapData FlxSprite_obj::set_pixels( ::openfl::_legacy::display::BitmapData Pixels){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1124_set_pixels)
HXLINE(1125)		::String key = ::flixel::FlxG_obj::bitmap->findKeyForBitmap(Pixels);
HXLINE(1127)		if (hx::IsNull( key )) {
HXLINE(1129)			key = ::flixel::FlxG_obj::bitmap->getUniqueKey(null());
HXLINE(1130)			this->set_graphic(::flixel::FlxG_obj::bitmap->add(Pixels,false,key));
            		}
            		else {
HXLINE(1134)			this->set_graphic(( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,key)) ));
            		}
HXLINE(1137)		this->set_frames(this->graphic->get_imageFrame());
HXLINE(1138)		return Pixels;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_pixels,return )

 ::flixel::graphics::frames::FlxFrame FlxSprite_obj::set_frame( ::flixel::graphics::frames::FlxFrame Value){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1143_set_frame)
HXLINE(1144)		this->frame = Value;
HXLINE(1145)		if (hx::IsNotNull( this->frame )) {
HXLINE(1147)			{
HXLINE(1147)				if (hx::IsNotNull( this->frame )) {
HXLINE(1147)					this->frameWidth = ::Std_obj::_hx_int(this->frame->sourceSize->x);
HXDLIN(1147)					this->frameHeight = ::Std_obj::_hx_int(this->frame->sourceSize->y);
            				}
HXDLIN(1147)				 ::flixel::math::FlxPoint _hx_tmp = this->_halfSize;
HXDLIN(1147)				Float _hx_tmp1 = (((Float)0.5) * this->frameWidth);
HXDLIN(1147)				_hx_tmp->set(_hx_tmp1,(((Float)0.5) * this->frameHeight));
HXDLIN(1147)				{
HXLINE(1147)					this->_flashRect->x = (int)0;
HXDLIN(1147)					this->_flashRect->y = (int)0;
HXDLIN(1147)					this->_flashRect->width = this->frameWidth;
HXDLIN(1147)					this->_flashRect->height = this->frameHeight;
            				}
            			}
HXLINE(1148)			this->dirty = true;
            		}
            		else {
HXLINE(1150)			bool _hx_tmp2;
HXDLIN(1150)			bool _hx_tmp3;
HXDLIN(1150)			if (hx::IsNotNull( this->frames )) {
HXLINE(1150)				_hx_tmp3 = hx::IsNotNull( this->frames->frames );
            			}
            			else {
HXLINE(1150)				_hx_tmp3 = false;
            			}
HXDLIN(1150)			if (_hx_tmp3) {
HXLINE(1150)				_hx_tmp2 = (this->numFrames > (int)0);
            			}
            			else {
HXLINE(1150)				_hx_tmp2 = false;
            			}
HXDLIN(1150)			if (_hx_tmp2) {
HXLINE(1152)				this->frame = this->frames->frames->__get((int)0).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXLINE(1153)				this->dirty = true;
            			}
            			else {
HXLINE(1157)				return null();
            			}
            		}
HXLINE(1160)		if (::flixel::FlxG_obj::renderTile) {
HXLINE(1162)			this->_frameGraphic = ( ( ::flixel::graphics::FlxGraphic)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_frameGraphic)) );
            		}
HXLINE(1165)		if (hx::IsNotNull( this->clipRect )) {
HXLINE(1167)			this->_frame = this->frame->clipTo(this->clipRect,this->_frame);
            		}
            		else {
HXLINE(1171)			this->_frame = this->frame->copyTo(this->_frame);
            		}
HXLINE(1174)		return this->frame;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_frame,return )

int FlxSprite_obj::set_facing(int Direction){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1179_set_facing)
HXLINE(1180)		 ::Dynamic flip = this->_facingFlip->get(Direction);
HXLINE(1181)		if (hx::IsNotNull( flip )) {
HXLINE(1183)			this->set_flipX(( (bool)(flip->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ));
HXLINE(1184)			this->set_flipY(( (bool)(flip->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
            		}
HXLINE(1187)		return (this->facing = Direction);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_facing,return )

Float FlxSprite_obj::set_alpha(Float Alpha){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1192_set_alpha)
HXLINE(1193)		if ((this->alpha == Alpha)) {
HXLINE(1195)			return Alpha;
            		}
HXLINE(1197)		Float lowerBound;
HXDLIN(1197)		if ((Alpha < (int)0)) {
HXLINE(1197)			lowerBound = (int)0;
            		}
            		else {
HXLINE(1197)			lowerBound = Alpha;
            		}
HXDLIN(1197)		 ::Dynamic _hx_tmp;
HXDLIN(1197)		if ((lowerBound > (int)1)) {
HXLINE(1197)			_hx_tmp = (int)1;
            		}
            		else {
HXLINE(1197)			_hx_tmp = lowerBound;
            		}
HXDLIN(1197)		this->alpha = _hx_tmp;
HXLINE(1198)		this->updateColorTransform();
HXLINE(1199)		return this->alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_alpha,return )

int FlxSprite_obj::set_color(int Color){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1204_set_color)
HXLINE(1205)		if ((this->color == Color)) {
HXLINE(1207)			return Color;
            		}
HXLINE(1209)		this->color = Color;
HXLINE(1210)		this->updateColorTransform();
HXLINE(1211)		return this->color;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_color,return )

Float FlxSprite_obj::set_angle(Float Value){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1216_set_angle)
HXLINE(1217)		bool newAngle = (this->angle != Value);
HXLINE(1218)		Float ret = this->super::set_angle(Value);
HXLINE(1219)		if (newAngle) {
HXLINE(1221)			this->_angleChanged = true;
HXLINE(1222)			this->animation->update((int)0);
            		}
HXLINE(1224)		return ret;
            	}


void FlxSprite_obj::updateTrig(){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1230_updateTrig)
HXDLIN(1230)		if (this->_angleChanged) {
HXLINE(1232)			Float radians = this->angle;
HXDLIN(1232)			Float radians1 = (radians * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE(1233)			this->_sinAngle = ::Math_obj::sin(radians1);
HXLINE(1234)			this->_cosAngle = ::Math_obj::cos(radians1);
HXLINE(1235)			this->_angleChanged = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,updateTrig,(void))

 ::openfl::_legacy::display::BlendMode FlxSprite_obj::set_blend( ::openfl::_legacy::display::BlendMode Value){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1242_set_blend)
HXDLIN(1242)		return (this->blend = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_blend,return )

 ::flixel::graphics::FlxGraphic FlxSprite_obj::set_graphic( ::flixel::graphics::FlxGraphic Value){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1251_set_graphic)
HXLINE(1252)		 ::flixel::graphics::FlxGraphic oldGraphic = this->graphic;
HXLINE(1254)		bool _hx_tmp;
HXDLIN(1254)		if (hx::IsNotEq( this->graphic,Value )) {
HXLINE(1254)			_hx_tmp = hx::IsNotNull( Value );
            		}
            		else {
HXLINE(1254)			_hx_tmp = false;
            		}
HXDLIN(1254)		if (_hx_tmp) {
HXLINE(1256)			 ::flixel::graphics::FlxGraphic _g = Value;
HXDLIN(1256)			int _g1 = _g->get_useCount();
HXDLIN(1256)			_g->set_useCount((_g1 + (int)1));
            		}
HXLINE(1259)		bool _hx_tmp1;
HXDLIN(1259)		if (hx::IsNotNull( oldGraphic )) {
HXLINE(1259)			_hx_tmp1 = hx::IsNotEq( oldGraphic,Value );
            		}
            		else {
HXLINE(1259)			_hx_tmp1 = false;
            		}
HXDLIN(1259)		if (_hx_tmp1) {
HXLINE(1261)			 ::flixel::graphics::FlxGraphic _g2 = oldGraphic;
HXDLIN(1261)			int _g11 = _g2->get_useCount();
HXDLIN(1261)			_g2->set_useCount((_g11 - (int)1));
            		}
HXLINE(1264)		return (this->graphic = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_graphic,return )

 ::flixel::math::FlxRect FlxSprite_obj::set_clipRect( ::flixel::math::FlxRect rect){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1269_set_clipRect)
HXLINE(1270)		if (hx::IsNotNull( rect )) {
HXLINE(1271)			rect->x = ::Math_obj::round(rect->x);
HXDLIN(1271)			rect->y = ::Math_obj::round(rect->y);
HXDLIN(1271)			rect->width = ::Math_obj::round(rect->width);
HXDLIN(1271)			rect->height = ::Math_obj::round(rect->height);
HXDLIN(1271)			this->clipRect = rect;
            		}
            		else {
HXLINE(1273)			this->clipRect = null();
            		}
HXLINE(1275)		if (hx::IsNotNull( this->frames )) {
HXLINE(1276)			this->set_frame(this->frames->frames->__get(this->animation->frameIndex).StaticCast<  ::flixel::graphics::frames::FlxFrame >());
            		}
HXLINE(1278)		return rect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_clipRect,return )

 ::flixel::graphics::frames::FlxFramesCollection FlxSprite_obj::set_frames( ::flixel::graphics::frames::FlxFramesCollection Frames){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1290_set_frames)
HXLINE(1291)		if (hx::IsNotNull( this->animation )) {
HXLINE(1293)			this->animation->destroyAnimations();
            		}
HXLINE(1296)		if (hx::IsNotNull( Frames )) {
HXLINE(1298)			this->set_graphic(Frames->parent);
HXLINE(1299)			this->frames = Frames;
HXLINE(1300)			this->set_frame(this->frames->frames->__get((int)0).StaticCast<  ::flixel::graphics::frames::FlxFrame >());
HXLINE(1301)			this->numFrames = this->frames->frames->length;
HXLINE(1302)			this->resetHelpers();
HXLINE(1303)			this->bakedRotationAngle = (int)0;
HXLINE(1304)			this->animation->set_frameIndex((int)0);
HXLINE(1305)			this->graphicLoaded();
            		}
            		else {
HXLINE(1309)			this->frames = null();
HXLINE(1310)			this->set_frame(null());
HXLINE(1311)			this->set_graphic(null());
            		}
HXLINE(1314)		this->set_clipRect(null());
HXLINE(1315)		return Frames;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_frames,return )

bool FlxSprite_obj::set_flipX(bool Value){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1320_set_flipX)
HXLINE(1321)		if (::flixel::FlxG_obj::renderTile) {
HXLINE(1323)			int _hx_tmp;
HXDLIN(1323)			if (Value) {
HXLINE(1323)				_hx_tmp = (int)-1;
            			}
            			else {
HXLINE(1323)				_hx_tmp = (int)1;
            			}
HXDLIN(1323)			this->_facingHorizontalMult = _hx_tmp;
            		}
HXLINE(1325)		bool _hx_tmp1;
HXDLIN(1325)		if ((this->flipX == Value)) {
HXLINE(1325)			_hx_tmp1 = this->dirty;
            		}
            		else {
HXLINE(1325)			_hx_tmp1 = true;
            		}
HXDLIN(1325)		this->dirty = _hx_tmp1;
HXLINE(1326)		return (this->flipX = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_flipX,return )

bool FlxSprite_obj::set_flipY(bool Value){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1331_set_flipY)
HXLINE(1332)		if (::flixel::FlxG_obj::renderTile) {
HXLINE(1334)			int _hx_tmp;
HXDLIN(1334)			if (Value) {
HXLINE(1334)				_hx_tmp = (int)-1;
            			}
            			else {
HXLINE(1334)				_hx_tmp = (int)1;
            			}
HXDLIN(1334)			this->_facingVerticalMult = _hx_tmp;
            		}
HXLINE(1336)		bool _hx_tmp1;
HXDLIN(1336)		if ((this->flipY == Value)) {
HXLINE(1336)			_hx_tmp1 = this->dirty;
            		}
            		else {
HXLINE(1336)			_hx_tmp1 = true;
            		}
HXDLIN(1336)		this->dirty = _hx_tmp1;
HXLINE(1337)		return (this->flipY = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_flipY,return )

bool FlxSprite_obj::set_antialiasing(bool value){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1343_set_antialiasing)
HXDLIN(1343)		return (this->antialiasing = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_antialiasing,return )

bool FlxSprite_obj::set_useFramePixels(bool value){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1349_set_useFramePixels)
HXDLIN(1349)		if (::flixel::FlxG_obj::renderTile) {
HXLINE(1351)			if ((value != this->useFramePixels)) {
HXLINE(1353)				this->useFramePixels = value;
HXLINE(1354)				this->set_frame(this->frame);
HXLINE(1356)				if (value) {
HXLINE(1358)					this->updateFramePixels();
            				}
            			}
HXLINE(1362)			return value;
            		}
            		else {
HXLINE(1366)			this->useFramePixels = true;
HXLINE(1367)			return true;
            		}
HXLINE(1349)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_useFramePixels,return )

bool FlxSprite_obj::checkFlipX(){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1373_checkFlipX)
HXLINE(1374)		bool doFlipX = (this->flipX != this->_frame->flipX);
HXLINE(1375)		if (hx::IsNotNull( this->animation->_curAnim )) {
HXLINE(1377)			return (doFlipX != this->animation->_curAnim->flipX);
            		}
HXLINE(1379)		return doFlipX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,checkFlipX,return )

bool FlxSprite_obj::checkFlipY(){
            	HX_STACKFRAME(&_hx_pos_cfd221447aa7194b_1384_checkFlipY)
HXLINE(1385)		bool doFlipY = (this->flipY != this->_frame->flipY);
HXLINE(1386)		if (hx::IsNotNull( this->animation->_curAnim )) {
HXLINE(1388)			return (doFlipY != this->animation->_curAnim->flipY);
            		}
HXLINE(1390)		return doFlipY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,checkFlipY,return )


hx::ObjectPtr< FlxSprite_obj > FlxSprite_obj::__new( ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic SimpleGraphic) {
	hx::ObjectPtr< FlxSprite_obj > __this = new FlxSprite_obj();
	__this->__construct(__o_X,__o_Y,SimpleGraphic);
	return __this;
}

hx::ObjectPtr< FlxSprite_obj > FlxSprite_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic SimpleGraphic) {
	FlxSprite_obj *__this = (FlxSprite_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxSprite_obj), true, "flixel.FlxSprite"));
	*(void **)__this = FlxSprite_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,SimpleGraphic);
	return __this;
}

FlxSprite_obj::FlxSprite_obj()
{
}

void FlxSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxSprite);
	HX_MARK_MEMBER_NAME(animation,"animation");
	HX_MARK_MEMBER_NAME(framePixels,"framePixels");
	HX_MARK_MEMBER_NAME(useFramePixels,"useFramePixels");
	HX_MARK_MEMBER_NAME(antialiasing,"antialiasing");
	HX_MARK_MEMBER_NAME(dirty,"dirty");
	HX_MARK_MEMBER_NAME(frame,"frame");
	HX_MARK_MEMBER_NAME(frameWidth,"frameWidth");
	HX_MARK_MEMBER_NAME(frameHeight,"frameHeight");
	HX_MARK_MEMBER_NAME(numFrames,"numFrames");
	HX_MARK_MEMBER_NAME(frames,"frames");
	HX_MARK_MEMBER_NAME(graphic,"graphic");
	HX_MARK_MEMBER_NAME(bakedRotationAngle,"bakedRotationAngle");
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_MEMBER_NAME(facing,"facing");
	HX_MARK_MEMBER_NAME(flipX,"flipX");
	HX_MARK_MEMBER_NAME(flipY,"flipY");
	HX_MARK_MEMBER_NAME(origin,"origin");
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(scale,"scale");
	HX_MARK_MEMBER_NAME(blend,"blend");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(colorTransform,"colorTransform");
	HX_MARK_MEMBER_NAME(useColorTransform,"useColorTransform");
	HX_MARK_MEMBER_NAME(clipRect,"clipRect");
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_MEMBER_NAME(_frame,"_frame");
	HX_MARK_MEMBER_NAME(_frameGraphic,"_frameGraphic");
	HX_MARK_MEMBER_NAME(_facingHorizontalMult,"_facingHorizontalMult");
	HX_MARK_MEMBER_NAME(_facingVerticalMult,"_facingVerticalMult");
	HX_MARK_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_MARK_MEMBER_NAME(_flashRect,"_flashRect");
	HX_MARK_MEMBER_NAME(_flashRect2,"_flashRect2");
	HX_MARK_MEMBER_NAME(_flashPointZero,"_flashPointZero");
	HX_MARK_MEMBER_NAME(_matrix,"_matrix");
	HX_MARK_MEMBER_NAME(_halfSize,"_halfSize");
	HX_MARK_MEMBER_NAME(_sinAngle,"_sinAngle");
	HX_MARK_MEMBER_NAME(_cosAngle,"_cosAngle");
	HX_MARK_MEMBER_NAME(_angleChanged,"_angleChanged");
	HX_MARK_MEMBER_NAME(_facingFlip,"_facingFlip");
	 ::flixel::FlxObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(animation,"animation");
	HX_VISIT_MEMBER_NAME(framePixels,"framePixels");
	HX_VISIT_MEMBER_NAME(useFramePixels,"useFramePixels");
	HX_VISIT_MEMBER_NAME(antialiasing,"antialiasing");
	HX_VISIT_MEMBER_NAME(dirty,"dirty");
	HX_VISIT_MEMBER_NAME(frame,"frame");
	HX_VISIT_MEMBER_NAME(frameWidth,"frameWidth");
	HX_VISIT_MEMBER_NAME(frameHeight,"frameHeight");
	HX_VISIT_MEMBER_NAME(numFrames,"numFrames");
	HX_VISIT_MEMBER_NAME(frames,"frames");
	HX_VISIT_MEMBER_NAME(graphic,"graphic");
	HX_VISIT_MEMBER_NAME(bakedRotationAngle,"bakedRotationAngle");
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
	HX_VISIT_MEMBER_NAME(facing,"facing");
	HX_VISIT_MEMBER_NAME(flipX,"flipX");
	HX_VISIT_MEMBER_NAME(flipY,"flipY");
	HX_VISIT_MEMBER_NAME(origin,"origin");
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(scale,"scale");
	HX_VISIT_MEMBER_NAME(blend,"blend");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(colorTransform,"colorTransform");
	HX_VISIT_MEMBER_NAME(useColorTransform,"useColorTransform");
	HX_VISIT_MEMBER_NAME(clipRect,"clipRect");
	HX_VISIT_MEMBER_NAME(shader,"shader");
	HX_VISIT_MEMBER_NAME(_frame,"_frame");
	HX_VISIT_MEMBER_NAME(_frameGraphic,"_frameGraphic");
	HX_VISIT_MEMBER_NAME(_facingHorizontalMult,"_facingHorizontalMult");
	HX_VISIT_MEMBER_NAME(_facingVerticalMult,"_facingVerticalMult");
	HX_VISIT_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_VISIT_MEMBER_NAME(_flashRect,"_flashRect");
	HX_VISIT_MEMBER_NAME(_flashRect2,"_flashRect2");
	HX_VISIT_MEMBER_NAME(_flashPointZero,"_flashPointZero");
	HX_VISIT_MEMBER_NAME(_matrix,"_matrix");
	HX_VISIT_MEMBER_NAME(_halfSize,"_halfSize");
	HX_VISIT_MEMBER_NAME(_sinAngle,"_sinAngle");
	HX_VISIT_MEMBER_NAME(_cosAngle,"_cosAngle");
	HX_VISIT_MEMBER_NAME(_angleChanged,"_angleChanged");
	HX_VISIT_MEMBER_NAME(_facingFlip,"_facingFlip");
	 ::flixel::FlxObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxSprite_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dirty") ) { return hx::Val( dirty ); }
		if (HX_FIELD_EQ(inName,"frame") ) { return hx::Val( frame ); }
		if (HX_FIELD_EQ(inName,"alpha") ) { return hx::Val( alpha ); }
		if (HX_FIELD_EQ(inName,"flipX") ) { return hx::Val( flipX ); }
		if (HX_FIELD_EQ(inName,"flipY") ) { return hx::Val( flipY ); }
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale ); }
		if (HX_FIELD_EQ(inName,"blend") ) { return hx::Val( blend ); }
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"stamp") ) { return hx::Val( stamp_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pixels") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pixels() ); }
		if (HX_FIELD_EQ(inName,"frames") ) { return hx::Val( frames ); }
		if (HX_FIELD_EQ(inName,"facing") ) { return hx::Val( facing ); }
		if (HX_FIELD_EQ(inName,"origin") ) { return hx::Val( origin ); }
		if (HX_FIELD_EQ(inName,"offset") ) { return hx::Val( offset ); }
		if (HX_FIELD_EQ(inName,"shader") ) { return hx::Val( shader ); }
		if (HX_FIELD_EQ(inName,"_frame") ) { return hx::Val( _frame ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"graphic") ) { return hx::Val( graphic ); }
		if (HX_FIELD_EQ(inName,"_matrix") ) { return hx::Val( _matrix ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"clipRect") ) { return hx::Val( clipRect ); }
		if (HX_FIELD_EQ(inName,"initVars") ) { return hx::Val( initVars_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"animation") ) { return hx::Val( animation ); }
		if (HX_FIELD_EQ(inName,"numFrames") ) { return hx::Val( numFrames ); }
		if (HX_FIELD_EQ(inName,"_halfSize") ) { return hx::Val( _halfSize ); }
		if (HX_FIELD_EQ(inName,"_sinAngle") ) { return hx::Val( _sinAngle ); }
		if (HX_FIELD_EQ(inName,"_cosAngle") ) { return hx::Val( _cosAngle ); }
		if (HX_FIELD_EQ(inName,"resetSize") ) { return hx::Val( resetSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawFrame") ) { return hx::Val( drawFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"calcFrame") ) { return hx::Val( calcFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFrames") ) { return hx::Val( setFrames_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_frame") ) { return hx::Val( set_frame_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_angle") ) { return hx::Val( set_angle_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blend") ) { return hx::Val( set_blend_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_flipX") ) { return hx::Val( set_flipX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_flipY") ) { return hx::Val( set_flipY_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameWidth") ) { return hx::Val( frameWidth ); }
		if (HX_FIELD_EQ(inName,"_flashRect") ) { return hx::Val( _flashRect ); }
		if (HX_FIELD_EQ(inName,"resetFrame") ) { return hx::Val( resetFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawSimple") ) { return hx::Val( drawSimple_dyn() ); }
		if (HX_FIELD_EQ(inName,"isOnScreen") ) { return hx::Val( isOnScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_pixels") ) { return hx::Val( get_pixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pixels") ) { return hx::Val( set_pixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_facing") ) { return hx::Val( set_facing_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTrig") ) { return hx::Val( updateTrig_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_frames") ) { return hx::Val( set_frames_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkFlipX") ) { return hx::Val( checkFlipX_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkFlipY") ) { return hx::Val( checkFlipY_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"framePixels") ) { return hx::Val( framePixels ); }
		if (HX_FIELD_EQ(inName,"frameHeight") ) { return hx::Val( frameHeight ); }
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { return hx::Val( _flashPoint ); }
		if (HX_FIELD_EQ(inName,"_flashRect2") ) { return hx::Val( _flashRect2 ); }
		if (HX_FIELD_EQ(inName,"_facingFlip") ) { return hx::Val( _facingFlip ); }
		if (HX_FIELD_EQ(inName,"loadGraphic") ) { return hx::Val( loadGraphic_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeGraphic") ) { return hx::Val( makeGraphic_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawComplex") ) { return hx::Val( drawComplex_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_graphic") ) { return hx::Val( set_graphic_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"antialiasing") ) { return hx::Val( antialiasing ); }
		if (HX_FIELD_EQ(inName,"updateHitbox") ) { return hx::Val( updateHitbox_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetHelpers") ) { return hx::Val( resetHelpers_dyn() ); }
		if (HX_FIELD_EQ(inName,"centerOrigin") ) { return hx::Val( centerOrigin_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceColor") ) { return hx::Val( replaceColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_clipRect") ) { return hx::Val( set_clipRect_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_frameGraphic") ) { return hx::Val( _frameGraphic ); }
		if (HX_FIELD_EQ(inName,"_angleChanged") ) { return hx::Val( _angleChanged ); }
		if (HX_FIELD_EQ(inName,"graphicLoaded") ) { return hx::Val( graphicLoaded_dyn() ); }
		if (HX_FIELD_EQ(inName,"centerOffsets") ) { return hx::Val( centerOffsets_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFacingFlip") ) { return hx::Val( setFacingFlip_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"useFramePixels") ) { return hx::Val( useFramePixels ); }
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform ); }
		if (HX_FIELD_EQ(inName,"resetFrameSize") ) { return hx::Val( resetFrameSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"setGraphicSize") ) { return hx::Val( setGraphicSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"isSimpleRender") ) { return hx::Val( isSimpleRender_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_flashPointZero") ) { return hx::Val( _flashPointZero ); }
		if (HX_FIELD_EQ(inName,"updateAnimation") ) { return hx::Val( updateAnimation_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkEmptyFrame") ) { return hx::Val( checkEmptyFrame_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"loadRotatedFrame") ) { return hx::Val( loadRotatedFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_antialiasing") ) { return hx::Val( set_antialiasing_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"useColorTransform") ) { return hx::Val( useColorTransform ); }
		if (HX_FIELD_EQ(inName,"setColorTransform") ) { return hx::Val( setColorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateFramePixels") ) { return hx::Val( updateFramePixels_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"bakedRotationAngle") ) { return hx::Val( bakedRotationAngle ); }
		if (HX_FIELD_EQ(inName,"loadRotatedGraphic") ) { return hx::Val( loadRotatedGraphic_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetSizeFromFrame") ) { return hx::Val( resetSizeFromFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"pixelsOverlapPoint") ) { return hx::Val( pixelsOverlapPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGraphicMidpoint") ) { return hx::Val( getGraphicMidpoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"isSimpleRenderBlit") ) { return hx::Val( isSimpleRenderBlit_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_useFramePixels") ) { return hx::Val( set_useFramePixels_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_facingVerticalMult") ) { return hx::Val( _facingVerticalMult ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"updateColorTransform") ) { return hx::Val( updateColorTransform_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_facingHorizontalMult") ) { return hx::Val( _facingHorizontalMult ); }
		if (HX_FIELD_EQ(inName,"loadGraphicFromSprite") ) { return hx::Val( loadGraphicFromSprite_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxSprite_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"dirty") ) { dirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frame") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frame(inValue.Cast<  ::flixel::graphics::frames::FlxFrame >()) );frame=inValue.Cast<  ::flixel::graphics::frames::FlxFrame >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue.Cast< Float >()) );alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_flipX(inValue.Cast< bool >()) );flipX=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_flipY(inValue.Cast< bool >()) );flipY=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scale") ) { scale=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blend") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blend(inValue.Cast<  ::openfl::_legacy::display::BlendMode >()) );blend=inValue.Cast<  ::openfl::_legacy::display::BlendMode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue.Cast< int >()) );color=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pixels") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pixels(inValue.Cast<  ::openfl::_legacy::display::BitmapData >()) ); }
		if (HX_FIELD_EQ(inName,"frames") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frames(inValue.Cast<  ::flixel::graphics::frames::FlxFramesCollection >()) );frames=inValue.Cast<  ::flixel::graphics::frames::FlxFramesCollection >(); return inValue; }
		if (HX_FIELD_EQ(inName,"facing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_facing(inValue.Cast< int >()) );facing=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"origin") ) { origin=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_frame") ) { _frame=inValue.Cast<  ::flixel::graphics::frames::FlxFrame >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"graphic") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_graphic(inValue.Cast<  ::flixel::graphics::FlxGraphic >()) );graphic=inValue.Cast<  ::flixel::graphics::FlxGraphic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_matrix") ) { _matrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"clipRect") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_clipRect(inValue.Cast<  ::flixel::math::FlxRect >()) );clipRect=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"animation") ) { animation=inValue.Cast<  ::flixel::animation::FlxAnimationController >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numFrames") ) { numFrames=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_halfSize") ) { _halfSize=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_sinAngle") ) { _sinAngle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_cosAngle") ) { _cosAngle=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameWidth") ) { frameWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashRect") ) { _flashRect=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"framePixels") ) { framePixels=inValue.Cast<  ::openfl::_legacy::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frameHeight") ) { frameHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { _flashPoint=inValue.Cast<  ::openfl::_legacy::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashRect2") ) { _flashRect2=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_facingFlip") ) { _facingFlip=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"antialiasing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_antialiasing(inValue.Cast< bool >()) );antialiasing=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_frameGraphic") ) { _frameGraphic=inValue.Cast<  ::flixel::graphics::FlxGraphic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_angleChanged") ) { _angleChanged=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"useFramePixels") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_useFramePixels(inValue.Cast< bool >()) );useFramePixels=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colorTransform") ) { colorTransform=inValue.Cast<  ::openfl::_legacy::geom::ColorTransform >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_flashPointZero") ) { _flashPointZero=inValue.Cast<  ::openfl::_legacy::geom::Point >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"useColorTransform") ) { useColorTransform=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"bakedRotationAngle") ) { bakedRotationAngle=inValue.Cast< Float >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_facingVerticalMult") ) { _facingVerticalMult=inValue.Cast< int >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_facingHorizontalMult") ) { _facingHorizontalMult=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("animation","\x04","\xef","\x34","\x4b"));
	outFields->push(HX_HCSTRING("framePixels","\x3a","\xbb","\xf1","\x6a"));
	outFields->push(HX_HCSTRING("useFramePixels","\x33","\x0e","\x5a","\x8e"));
	outFields->push(HX_HCSTRING("antialiasing","\xf4","\x16","\xb3","\x48"));
	outFields->push(HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"));
	outFields->push(HX_HCSTRING("pixels","\x2d","\xef","\xa9","\x8c"));
	outFields->push(HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"));
	outFields->push(HX_HCSTRING("frameWidth","\x99","\xea","\x88","\xad"));
	outFields->push(HX_HCSTRING("frameHeight","\xf4","\xd3","\x93","\xe0"));
	outFields->push(HX_HCSTRING("numFrames","\x8c","\xfa","\x86","\x5d"));
	outFields->push(HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"));
	outFields->push(HX_HCSTRING("graphic","\xa8","\x5a","\x07","\x74"));
	outFields->push(HX_HCSTRING("bakedRotationAngle","\x8a","\xd1","\x9c","\x9b"));
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("facing","\x1a","\x3f","\x05","\xe4"));
	outFields->push(HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02"));
	outFields->push(HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02"));
	outFields->push(HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b"));
	outFields->push(HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	outFields->push(HX_HCSTRING("blend","\x51","\xe8","\xf4","\xb4"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"));
	outFields->push(HX_HCSTRING("useColorTransform","\x30","\xe6","\xec","\x72"));
	outFields->push(HX_HCSTRING("clipRect","\x14","\x90","\x6a","\x58"));
	outFields->push(HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"));
	outFields->push(HX_HCSTRING("_frame","\x6e","\xbf","\x6a","\x02"));
	outFields->push(HX_HCSTRING("_frameGraphic","\xda","\xac","\x00","\xf7"));
	outFields->push(HX_HCSTRING("_facingHorizontalMult","\x8d","\x29","\xa1","\x51"));
	outFields->push(HX_HCSTRING("_facingVerticalMult","\xdf","\x11","\x0c","\x86"));
	outFields->push(HX_HCSTRING("_flashPoint","\x9f","\x1d","\x2a","\xb7"));
	outFields->push(HX_HCSTRING("_flashRect","\xb5","\xc2","\xf3","\x5d"));
	outFields->push(HX_HCSTRING("_flashRect2","\xdd","\x9b","\x56","\xd7"));
	outFields->push(HX_HCSTRING("_flashPointZero","\x67","\x14","\x7d","\xfb"));
	outFields->push(HX_HCSTRING("_matrix","\xe0","\x47","\x3f","\x2a"));
	outFields->push(HX_HCSTRING("_halfSize","\x73","\x43","\x4d","\x66"));
	outFields->push(HX_HCSTRING("_sinAngle","\xfa","\x54","\xde","\xb8"));
	outFields->push(HX_HCSTRING("_cosAngle","\x6b","\xc9","\x00","\x1f"));
	outFields->push(HX_HCSTRING("_angleChanged","\x40","\x98","\x5c","\xb2"));
	outFields->push(HX_HCSTRING("_facingFlip","\x06","\xe0","\x9c","\x02"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxSprite_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::animation::FlxAnimationController*/ ,(int)offsetof(FlxSprite_obj,animation),HX_HCSTRING("animation","\x04","\xef","\x34","\x4b")},
	{hx::fsObject /*::openfl::_legacy::display::BitmapData*/ ,(int)offsetof(FlxSprite_obj,framePixels),HX_HCSTRING("framePixels","\x3a","\xbb","\xf1","\x6a")},
	{hx::fsBool,(int)offsetof(FlxSprite_obj,useFramePixels),HX_HCSTRING("useFramePixels","\x33","\x0e","\x5a","\x8e")},
	{hx::fsBool,(int)offsetof(FlxSprite_obj,antialiasing),HX_HCSTRING("antialiasing","\xf4","\x16","\xb3","\x48")},
	{hx::fsBool,(int)offsetof(FlxSprite_obj,dirty),HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9")},
	{hx::fsObject /*::flixel::graphics::frames::FlxFrame*/ ,(int)offsetof(FlxSprite_obj,frame),HX_HCSTRING("frame","\x2d","\x78","\x83","\x06")},
	{hx::fsInt,(int)offsetof(FlxSprite_obj,frameWidth),HX_HCSTRING("frameWidth","\x99","\xea","\x88","\xad")},
	{hx::fsInt,(int)offsetof(FlxSprite_obj,frameHeight),HX_HCSTRING("frameHeight","\xf4","\xd3","\x93","\xe0")},
	{hx::fsInt,(int)offsetof(FlxSprite_obj,numFrames),HX_HCSTRING("numFrames","\x8c","\xfa","\x86","\x5d")},
	{hx::fsObject /*::flixel::graphics::frames::FlxFramesCollection*/ ,(int)offsetof(FlxSprite_obj,frames),HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac")},
	{hx::fsObject /*::flixel::graphics::FlxGraphic*/ ,(int)offsetof(FlxSprite_obj,graphic),HX_HCSTRING("graphic","\xa8","\x5a","\x07","\x74")},
	{hx::fsFloat,(int)offsetof(FlxSprite_obj,bakedRotationAngle),HX_HCSTRING("bakedRotationAngle","\x8a","\xd1","\x9c","\x9b")},
	{hx::fsFloat,(int)offsetof(FlxSprite_obj,alpha),HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21")},
	{hx::fsInt,(int)offsetof(FlxSprite_obj,facing),HX_HCSTRING("facing","\x1a","\x3f","\x05","\xe4")},
	{hx::fsBool,(int)offsetof(FlxSprite_obj,flipX),HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02")},
	{hx::fsBool,(int)offsetof(FlxSprite_obj,flipY),HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxSprite_obj,origin),HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxSprite_obj,offset),HX_HCSTRING("offset","\x93","\x97","\x3f","\x60")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxSprite_obj,scale),HX_HCSTRING("scale","\x8a","\xce","\xce","\x78")},
	{hx::fsObject /*::openfl::_legacy::display::BlendMode*/ ,(int)offsetof(FlxSprite_obj,blend),HX_HCSTRING("blend","\x51","\xe8","\xf4","\xb4")},
	{hx::fsInt,(int)offsetof(FlxSprite_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsObject /*::openfl::_legacy::geom::ColorTransform*/ ,(int)offsetof(FlxSprite_obj,colorTransform),HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad")},
	{hx::fsBool,(int)offsetof(FlxSprite_obj,useColorTransform),HX_HCSTRING("useColorTransform","\x30","\xe6","\xec","\x72")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxSprite_obj,clipRect),HX_HCSTRING("clipRect","\x14","\x90","\x6a","\x58")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxSprite_obj,shader),HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d")},
	{hx::fsObject /*::flixel::graphics::frames::FlxFrame*/ ,(int)offsetof(FlxSprite_obj,_frame),HX_HCSTRING("_frame","\x6e","\xbf","\x6a","\x02")},
	{hx::fsObject /*::flixel::graphics::FlxGraphic*/ ,(int)offsetof(FlxSprite_obj,_frameGraphic),HX_HCSTRING("_frameGraphic","\xda","\xac","\x00","\xf7")},
	{hx::fsInt,(int)offsetof(FlxSprite_obj,_facingHorizontalMult),HX_HCSTRING("_facingHorizontalMult","\x8d","\x29","\xa1","\x51")},
	{hx::fsInt,(int)offsetof(FlxSprite_obj,_facingVerticalMult),HX_HCSTRING("_facingVerticalMult","\xdf","\x11","\x0c","\x86")},
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(int)offsetof(FlxSprite_obj,_flashPoint),HX_HCSTRING("_flashPoint","\x9f","\x1d","\x2a","\xb7")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(FlxSprite_obj,_flashRect),HX_HCSTRING("_flashRect","\xb5","\xc2","\xf3","\x5d")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(FlxSprite_obj,_flashRect2),HX_HCSTRING("_flashRect2","\xdd","\x9b","\x56","\xd7")},
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(int)offsetof(FlxSprite_obj,_flashPointZero),HX_HCSTRING("_flashPointZero","\x67","\x14","\x7d","\xfb")},
	{hx::fsObject /*::flixel::math::FlxMatrix*/ ,(int)offsetof(FlxSprite_obj,_matrix),HX_HCSTRING("_matrix","\xe0","\x47","\x3f","\x2a")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxSprite_obj,_halfSize),HX_HCSTRING("_halfSize","\x73","\x43","\x4d","\x66")},
	{hx::fsFloat,(int)offsetof(FlxSprite_obj,_sinAngle),HX_HCSTRING("_sinAngle","\xfa","\x54","\xde","\xb8")},
	{hx::fsFloat,(int)offsetof(FlxSprite_obj,_cosAngle),HX_HCSTRING("_cosAngle","\x6b","\xc9","\x00","\x1f")},
	{hx::fsBool,(int)offsetof(FlxSprite_obj,_angleChanged),HX_HCSTRING("_angleChanged","\x40","\x98","\x5c","\xb2")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(FlxSprite_obj,_facingFlip),HX_HCSTRING("_facingFlip","\x06","\xe0","\x9c","\x02")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxSprite_obj_sMemberFields[] = {
	HX_HCSTRING("animation","\x04","\xef","\x34","\x4b"),
	HX_HCSTRING("framePixels","\x3a","\xbb","\xf1","\x6a"),
	HX_HCSTRING("useFramePixels","\x33","\x0e","\x5a","\x8e"),
	HX_HCSTRING("antialiasing","\xf4","\x16","\xb3","\x48"),
	HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"),
	HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"),
	HX_HCSTRING("frameWidth","\x99","\xea","\x88","\xad"),
	HX_HCSTRING("frameHeight","\xf4","\xd3","\x93","\xe0"),
	HX_HCSTRING("numFrames","\x8c","\xfa","\x86","\x5d"),
	HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"),
	HX_HCSTRING("graphic","\xa8","\x5a","\x07","\x74"),
	HX_HCSTRING("bakedRotationAngle","\x8a","\xd1","\x9c","\x9b"),
	HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"),
	HX_HCSTRING("facing","\x1a","\x3f","\x05","\xe4"),
	HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02"),
	HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02"),
	HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b"),
	HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("blend","\x51","\xe8","\xf4","\xb4"),
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("useColorTransform","\x30","\xe6","\xec","\x72"),
	HX_HCSTRING("clipRect","\x14","\x90","\x6a","\x58"),
	HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"),
	HX_HCSTRING("_frame","\x6e","\xbf","\x6a","\x02"),
	HX_HCSTRING("_frameGraphic","\xda","\xac","\x00","\xf7"),
	HX_HCSTRING("_facingHorizontalMult","\x8d","\x29","\xa1","\x51"),
	HX_HCSTRING("_facingVerticalMult","\xdf","\x11","\x0c","\x86"),
	HX_HCSTRING("_flashPoint","\x9f","\x1d","\x2a","\xb7"),
	HX_HCSTRING("_flashRect","\xb5","\xc2","\xf3","\x5d"),
	HX_HCSTRING("_flashRect2","\xdd","\x9b","\x56","\xd7"),
	HX_HCSTRING("_flashPointZero","\x67","\x14","\x7d","\xfb"),
	HX_HCSTRING("_matrix","\xe0","\x47","\x3f","\x2a"),
	HX_HCSTRING("_halfSize","\x73","\x43","\x4d","\x66"),
	HX_HCSTRING("_sinAngle","\xfa","\x54","\xde","\xb8"),
	HX_HCSTRING("_cosAngle","\x6b","\xc9","\x00","\x1f"),
	HX_HCSTRING("_angleChanged","\x40","\x98","\x5c","\xb2"),
	HX_HCSTRING("_facingFlip","\x06","\xe0","\x9c","\x02"),
	HX_HCSTRING("initVars","\xdc","\x5a","\x00","\x53"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("loadGraphicFromSprite","\xd1","\x7c","\x73","\x38"),
	HX_HCSTRING("loadGraphic","\x22","\x19","\xa5","\x44"),
	HX_HCSTRING("loadRotatedGraphic","\xc5","\x14","\x74","\x62"),
	HX_HCSTRING("loadRotatedFrame","\x0a","\x81","\x76","\x8b"),
	HX_HCSTRING("makeGraphic","\x5a","\x82","\x11","\xb8"),
	HX_HCSTRING("graphicLoaded","\xcd","\x84","\x20","\x16"),
	HX_HCSTRING("resetSize","\x30","\xaa","\x3f","\x92"),
	HX_HCSTRING("resetFrameSize","\xbf","\xc3","\x44","\x94"),
	HX_HCSTRING("resetSizeFromFrame","\x13","\xd2","\x50","\x8c"),
	HX_HCSTRING("resetFrame","\xde","\xaf","\x1f","\xef"),
	HX_HCSTRING("setGraphicSize","\x07","\xd7","\xf8","\x2d"),
	HX_HCSTRING("updateHitbox","\x81","\x94","\xeb","\x56"),
	HX_HCSTRING("resetHelpers","\x36","\x89","\x3d","\x32"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateAnimation","\xbb","\xbf","\xbf","\x9a"),
	HX_HCSTRING("checkEmptyFrame","\x48","\xb5","\x2f","\x00"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("drawSimple","\x56","\x7f","\x42","\xfa"),
	HX_HCSTRING("drawComplex","\x8c","\xaa","\xb9","\xcc"),
	HX_HCSTRING("stamp","\x03","\x70","\x0b","\x84"),
	HX_HCSTRING("drawFrame","\x89","\xad","\x8e","\xce"),
	HX_HCSTRING("centerOffsets","\x2b","\xa0","\xb2","\xc1"),
	HX_HCSTRING("centerOrigin","\x9b","\x41","\x36","\x0f"),
	HX_HCSTRING("replaceColor","\x8f","\x5c","\xeb","\x3d"),
	HX_HCSTRING("setColorTransform","\xcb","\x5e","\x21","\x43"),
	HX_HCSTRING("updateColorTransform","\x72","\x0f","\xd2","\x2f"),
	HX_HCSTRING("pixelsOverlapPoint","\x16","\x82","\x44","\xe0"),
	HX_HCSTRING("calcFrame","\x58","\x93","\x8c","\xf9"),
	HX_HCSTRING("updateFramePixels","\xb1","\x67","\x5b","\xcf"),
	HX_HCSTRING("getGraphicMidpoint","\x9a","\xb4","\xdd","\x57"),
	HX_HCSTRING("isOnScreen","\xf5","\x43","\xb9","\xa1"),
	HX_HCSTRING("isSimpleRender","\x32","\xf4","\x2a","\x47"),
	HX_HCSTRING("isSimpleRenderBlit","\x87","\x59","\xb0","\xdf"),
	HX_HCSTRING("setFacingFlip","\x29","\x51","\x8b","\xd1"),
	HX_HCSTRING("setFrames","\xe8","\x24","\x2d","\x0c"),
	HX_HCSTRING("get_pixels","\xf6","\x5e","\x31","\x7d"),
	HX_HCSTRING("set_pixels","\x6a","\xfd","\xae","\x80"),
	HX_HCSTRING("set_frame","\x90","\xc0","\x7d","\x2d"),
	HX_HCSTRING("set_facing","\x57","\x4d","\x0a","\xd8"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("set_angle","\x36","\x8c","\xdc","\x49"),
	HX_HCSTRING("updateTrig","\x85","\x87","\xb8","\x05"),
	HX_HCSTRING("set_blend","\xb4","\x30","\xef","\xdb"),
	HX_HCSTRING("set_graphic","\xcb","\xc1","\x6e","\x04"),
	HX_HCSTRING("set_clipRect","\x91","\x67","\x7d","\x22"),
	HX_HCSTRING("set_frames","\xe3","\xbd","\x8a","\xa0"),
	HX_HCSTRING("set_flipX","\x6e","\x8d","\x8c","\x29"),
	HX_HCSTRING("set_flipY","\x6f","\x8d","\x8c","\x29"),
	HX_HCSTRING("set_antialiasing","\xf1","\xf0","\x93","\xa3"),
	HX_HCSTRING("set_useFramePixels","\x70","\x21","\xa3","\x06"),
	HX_HCSTRING("checkFlipX","\x23","\x47","\x82","\x12"),
	HX_HCSTRING("checkFlipY","\x24","\x47","\x82","\x12"),
	::String(null()) };

static void FlxSprite_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxSprite_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxSprite_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxSprite_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxSprite_obj::__mClass;

void FlxSprite_obj::__register()
{
	hx::Object *dummy = new FlxSprite_obj;
	FlxSprite_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.FlxSprite","\x65","\xad","\xeb","\xe3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxSprite_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxSprite_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxSprite_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxSprite_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxSprite_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
