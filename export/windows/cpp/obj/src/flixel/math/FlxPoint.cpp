// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_math_FlxVector
#include <flixel/math/FlxVector.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxVector
#include <flixel/util/FlxPool_flixel_math_FlxVector.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_util_LabelValuePair
#include <flixel/util/FlxPool_flixel_util_LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_12_new,"flixel.math.FlxPoint","new",0x5991ca64,"flixel.math.FlxPoint.new","flixel/math/FlxPoint.hx",12,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_65_put,"flixel.math.FlxPoint","put",0x59935cd3,"flixel.math.FlxPoint.put","flixel/math/FlxPoint.hx",65,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_78_putWeak,"flixel.math.FlxPoint","putWeak",0xb3cc4aeb,"flixel.math.FlxPoint.putWeak","flixel/math/FlxPoint.hx",78,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_92_set,"flixel.math.FlxPoint","set",0x599595a6,"flixel.math.FlxPoint.set","flixel/math/FlxPoint.hx",92,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_106_add,"flixel.math.FlxPoint","add",0x5987ec25,"flixel.math.FlxPoint.add","flixel/math/FlxPoint.hx",106,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_119_addPoint,"flixel.math.FlxPoint","addPoint",0x1b3211eb,"flixel.math.FlxPoint.addPoint","flixel/math/FlxPoint.hx",119,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_134_subtract,"flixel.math.FlxPoint","subtract",0xd356ac90,"flixel.math.FlxPoint.subtract","flixel/math/FlxPoint.hx",134,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_147_subtractPoint,"flixel.math.FlxPoint","subtractPoint",0xa41aeda0,"flixel.math.FlxPoint.subtractPoint","flixel/math/FlxPoint.hx",147,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_162_scale,"flixel.math.FlxPoint","scale",0x1902518e,"flixel.math.FlxPoint.scale","flixel/math/FlxPoint.hx",162,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_175_copyFrom,"flixel.math.FlxPoint","copyFrom",0xa3a6433b,"flixel.math.FlxPoint.copyFrom","flixel/math/FlxPoint.hx",175,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_189_copyTo,"flixel.math.FlxPoint","copyTo",0x56123d0c,"flixel.math.FlxPoint.copyTo","flixel/math/FlxPoint.hx",189,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_206_copyFromFlash,"flixel.math.FlxPoint","copyFromFlash",0x788ecc75,"flixel.math.FlxPoint.copyFromFlash","flixel/math/FlxPoint.hx",206,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_219_copyToFlash,"flixel.math.FlxPoint","copyToFlash",0x8fb29d04,"flixel.math.FlxPoint.copyToFlash","flixel/math/FlxPoint.hx",219,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_237_addToFlash,"flixel.math.FlxPoint","addToFlash",0x5739bc90,"flixel.math.FlxPoint.addToFlash","flixel/math/FlxPoint.hx",237,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_251_subtractFromFlash,"flixel.math.FlxPoint","subtractFromFlash",0x9d3f4136,"flixel.math.FlxPoint.subtractFromFlash","flixel/math/FlxPoint.hx",251,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_269_inCoords,"flixel.math.FlxPoint","inCoords",0x2c48255f,"flixel.math.FlxPoint.inCoords","flixel/math/FlxPoint.hx",269,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_280_inRect,"flixel.math.FlxPoint","inRect",0x14ec4c25,"flixel.math.FlxPoint.inRect","flixel/math/FlxPoint.hx",280,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_290_distanceTo,"flixel.math.FlxPoint","distanceTo",0xac8be28c,"flixel.math.FlxPoint.distanceTo","flixel/math/FlxPoint.hx",290,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_301_floor,"flixel.math.FlxPoint","floor",0xa2ca54d0,"flixel.math.FlxPoint.floor","flixel/math/FlxPoint.hx",301,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_311_ceil,"flixel.math.FlxPoint","ceil",0xfeb9e881,"flixel.math.FlxPoint.ceil","flixel/math/FlxPoint.hx",311,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_321_round,"flixel.math.FlxPoint","round",0x8d997b52,"flixel.math.FlxPoint.round","flixel/math/FlxPoint.hx",321,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_335_rotate,"flixel.math.FlxPoint","rotate",0x57ff66d7,"flixel.math.FlxPoint.rotate","flixel/math/FlxPoint.hx",335,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_356_angleBetween,"flixel.math.FlxPoint","angleBetween",0x3b318bb1,"flixel.math.FlxPoint.angleBetween","flixel/math/FlxPoint.hx",356,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_397_toVector,"flixel.math.FlxPoint","toVector",0x99e1901a,"flixel.math.FlxPoint.toVector","flixel/math/FlxPoint.hx",397,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_407_equals,"flixel.math.FlxPoint","equals",0x4cd20ebb,"flixel.math.FlxPoint.equals","flixel/math/FlxPoint.hx",407,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_416_destroy,"flixel.math.FlxPoint","destroy",0xdae378fe,"flixel.math.FlxPoint.destroy","flixel/math/FlxPoint.hx",416,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_424_transform,"flixel.math.FlxPoint","transform",0x46de8270,"flixel.math.FlxPoint.transform","flixel/math/FlxPoint.hx",424,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_436_toString,"flixel.math.FlxPoint","toString",0x13b40828,"flixel.math.FlxPoint.toString","flixel/math/FlxPoint.hx",436,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_446_set_x,"flixel.math.FlxPoint","set_x",0x1a631e5f,"flixel.math.FlxPoint.set_x","flixel/math/FlxPoint.hx",446,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_454_set_y,"flixel.math.FlxPoint","set_y",0x1a631e60,"flixel.math.FlxPoint.set_y","flixel/math/FlxPoint.hx",454,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_27_get,"flixel.math.FlxPoint","get",0x598c7a9a,"flixel.math.FlxPoint.get","flixel/math/FlxPoint.hx",27,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_42_weak,"flixel.math.FlxPoint","weak",0x0bf225f4,"flixel.math.FlxPoint.weak","flixel/math/FlxPoint.hx",42,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_459_get_pool,"flixel.math.FlxPoint","get_pool",0xa55c73e1,"flixel.math.FlxPoint.get_pool","flixel/math/FlxPoint.hx",459,0xb3e1cd2c)
HX_LOCAL_STACK_FRAME(_hx_pos_cceaeff5e596bc9e_16_boot,"flixel.math.FlxPoint","boot",0xfe184dae,"flixel.math.FlxPoint.boot","flixel/math/FlxPoint.hx",16,0xb3e1cd2c)
namespace flixel{
namespace math{

void FlxPoint_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_12_new)
HXLINE(  52)		this->_inPool = false;
HXLINE(  51)		this->_weak = false;
HXLINE(  49)		this->y = ((Float)0);
HXLINE(  48)		this->x = ((Float)0);
HXLINE(  57)		this->set(X,Y);
            	}

Dynamic FlxPoint_obj::__CreateEmpty() { return new FlxPoint_obj; }

void *FlxPoint_obj::_hx_vtable = 0;

Dynamic FlxPoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxPoint_obj > _hx_result = new FlxPoint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxPoint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x40ef3a42;
}

static ::flixel::util::IFlxPooled_obj _hx_flixel_math_FlxPoint__hx_flixel_util_IFlxPooled= {
	( void (hx::Object::*)())&::flixel::math::FlxPoint_obj::destroy,
	( void (hx::Object::*)())&::flixel::math::FlxPoint_obj::put,
};

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_math_FlxPoint__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::math::FlxPoint_obj::destroy,
};

void *FlxPoint_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x9aa322a2: return &_hx_flixel_math_FlxPoint__hx_flixel_util_IFlxPooled;
		case (int)0xd4fe2fcd: return &_hx_flixel_math_FlxPoint__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void FlxPoint_obj::put(){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_65_put)
HXDLIN(  65)		if (!(this->_inPool)) {
HXLINE(  67)			this->_inPool = true;
HXLINE(  68)			this->_weak = false;
HXLINE(  69)			::flixel::math::FlxPoint_obj::_pool->putUnsafe(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPoint_obj,put,(void))

void FlxPoint_obj::putWeak(){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_78_putWeak)
HXDLIN(  78)		if (this->_weak) {
HXLINE(  80)			this->put();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPoint_obj,putWeak,(void))

 ::flixel::math::FlxPoint FlxPoint_obj::set(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_92_set)
HXLINE(  93)		this->set_x(X);
HXLINE(  94)		this->set_y(Y);
HXLINE(  95)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_obj,set,return )

 ::flixel::math::FlxPoint FlxPoint_obj::add(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_106_add)
HXLINE( 107)		{
HXLINE( 107)			 ::flixel::math::FlxPoint _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 107)			_g->set_x((_g->x + X));
            		}
HXLINE( 108)		{
HXLINE( 108)			 ::flixel::math::FlxPoint _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 108)			_g1->set_y((_g1->y + Y));
            		}
HXLINE( 109)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_obj,add,return )

 ::flixel::math::FlxPoint FlxPoint_obj::addPoint( ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_119_addPoint)
HXLINE( 120)		{
HXLINE( 120)			 ::flixel::math::FlxPoint _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 120)			_g->set_x((_g->x + point->x));
            		}
HXLINE( 121)		{
HXLINE( 121)			 ::flixel::math::FlxPoint _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 121)			_g1->set_y((_g1->y + point->y));
            		}
HXLINE( 122)		if (point->_weak) {
HXLINE( 122)			point->put();
            		}
HXLINE( 123)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,addPoint,return )

 ::flixel::math::FlxPoint FlxPoint_obj::subtract(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_134_subtract)
HXLINE( 135)		{
HXLINE( 135)			 ::flixel::math::FlxPoint _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 135)			_g->set_x((_g->x - X));
            		}
HXLINE( 136)		{
HXLINE( 136)			 ::flixel::math::FlxPoint _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 136)			_g1->set_y((_g1->y - Y));
            		}
HXLINE( 137)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_obj,subtract,return )

 ::flixel::math::FlxPoint FlxPoint_obj::subtractPoint( ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_147_subtractPoint)
HXLINE( 148)		{
HXLINE( 148)			 ::flixel::math::FlxPoint _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 148)			_g->set_x((_g->x - point->x));
            		}
HXLINE( 149)		{
HXLINE( 149)			 ::flixel::math::FlxPoint _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 149)			_g1->set_y((_g1->y - point->y));
            		}
HXLINE( 150)		if (point->_weak) {
HXLINE( 150)			point->put();
            		}
HXLINE( 151)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,subtractPoint,return )

 ::flixel::math::FlxPoint FlxPoint_obj::scale(Float k){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_162_scale)
HXLINE( 163)		{
HXLINE( 163)			 ::flixel::math::FlxPoint _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 163)			_g->set_x((_g->x * k));
            		}
HXLINE( 164)		{
HXLINE( 164)			 ::flixel::math::FlxPoint _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 164)			_g1->set_y((_g1->y * k));
            		}
HXLINE( 165)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,scale,return )

 ::flixel::math::FlxPoint FlxPoint_obj::copyFrom( ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_175_copyFrom)
HXLINE( 176)		this->set_x(point->x);
HXLINE( 177)		this->set_y(point->y);
HXLINE( 178)		if (point->_weak) {
HXLINE( 178)			point->put();
            		}
HXLINE( 179)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,copyFrom,return )

 ::flixel::math::FlxPoint FlxPoint_obj::copyTo( ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_189_copyTo)
HXLINE( 190)		if (hx::IsNull( point )) {
HXLINE( 192)			 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 192)			point1->_inPool = false;
HXDLIN( 192)			point = point1;
            		}
HXLINE( 194)		point->set_x(this->x);
HXLINE( 195)		point->set_y(this->y);
HXLINE( 196)		return point;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,copyTo,return )

 ::flixel::math::FlxPoint FlxPoint_obj::copyFromFlash( ::openfl::_legacy::geom::Point FlashPoint){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_206_copyFromFlash)
HXLINE( 207)		this->set_x(FlashPoint->x);
HXLINE( 208)		this->set_y(FlashPoint->y);
HXLINE( 209)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,copyFromFlash,return )

 ::openfl::_legacy::geom::Point FlxPoint_obj::copyToFlash( ::openfl::_legacy::geom::Point FlashPoint){
            	HX_GC_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_219_copyToFlash)
HXLINE( 220)		if (hx::IsNull( FlashPoint )) {
HXLINE( 222)			FlashPoint =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE( 225)		FlashPoint->x = this->x;
HXLINE( 226)		FlashPoint->y = this->y;
HXLINE( 227)		return FlashPoint;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,copyToFlash,return )

 ::openfl::_legacy::geom::Point FlxPoint_obj::addToFlash( ::openfl::_legacy::geom::Point FlashPoint){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_237_addToFlash)
HXLINE( 238)		 ::openfl::_legacy::geom::Point FlashPoint1 = FlashPoint;
HXDLIN( 238)		FlashPoint1->x = (FlashPoint1->x + this->x);
HXLINE( 239)		 ::openfl::_legacy::geom::Point FlashPoint2 = FlashPoint;
HXDLIN( 239)		FlashPoint2->y = (FlashPoint2->y + this->y);
HXLINE( 241)		return FlashPoint;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,addToFlash,return )

 ::openfl::_legacy::geom::Point FlxPoint_obj::subtractFromFlash( ::openfl::_legacy::geom::Point FlashPoint){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_251_subtractFromFlash)
HXLINE( 252)		 ::openfl::_legacy::geom::Point FlashPoint1 = FlashPoint;
HXDLIN( 252)		FlashPoint1->x = (FlashPoint1->x - this->x);
HXLINE( 253)		 ::openfl::_legacy::geom::Point FlashPoint2 = FlashPoint;
HXDLIN( 253)		FlashPoint2->y = (FlashPoint2->y - this->y);
HXLINE( 255)		return FlashPoint;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,subtractFromFlash,return )

bool FlxPoint_obj::inCoords(Float RectX,Float RectY,Float RectWidth,Float RectHeight){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_269_inCoords)
HXDLIN( 269)		return ::flixel::math::FlxMath_obj::pointInCoordinates(this->x,this->y,RectX,RectY,RectWidth,RectHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxPoint_obj,inCoords,return )

bool FlxPoint_obj::inRect( ::flixel::math::FlxRect Rect){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_280_inRect)
HXDLIN( 280)		return ::flixel::math::FlxMath_obj::pointInFlxRect(this->x,this->y,Rect);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,inRect,return )

Float FlxPoint_obj::distanceTo( ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_290_distanceTo)
HXLINE( 291)		Float dx = (this->x - point->x);
HXLINE( 292)		Float dy = (this->y - point->y);
HXLINE( 293)		if (point->_weak) {
HXLINE( 293)			point->put();
            		}
HXLINE( 294)		return ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,distanceTo,return )

 ::flixel::math::FlxPoint FlxPoint_obj::floor(){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_301_floor)
HXLINE( 302)		this->set_x(::Math_obj::floor(this->x));
HXLINE( 303)		this->set_y(::Math_obj::floor(this->y));
HXLINE( 304)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPoint_obj,floor,return )

 ::flixel::math::FlxPoint FlxPoint_obj::ceil(){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_311_ceil)
HXLINE( 312)		this->set_x(::Math_obj::ceil(this->x));
HXLINE( 313)		this->set_y(::Math_obj::ceil(this->y));
HXLINE( 314)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPoint_obj,ceil,return )

 ::flixel::math::FlxPoint FlxPoint_obj::round(){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_321_round)
HXLINE( 322)		this->set_x(::Math_obj::round(this->x));
HXLINE( 323)		this->set_y(::Math_obj::round(this->y));
HXLINE( 324)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPoint_obj,round,return )

 ::flixel::math::FlxPoint FlxPoint_obj::rotate( ::flixel::math::FlxPoint Pivot,Float Angle){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_335_rotate)
HXLINE( 336)		Float radians = (Angle * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE( 337)		Float n = radians;
HXDLIN( 337)		n = (n * ((Float)0.3183098862));
HXDLIN( 337)		if ((n > (int)1)) {
HXLINE( 337)			n = (n - ((int)((int)::Math_obj::ceil(n) >> (int)(int)1) << (int)(int)1));
            		}
            		else {
HXLINE( 337)			if ((n < (int)-1)) {
HXLINE( 337)				n = (n + ((int)((int)::Math_obj::ceil(-(n)) >> (int)(int)1) << (int)(int)1));
            			}
            		}
HXDLIN( 337)		Float sin;
HXDLIN( 337)		if ((n > (int)0)) {
HXLINE( 337)			sin = (n * (((Float)3.1) + (n * (((Float)0.5) + (n * (((Float)-7.2) + (n * ((Float)3.6))))))));
            		}
            		else {
HXLINE( 337)			sin = (n * (((Float)3.1) - (n * (((Float)0.5) + (n * (((Float)7.2) + (n * ((Float)3.6))))))));
            		}
HXLINE( 338)		Float n1 = (radians + ((Float)1.570796327));
HXDLIN( 338)		n1 = (n1 * ((Float)0.3183098862));
HXDLIN( 338)		if ((n1 > (int)1)) {
HXLINE( 338)			n1 = (n1 - ((int)((int)::Math_obj::ceil(n1) >> (int)(int)1) << (int)(int)1));
            		}
            		else {
HXLINE( 338)			if ((n1 < (int)-1)) {
HXLINE( 338)				n1 = (n1 + ((int)((int)::Math_obj::ceil(-(n1)) >> (int)(int)1) << (int)(int)1));
            			}
            		}
HXDLIN( 338)		Float cos;
HXDLIN( 338)		if ((n1 > (int)0)) {
HXLINE( 338)			cos = (n1 * (((Float)3.1) + (n1 * (((Float)0.5) + (n1 * (((Float)-7.2) + (n1 * ((Float)3.6))))))));
            		}
            		else {
HXLINE( 338)			cos = (n1 * (((Float)3.1) - (n1 * (((Float)0.5) + (n1 * (((Float)7.2) + (n1 * ((Float)3.6))))))));
            		}
HXLINE( 340)		Float dx = (this->x - Pivot->x);
HXLINE( 341)		Float dy = (this->y - Pivot->y);
HXLINE( 342)		this->set_x((((cos * dx) - (sin * dy)) + Pivot->x));
HXLINE( 343)		this->set_y((((sin * dx) + (cos * dy)) + Pivot->y));
HXLINE( 345)		if (Pivot->_weak) {
HXLINE( 345)			Pivot->put();
            		}
HXLINE( 346)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_obj,rotate,return )

Float FlxPoint_obj::angleBetween( ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_356_angleBetween)
HXLINE( 357)		Float x = (point->x - this->x);
HXLINE( 358)		Float y = (point->y - this->y);
HXLINE( 359)		Float angle = (int)0;
HXLINE( 361)		bool _hx_tmp;
HXDLIN( 361)		if ((x == (int)0)) {
HXLINE( 361)			_hx_tmp = (y != (int)0);
            		}
            		else {
HXLINE( 361)			_hx_tmp = true;
            		}
HXDLIN( 361)		if (_hx_tmp) {
HXLINE( 363)			Float c1 = (::Math_obj::PI * ((Float)0.25));
HXLINE( 364)			Float c2 = ((int)3 * c1);
HXLINE( 365)			Float ay;
HXDLIN( 365)			if ((y < (int)0)) {
HXLINE( 365)				ay = -(y);
            			}
            			else {
HXLINE( 365)				ay = y;
            			}
HXLINE( 367)			if ((x >= (int)0)) {
HXLINE( 369)				angle = (c1 - (c1 * ((Float)(x - ay) / (Float)(x + ay))));
            			}
            			else {
HXLINE( 373)				angle = (c2 - (c1 * ((Float)(x + ay) / (Float)(ay - x))));
            			}
HXLINE( 375)			Float angle1;
HXDLIN( 375)			if ((y < (int)0)) {
HXLINE( 375)				angle1 = -(angle);
            			}
            			else {
HXLINE( 375)				angle1 = angle;
            			}
HXDLIN( 375)			angle = (angle1 * ((Float)(int)180 / (Float)::Math_obj::PI));
HXLINE( 377)			if ((angle > (int)90)) {
HXLINE( 379)				angle = (angle - (int)270);
            			}
            			else {
HXLINE( 383)				angle = (angle + (int)90);
            			}
            		}
HXLINE( 387)		if (point->_weak) {
HXLINE( 387)			point->put();
            		}
HXLINE( 388)		return angle;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,angleBetween,return )

 ::flixel::math::FlxVector FlxPoint_obj::toVector(){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_397_toVector)
HXDLIN( 397)		Float X = this->x;
HXDLIN( 397)		Float Y = this->y;
HXDLIN( 397)		 ::flixel::math::FlxVector vector = Dynamic( ::flixel::math::FlxVector_obj::_pool->get()->set(X,Y)).StaticCast<  ::flixel::math::FlxVector >();
HXDLIN( 397)		vector->_inPool = false;
HXDLIN( 397)		return vector;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPoint_obj,toVector,return )

bool FlxPoint_obj::equals( ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_407_equals)
HXLINE( 408)		bool result;
HXDLIN( 408)		if ((::Math_obj::abs((this->x - point->x)) <= ((Float)0.0000001))) {
HXLINE( 408)			result = (::Math_obj::abs((this->y - point->y)) <= ((Float)0.0000001));
            		}
            		else {
HXLINE( 408)			result = false;
            		}
HXLINE( 409)		if (point->_weak) {
HXLINE( 409)			point->put();
            		}
HXLINE( 410)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,equals,return )

void FlxPoint_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_416_destroy)
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPoint_obj,destroy,(void))

 ::flixel::math::FlxPoint FlxPoint_obj::transform( ::openfl::_legacy::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_424_transform)
HXLINE( 425)		Float x1 = (this->x * matrix->a);
HXDLIN( 425)		Float x11 = ((x1 + (this->y * matrix->c)) + matrix->tx);
HXLINE( 426)		Float y1 = (this->x * matrix->b);
HXDLIN( 426)		Float y11 = ((y1 + (this->y * matrix->d)) + matrix->ty);
HXLINE( 428)		return this->set(x11,y11);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,transform,return )

::String FlxPoint_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_436_toString)
HXLINE( 437)		 ::Dynamic value = this->x;
HXDLIN( 437)		 ::flixel::util::LabelValuePair _this = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 437)		_this->label = HX_("x",78,00,00,00);
HXDLIN( 437)		_this->value = value;
HXDLIN( 437)		 ::flixel::util::LabelValuePair _hx_tmp = _this;
HXLINE( 438)		 ::Dynamic value1 = this->y;
HXDLIN( 438)		 ::flixel::util::LabelValuePair _this1 = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 438)		_this1->label = HX_("y",79,00,00,00);
HXDLIN( 438)		_this1->value = value1;
HXLINE( 436)		return ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1,_this1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPoint_obj,toString,return )

Float FlxPoint_obj::set_x(Float Value){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_446_set_x)
HXDLIN( 446)		return (this->x = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,set_x,return )

Float FlxPoint_obj::set_y(Float Value){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_454_set_y)
HXDLIN( 454)		return (this->y = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,set_y,return )

 ::flixel::util::FlxPool_flixel_math_FlxPoint FlxPoint_obj::_pool;

 ::flixel::math::FlxPoint FlxPoint_obj::get(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_27_get)
HXLINE(  28)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXLINE(  29)		point->_inPool = false;
HXLINE(  30)		return point;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_obj,get,return )

 ::flixel::math::FlxPoint FlxPoint_obj::weak(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_42_weak)
HXLINE(  43)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN(  43)		point->_inPool = false;
HXDLIN(  43)		 ::flixel::math::FlxPoint point1 = point;
HXLINE(  44)		point1->_weak = true;
HXLINE(  45)		return point1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_obj,weak,return )

::Dynamic FlxPoint_obj::get_pool(){
            	HX_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_459_get_pool)
HXDLIN( 459)		return ::flixel::math::FlxPoint_obj::_pool;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxPoint_obj,get_pool,return )


hx::ObjectPtr< FlxPoint_obj > FlxPoint_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y) {
	hx::ObjectPtr< FlxPoint_obj > __this = new FlxPoint_obj();
	__this->__construct(__o_X,__o_Y);
	return __this;
}

hx::ObjectPtr< FlxPoint_obj > FlxPoint_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y) {
	FlxPoint_obj *__this = (FlxPoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxPoint_obj), false, "flixel.math.FlxPoint"));
	*(void **)__this = FlxPoint_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y);
	return __this;
}

FlxPoint_obj::FlxPoint_obj()
{
}

hx::Val FlxPoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"put") ) { return hx::Val( put_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ceil") ) { return hx::Val( ceil_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_weak") ) { return hx::Val( _weak ); }
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale_dyn() ); }
		if (HX_FIELD_EQ(inName,"floor") ) { return hx::Val( floor_dyn() ); }
		if (HX_FIELD_EQ(inName,"round") ) { return hx::Val( round_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"copyTo") ) { return hx::Val( copyTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"inRect") ) { return hx::Val( inRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotate") ) { return hx::Val( rotate_dyn() ); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_inPool") ) { return hx::Val( _inPool ); }
		if (HX_FIELD_EQ(inName,"putWeak") ) { return hx::Val( putWeak_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addPoint") ) { return hx::Val( addPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"subtract") ) { return hx::Val( subtract_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"inCoords") ) { return hx::Val( inCoords_dyn() ); }
		if (HX_FIELD_EQ(inName,"toVector") ) { return hx::Val( toVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { return hx::Val( transform_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addToFlash") ) { return hx::Val( addToFlash_dyn() ); }
		if (HX_FIELD_EQ(inName,"distanceTo") ) { return hx::Val( distanceTo_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyToFlash") ) { return hx::Val( copyToFlash_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"angleBetween") ) { return hx::Val( angleBetween_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"subtractPoint") ) { return hx::Val( subtractPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyFromFlash") ) { return hx::Val( copyFromFlash_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"subtractFromFlash") ) { return hx::Val( subtractFromFlash_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxPoint_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pool") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_pool() ); return true; } }
		if (HX_FIELD_EQ(inName,"weak") ) { outValue = weak_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_pool") ) { outValue = ( _pool ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_pool") ) { outValue = get_pool_dyn(); return true; }
	}
	return false;
}

hx::Val FlxPoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue.Cast< Float >()) );x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue.Cast< Float >()) );y=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_weak") ) { _weak=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_inPool") ) { _inPool=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxPoint_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_pool") ) { _pool=ioValue.Cast<  ::flixel::util::FlxPool_flixel_math_FlxPoint >(); return true; }
	}
	return false;
}

void FlxPoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("_weak","\x57","\x78","\x06","\x02"));
	outFields->push(HX_HCSTRING("_inPool","\x00","\x71","\x39","\xf5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxPoint_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(FlxPoint_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(FlxPoint_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsBool,(int)offsetof(FlxPoint_obj,_weak),HX_HCSTRING("_weak","\x57","\x78","\x06","\x02")},
	{hx::fsBool,(int)offsetof(FlxPoint_obj,_inPool),HX_HCSTRING("_inPool","\x00","\x71","\x39","\xf5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxPoint_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::flixel::util::FlxPool_flixel_math_FlxPoint*/ ,(void *) &FlxPoint_obj::_pool,HX_HCSTRING("_pool","\xbb","\x9c","\x6d","\xfd")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxPoint_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("_weak","\x57","\x78","\x06","\x02"),
	HX_HCSTRING("_inPool","\x00","\x71","\x39","\xf5"),
	HX_HCSTRING("put","\xcf","\x62","\x55","\x00"),
	HX_HCSTRING("putWeak","\xe7","\xfe","\x6e","\xfd"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("addPoint","\x6f","\xda","\xec","\x3f"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("subtractPoint","\x9c","\xc6","\x66","\x44"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("copyTo","\x90","\x1c","\x33","\xc9"),
	HX_HCSTRING("copyFromFlash","\x71","\xa5","\xda","\x18"),
	HX_HCSTRING("copyToFlash","\x00","\xff","\x24","\x25"),
	HX_HCSTRING("addToFlash","\x14","\xae","\x9a","\x36"),
	HX_HCSTRING("subtractFromFlash","\x32","\x48","\x51","\x65"),
	HX_HCSTRING("inCoords","\xe3","\xed","\x02","\x51"),
	HX_HCSTRING("inRect","\xa9","\x2b","\x0d","\x88"),
	HX_HCSTRING("distanceTo","\x10","\xd4","\xec","\x8b"),
	HX_HCSTRING("floor","\xcc","\xd1","\x96","\x02"),
	HX_HCSTRING("ceil","\x05","\x1f","\xbd","\x41"),
	HX_HCSTRING("round","\x4e","\xf8","\x65","\xed"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("angleBetween","\x35","\xe6","\xd4","\x69"),
	HX_HCSTRING("toVector","\x9e","\x58","\x9c","\xbe"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	::String(null()) };

static void FlxPoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxPoint_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxPoint_obj::_pool,"_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxPoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxPoint_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxPoint_obj::_pool,"_pool");
};

#endif

hx::Class FlxPoint_obj::__mClass;

static ::String FlxPoint_obj_sStaticFields[] = {
	HX_HCSTRING("_pool","\xbb","\x9c","\x6d","\xfd"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("weak","\x78","\x5c","\xf5","\x4e"),
	HX_HCSTRING("get_pool","\x65","\x3c","\x17","\xca"),
	::String(null())
};

void FlxPoint_obj::__register()
{
	hx::Object *dummy = new FlxPoint_obj;
	FlxPoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.math.FlxPoint","\x72","\x08","\x84","\xd0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxPoint_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxPoint_obj::__SetStatic;
	__mClass->mMarkFunc = FlxPoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxPoint_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxPoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxPoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxPoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxPoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxPoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxPoint_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_cceaeff5e596bc9e_16_boot)
HXDLIN(  16)		_pool =  ::flixel::util::FlxPool_flixel_math_FlxPoint_obj::__alloc( HX_CTX ,hx::ClassOf< ::flixel::math::FlxPoint >());
            	}
}

} // end namespace flixel
} // end namespace math
