// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxVector
#include <flixel/math/FlxVector.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxVector
#include <flixel/util/FlxPool_flixel_math_FlxVector.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_13a28a0757f1f53f_8_new,"flixel.math.FlxVector","new",0xe9d1dfd3,"flixel.math.FlxVector.new","flixel/math/FlxVector.hx",8,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_38_put,"flixel.math.FlxVector","put",0xe9d37242,"flixel.math.FlxVector.put","flixel/math/FlxVector.hx",38,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_93_set,"flixel.math.FlxVector","set",0xe9d5ab15,"flixel.math.FlxVector.set","flixel/math/FlxVector.hx",93,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_106_scale,"flixel.math.FlxVector","scale",0x4985e0bd,"flixel.math.FlxVector.scale","flixel/math/FlxVector.hx",106,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_119_scaleNew,"flixel.math.FlxVector","scaleNew",0x448efba3,"flixel.math.FlxVector.scaleNew","flixel/math/FlxVector.hx",119,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_129_addNew,"flixel.math.FlxVector","addNew",0x6e7dbb2c,"flixel.math.FlxVector.addNew","flixel/math/FlxVector.hx",129,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_142_subtractNew,"flixel.math.FlxVector","subtractNew",0x8b10b21f,"flixel.math.FlxVector.subtractNew","flixel/math/FlxVector.hx",142,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_156_dotProduct,"flixel.math.FlxVector","dotProduct",0x468b3c93,"flixel.math.FlxVector.dotProduct","flixel/math/FlxVector.hx",156,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_166_dotProdWithNormalizing,"flixel.math.FlxVector","dotProdWithNormalizing",0x0a930731,"flixel.math.FlxVector.dotProdWithNormalizing","flixel/math/FlxVector.hx",166,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_179_isPerpendicular,"flixel.math.FlxVector","isPerpendicular",0xefca0053,"flixel.math.FlxVector.isPerpendicular","flixel/math/FlxVector.hx",179,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_190_crossProductLength,"flixel.math.FlxVector","crossProductLength",0x30678fc2,"flixel.math.FlxVector.crossProductLength","flixel/math/FlxVector.hx",190,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_201_isParallel,"flixel.math.FlxVector","isParallel",0x0140d1be,"flixel.math.FlxVector.isParallel","flixel/math/FlxVector.hx",201,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_211_isZero,"flixel.math.FlxVector","isZero",0x3dd0ae9f,"flixel.math.FlxVector.isZero","flixel/math/FlxVector.hx",211,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_218_zero,"flixel.math.FlxVector","zero",0xb5c08455,"flixel.math.FlxVector.zero","flixel/math/FlxVector.hx",218,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_227_normalize,"flixel.math.FlxVector","normalize",0x37b8df40,"flixel.math.FlxVector.normalize","flixel/math/FlxVector.hx",227,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_240_isNormalized,"flixel.math.FlxVector","isNormalized",0x08ca76ee,"flixel.math.FlxVector.isNormalized","flixel/math/FlxVector.hx",240,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_250_rotateByRadians,"flixel.math.FlxVector","rotateByRadians",0xb2c6f773,"flixel.math.FlxVector.rotateByRadians","flixel/math/FlxVector.hx",250,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_269_rotateByDegrees,"flixel.math.FlxVector","rotateByDegrees",0xc63194a8,"flixel.math.FlxVector.rotateByDegrees","flixel/math/FlxVector.hx",269,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_280_rotateWithTrig,"flixel.math.FlxVector","rotateWithTrig",0x4eb49eea,"flixel.math.FlxVector.rotateWithTrig","flixel/math/FlxVector.hx",280,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_291_rightNormal,"flixel.math.FlxVector","rightNormal",0x19057996,"flixel.math.FlxVector.rightNormal","flixel/math/FlxVector.hx",291,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_304_leftNormal,"flixel.math.FlxVector","leftNormal",0x6815427b,"flixel.math.FlxVector.leftNormal","flixel/math/FlxVector.hx",304,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_317_negate,"flixel.math.FlxVector","negate",0x36921c2f,"flixel.math.FlxVector.negate","flixel/math/FlxVector.hx",317,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_325_negateNew,"flixel.math.FlxVector","negateNew",0x51f3f371,"flixel.math.FlxVector.negateNew","flixel/math/FlxVector.hx",325,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_337_projectTo,"flixel.math.FlxVector","projectTo",0x21102c67,"flixel.math.FlxVector.projectTo","flixel/math/FlxVector.hx",337,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_357_projectToNormalized,"flixel.math.FlxVector","projectToNormalized",0xa11cbb7e,"flixel.math.FlxVector.projectToNormalized","flixel/math/FlxVector.hx",357,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_373_perpProduct,"flixel.math.FlxVector","perpProduct",0x72ab38ef,"flixel.math.FlxVector.perpProduct","flixel/math/FlxVector.hx",373,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_385_ratio,"flixel.math.FlxVector","ratio",0xb4db473e,"flixel.math.FlxVector.ratio","flixel/math/FlxVector.hx",385,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_404_findIntersection,"flixel.math.FlxVector","findIntersection",0xca04b4cf,"flixel.math.FlxVector.findIntersection","flixel/math/FlxVector.hx",404,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_429_findIntersectionInBounds,"flixel.math.FlxVector","findIntersectionInBounds",0x855a2829,"flixel.math.FlxVector.findIntersectionInBounds","flixel/math/FlxVector.hx",429,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_451_truncate,"flixel.math.FlxVector","truncate",0x122fce13,"flixel.math.FlxVector.truncate","flixel/math/FlxVector.hx",451,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_464_radiansBetween,"flixel.math.FlxVector","radiansBetween",0x7a6c94e3,"flixel.math.FlxVector.radiansBetween","flixel/math/FlxVector.hx",464,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_475_degreesBetween,"flixel.math.FlxVector","degreesBetween",0xcfb1384e,"flixel.math.FlxVector.degreesBetween","flixel/math/FlxVector.hx",475,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_485_sign,"flixel.math.FlxVector","sign",0xb123056a,"flixel.math.FlxVector.sign","flixel/math/FlxVector.hx",485,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_499_dist,"flixel.math.FlxVector","dist",0xa738dc93,"flixel.math.FlxVector.dist","flixel/math/FlxVector.hx",499,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_506_distSquared,"flixel.math.FlxVector","distSquared",0xa9f1dcd4,"flixel.math.FlxVector.distSquared","flixel/math/FlxVector.hx",506,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_520_bounce,"flixel.math.FlxVector","bounce",0x35965ff5,"flixel.math.FlxVector.bounce","flixel/math/FlxVector.hx",520,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_536_bounceWithFriction,"flixel.math.FlxVector","bounceWithFriction",0xe6f568b5,"flixel.math.FlxVector.bounceWithFriction","flixel/math/FlxVector.hx",536,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_555_isValid,"flixel.math.FlxVector","isValid",0x88845da5,"flixel.math.FlxVector.isValid","flixel/math/FlxVector.hx",555,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_565_clone,"flixel.math.FlxVector","clone",0x191a2590,"flixel.math.FlxVector.clone","flixel/math/FlxVector.hx",565,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_577_get_dx,"flixel.math.FlxVector","get_dx",0x72a8c94a,"flixel.math.FlxVector.get_dx","flixel/math/FlxVector.hx",577,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_584_get_dy,"flixel.math.FlxVector","get_dy",0x72a8c94b,"flixel.math.FlxVector.get_dy","flixel/math/FlxVector.hx",584,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_592_get_length,"flixel.math.FlxVector","get_length",0x982a199c,"flixel.math.FlxVector.get_length","flixel/math/FlxVector.hx",592,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_596_set_length,"flixel.math.FlxVector","set_length",0x9ba7b810,"flixel.math.FlxVector.set_length","flixel/math/FlxVector.hx",596,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_608_get_lengthSquared,"flixel.math.FlxVector","get_lengthSquared",0x311842eb,"flixel.math.FlxVector.get_lengthSquared","flixel/math/FlxVector.hx",608,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_613_get_degrees,"flixel.math.FlxVector","get_degrees",0x3f6c7e31,"flixel.math.FlxVector.get_degrees","flixel/math/FlxVector.hx",613,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_617_set_degrees,"flixel.math.FlxVector","set_degrees",0x49d9853d,"flixel.math.FlxVector.set_degrees","flixel/math/FlxVector.hx",617,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_623_get_radians,"flixel.math.FlxVector","get_radians",0x2c01e0fc,"flixel.math.FlxVector.get_radians","flixel/math/FlxVector.hx",623,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_630_set_radians,"flixel.math.FlxVector","set_radians",0x366ee808,"flixel.math.FlxVector.set_radians","flixel/math/FlxVector.hx",630,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_640_get_rx,"flixel.math.FlxVector","get_rx",0x72a8d57c,"flixel.math.FlxVector.get_rx","flixel/math/FlxVector.hx",640,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_645_get_ry,"flixel.math.FlxVector","get_ry",0x72a8d57d,"flixel.math.FlxVector.get_ry","flixel/math/FlxVector.hx",645,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_650_get_lx,"flixel.math.FlxVector","get_lx",0x72a8d042,"flixel.math.FlxVector.get_lx","flixel/math/FlxVector.hx",650,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_655_get_ly,"flixel.math.FlxVector","get_ly",0x72a8d043,"flixel.math.FlxVector.get_ly","flixel/math/FlxVector.hx",655,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_27_get,"flixel.math.FlxVector","get",0xe9cc9009,"flixel.math.FlxVector.get","flixel/math/FlxVector.hx",27,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_10_boot,"flixel.math.FlxVector","boot",0xa5eaf95f,"flixel.math.FlxVector.boot","flixel/math/FlxVector.hx",10,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_11_boot,"flixel.math.FlxVector","boot",0xa5eaf95f,"flixel.math.FlxVector.boot","flixel/math/FlxVector.hx",11,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_13_boot,"flixel.math.FlxVector","boot",0xa5eaf95f,"flixel.math.FlxVector.boot","flixel/math/FlxVector.hx",13,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_15_boot,"flixel.math.FlxVector","boot",0xa5eaf95f,"flixel.math.FlxVector.boot","flixel/math/FlxVector.hx",15,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_16_boot,"flixel.math.FlxVector","boot",0xa5eaf95f,"flixel.math.FlxVector.boot","flixel/math/FlxVector.hx",16,0x1fcaa75d)
HX_LOCAL_STACK_FRAME(_hx_pos_13a28a0757f1f53f_17_boot,"flixel.math.FlxVector","boot",0xa5eaf95f,"flixel.math.FlxVector.boot","flixel/math/FlxVector.hx",17,0x1fcaa75d)
namespace flixel{
namespace math{

void FlxVector_obj::__construct( ::Dynamic X, ::Dynamic Y){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_8_new)
HXDLIN(   8)		super::__construct(X,Y);
            	}

Dynamic FlxVector_obj::__CreateEmpty() { return new FlxVector_obj; }

void *FlxVector_obj::_hx_vtable = 0;

Dynamic FlxVector_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxVector_obj > _hx_result = new FlxVector_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxVector_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x30935e91) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x30935e91;
	} else {
		return inClassId==(int)0x40ef3a42;
	}
}

void FlxVector_obj::put(){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_38_put)
HXDLIN(  38)		if (!(this->_inPool)) {
HXLINE(  40)			this->_inPool = true;
HXLINE(  41)			::flixel::math::FlxVector_obj::_pool->putUnsafe(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


 ::flixel::math::FlxPoint FlxVector_obj::set(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_93_set)
HXLINE(  94)		this->set_x(X);
HXLINE(  95)		this->set_y(Y);
HXLINE(  96)		return hx::ObjectPtr<OBJ_>(this);
            	}


 ::flixel::math::FlxPoint FlxVector_obj::scale(Float k){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_106_scale)
HXLINE( 107)		this->super::scale(k);
HXLINE( 108)		return hx::ObjectPtr<OBJ_>(this);
            	}


 ::flixel::math::FlxVector FlxVector_obj::scaleNew(Float k){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_119_scaleNew)
HXDLIN( 119)		return Dynamic( this->clone(null())->scale(k)).StaticCast<  ::flixel::math::FlxVector >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,scaleNew,return )

 ::flixel::math::FlxVector FlxVector_obj::addNew( ::flixel::math::FlxVector v){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_129_addNew)
HXLINE( 130)		 ::flixel::math::FlxVector nv = this->clone(null());
HXLINE( 131)		nv->addPoint(v);
HXLINE( 132)		return nv;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,addNew,return )

 ::flixel::math::FlxVector FlxVector_obj::subtractNew( ::flixel::math::FlxVector v){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_142_subtractNew)
HXLINE( 143)		 ::flixel::math::FlxVector nv = this->clone(null());
HXLINE( 144)		nv->subtractPoint(v);
HXLINE( 145)		return nv;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,subtractNew,return )

Float FlxVector_obj::dotProduct( ::flixel::math::FlxVector v){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_156_dotProduct)
HXDLIN( 156)		Float _hx_tmp = (this->x * v->x);
HXDLIN( 156)		return (_hx_tmp + (this->y * v->y));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,dotProduct,return )

Float FlxVector_obj::dotProdWithNormalizing( ::flixel::math::FlxVector v){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_166_dotProdWithNormalizing)
HXLINE( 167)		 ::flixel::math::FlxVector normalized = v->clone(::flixel::math::FlxVector_obj::_vector1)->normalize();
HXLINE( 168)		Float _hx_tmp = (this->x * normalized->x);
HXDLIN( 168)		return (_hx_tmp + (this->y * normalized->y));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,dotProdWithNormalizing,return )

bool FlxVector_obj::isPerpendicular( ::flixel::math::FlxVector v){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_179_isPerpendicular)
HXDLIN( 179)		Float _hx_tmp = (this->x * v->x);
HXDLIN( 179)		return (::Math_obj::abs((_hx_tmp + (this->y * v->y))) < ((Float)9.9999999999999984e-015));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,isPerpendicular,return )

Float FlxVector_obj::crossProductLength( ::flixel::math::FlxVector v){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_190_crossProductLength)
HXDLIN( 190)		Float _hx_tmp = (this->x * v->y);
HXDLIN( 190)		return (_hx_tmp - (this->y * v->x));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,crossProductLength,return )

bool FlxVector_obj::isParallel( ::flixel::math::FlxVector v){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_201_isParallel)
HXDLIN( 201)		Float _hx_tmp = (this->x * v->y);
HXDLIN( 201)		return (::Math_obj::abs((_hx_tmp - (this->y * v->x))) < ((Float)9.9999999999999984e-015));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,isParallel,return )

bool FlxVector_obj::isZero(){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_211_isZero)
HXDLIN( 211)		if ((::Math_obj::abs(this->x) < ((Float)0.0000001))) {
HXDLIN( 211)			return (::Math_obj::abs(this->y) < ((Float)0.0000001));
            		}
            		else {
HXDLIN( 211)			return false;
            		}
HXDLIN( 211)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxVector_obj,isZero,return )

 ::flixel::math::FlxVector FlxVector_obj::zero(){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_218_zero)
HXLINE( 219)		this->set_x(this->set_y((int)0));
HXLINE( 220)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxVector_obj,zero,return )

 ::flixel::math::FlxVector FlxVector_obj::normalize(){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_227_normalize)
HXLINE( 228)		bool _hx_tmp;
HXDLIN( 228)		if ((::Math_obj::abs(this->x) < ((Float)0.0000001))) {
HXLINE( 228)			_hx_tmp = (::Math_obj::abs(this->y) < ((Float)0.0000001));
            		}
            		else {
HXLINE( 228)			_hx_tmp = false;
            		}
HXDLIN( 228)		if (_hx_tmp) {
HXLINE( 230)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 232)		Float _hx_tmp1 = (this->x * this->x);
HXDLIN( 232)		return this->scale(((Float)(int)1 / (Float)::Math_obj::sqrt((_hx_tmp1 + (this->y * this->y)))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxVector_obj,normalize,return )

bool FlxVector_obj::isNormalized(){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_240_isNormalized)
HXDLIN( 240)		Float _hx_tmp = (this->x * this->x);
HXDLIN( 240)		return (::Math_obj::abs(((_hx_tmp + (this->y * this->y)) - (int)1)) < ((Float)9.9999999999999984e-015));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxVector_obj,isNormalized,return )

 ::flixel::math::FlxVector FlxVector_obj::rotateByRadians(Float rads){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_250_rotateByRadians)
HXLINE( 251)		Float s = ::Math_obj::sin(rads);
HXLINE( 252)		Float c = ::Math_obj::cos(rads);
HXLINE( 253)		Float tempX = this->x;
HXLINE( 255)		this->set_x(((tempX * c) - (this->y * s)));
HXLINE( 256)		this->set_y(((tempX * s) + (this->y * c)));
HXLINE( 258)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,rotateByRadians,return )

 ::flixel::math::FlxVector FlxVector_obj::rotateByDegrees(Float degs){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_269_rotateByDegrees)
HXDLIN( 269)		Float rads = (degs * ((Float)::Math_obj::PI / (Float)(int)180));
HXDLIN( 269)		Float s = ::Math_obj::sin(rads);
HXDLIN( 269)		Float c = ::Math_obj::cos(rads);
HXDLIN( 269)		Float tempX = this->x;
HXDLIN( 269)		this->set_x(((tempX * c) - (this->y * s)));
HXDLIN( 269)		this->set_y(((tempX * s) + (this->y * c)));
HXDLIN( 269)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,rotateByDegrees,return )

 ::flixel::math::FlxVector FlxVector_obj::rotateWithTrig(Float sin,Float cos){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_280_rotateWithTrig)
HXLINE( 281)		Float tempX = this->x;
HXLINE( 282)		this->set_x(((tempX * cos) - (this->y * sin)));
HXLINE( 283)		this->set_y(((tempX * sin) + (this->y * cos)));
HXLINE( 284)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxVector_obj,rotateWithTrig,return )

 ::flixel::math::FlxVector FlxVector_obj::rightNormal( ::flixel::math::FlxVector vec){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_291_rightNormal)
HXLINE( 292)		if (hx::IsNull( vec )) {
HXLINE( 294)			 ::flixel::math::FlxVector vector = Dynamic( ::flixel::math::FlxVector_obj::_pool->get()->set((int)0,(int)0)).StaticCast<  ::flixel::math::FlxVector >();
HXDLIN( 294)			vector->_inPool = false;
HXDLIN( 294)			vec = vector;
            		}
HXLINE( 296)		Dynamic( vec->set(-(this->y),this->x)).StaticCast<  ::flixel::math::FlxVector >();
HXLINE( 297)		return vec;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,rightNormal,return )

 ::flixel::math::FlxVector FlxVector_obj::leftNormal( ::flixel::math::FlxVector vec){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_304_leftNormal)
HXLINE( 305)		if (hx::IsNull( vec )) {
HXLINE( 307)			 ::flixel::math::FlxVector vector = Dynamic( ::flixel::math::FlxVector_obj::_pool->get()->set((int)0,(int)0)).StaticCast<  ::flixel::math::FlxVector >();
HXDLIN( 307)			vector->_inPool = false;
HXDLIN( 307)			vec = vector;
            		}
HXLINE( 309)		Dynamic( vec->set(this->y,-(this->x))).StaticCast<  ::flixel::math::FlxVector >();
HXLINE( 310)		return vec;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,leftNormal,return )

 ::flixel::math::FlxVector FlxVector_obj::negate(){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_317_negate)
HXLINE( 318)		{
HXLINE( 318)			 ::flixel::math::FlxVector _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 318)			_g->set_x((_g->x * (int)-1));
            		}
HXLINE( 319)		{
HXLINE( 319)			 ::flixel::math::FlxVector _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 319)			_g1->set_y((_g1->y * (int)-1));
            		}
HXLINE( 320)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxVector_obj,negate,return )

 ::flixel::math::FlxVector FlxVector_obj::negateNew(){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_325_negateNew)
HXDLIN( 325)		 ::flixel::math::FlxVector _this = this->clone(null());
HXDLIN( 325)		{
HXDLIN( 325)			 ::flixel::math::FlxVector _g = _this;
HXDLIN( 325)			_g->set_x((_g->x * (int)-1));
            		}
HXDLIN( 325)		{
HXDLIN( 325)			 ::flixel::math::FlxVector _g1 = _this;
HXDLIN( 325)			_g1->set_y((_g1->y * (int)-1));
            		}
HXDLIN( 325)		return _this;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxVector_obj,negateNew,return )

 ::flixel::math::FlxVector FlxVector_obj::projectTo( ::flixel::math::FlxVector v, ::flixel::math::FlxVector proj){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_337_projectTo)
HXLINE( 338)		Float dp = (this->x * v->x);
HXDLIN( 338)		Float dp1 = (dp + (this->y * v->y));
HXLINE( 339)		Float lenSq = (v->x * v->x);
HXDLIN( 339)		Float lenSq1 = (lenSq + (v->y * v->y));
HXLINE( 341)		if (hx::IsNull( proj )) {
HXLINE( 343)			 ::flixel::math::FlxVector vector = Dynamic( ::flixel::math::FlxVector_obj::_pool->get()->set((int)0,(int)0)).StaticCast<  ::flixel::math::FlxVector >();
HXDLIN( 343)			vector->_inPool = false;
HXDLIN( 343)			proj = vector;
            		}
HXLINE( 346)		Float _hx_tmp = ((Float)(dp1 * v->x) / (Float)lenSq1);
HXDLIN( 346)		return Dynamic( proj->set(_hx_tmp,((Float)(dp1 * v->y) / (Float)lenSq1))).StaticCast<  ::flixel::math::FlxVector >();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxVector_obj,projectTo,return )

 ::flixel::math::FlxVector FlxVector_obj::projectToNormalized( ::flixel::math::FlxVector v, ::flixel::math::FlxVector proj){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_357_projectToNormalized)
HXLINE( 358)		Float dp = (this->x * v->x);
HXDLIN( 358)		Float dp1 = (dp + (this->y * v->y));
HXLINE( 360)		if (hx::IsNull( proj )) {
HXLINE( 362)			 ::flixel::math::FlxVector vector = Dynamic( ::flixel::math::FlxVector_obj::_pool->get()->set((int)0,(int)0)).StaticCast<  ::flixel::math::FlxVector >();
HXDLIN( 362)			vector->_inPool = false;
HXDLIN( 362)			proj = vector;
            		}
HXLINE( 365)		Float _hx_tmp = (dp1 * v->x);
HXDLIN( 365)		return Dynamic( proj->set(_hx_tmp,(dp1 * v->y))).StaticCast<  ::flixel::math::FlxVector >();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxVector_obj,projectToNormalized,return )

Float FlxVector_obj::perpProduct( ::flixel::math::FlxVector v){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_373_perpProduct)
HXDLIN( 373)		Float _hx_tmp = (this->y * v->x);
HXDLIN( 373)		return (_hx_tmp + (-(this->x) * v->y));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,perpProduct,return )

Float FlxVector_obj::ratio( ::flixel::math::FlxVector a, ::flixel::math::FlxVector b, ::flixel::math::FlxVector v){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_385_ratio)
HXLINE( 386)		Float _hx_tmp = (this->x * v->y);
HXDLIN( 386)		if ((::Math_obj::abs((_hx_tmp - (this->y * v->x))) < ((Float)9.9999999999999984e-015))) {
HXLINE( 386)			return ::Math_obj::NaN;
            		}
HXLINE( 387)		bool _hx_tmp1;
HXDLIN( 387)		Float _hx_tmp2 = (this->x * this->x);
HXDLIN( 387)		if (!(((_hx_tmp2 + (this->y * this->y)) < ((Float)9.9999999999999984e-015)))) {
HXLINE( 387)			Float _hx_tmp3 = (v->x * v->x);
HXDLIN( 387)			_hx_tmp1 = ((_hx_tmp3 + (v->y * v->y)) < ((Float)9.9999999999999984e-015));
            		}
            		else {
HXLINE( 387)			_hx_tmp1 = true;
            		}
HXDLIN( 387)		if (_hx_tmp1) {
HXLINE( 387)			return ::Math_obj::NaN;
            		}
HXLINE( 389)		::flixel::math::FlxVector_obj::_vector1 = b->clone(::flixel::math::FlxVector_obj::_vector1);
HXLINE( 390)		::flixel::math::FlxVector_obj::_vector1->subtractPoint(a);
HXLINE( 392)		 ::flixel::math::FlxVector _this = ::flixel::math::FlxVector_obj::_vector1;
HXDLIN( 392)		Float _hx_tmp4 = (_this->y * v->x);
HXDLIN( 392)		Float _hx_tmp5 = (_hx_tmp4 + (-(_this->x) * v->y));
HXDLIN( 392)		Float _hx_tmp6 = (this->y * v->x);
HXDLIN( 392)		return ((Float)_hx_tmp5 / (Float)(_hx_tmp6 + (-(this->x) * v->y)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxVector_obj,ratio,return )

 ::flixel::math::FlxVector FlxVector_obj::findIntersection( ::flixel::math::FlxVector a, ::flixel::math::FlxVector b, ::flixel::math::FlxVector v, ::flixel::math::FlxVector intersection){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_404_findIntersection)
HXLINE( 405)		Float t = this->ratio(a,b,v);
HXLINE( 407)		if (hx::IsNull( intersection )) {
HXLINE( 409)			 ::flixel::math::FlxVector vector = Dynamic( ::flixel::math::FlxVector_obj::_pool->get()->set((int)0,(int)0)).StaticCast<  ::flixel::math::FlxVector >();
HXDLIN( 409)			vector->_inPool = false;
HXDLIN( 409)			intersection = vector;
            		}
HXLINE( 412)		if (::Math_obj::isNaN(t)) {
HXLINE( 414)			return Dynamic( intersection->set(::Math_obj::NaN,::Math_obj::NaN)).StaticCast<  ::flixel::math::FlxVector >();
            		}
HXLINE( 417)		Float a1 = a->x;
HXDLIN( 417)		Float _hx_tmp = (a1 + (t * this->x));
HXDLIN( 417)		Float a2 = a->y;
HXDLIN( 417)		return Dynamic( intersection->set(_hx_tmp,(a2 + (t * this->y)))).StaticCast<  ::flixel::math::FlxVector >();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxVector_obj,findIntersection,return )

 ::flixel::math::FlxVector FlxVector_obj::findIntersectionInBounds( ::flixel::math::FlxVector a, ::flixel::math::FlxVector b, ::flixel::math::FlxVector v, ::flixel::math::FlxVector intersection){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_429_findIntersectionInBounds)
HXLINE( 430)		if (hx::IsNull( intersection )) {
HXLINE( 432)			 ::flixel::math::FlxVector vector = Dynamic( ::flixel::math::FlxVector_obj::_pool->get()->set((int)0,(int)0)).StaticCast<  ::flixel::math::FlxVector >();
HXDLIN( 432)			vector->_inPool = false;
HXDLIN( 432)			intersection = vector;
            		}
HXLINE( 435)		Float t1 = this->ratio(a,b,v);
HXLINE( 436)		Float t2 = v->ratio(b,a,hx::ObjectPtr<OBJ_>(this));
HXLINE( 437)		bool _hx_tmp;
HXDLIN( 437)		bool _hx_tmp1;
HXDLIN( 437)		bool _hx_tmp2;
HXDLIN( 437)		bool _hx_tmp3;
HXDLIN( 437)		bool _hx_tmp4;
HXDLIN( 437)		if (!(::Math_obj::isNaN(t1))) {
HXLINE( 437)			_hx_tmp4 = !(::Math_obj::isNaN(t2));
            		}
            		else {
HXLINE( 437)			_hx_tmp4 = false;
            		}
HXDLIN( 437)		if (_hx_tmp4) {
HXLINE( 437)			_hx_tmp3 = (t1 > (int)0);
            		}
            		else {
HXLINE( 437)			_hx_tmp3 = false;
            		}
HXDLIN( 437)		if (_hx_tmp3) {
HXLINE( 437)			_hx_tmp2 = (t1 <= (int)1);
            		}
            		else {
HXLINE( 437)			_hx_tmp2 = false;
            		}
HXDLIN( 437)		if (_hx_tmp2) {
HXLINE( 437)			_hx_tmp1 = (t2 > (int)0);
            		}
            		else {
HXLINE( 437)			_hx_tmp1 = false;
            		}
HXDLIN( 437)		if (_hx_tmp1) {
HXLINE( 437)			_hx_tmp = (t2 <= (int)1);
            		}
            		else {
HXLINE( 437)			_hx_tmp = false;
            		}
HXDLIN( 437)		if (_hx_tmp) {
HXLINE( 439)			Float a1 = a->x;
HXDLIN( 439)			Float _hx_tmp5 = (a1 + (t1 * this->x));
HXDLIN( 439)			Float a2 = a->y;
HXDLIN( 439)			return Dynamic( intersection->set(_hx_tmp5,(a2 + (t1 * this->y)))).StaticCast<  ::flixel::math::FlxVector >();
            		}
HXLINE( 442)		return Dynamic( intersection->set(::Math_obj::NaN,::Math_obj::NaN)).StaticCast<  ::flixel::math::FlxVector >();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxVector_obj,findIntersectionInBounds,return )

 ::flixel::math::FlxVector FlxVector_obj::truncate(Float max){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_451_truncate)
HXLINE( 452)		{
HXLINE( 452)			Float l = (this->x * this->x);
HXDLIN( 452)			Float l1 = ::Math_obj::min(max,::Math_obj::sqrt((l + (this->y * this->y))));
HXDLIN( 452)			bool _hx_tmp;
HXDLIN( 452)			if ((::Math_obj::abs(this->x) < ((Float)0.0000001))) {
HXLINE( 452)				_hx_tmp = (::Math_obj::abs(this->y) < ((Float)0.0000001));
            			}
            			else {
HXLINE( 452)				_hx_tmp = false;
            			}
HXDLIN( 452)			if (!(_hx_tmp)) {
HXLINE( 452)				Float a = this->get_radians();
HXDLIN( 452)				this->set_x((l1 * ::Math_obj::cos(a)));
HXDLIN( 452)				this->set_y((l1 * ::Math_obj::sin(a)));
            			}
            		}
HXLINE( 453)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,truncate,return )

Float FlxVector_obj::radiansBetween( ::flixel::math::FlxVector v){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_464_radiansBetween)
HXDLIN( 464)		Float _hx_tmp = (this->x * v->x);
HXDLIN( 464)		Float _hx_tmp1 = (_hx_tmp + (this->y * v->y));
HXDLIN( 464)		Float _hx_tmp2 = (this->x * this->x);
HXDLIN( 464)		Float _hx_tmp3 = ::Math_obj::sqrt((_hx_tmp2 + (this->y * this->y)));
HXDLIN( 464)		Float _hx_tmp4 = (v->x * v->x);
HXDLIN( 464)		return ::Math_obj::acos(((Float)_hx_tmp1 / (Float)(_hx_tmp3 * ::Math_obj::sqrt((_hx_tmp4 + (v->y * v->y))))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,radiansBetween,return )

Float FlxVector_obj::degreesBetween( ::flixel::math::FlxVector v){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_475_degreesBetween)
HXDLIN( 475)		Float _hx_tmp = (this->x * v->x);
HXDLIN( 475)		Float _hx_tmp1 = (_hx_tmp + (this->y * v->y));
HXDLIN( 475)		Float _hx_tmp2 = (this->x * this->x);
HXDLIN( 475)		Float _hx_tmp3 = ::Math_obj::sqrt((_hx_tmp2 + (this->y * this->y)));
HXDLIN( 475)		Float _hx_tmp4 = (v->x * v->x);
HXDLIN( 475)		Float _hx_tmp5 = ::Math_obj::acos(((Float)_hx_tmp1 / (Float)(_hx_tmp3 * ::Math_obj::sqrt((_hx_tmp4 + (v->y * v->y))))));
HXDLIN( 475)		return (_hx_tmp5 * ((Float)(int)180 / (Float)::Math_obj::PI));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,degreesBetween,return )

int FlxVector_obj::sign( ::flixel::math::FlxVector a, ::flixel::math::FlxVector b){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_485_sign)
HXLINE( 486)		Float signFl = (a->x - this->x);
HXDLIN( 486)		Float signFl1 = (signFl * (b->y - this->y));
HXDLIN( 486)		Float signFl2 = (a->y - this->y);
HXDLIN( 486)		Float signFl3 = (signFl1 - (signFl2 * (b->x - this->x)));
HXLINE( 487)		if ((signFl3 == (int)0)) {
HXLINE( 489)			return (int)0;
            		}
HXLINE( 491)		return ::Math_obj::round(((Float)signFl3 / (Float)::Math_obj::abs(signFl3)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxVector_obj,sign,return )

Float FlxVector_obj::dist( ::flixel::math::FlxVector v){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_499_dist)
HXDLIN( 499)		Float dx = (v->x - this->x);
HXDLIN( 499)		Float dy = (v->y - this->y);
HXDLIN( 499)		return ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,dist,return )

Float FlxVector_obj::distSquared( ::flixel::math::FlxVector v){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_506_distSquared)
HXLINE( 507)		Float dx = (v->x - this->x);
HXLINE( 508)		Float dy = (v->y - this->y);
HXLINE( 509)		return ((dx * dx) + (dy * dy));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,distSquared,return )

 ::flixel::math::FlxVector FlxVector_obj::bounce( ::flixel::math::FlxVector normal,hx::Null< Float >  __o_bounceCoeff){
Float bounceCoeff = __o_bounceCoeff.Default(1);
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_520_bounce)
HXLINE( 521)		Float d = (this->x * normal->x);
HXDLIN( 521)		Float d1 = (((int)1 + bounceCoeff) * (d + (this->y * normal->y)));
HXLINE( 522)		{
HXLINE( 522)			 ::flixel::math::FlxVector _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 522)			Float _g1 = _g->x;
HXDLIN( 522)			_g->set_x((_g1 - (d1 * normal->x)));
            		}
HXLINE( 523)		{
HXLINE( 523)			 ::flixel::math::FlxVector _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 523)			Float _g3 = _g2->y;
HXDLIN( 523)			_g2->set_y((_g3 - (d1 * normal->y)));
            		}
HXLINE( 524)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxVector_obj,bounce,return )

 ::flixel::math::FlxVector FlxVector_obj::bounceWithFriction( ::flixel::math::FlxVector normal,hx::Null< Float >  __o_bounceCoeff,hx::Null< Float >  __o_friction){
Float bounceCoeff = __o_bounceCoeff.Default(1);
Float friction = __o_friction.Default(0);
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_536_bounceWithFriction)
HXLINE( 537)		 ::flixel::math::FlxVector p1 = normal->rightNormal(::flixel::math::FlxVector_obj::_vector3);
HXDLIN( 537)		 ::flixel::math::FlxVector p11 = this->projectToNormalized(p1,::flixel::math::FlxVector_obj::_vector1);
HXLINE( 538)		 ::flixel::math::FlxVector p2 = this->projectToNormalized(normal,::flixel::math::FlxVector_obj::_vector2);
HXLINE( 539)		Float bounceX = -(p2->x);
HXLINE( 540)		Float bounceY = -(p2->y);
HXLINE( 541)		Float frictionX = p11->x;
HXLINE( 542)		Float frictionY = p11->y;
HXLINE( 543)		this->set_x(((bounceX * bounceCoeff) + (frictionX * friction)));
HXLINE( 544)		this->set_y(((bounceY * bounceCoeff) + (frictionY * friction)));
HXLINE( 545)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxVector_obj,bounceWithFriction,return )

bool FlxVector_obj::isValid(){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_555_isValid)
HXDLIN( 555)		bool _hx_tmp;
HXDLIN( 555)		bool _hx_tmp1;
HXDLIN( 555)		if (!(::Math_obj::isNaN(this->x))) {
HXDLIN( 555)			_hx_tmp1 = !(::Math_obj::isNaN(this->y));
            		}
            		else {
HXDLIN( 555)			_hx_tmp1 = false;
            		}
HXDLIN( 555)		if (_hx_tmp1) {
HXDLIN( 555)			_hx_tmp = ::Math_obj::isFinite(this->x);
            		}
            		else {
HXDLIN( 555)			_hx_tmp = false;
            		}
HXDLIN( 555)		if (_hx_tmp) {
HXDLIN( 555)			return ::Math_obj::isFinite(this->y);
            		}
            		else {
HXDLIN( 555)			return false;
            		}
HXDLIN( 555)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxVector_obj,isValid,return )

 ::flixel::math::FlxVector FlxVector_obj::clone( ::flixel::math::FlxVector vec){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_565_clone)
HXLINE( 566)		if (hx::IsNull( vec )) {
HXLINE( 568)			 ::flixel::math::FlxVector vector = Dynamic( ::flixel::math::FlxVector_obj::_pool->get()->set((int)0,(int)0)).StaticCast<  ::flixel::math::FlxVector >();
HXDLIN( 568)			vector->_inPool = false;
HXDLIN( 568)			vec = vector;
            		}
HXLINE( 571)		vec->set_x(this->x);
HXLINE( 572)		vec->set_y(this->y);
HXLINE( 573)		return vec;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,clone,return )

Float FlxVector_obj::get_dx(){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_577_get_dx)
HXLINE( 578)		bool _hx_tmp;
HXDLIN( 578)		if ((::Math_obj::abs(this->x) < ((Float)0.0000001))) {
HXLINE( 578)			_hx_tmp = (::Math_obj::abs(this->y) < ((Float)0.0000001));
            		}
            		else {
HXLINE( 578)			_hx_tmp = false;
            		}
HXDLIN( 578)		if (_hx_tmp) {
HXLINE( 578)			return (int)0;
            		}
HXLINE( 580)		Float _hx_tmp1 = this->x;
HXDLIN( 580)		Float _hx_tmp2 = (this->x * this->x);
HXDLIN( 580)		return ((Float)_hx_tmp1 / (Float)::Math_obj::sqrt((_hx_tmp2 + (this->y * this->y))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxVector_obj,get_dx,return )

Float FlxVector_obj::get_dy(){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_584_get_dy)
HXLINE( 585)		bool _hx_tmp;
HXDLIN( 585)		if ((::Math_obj::abs(this->x) < ((Float)0.0000001))) {
HXLINE( 585)			_hx_tmp = (::Math_obj::abs(this->y) < ((Float)0.0000001));
            		}
            		else {
HXLINE( 585)			_hx_tmp = false;
            		}
HXDLIN( 585)		if (_hx_tmp) {
HXLINE( 585)			return (int)0;
            		}
HXLINE( 587)		Float _hx_tmp1 = this->y;
HXDLIN( 587)		Float _hx_tmp2 = (this->x * this->x);
HXDLIN( 587)		return ((Float)_hx_tmp1 / (Float)::Math_obj::sqrt((_hx_tmp2 + (this->y * this->y))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxVector_obj,get_dy,return )

Float FlxVector_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_592_get_length)
HXDLIN( 592)		Float _hx_tmp = (this->x * this->x);
HXDLIN( 592)		return ::Math_obj::sqrt((_hx_tmp + (this->y * this->y)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxVector_obj,get_length,return )

Float FlxVector_obj::set_length(Float l){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_596_set_length)
HXLINE( 597)		bool _hx_tmp;
HXDLIN( 597)		if ((::Math_obj::abs(this->x) < ((Float)0.0000001))) {
HXLINE( 597)			_hx_tmp = (::Math_obj::abs(this->y) < ((Float)0.0000001));
            		}
            		else {
HXLINE( 597)			_hx_tmp = false;
            		}
HXDLIN( 597)		if (!(_hx_tmp)) {
HXLINE( 599)			Float a = this->get_radians();
HXLINE( 600)			this->set_x((l * ::Math_obj::cos(a)));
HXLINE( 601)			this->set_y((l * ::Math_obj::sin(a)));
            		}
HXLINE( 603)		return l;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,set_length,return )

Float FlxVector_obj::get_lengthSquared(){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_608_get_lengthSquared)
HXDLIN( 608)		Float _hx_tmp = (this->x * this->x);
HXDLIN( 608)		return (_hx_tmp + (this->y * this->y));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxVector_obj,get_lengthSquared,return )

Float FlxVector_obj::get_degrees(){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_613_get_degrees)
HXDLIN( 613)		Float _hx_tmp = this->get_radians();
HXDLIN( 613)		return (_hx_tmp * ((Float)(int)180 / (Float)::Math_obj::PI));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxVector_obj,get_degrees,return )

Float FlxVector_obj::set_degrees(Float degs){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_617_set_degrees)
HXLINE( 618)		{
HXLINE( 618)			Float rads = (degs * ((Float)::Math_obj::PI / (Float)(int)180));
HXDLIN( 618)			Float len = (this->x * this->x);
HXDLIN( 618)			Float len1 = ::Math_obj::sqrt((len + (this->y * this->y)));
HXDLIN( 618)			this->set_x((len1 * ::Math_obj::cos(rads)));
HXDLIN( 618)			this->set_y((len1 * ::Math_obj::sin(rads)));
            		}
HXLINE( 619)		return degs;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,set_degrees,return )

Float FlxVector_obj::get_radians(){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_623_get_radians)
HXLINE( 624)		bool _hx_tmp;
HXDLIN( 624)		if ((::Math_obj::abs(this->x) < ((Float)0.0000001))) {
HXLINE( 624)			_hx_tmp = (::Math_obj::abs(this->y) < ((Float)0.0000001));
            		}
            		else {
HXLINE( 624)			_hx_tmp = false;
            		}
HXDLIN( 624)		if (_hx_tmp) {
HXLINE( 624)			return (int)0;
            		}
HXLINE( 626)		return ::Math_obj::atan2(this->y,this->x);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxVector_obj,get_radians,return )

Float FlxVector_obj::set_radians(Float rads){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_630_set_radians)
HXLINE( 631)		Float len = (this->x * this->x);
HXDLIN( 631)		Float len1 = ::Math_obj::sqrt((len + (this->y * this->y)));
HXLINE( 633)		this->set_x((len1 * ::Math_obj::cos(rads)));
HXLINE( 634)		this->set_y((len1 * ::Math_obj::sin(rads)));
HXLINE( 635)		return rads;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVector_obj,set_radians,return )

Float FlxVector_obj::get_rx(){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_640_get_rx)
HXDLIN( 640)		return -(this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxVector_obj,get_rx,return )

Float FlxVector_obj::get_ry(){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_645_get_ry)
HXDLIN( 645)		return this->x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxVector_obj,get_ry,return )

Float FlxVector_obj::get_lx(){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_650_get_lx)
HXDLIN( 650)		return this->y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxVector_obj,get_lx,return )

Float FlxVector_obj::get_ly(){
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_655_get_ly)
HXDLIN( 655)		return -(this->x);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxVector_obj,get_ly,return )

Float FlxVector_obj::EPSILON;

Float FlxVector_obj::EPSILON_SQUARED;

 ::flixel::util::FlxPool_flixel_math_FlxVector FlxVector_obj::_pool;

 ::flixel::math::FlxVector FlxVector_obj::_vector1;

 ::flixel::math::FlxVector FlxVector_obj::_vector2;

 ::flixel::math::FlxVector FlxVector_obj::_vector3;

 ::flixel::math::FlxVector FlxVector_obj::get(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_27_get)
HXLINE(  28)		 ::flixel::math::FlxVector vector = Dynamic( ::flixel::math::FlxVector_obj::_pool->get()->set(X,Y)).StaticCast<  ::flixel::math::FlxVector >();
HXLINE(  29)		vector->_inPool = false;
HXLINE(  30)		return vector;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxVector_obj,get,return )


hx::ObjectPtr< FlxVector_obj > FlxVector_obj::__new( ::Dynamic X, ::Dynamic Y) {
	hx::ObjectPtr< FlxVector_obj > __this = new FlxVector_obj();
	__this->__construct(X,Y);
	return __this;
}

hx::ObjectPtr< FlxVector_obj > FlxVector_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y) {
	FlxVector_obj *__this = (FlxVector_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxVector_obj), false, "flixel.math.FlxVector"));
	*(void **)__this = FlxVector_obj::_hx_vtable;
	__this->__construct(X,Y);
	return __this;
}

FlxVector_obj::FlxVector_obj()
{
}

hx::Val FlxVector_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"dx") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_dx() ); }
		if (HX_FIELD_EQ(inName,"dy") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_dy() ); }
		if (HX_FIELD_EQ(inName,"rx") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rx() ); }
		if (HX_FIELD_EQ(inName,"ry") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_ry() ); }
		if (HX_FIELD_EQ(inName,"lx") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_lx() ); }
		if (HX_FIELD_EQ(inName,"ly") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_ly() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"put") ) { return hx::Val( put_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zero") ) { return hx::Val( zero_dyn() ); }
		if (HX_FIELD_EQ(inName,"sign") ) { return hx::Val( sign_dyn() ); }
		if (HX_FIELD_EQ(inName,"dist") ) { return hx::Val( dist_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale_dyn() ); }
		if (HX_FIELD_EQ(inName,"ratio") ) { return hx::Val( ratio_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"addNew") ) { return hx::Val( addNew_dyn() ); }
		if (HX_FIELD_EQ(inName,"isZero") ) { return hx::Val( isZero_dyn() ); }
		if (HX_FIELD_EQ(inName,"negate") ) { return hx::Val( negate_dyn() ); }
		if (HX_FIELD_EQ(inName,"bounce") ) { return hx::Val( bounce_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_dx") ) { return hx::Val( get_dx_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_dy") ) { return hx::Val( get_dy_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rx") ) { return hx::Val( get_rx_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_ry") ) { return hx::Val( get_ry_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_lx") ) { return hx::Val( get_lx_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_ly") ) { return hx::Val( get_ly_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"degrees") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_degrees() ); }
		if (HX_FIELD_EQ(inName,"radians") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_radians() ); }
		if (HX_FIELD_EQ(inName,"isValid") ) { return hx::Val( isValid_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"scaleNew") ) { return hx::Val( scaleNew_dyn() ); }
		if (HX_FIELD_EQ(inName,"truncate") ) { return hx::Val( truncate_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"normalize") ) { return hx::Val( normalize_dyn() ); }
		if (HX_FIELD_EQ(inName,"negateNew") ) { return hx::Val( negateNew_dyn() ); }
		if (HX_FIELD_EQ(inName,"projectTo") ) { return hx::Val( projectTo_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dotProduct") ) { return hx::Val( dotProduct_dyn() ); }
		if (HX_FIELD_EQ(inName,"isParallel") ) { return hx::Val( isParallel_dyn() ); }
		if (HX_FIELD_EQ(inName,"leftNormal") ) { return hx::Val( leftNormal_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_length") ) { return hx::Val( set_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"subtractNew") ) { return hx::Val( subtractNew_dyn() ); }
		if (HX_FIELD_EQ(inName,"rightNormal") ) { return hx::Val( rightNormal_dyn() ); }
		if (HX_FIELD_EQ(inName,"perpProduct") ) { return hx::Val( perpProduct_dyn() ); }
		if (HX_FIELD_EQ(inName,"distSquared") ) { return hx::Val( distSquared_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_degrees") ) { return hx::Val( get_degrees_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_degrees") ) { return hx::Val( set_degrees_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_radians") ) { return hx::Val( get_radians_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_radians") ) { return hx::Val( set_radians_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isNormalized") ) { return hx::Val( isNormalized_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lengthSquared") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_lengthSquared() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"rotateWithTrig") ) { return hx::Val( rotateWithTrig_dyn() ); }
		if (HX_FIELD_EQ(inName,"radiansBetween") ) { return hx::Val( radiansBetween_dyn() ); }
		if (HX_FIELD_EQ(inName,"degreesBetween") ) { return hx::Val( degreesBetween_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"isPerpendicular") ) { return hx::Val( isPerpendicular_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotateByRadians") ) { return hx::Val( rotateByRadians_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotateByDegrees") ) { return hx::Val( rotateByDegrees_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"findIntersection") ) { return hx::Val( findIntersection_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_lengthSquared") ) { return hx::Val( get_lengthSquared_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"crossProductLength") ) { return hx::Val( crossProductLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"bounceWithFriction") ) { return hx::Val( bounceWithFriction_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"projectToNormalized") ) { return hx::Val( projectToNormalized_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"dotProdWithNormalizing") ) { return hx::Val( dotProdWithNormalizing_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"findIntersectionInBounds") ) { return hx::Val( findIntersectionInBounds_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxVector_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_pool") ) { outValue = ( _pool ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_vector1") ) { outValue = ( _vector1 ); return true; }
		if (HX_FIELD_EQ(inName,"_vector2") ) { outValue = ( _vector2 ); return true; }
		if (HX_FIELD_EQ(inName,"_vector3") ) { outValue = ( _vector3 ); return true; }
	}
	return false;
}

hx::Val FlxVector_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_length(inValue.Cast< Float >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"degrees") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_degrees(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"radians") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_radians(inValue.Cast< Float >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxVector_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_pool") ) { _pool=ioValue.Cast<  ::flixel::util::FlxPool_flixel_math_FlxVector >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_vector1") ) { _vector1=ioValue.Cast<  ::flixel::math::FlxVector >(); return true; }
		if (HX_FIELD_EQ(inName,"_vector2") ) { _vector2=ioValue.Cast<  ::flixel::math::FlxVector >(); return true; }
		if (HX_FIELD_EQ(inName,"_vector3") ) { _vector3=ioValue.Cast<  ::flixel::math::FlxVector >(); return true; }
	}
	return false;
}

void FlxVector_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("dx","\x94","\x57","\x00","\x00"));
	outFields->push(HX_HCSTRING("dy","\x95","\x57","\x00","\x00"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("lengthSquared","\xe1","\x24","\x45","\x35"));
	outFields->push(HX_HCSTRING("degrees","\xa7","\xe3","\x5a","\x3a"));
	outFields->push(HX_HCSTRING("radians","\x72","\x46","\xf0","\x26"));
	outFields->push(HX_HCSTRING("rx","\xc6","\x63","\x00","\x00"));
	outFields->push(HX_HCSTRING("ry","\xc7","\x63","\x00","\x00"));
	outFields->push(HX_HCSTRING("lx","\x8c","\x5e","\x00","\x00"));
	outFields->push(HX_HCSTRING("ly","\x8d","\x5e","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FlxVector_obj_sMemberStorageInfo = 0;
static hx::StaticInfo FlxVector_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &FlxVector_obj::EPSILON,HX_HCSTRING("EPSILON","\x4a","\x89","\x92","\x2c")},
	{hx::fsFloat,(void *) &FlxVector_obj::EPSILON_SQUARED,HX_HCSTRING("EPSILON_SQUARED","\xd2","\x99","\xe6","\x6d")},
	{hx::fsObject /*::flixel::util::FlxPool_flixel_math_FlxVector*/ ,(void *) &FlxVector_obj::_pool,HX_HCSTRING("_pool","\xbb","\x9c","\x6d","\xfd")},
	{hx::fsObject /*::flixel::math::FlxVector*/ ,(void *) &FlxVector_obj::_vector1,HX_HCSTRING("_vector1","\x8f","\x53","\x55","\x14")},
	{hx::fsObject /*::flixel::math::FlxVector*/ ,(void *) &FlxVector_obj::_vector2,HX_HCSTRING("_vector2","\x90","\x53","\x55","\x14")},
	{hx::fsObject /*::flixel::math::FlxVector*/ ,(void *) &FlxVector_obj::_vector3,HX_HCSTRING("_vector3","\x91","\x53","\x55","\x14")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxVector_obj_sMemberFields[] = {
	HX_HCSTRING("put","\xcf","\x62","\x55","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("scaleNew","\xf6","\xeb","\x58","\x01"),
	HX_HCSTRING("addNew","\xbf","\xe0","\x04","\x9f"),
	HX_HCSTRING("subtractNew","\xac","\x77","\xf9","\x0b"),
	HX_HCSTRING("dotProduct","\xa6","\x27","\xf0","\x3d"),
	HX_HCSTRING("dotProdWithNormalizing","\xc4","\xc2","\x75","\x68"),
	HX_HCSTRING("isPerpendicular","\x60","\x10","\x79","\x24"),
	HX_HCSTRING("crossProductLength","\xd5","\x45","\x1a","\x6f"),
	HX_HCSTRING("isParallel","\xd1","\xbc","\xa5","\xf8"),
	HX_HCSTRING("isZero","\x32","\xd4","\x57","\x6e"),
	HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("isNormalized","\xc1","\x8c","\x8e","\x53"),
	HX_HCSTRING("rotateByRadians","\x80","\x07","\x76","\xe7"),
	HX_HCSTRING("rotateByDegrees","\xb5","\xa4","\xe0","\xfa"),
	HX_HCSTRING("rotateWithTrig","\x7d","\x0f","\x08","\xe3"),
	HX_HCSTRING("rightNormal","\x23","\x3f","\xee","\x99"),
	HX_HCSTRING("leftNormal","\x8e","\x2d","\x7a","\x5f"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("negateNew","\xbe","\x4b","\xdc","\xc5"),
	HX_HCSTRING("projectTo","\xb4","\x84","\xf8","\x94"),
	HX_HCSTRING("projectToNormalized","\x0b","\x56","\xc9","\x3e"),
	HX_HCSTRING("perpProduct","\x7c","\xfe","\x93","\xf3"),
	HX_HCSTRING("ratio","\x0b","\x35","\x24","\xe4"),
	HX_HCSTRING("findIntersection","\x22","\xb0","\x83","\xae"),
	HX_HCSTRING("findIntersectionInBounds","\x7c","\x2e","\x11","\x2e"),
	HX_HCSTRING("truncate","\x66","\xbe","\xf9","\xce"),
	HX_HCSTRING("radiansBetween","\x76","\x05","\xc0","\x0e"),
	HX_HCSTRING("degreesBetween","\xe1","\xa8","\x04","\x64"),
	HX_HCSTRING("sign","\x3d","\x90","\x53","\x4c"),
	HX_HCSTRING("dist","\x66","\x67","\x69","\x42"),
	HX_HCSTRING("distSquared","\x61","\xa2","\xda","\x2a"),
	HX_HCSTRING("bounce","\x88","\x85","\x1d","\x66"),
	HX_HCSTRING("bounceWithFriction","\xc8","\x1e","\xa8","\x25"),
	HX_HCSTRING("isValid","\xb2","\x18","\x3e","\xce"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("get_dx","\xdd","\xee","\x2f","\xa3"),
	HX_HCSTRING("get_dy","\xde","\xee","\x2f","\xa3"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("set_length","\x23","\xa3","\x0c","\x93"),
	HX_HCSTRING("get_lengthSquared","\x38","\x30","\xb5","\x3b"),
	HX_HCSTRING("get_degrees","\xbe","\x43","\x55","\xc0"),
	HX_HCSTRING("set_degrees","\xca","\x4a","\xc2","\xca"),
	HX_HCSTRING("get_radians","\x89","\xa6","\xea","\xac"),
	HX_HCSTRING("set_radians","\x95","\xad","\x57","\xb7"),
	HX_HCSTRING("get_rx","\x0f","\xfb","\x2f","\xa3"),
	HX_HCSTRING("get_ry","\x10","\xfb","\x2f","\xa3"),
	HX_HCSTRING("get_lx","\xd5","\xf5","\x2f","\xa3"),
	HX_HCSTRING("get_ly","\xd6","\xf5","\x2f","\xa3"),
	::String(null()) };

static void FlxVector_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxVector_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxVector_obj::EPSILON,"EPSILON");
	HX_MARK_MEMBER_NAME(FlxVector_obj::EPSILON_SQUARED,"EPSILON_SQUARED");
	HX_MARK_MEMBER_NAME(FlxVector_obj::_pool,"_pool");
	HX_MARK_MEMBER_NAME(FlxVector_obj::_vector1,"_vector1");
	HX_MARK_MEMBER_NAME(FlxVector_obj::_vector2,"_vector2");
	HX_MARK_MEMBER_NAME(FlxVector_obj::_vector3,"_vector3");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxVector_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxVector_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxVector_obj::EPSILON,"EPSILON");
	HX_VISIT_MEMBER_NAME(FlxVector_obj::EPSILON_SQUARED,"EPSILON_SQUARED");
	HX_VISIT_MEMBER_NAME(FlxVector_obj::_pool,"_pool");
	HX_VISIT_MEMBER_NAME(FlxVector_obj::_vector1,"_vector1");
	HX_VISIT_MEMBER_NAME(FlxVector_obj::_vector2,"_vector2");
	HX_VISIT_MEMBER_NAME(FlxVector_obj::_vector3,"_vector3");
};

#endif

hx::Class FlxVector_obj::__mClass;

static ::String FlxVector_obj_sStaticFields[] = {
	HX_HCSTRING("EPSILON","\x4a","\x89","\x92","\x2c"),
	HX_HCSTRING("EPSILON_SQUARED","\xd2","\x99","\xe6","\x6d"),
	HX_HCSTRING("_pool","\xbb","\x9c","\x6d","\xfd"),
	HX_HCSTRING("_vector1","\x8f","\x53","\x55","\x14"),
	HX_HCSTRING("_vector2","\x90","\x53","\x55","\x14"),
	HX_HCSTRING("_vector3","\x91","\x53","\x55","\x14"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null())
};

void FlxVector_obj::__register()
{
	hx::Object *dummy = new FlxVector_obj;
	FlxVector_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.math.FlxVector","\x61","\xfa","\x32","\x43");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxVector_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxVector_obj::__SetStatic;
	__mClass->mMarkFunc = FlxVector_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxVector_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxVector_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxVector_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxVector_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxVector_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxVector_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxVector_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_10_boot)
HXDLIN(  10)		EPSILON = ((Float)0.0000001);
            	}
{
            	HX_STACKFRAME(&_hx_pos_13a28a0757f1f53f_11_boot)
HXDLIN(  11)		EPSILON_SQUARED = ((Float)9.9999999999999984e-015);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_13a28a0757f1f53f_13_boot)
HXDLIN(  13)		_pool =  ::flixel::util::FlxPool_flixel_math_FlxVector_obj::__alloc( HX_CTX ,hx::ClassOf< ::flixel::math::FlxVector >());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_13a28a0757f1f53f_15_boot)
HXDLIN(  15)		_vector1 =  ::flixel::math::FlxVector_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_13a28a0757f1f53f_16_boot)
HXDLIN(  16)		_vector2 =  ::flixel::math::FlxVector_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_13a28a0757f1f53f_17_boot)
HXDLIN(  17)		_vector3 =  ::flixel::math::FlxVector_obj::__alloc( HX_CTX ,null(),null());
            	}
}

} // end namespace flixel
} // end namespace math
