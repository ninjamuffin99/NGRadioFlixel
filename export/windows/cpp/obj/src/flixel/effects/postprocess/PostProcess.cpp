// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_flixel_effects_postprocess_PostProcess
#include <flixel/effects/postprocess/PostProcess.h>
#endif
#ifndef INCLUDED_flixel_effects_postprocess_Shader
#include <flixel/effects/postprocess/Shader.h>
#endif
#ifndef INCLUDED_flixel_effects_postprocess__PostProcess_Uniform
#include <flixel/effects/postprocess/_PostProcess/Uniform.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DirectRenderer
#include <openfl/_legacy/display/DirectRenderer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_MovieClip
#include <openfl/_legacy/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_OpenGLView
#include <openfl/_legacy/display/OpenGLView.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Stage
#include <openfl/_legacy/display/Stage.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl__legacy_gl_GL
#include <openfl/_legacy/gl/GL.h>
#endif
#ifndef INCLUDED_openfl__legacy_gl_GLBuffer
#include <openfl/_legacy/gl/GLBuffer.h>
#endif
#ifndef INCLUDED_openfl__legacy_gl_GLFramebuffer
#include <openfl/_legacy/gl/GLFramebuffer.h>
#endif
#ifndef INCLUDED_openfl__legacy_gl_GLObject
#include <openfl/_legacy/gl/GLObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_gl_GLProgram
#include <openfl/_legacy/gl/GLProgram.h>
#endif
#ifndef INCLUDED_openfl__legacy_gl_GLRenderbuffer
#include <openfl/_legacy/gl/GLRenderbuffer.h>
#endif
#ifndef INCLUDED_openfl__legacy_gl_GLTexture
#include <openfl/_legacy/gl/GLTexture.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_ArrayBufferView
#include <openfl/_legacy/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_ByteArray
#include <openfl/_legacy/utils/ByteArray.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_Float32Array
#include <openfl/_legacy/utils/Float32Array.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataInput
#include <openfl/_legacy/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataOutput
#include <openfl/_legacy/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IMemoryRange
#include <openfl/_legacy/utils/IMemoryRange.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_de32b167c7a26741_32_new,"flixel.effects.postprocess.PostProcess","new",0x00edfd24,"flixel.effects.postprocess.PostProcess.new","flixel/effects/postprocess/PostProcess.hx",32,0x6a90b60f)
static const Float _hx_array_data_9b9fdb32_1[] = {
	-1.0,-1.0,(Float)0,(Float)0,1.0,-1.0,(Float)1,(Float)0,-1.0,1.0,(Float)0,(Float)1,1.0,-1.0,(Float)1,(Float)0,1.0,1.0,(Float)1,(Float)1,-1.0,1.0,(Float)0,(Float)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_de32b167c7a26741_94_setUniform,"flixel.effects.postprocess.PostProcess","setUniform",0x2526196e,"flixel.effects.postprocess.PostProcess.setUniform","flixel/effects/postprocess/PostProcess.hx",94,0x6a90b60f)
HX_LOCAL_STACK_FRAME(_hx_pos_de32b167c7a26741_121_set_to,"flixel.effects.postprocess.PostProcess","set_to",0xe20f76f4,"flixel.effects.postprocess.PostProcess.set_to","flixel/effects/postprocess/PostProcess.hx",121,0x6a90b60f)
HX_LOCAL_STACK_FRAME(_hx_pos_de32b167c7a26741_130_rebuild,"flixel.effects.postprocess.PostProcess","rebuild",0x732f0d5f,"flixel.effects.postprocess.PostProcess.rebuild","flixel/effects/postprocess/PostProcess.hx",130,0x6a90b60f)
HX_LOCAL_STACK_FRAME(_hx_pos_de32b167c7a26741_145_createRenderbuffer,"flixel.effects.postprocess.PostProcess","createRenderbuffer",0x8a0b59ae,"flixel.effects.postprocess.PostProcess.createRenderbuffer","flixel/effects/postprocess/PostProcess.hx",145,0x6a90b60f)
HX_LOCAL_STACK_FRAME(_hx_pos_de32b167c7a26741_157_createTexture,"flixel.effects.postprocess.PostProcess","createTexture",0xf0f6eb03,"flixel.effects.postprocess.PostProcess.createTexture","flixel/effects/postprocess/PostProcess.hx",157,0x6a90b60f)
HX_LOCAL_STACK_FRAME(_hx_pos_de32b167c7a26741_176_capture,"flixel.effects.postprocess.PostProcess","capture",0x78fbaf4a,"flixel.effects.postprocess.PostProcess.capture","flixel/effects/postprocess/PostProcess.hx",176,0x6a90b60f)
HX_LOCAL_STACK_FRAME(_hx_pos_de32b167c7a26741_183_update,"flixel.effects.postprocess.PostProcess","update",0xf99cabc5,"flixel.effects.postprocess.PostProcess.update","flixel/effects/postprocess/PostProcess.hx",183,0x6a90b60f)
HX_LOCAL_STACK_FRAME(_hx_pos_de32b167c7a26741_191___default_render,"flixel.effects.postprocess.PostProcess","__default_render",0x07fd6230,"flixel.effects.postprocess.PostProcess.__default_render","flixel/effects/postprocess/PostProcess.hx",191,0x6a90b60f)
HX_LOCAL_STACK_FRAME(_hx_pos_de32b167c7a26741_275_get_vertices,"flixel.effects.postprocess.PostProcess","get_vertices",0x40f38ebe,"flixel.effects.postprocess.PostProcess.get_vertices","flixel/effects/postprocess/PostProcess.hx",275,0x6a90b60f)
static const Float _hx_array_data_9b9fdb32_12[] = {
	-1.0,-1.0,(Float)0,(Float)0,1.0,-1.0,(Float)1,(Float)0,-1.0,1.0,(Float)0,(Float)1,1.0,-1.0,(Float)1,(Float)0,1.0,1.0,(Float)1,(Float)1,-1.0,1.0,(Float)0,(Float)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_de32b167c7a26741_258_boot,"flixel.effects.postprocess.PostProcess","boot",0xc76882ee,"flixel.effects.postprocess.PostProcess.boot","flixel/effects/postprocess/PostProcess.hx",258,0x6a90b60f)
namespace flixel{
namespace effects{
namespace postprocess{

void PostProcess_obj::__construct(::String fragmentShader){
            	HX_GC_STACKFRAME(&_hx_pos_de32b167c7a26741_32_new)
HXLINE( 248)		this->time = ((Float)0);
HXLINE( 245)		this->defaultFramebuffer = null();
HXLINE(  44)		super::__construct();
HXLINE(  45)		this->uniforms =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  48)		int _hx_tmp = ::openfl::_legacy::gl::GL_obj::get_version();
HXDLIN(  48)		this->framebuffer =  ::openfl::_legacy::gl::GLFramebuffer_obj::__alloc( HX_CTX ,_hx_tmp,::openfl::_legacy::gl::GL_obj::lime_gl_create_framebuffer());
HXLINE(  49)		this->rebuild();
HXLINE(  53)		int status = ( (int)(::openfl::_legacy::gl::GL_obj::lime_gl_check_framebuffer_status((int)36160)) );
HXLINE(  55)		switch((int)(status)){
            			case (int)36053: {
            			}
            			break;
            			case (int)36054: {
HXLINE(  58)				::haxe::Log_obj::trace(HX_("FRAMEBUFFER_INCOMPLETE_ATTACHMENT",f2,cf,b7,1d),hx::SourceInfo(HX_("PostProcess.hx",4f,e4,20,d0),58,HX_("flixel.effects.postprocess.PostProcess",32,db,9f,9b),HX_("new",60,d0,53,00)));
            			}
            			break;
            			case (int)36061: {
HXLINE(  60)				::haxe::Log_obj::trace(HX_("GL_FRAMEBUFFER_UNSUPPORTED",89,97,3b,c1),hx::SourceInfo(HX_("PostProcess.hx",4f,e4,20,d0),60,HX_("flixel.effects.postprocess.PostProcess",32,db,9f,9b),HX_("new",60,d0,53,00)));
            			}
            			break;
            			default:{
HXLINE(  63)				 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN(  63)				_hx_tmp1((HX_("Check frame buffer: ",71,d6,83,f1) + status),hx::SourceInfo(HX_("PostProcess.hx",4f,e4,20,d0),63,HX_("flixel.effects.postprocess.PostProcess",32,db,9f,9b),HX_("new",60,d0,53,00)));
            			}
            		}
HXLINE(  67)		int _hx_tmp2 = ::openfl::_legacy::gl::GL_obj::get_version();
HXDLIN(  67)		this->buffer =  ::openfl::_legacy::gl::GLBuffer_obj::__alloc( HX_CTX ,_hx_tmp2,::openfl::_legacy::gl::GL_obj::lime_gl_create_buffer());
HXLINE(  68)		{
HXLINE(  68)			 ::openfl::_legacy::gl::GLBuffer buffer = this->buffer;
HXDLIN(  68)			 ::Dynamic _hx_tmp3;
HXDLIN(  68)			if (hx::IsNull( buffer )) {
HXLINE(  68)				_hx_tmp3 = null();
            			}
            			else {
HXLINE(  68)				_hx_tmp3 = buffer->id;
            			}
HXDLIN(  68)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_buffer((int)34962,_hx_tmp3);
            		}
HXLINE(  69)		{
HXLINE(  69)			::Dynamic data =  ::openfl::_legacy::utils::Float32Array_obj::__alloc( HX_CTX ,::Array_obj< Float >::fromData( _hx_array_data_9b9fdb32_1,24),null(),null());
HXDLIN(  69)			 ::Dynamic _hx_tmp4 = hx::ClassOf< ::openfl::_legacy::gl::GL >();
HXDLIN(  69)			 ::openfl::_legacy::utils::ByteArray _hx_tmp5 = ::openfl::_legacy::utils::IMemoryRange_obj::getByteBuffer(data);
HXDLIN(  69)			int _hx_tmp6 = ::openfl::_legacy::utils::IMemoryRange_obj::getStart(data);
HXDLIN(  69)			int _hx_tmp7 = ::openfl::_legacy::utils::IMemoryRange_obj::getLength(data);
HXDLIN(  69)			::openfl::_legacy::gl::GL_obj::lime_gl_buffer_data((int)34962,_hx_tmp5,_hx_tmp6,_hx_tmp7,(int)35044);
            		}
HXLINE(  70)		::openfl::_legacy::gl::GL_obj::lime_gl_bind_buffer((int)34962,null());
HXLINE(  74)		::String _hx_tmp8 = ::openfl::_legacy::Assets_obj::getText(fragmentShader);
HXLINE(  72)		this->postProcessShader =  ::flixel::effects::postprocess::Shader_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("fragment",d0,5f,e5,ad),false)
            			->setFixed(1,HX_("src",e4,a6,57,00),HX_("\r\n#ifdef GL_ES\r\n\tprecision mediump float;\r\n#endif\r\n\r\nattribute vec2 aVertex;\r\nattribute vec2 aTexCoord;\r\nvarying vec2 vTexCoord;\r\n\r\nvoid main() {\r\n\tvTexCoord = aTexCoord;\r\n\tgl_Position = vec4(aVertex, 0.0, 1.0);\r\n}",53,85,c0,42))))->init(1, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("fragment",d0,5f,e5,ad),true)
            			->setFixed(1,HX_("src",e4,a6,57,00),_hx_tmp8))));
HXLINE(  78)		this->imageUniform = ( (int)(::openfl::_legacy::gl::GL_obj::lime_gl_get_uniform_location(this->postProcessShader->program->id,HX_("uImage0",ca,0a,76,34))) );
HXLINE(  79)		this->timeUniform = ( (int)(::openfl::_legacy::gl::GL_obj::lime_gl_get_uniform_location(this->postProcessShader->program->id,HX_("uTime",22,d7,b7,95))) );
HXLINE(  80)		this->resolutionUniform = ( (int)(::openfl::_legacy::gl::GL_obj::lime_gl_get_uniform_location(this->postProcessShader->program->id,HX_("uResolution",01,3e,a1,49))) );
HXLINE(  82)		this->vertexSlot = ( (int)(::openfl::_legacy::gl::GL_obj::lime_gl_get_attrib_location(this->postProcessShader->program->id,HX_("aVertex",a5,4e,7e,97))) );
HXLINE(  83)		this->texCoordSlot = ( (int)(::openfl::_legacy::gl::GL_obj::lime_gl_get_attrib_location(this->postProcessShader->program->id,HX_("aTexCoord",cf,8c,5d,f2))) );
            	}

Dynamic PostProcess_obj::__CreateEmpty() { return new PostProcess_obj; }

void *PostProcess_obj::_hx_vtable = 0;

Dynamic PostProcess_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PostProcess_obj > _hx_result = new PostProcess_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PostProcess_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e68a682) {
		if (inClassId<=(int)0x25b00754) {
			if (inClassId<=(int)0x14aba93e) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x14aba93e;
			} else {
				return inClassId==(int)0x25b00754;
			}
		} else {
			return inClassId==(int)0x2e68a682;
		}
	} else {
		return inClassId==(int)0x3d2d7617 || inClassId==(int)0x6f451122;
	}
}

void PostProcess_obj::setUniform(::String uniform,Float value){
            	HX_GC_STACKFRAME(&_hx_pos_de32b167c7a26741_94_setUniform)
HXDLIN(  94)		if (this->uniforms->exists(uniform)) {
HXLINE(  96)			 ::flixel::effects::postprocess::_PostProcess::Uniform uniform1 = this->uniforms->get(uniform).StaticCast<  ::flixel::effects::postprocess::_PostProcess::Uniform >();
HXLINE(  97)			uniform1->value = value;
            		}
            		else {
HXLINE( 101)			int id = ( (int)(::openfl::_legacy::gl::GL_obj::lime_gl_get_uniform_location(this->postProcessShader->program->id,uniform)) );
HXLINE( 102)			if ((id != (int)-1)) {
HXLINE( 104)				::Dynamic this1 = this->uniforms;
HXDLIN( 104)				( ( ::haxe::ds::StringMap)(this1) )->set(uniform, ::flixel::effects::postprocess::_PostProcess::Uniform_obj::__alloc( HX_CTX ,id,value));
            			}
            			else {
HXLINE( 108)				HX_STACK_DO_THROW(((HX_("Uniform with name \"",db,30,9f,c4) + uniform) + HX_("\" could not be found.",bf,d2,c9,28)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PostProcess_obj,setUniform,(void))

 ::flixel::effects::postprocess::PostProcess PostProcess_obj::set_to( ::flixel::effects::postprocess::PostProcess value){
            	HX_STACKFRAME(&_hx_pos_de32b167c7a26741_121_set_to)
HXLINE( 122)		 ::openfl::_legacy::gl::GLFramebuffer _hx_tmp;
HXDLIN( 122)		if (hx::IsNull( value )) {
HXLINE( 122)			_hx_tmp = this->defaultFramebuffer;
            		}
            		else {
HXLINE( 122)			_hx_tmp = value->framebuffer;
            		}
HXDLIN( 122)		this->renderTo = _hx_tmp;
HXLINE( 123)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PostProcess_obj,set_to,return )

void PostProcess_obj::rebuild(){
            	HX_GC_STACKFRAME(&_hx_pos_de32b167c7a26741_130_rebuild)
HXLINE( 131)		{
HXLINE( 131)			 ::openfl::_legacy::gl::GLFramebuffer framebuffer = this->framebuffer;
HXDLIN( 131)			 ::Dynamic _hx_tmp;
HXDLIN( 131)			if (hx::IsNull( framebuffer )) {
HXLINE( 131)				_hx_tmp = null();
            			}
            			else {
HXLINE( 131)				_hx_tmp = framebuffer->id;
            			}
HXDLIN( 131)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_framebuffer((int)36160,_hx_tmp);
            		}
HXLINE( 133)		if (hx::IsNotNull( this->texture )) {
HXLINE( 133)			 ::openfl::_legacy::gl::GLTexture texture = this->texture;
HXDLIN( 133)			::openfl::_legacy::gl::GL_obj::lime_gl_delete_texture(texture->id);
HXDLIN( 133)			texture->invalidate();
            		}
HXLINE( 134)		if (hx::IsNotNull( this->renderbuffer )) {
HXLINE( 134)			::openfl::_legacy::gl::GL_obj::deleteRenderbuffer(this->renderbuffer);
            		}
HXLINE( 136)		this->screenWidth = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageWidth();
HXLINE( 137)		this->screenHeight = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageHeight();
HXLINE( 138)		{
HXLINE( 138)			int width = this->screenWidth;
HXDLIN( 138)			int height = this->screenHeight;
HXDLIN( 138)			int _hx_tmp1 = ::openfl::_legacy::gl::GL_obj::get_version();
HXDLIN( 138)			this->texture =  ::openfl::_legacy::gl::GLTexture_obj::__alloc( HX_CTX ,_hx_tmp1,::openfl::_legacy::gl::GL_obj::lime_gl_create_texture());
HXDLIN( 138)			{
HXLINE( 138)				 ::openfl::_legacy::gl::GLTexture texture1 = this->texture;
HXDLIN( 138)				 ::Dynamic _hx_tmp2;
HXDLIN( 138)				if (hx::IsNull( texture1 )) {
HXLINE( 138)					_hx_tmp2 = null();
            				}
            				else {
HXLINE( 138)					_hx_tmp2 = texture1->id;
            				}
HXDLIN( 138)				::openfl::_legacy::gl::GL_obj::lime_gl_bind_texture((int)3553,_hx_tmp2);
            			}
HXDLIN( 138)			::openfl::_legacy::gl::GL_obj::lime_gl_tex_image_2d((int)3553,(int)0,(int)6407,width,height,(int)0,(int)6407,(int)5121,null(),null());
HXDLIN( 138)			::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10242,(int)33071);
HXDLIN( 138)			::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10243,(int)33071);
HXDLIN( 138)			::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10241,(int)9729);
HXDLIN( 138)			::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10240,(int)9729);
HXDLIN( 138)			::openfl::_legacy::gl::GL_obj::lime_gl_framebuffer_texture2D((int)36160,(int)36064,(int)3553,this->texture->id,(int)0);
            		}
HXLINE( 139)		{
HXLINE( 139)			int width1 = this->screenWidth;
HXDLIN( 139)			int height1 = this->screenHeight;
HXDLIN( 139)			int _hx_tmp3 = ::openfl::_legacy::gl::GL_obj::get_version();
HXDLIN( 139)			this->renderbuffer =  ::openfl::_legacy::gl::GLRenderbuffer_obj::__alloc( HX_CTX ,_hx_tmp3,::openfl::_legacy::gl::GL_obj::lime_gl_create_render_buffer());
HXDLIN( 139)			{
HXLINE( 139)				 ::openfl::_legacy::gl::GLRenderbuffer renderbuffer = this->renderbuffer;
HXDLIN( 139)				 ::Dynamic _hx_tmp4;
HXDLIN( 139)				if (hx::IsNull( renderbuffer )) {
HXLINE( 139)					_hx_tmp4 = null();
            				}
            				else {
HXLINE( 139)					_hx_tmp4 = renderbuffer->id;
            				}
HXDLIN( 139)				::openfl::_legacy::gl::GL_obj::lime_gl_bind_renderbuffer((int)36161,_hx_tmp4);
            			}
HXDLIN( 139)			::openfl::_legacy::gl::GL_obj::lime_gl_renderbuffer_storage((int)36161,(int)33189,width1,height1);
HXDLIN( 139)			::openfl::_legacy::gl::GL_obj::lime_gl_framebuffer_renderbuffer((int)36160,(int)36096,(int)36161,this->renderbuffer->id);
            		}
HXLINE( 141)		::openfl::_legacy::gl::GL_obj::lime_gl_bind_framebuffer((int)36160,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PostProcess_obj,rebuild,(void))

void PostProcess_obj::createRenderbuffer(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_de32b167c7a26741_145_createRenderbuffer)
HXLINE( 147)		int _hx_tmp = ::openfl::_legacy::gl::GL_obj::get_version();
HXDLIN( 147)		this->renderbuffer =  ::openfl::_legacy::gl::GLRenderbuffer_obj::__alloc( HX_CTX ,_hx_tmp,::openfl::_legacy::gl::GL_obj::lime_gl_create_render_buffer());
HXLINE( 149)		{
HXLINE( 149)			 ::openfl::_legacy::gl::GLRenderbuffer renderbuffer = this->renderbuffer;
HXDLIN( 149)			 ::Dynamic _hx_tmp1;
HXDLIN( 149)			if (hx::IsNull( renderbuffer )) {
HXLINE( 149)				_hx_tmp1 = null();
            			}
            			else {
HXLINE( 149)				_hx_tmp1 = renderbuffer->id;
            			}
HXDLIN( 149)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_renderbuffer((int)36161,_hx_tmp1);
            		}
HXLINE( 150)		::openfl::_legacy::gl::GL_obj::lime_gl_renderbuffer_storage((int)36161,(int)33189,width,height);
HXLINE( 153)		::openfl::_legacy::gl::GL_obj::lime_gl_framebuffer_renderbuffer((int)36160,(int)36096,(int)36161,this->renderbuffer->id);
            	}


HX_DEFINE_DYNAMIC_FUNC2(PostProcess_obj,createRenderbuffer,(void))

void PostProcess_obj::createTexture(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_de32b167c7a26741_157_createTexture)
HXLINE( 158)		int _hx_tmp = ::openfl::_legacy::gl::GL_obj::get_version();
HXDLIN( 158)		this->texture =  ::openfl::_legacy::gl::GLTexture_obj::__alloc( HX_CTX ,_hx_tmp,::openfl::_legacy::gl::GL_obj::lime_gl_create_texture());
HXLINE( 160)		{
HXLINE( 160)			 ::openfl::_legacy::gl::GLTexture texture = this->texture;
HXDLIN( 160)			 ::Dynamic _hx_tmp1;
HXDLIN( 160)			if (hx::IsNull( texture )) {
HXLINE( 160)				_hx_tmp1 = null();
            			}
            			else {
HXLINE( 160)				_hx_tmp1 = texture->id;
            			}
HXDLIN( 160)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_texture((int)3553,_hx_tmp1);
            		}
HXLINE( 161)		::openfl::_legacy::gl::GL_obj::lime_gl_tex_image_2d((int)3553,(int)0,(int)6407,width,height,(int)0,(int)6407,(int)5121,null(),null());
HXLINE( 163)		::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10242,(int)33071);
HXLINE( 164)		::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10243,(int)33071);
HXLINE( 165)		::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10241,(int)9729);
HXLINE( 166)		::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10240,(int)9729);
HXLINE( 169)		::openfl::_legacy::gl::GL_obj::lime_gl_framebuffer_texture2D((int)36160,(int)36064,(int)3553,this->texture->id,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC2(PostProcess_obj,createTexture,(void))

void PostProcess_obj::capture(){
            	HX_STACKFRAME(&_hx_pos_de32b167c7a26741_176_capture)
HXLINE( 177)		{
HXLINE( 177)			 ::openfl::_legacy::gl::GLFramebuffer framebuffer = this->framebuffer;
HXDLIN( 177)			 ::Dynamic _hx_tmp;
HXDLIN( 177)			if (hx::IsNull( framebuffer )) {
HXLINE( 177)				_hx_tmp = null();
            			}
            			else {
HXLINE( 177)				_hx_tmp = framebuffer->id;
            			}
HXDLIN( 177)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_framebuffer((int)36160,_hx_tmp);
            		}
HXLINE( 178)		::openfl::_legacy::gl::GL_obj::lime_gl_clear((int)16640);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PostProcess_obj,capture,(void))

void PostProcess_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_de32b167c7a26741_183_update)
HXDLIN( 183)		 ::flixel::effects::postprocess::PostProcess _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 183)		_hx_tmp->time = (_hx_tmp->time + elapsed);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PostProcess_obj,update,(void))

HX_BEGIN_DEFAULT_FUNC(__default_render,PostProcess_obj)
void _hx_run( ::openfl::_legacy::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_de32b167c7a26741_191___default_render)
HXLINE( 192)		{
HXLINE( 192)			 ::openfl::_legacy::gl::GLFramebuffer framebuffer = ( ( ::flixel::effects::postprocess::PostProcess)(__this) )->renderTo;
HXDLIN( 192)			 ::Dynamic _hx_tmp;
HXDLIN( 192)			if (hx::IsNull( framebuffer )) {
HXLINE( 192)				_hx_tmp = null();
            			}
            			else {
HXLINE( 192)				_hx_tmp = framebuffer->id;
            			}
HXDLIN( 192)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_framebuffer((int)36160,_hx_tmp);
            		}
HXLINE( 193)		::openfl::_legacy::gl::GL_obj::lime_gl_viewport((int)0,(int)0,( ( ::flixel::effects::postprocess::PostProcess)(__this) )->screenWidth,( ( ::flixel::effects::postprocess::PostProcess)(__this) )->screenHeight);
HXLINE( 195)		{
HXLINE( 195)			 ::openfl::_legacy::gl::GLProgram program = ( ( ::flixel::effects::postprocess::PostProcess)(__this) )->postProcessShader->program;
HXDLIN( 195)			 ::Dynamic _hx_tmp1;
HXDLIN( 195)			if (hx::IsNull( program )) {
HXLINE( 195)				_hx_tmp1 = null();
            			}
            			else {
HXLINE( 195)				_hx_tmp1 = program->id;
            			}
HXDLIN( 195)			::openfl::_legacy::gl::GL_obj::lime_gl_use_program(_hx_tmp1);
            		}
HXLINE( 197)		::openfl::_legacy::gl::GL_obj::lime_gl_enable_vertex_attrib_array(( ( ::flixel::effects::postprocess::PostProcess)(__this) )->vertexSlot);
HXLINE( 198)		::openfl::_legacy::gl::GL_obj::lime_gl_enable_vertex_attrib_array(( ( ::flixel::effects::postprocess::PostProcess)(__this) )->texCoordSlot);
HXLINE( 200)		::openfl::_legacy::gl::GL_obj::lime_gl_active_texture((int)33984);
HXLINE( 201)		{
HXLINE( 201)			 ::openfl::_legacy::gl::GLTexture texture = ( ( ::flixel::effects::postprocess::PostProcess)(__this) )->texture;
HXDLIN( 201)			 ::Dynamic _hx_tmp2;
HXDLIN( 201)			if (hx::IsNull( texture )) {
HXLINE( 201)				_hx_tmp2 = null();
            			}
            			else {
HXLINE( 201)				_hx_tmp2 = texture->id;
            			}
HXDLIN( 201)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_texture((int)3553,_hx_tmp2);
            		}
HXLINE( 202)		::openfl::_legacy::gl::GL_obj::lime_gl_enable((int)3553);
HXLINE( 204)		{
HXLINE( 204)			 ::openfl::_legacy::gl::GLBuffer buffer = ( ( ::flixel::effects::postprocess::PostProcess)(__this) )->buffer;
HXDLIN( 204)			 ::Dynamic _hx_tmp3;
HXDLIN( 204)			if (hx::IsNull( buffer )) {
HXLINE( 204)				_hx_tmp3 = null();
            			}
            			else {
HXLINE( 204)				_hx_tmp3 = buffer->id;
            			}
HXDLIN( 204)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_buffer((int)34962,_hx_tmp3);
            		}
HXLINE( 205)		::openfl::_legacy::gl::GL_obj::lime_gl_vertex_attrib_pointer(( ( ::flixel::effects::postprocess::PostProcess)(__this) )->vertexSlot,(int)2,(int)5126,false,(int)16,(int)0);
HXLINE( 206)		::openfl::_legacy::gl::GL_obj::lime_gl_vertex_attrib_pointer(( ( ::flixel::effects::postprocess::PostProcess)(__this) )->texCoordSlot,(int)2,(int)5126,false,(int)16,(int)8);
HXLINE( 208)		::openfl::_legacy::gl::GL_obj::lime_gl_uniform1i(( ( ::flixel::effects::postprocess::PostProcess)(__this) )->imageUniform,(int)0);
HXLINE( 209)		::openfl::_legacy::gl::GL_obj::lime_gl_uniform1f(( ( ::flixel::effects::postprocess::PostProcess)(__this) )->timeUniform,( ( ::flixel::effects::postprocess::PostProcess)(__this) )->time);
HXLINE( 210)		::openfl::_legacy::gl::GL_obj::lime_gl_uniform2f(( ( ::flixel::effects::postprocess::PostProcess)(__this) )->resolutionUniform,( ( ::flixel::effects::postprocess::PostProcess)(__this) )->screenWidth,( ( ::flixel::effects::postprocess::PostProcess)(__this) )->screenHeight);
HXLINE( 212)		{
HXLINE( 212)			 ::Dynamic u = ( ( ::flixel::effects::postprocess::PostProcess)(__this) )->uniforms->iterator();
HXDLIN( 212)			while(( (bool)(u->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 212)				 ::flixel::effects::postprocess::_PostProcess::Uniform u1 = ( ( ::flixel::effects::postprocess::_PostProcess::Uniform)(u->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 214)				::openfl::_legacy::gl::GL_obj::lime_gl_uniform1f(u1->id,u1->value);
            			}
            		}
HXLINE( 217)		::openfl::_legacy::gl::GL_obj::lime_gl_draw_arrays((int)4,(int)0,(int)6);
HXLINE( 219)		::openfl::_legacy::gl::GL_obj::lime_gl_bind_buffer((int)34962,null());
HXLINE( 220)		::openfl::_legacy::gl::GL_obj::lime_gl_disable((int)3553);
HXLINE( 221)		::openfl::_legacy::gl::GL_obj::lime_gl_bind_texture((int)3553,null());
HXLINE( 223)		::openfl::_legacy::gl::GL_obj::lime_gl_disable_vertex_attrib_array(( ( ::flixel::effects::postprocess::PostProcess)(__this) )->vertexSlot);
HXLINE( 224)		::openfl::_legacy::gl::GL_obj::lime_gl_disable_vertex_attrib_array(( ( ::flixel::effects::postprocess::PostProcess)(__this) )->texCoordSlot);
HXLINE( 226)		::openfl::_legacy::gl::GL_obj::lime_gl_use_program(null());
HXLINE( 228)		::openfl::_legacy::gl::GL_obj::lime_gl_bind_framebuffer((int)36160,null());
HXLINE( 231)		if ((( (int)(::openfl::_legacy::gl::GL_obj::lime_gl_get_error()) ) == (int)1286)) {
HXLINE( 233)			::haxe::Log_obj::trace(HX_("INVALID_FRAMEBUFFER_OPERATION!!",4d,16,05,20),hx::SourceInfo(HX_("PostProcess.hx",4f,e4,20,d0),233,HX_("flixel.effects.postprocess.PostProcess",32,db,9f,9b),HX_("render",56,6b,29,05)));
            		}
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

::String PostProcess_obj::VERTEX_SHADER;

::Array< Float > PostProcess_obj::get_vertices(){
            	HX_STACKFRAME(&_hx_pos_de32b167c7a26741_275_get_vertices)
HXDLIN( 275)		return ::Array_obj< Float >::fromData( _hx_array_data_9b9fdb32_12,24);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PostProcess_obj,get_vertices,return )


void PostProcess_obj::__alloc_dynamic_functions(hx::Ctx *_hx_ctx,PostProcess_obj *_hx_obj) {
	if (!_hx_obj->render.mPtr) _hx_obj->render = new __default_render(_hx_obj);
	openfl::_legacy::display::DirectRenderer_obj::__alloc_dynamic_functions(_hx_ctx,_hx_obj);
}
hx::ObjectPtr< PostProcess_obj > PostProcess_obj::__new(::String fragmentShader) {
	hx::ObjectPtr< PostProcess_obj > __this = new PostProcess_obj();
	__this->__construct(fragmentShader);
	return __this;
}

hx::ObjectPtr< PostProcess_obj > PostProcess_obj::__alloc(hx::Ctx *_hx_ctx,::String fragmentShader) {
	PostProcess_obj *__this = (PostProcess_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PostProcess_obj), true, "flixel.effects.postprocess.PostProcess"));
	*(void **)__this = PostProcess_obj::_hx_vtable;
	flixel::effects::postprocess::PostProcess_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(fragmentShader);
	return __this;
}

PostProcess_obj::PostProcess_obj()
{
	render = new __default_render(this);
}

void PostProcess_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PostProcess);
	HX_MARK_MEMBER_NAME(screenWidth,"screenWidth");
	HX_MARK_MEMBER_NAME(screenHeight,"screenHeight");
	HX_MARK_MEMBER_NAME(render,"render");
	HX_MARK_MEMBER_NAME(framebuffer,"framebuffer");
	HX_MARK_MEMBER_NAME(renderbuffer,"renderbuffer");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(postProcessShader,"postProcessShader");
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(renderTo,"renderTo");
	HX_MARK_MEMBER_NAME(defaultFramebuffer,"defaultFramebuffer");
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_MEMBER_NAME(vertexSlot,"vertexSlot");
	HX_MARK_MEMBER_NAME(texCoordSlot,"texCoordSlot");
	HX_MARK_MEMBER_NAME(imageUniform,"imageUniform");
	HX_MARK_MEMBER_NAME(resolutionUniform,"resolutionUniform");
	HX_MARK_MEMBER_NAME(timeUniform,"timeUniform");
	HX_MARK_MEMBER_NAME(uniforms,"uniforms");
	 ::openfl::_legacy::display::DirectRenderer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PostProcess_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(screenWidth,"screenWidth");
	HX_VISIT_MEMBER_NAME(screenHeight,"screenHeight");
	HX_VISIT_MEMBER_NAME(render,"render");
	HX_VISIT_MEMBER_NAME(framebuffer,"framebuffer");
	HX_VISIT_MEMBER_NAME(renderbuffer,"renderbuffer");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(postProcessShader,"postProcessShader");
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(renderTo,"renderTo");
	HX_VISIT_MEMBER_NAME(defaultFramebuffer,"defaultFramebuffer");
	HX_VISIT_MEMBER_NAME(time,"time");
	HX_VISIT_MEMBER_NAME(vertexSlot,"vertexSlot");
	HX_VISIT_MEMBER_NAME(texCoordSlot,"texCoordSlot");
	HX_VISIT_MEMBER_NAME(imageUniform,"imageUniform");
	HX_VISIT_MEMBER_NAME(resolutionUniform,"resolutionUniform");
	HX_VISIT_MEMBER_NAME(timeUniform,"timeUniform");
	HX_VISIT_MEMBER_NAME(uniforms,"uniforms");
	 ::openfl::_legacy::display::DirectRenderer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PostProcess_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { return hx::Val( time ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"set_to") ) { return hx::Val( set_to_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render ); }
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rebuild") ) { return hx::Val( rebuild_dyn() ); }
		if (HX_FIELD_EQ(inName,"capture") ) { return hx::Val( capture_dyn() ); }
		if (HX_FIELD_EQ(inName,"texture") ) { return hx::Val( texture ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"renderTo") ) { return hx::Val( renderTo ); }
		if (HX_FIELD_EQ(inName,"uniforms") ) { return hx::Val( uniforms ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setUniform") ) { return hx::Val( setUniform_dyn() ); }
		if (HX_FIELD_EQ(inName,"vertexSlot") ) { return hx::Val( vertexSlot ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"screenWidth") ) { return hx::Val( screenWidth ); }
		if (HX_FIELD_EQ(inName,"framebuffer") ) { return hx::Val( framebuffer ); }
		if (HX_FIELD_EQ(inName,"timeUniform") ) { return hx::Val( timeUniform ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"screenHeight") ) { return hx::Val( screenHeight ); }
		if (HX_FIELD_EQ(inName,"renderbuffer") ) { return hx::Val( renderbuffer ); }
		if (HX_FIELD_EQ(inName,"texCoordSlot") ) { return hx::Val( texCoordSlot ); }
		if (HX_FIELD_EQ(inName,"imageUniform") ) { return hx::Val( imageUniform ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createTexture") ) { return hx::Val( createTexture_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"postProcessShader") ) { return hx::Val( postProcessShader ); }
		if (HX_FIELD_EQ(inName,"resolutionUniform") ) { return hx::Val( resolutionUniform ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"createRenderbuffer") ) { return hx::Val( createRenderbuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"defaultFramebuffer") ) { return hx::Val( defaultFramebuffer ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PostProcess_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_vertices() ); return true; } }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_vertices") ) { outValue = get_vertices_dyn(); return true; }
	}
	return false;
}

hx::Val PostProcess_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"to") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_to(inValue.Cast<  ::flixel::effects::postprocess::PostProcess >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { render=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::openfl::_legacy::gl::GLBuffer >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast<  ::openfl::_legacy::gl::GLTexture >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"renderTo") ) { renderTo=inValue.Cast<  ::openfl::_legacy::gl::GLFramebuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uniforms") ) { uniforms=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"vertexSlot") ) { vertexSlot=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"screenWidth") ) { screenWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"framebuffer") ) { framebuffer=inValue.Cast<  ::openfl::_legacy::gl::GLFramebuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeUniform") ) { timeUniform=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"screenHeight") ) { screenHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"renderbuffer") ) { renderbuffer=inValue.Cast<  ::openfl::_legacy::gl::GLRenderbuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texCoordSlot") ) { texCoordSlot=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"imageUniform") ) { imageUniform=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"postProcessShader") ) { postProcessShader=inValue.Cast<  ::flixel::effects::postprocess::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"resolutionUniform") ) { resolutionUniform=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"defaultFramebuffer") ) { defaultFramebuffer=inValue.Cast<  ::openfl::_legacy::gl::GLFramebuffer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PostProcess_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("screenWidth","\xfa","\x02","\xe8","\x81"));
	outFields->push(HX_HCSTRING("screenHeight","\x73","\x10","\x6a","\xdf"));
	outFields->push(HX_HCSTRING("to","\x7b","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("framebuffer","\xed","\x14","\x48","\x7a"));
	outFields->push(HX_HCSTRING("renderbuffer","\xd6","\x4c","\x56","\x0b"));
	outFields->push(HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"));
	outFields->push(HX_HCSTRING("postProcessShader","\x74","\x62","\x84","\x07"));
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	outFields->push(HX_HCSTRING("renderTo","\x71","\xb6","\xdb","\xb2"));
	outFields->push(HX_HCSTRING("defaultFramebuffer","\xac","\x79","\x67","\x39"));
	outFields->push(HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"));
	outFields->push(HX_HCSTRING("vertexSlot","\x82","\x67","\x12","\xdd"));
	outFields->push(HX_HCSTRING("texCoordSlot","\x6c","\xd0","\x32","\x2f"));
	outFields->push(HX_HCSTRING("imageUniform","\x19","\xbb","\x2c","\xa5"));
	outFields->push(HX_HCSTRING("resolutionUniform","\x68","\x71","\xd8","\x86"));
	outFields->push(HX_HCSTRING("timeUniform","\xa7","\xe8","\xb9","\x27"));
	outFields->push(HX_HCSTRING("uniforms","\xbf","\xcc","\x54","\x02"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PostProcess_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(PostProcess_obj,screenWidth),HX_HCSTRING("screenWidth","\xfa","\x02","\xe8","\x81")},
	{hx::fsInt,(int)offsetof(PostProcess_obj,screenHeight),HX_HCSTRING("screenHeight","\x73","\x10","\x6a","\xdf")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(PostProcess_obj,render),HX_HCSTRING("render","\x56","\x6b","\x29","\x05")},
	{hx::fsObject /*::openfl::_legacy::gl::GLFramebuffer*/ ,(int)offsetof(PostProcess_obj,framebuffer),HX_HCSTRING("framebuffer","\xed","\x14","\x48","\x7a")},
	{hx::fsObject /*::openfl::_legacy::gl::GLRenderbuffer*/ ,(int)offsetof(PostProcess_obj,renderbuffer),HX_HCSTRING("renderbuffer","\xd6","\x4c","\x56","\x0b")},
	{hx::fsObject /*::openfl::_legacy::gl::GLTexture*/ ,(int)offsetof(PostProcess_obj,texture),HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e")},
	{hx::fsObject /*::flixel::effects::postprocess::Shader*/ ,(int)offsetof(PostProcess_obj,postProcessShader),HX_HCSTRING("postProcessShader","\x74","\x62","\x84","\x07")},
	{hx::fsObject /*::openfl::_legacy::gl::GLBuffer*/ ,(int)offsetof(PostProcess_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsObject /*::openfl::_legacy::gl::GLFramebuffer*/ ,(int)offsetof(PostProcess_obj,renderTo),HX_HCSTRING("renderTo","\x71","\xb6","\xdb","\xb2")},
	{hx::fsObject /*::openfl::_legacy::gl::GLFramebuffer*/ ,(int)offsetof(PostProcess_obj,defaultFramebuffer),HX_HCSTRING("defaultFramebuffer","\xac","\x79","\x67","\x39")},
	{hx::fsFloat,(int)offsetof(PostProcess_obj,time),HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c")},
	{hx::fsInt,(int)offsetof(PostProcess_obj,vertexSlot),HX_HCSTRING("vertexSlot","\x82","\x67","\x12","\xdd")},
	{hx::fsInt,(int)offsetof(PostProcess_obj,texCoordSlot),HX_HCSTRING("texCoordSlot","\x6c","\xd0","\x32","\x2f")},
	{hx::fsInt,(int)offsetof(PostProcess_obj,imageUniform),HX_HCSTRING("imageUniform","\x19","\xbb","\x2c","\xa5")},
	{hx::fsInt,(int)offsetof(PostProcess_obj,resolutionUniform),HX_HCSTRING("resolutionUniform","\x68","\x71","\xd8","\x86")},
	{hx::fsInt,(int)offsetof(PostProcess_obj,timeUniform),HX_HCSTRING("timeUniform","\xa7","\xe8","\xb9","\x27")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(PostProcess_obj,uniforms),HX_HCSTRING("uniforms","\xbf","\xcc","\x54","\x02")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo PostProcess_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &PostProcess_obj::VERTEX_SHADER,HX_HCSTRING("VERTEX_SHADER","\xe0","\x69","\x73","\x49")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String PostProcess_obj_sMemberFields[] = {
	HX_HCSTRING("screenWidth","\xfa","\x02","\xe8","\x81"),
	HX_HCSTRING("screenHeight","\x73","\x10","\x6a","\xdf"),
	HX_HCSTRING("setUniform","\xb2","\x65","\x43","\x08"),
	HX_HCSTRING("set_to","\x38","\x51","\x78","\x6f"),
	HX_HCSTRING("rebuild","\x9b","\x2e","\x85","\xa1"),
	HX_HCSTRING("createRenderbuffer","\xf2","\x89","\x74","\x05"),
	HX_HCSTRING("createTexture","\x3f","\xa1","\x23","\x87"),
	HX_HCSTRING("capture","\x86","\xd0","\x51","\xa7"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("framebuffer","\xed","\x14","\x48","\x7a"),
	HX_HCSTRING("renderbuffer","\xd6","\x4c","\x56","\x0b"),
	HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"),
	HX_HCSTRING("postProcessShader","\x74","\x62","\x84","\x07"),
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("renderTo","\x71","\xb6","\xdb","\xb2"),
	HX_HCSTRING("defaultFramebuffer","\xac","\x79","\x67","\x39"),
	HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"),
	HX_HCSTRING("vertexSlot","\x82","\x67","\x12","\xdd"),
	HX_HCSTRING("texCoordSlot","\x6c","\xd0","\x32","\x2f"),
	HX_HCSTRING("imageUniform","\x19","\xbb","\x2c","\xa5"),
	HX_HCSTRING("resolutionUniform","\x68","\x71","\xd8","\x86"),
	HX_HCSTRING("timeUniform","\xa7","\xe8","\xb9","\x27"),
	HX_HCSTRING("uniforms","\xbf","\xcc","\x54","\x02"),
	::String(null()) };

static void PostProcess_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PostProcess_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(PostProcess_obj::VERTEX_SHADER,"VERTEX_SHADER");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PostProcess_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PostProcess_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(PostProcess_obj::VERTEX_SHADER,"VERTEX_SHADER");
};

#endif

hx::Class PostProcess_obj::__mClass;

static ::String PostProcess_obj_sStaticFields[] = {
	HX_HCSTRING("VERTEX_SHADER","\xe0","\x69","\x73","\x49"),
	HX_HCSTRING("get_vertices","\x02","\x74","\x2f","\x1f"),
	::String(null())
};

void PostProcess_obj::__register()
{
	hx::Object *dummy = new PostProcess_obj;
	PostProcess_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.effects.postprocess.PostProcess","\x32","\xdb","\x9f","\x9b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PostProcess_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PostProcess_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PostProcess_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PostProcess_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PostProcess_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PostProcess_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PostProcess_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PostProcess_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PostProcess_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_de32b167c7a26741_258_boot)
HXDLIN( 258)		VERTEX_SHADER = HX_("\r\n#ifdef GL_ES\r\n\tprecision mediump float;\r\n#endif\r\n\r\nattribute vec2 aVertex;\r\nattribute vec2 aTexCoord;\r\nvarying vec2 vTexCoord;\r\n\r\nvoid main() {\r\n\tvTexCoord = aTexCoord;\r\n\tgl_Position = vec4(aVertex, 0.0, 1.0);\r\n}",53,85,c0,42);
            	}
}

} // end namespace flixel
} // end namespace effects
} // end namespace postprocess
