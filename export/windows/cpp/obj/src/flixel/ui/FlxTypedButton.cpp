// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_atlas_FlxAtlas
#include <flixel/graphics/atlas/FlxAtlas.h>
#endif
#ifndef INCLUDED_flixel_graphics_atlas_FlxNode
#include <flixel/graphics/atlas/FlxNode.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxTileFrames
#include <flixel/graphics/frames/FlxTileFrames.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_ui__FlxButton_FlxButtonEvent
#include <flixel/ui/_FlxButton/FlxButtonEvent.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_MovieClip
#include <openfl/_legacy/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Stage
#include <openfl/_legacy/display/Stage.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_MouseEvent
#include <openfl/_legacy/events/MouseEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6947f0146d371c6d_114_new,"flixel.ui.FlxTypedButton","new",0xc7e33f04,"flixel.ui.FlxTypedButton.new","flixel/ui/FlxButton.hx",114,0xc64cf442)
static const int _hx_array_data_f696ad12_1[] = {
	(int)-1,
};
static const ::String _hx_array_data_f696ad12_2[] = {
	HX_("normal",27,72,69,30),HX_("highlight",34,56,00,ed),HX_("pressed",a2,d2,e6,39),
};
static const Float _hx_array_data_f696ad12_3[] = {
	0.8,1.0,0.5,
};
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_231_graphicLoaded,"flixel.ui.FlxTypedButton","graphicLoaded",0xa7022871,"flixel.ui.FlxTypedButton.graphicLoaded","flixel/ui/FlxButton.hx",231,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_241_loadDefaultGraphic,"flixel.ui.FlxTypedButton","loadDefaultGraphic",0xe0dec289,"flixel.ui.FlxTypedButton.loadDefaultGraphic","flixel/ui/FlxButton.hx",241,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_245_setupAnimation,"flixel.ui.FlxTypedButton","setupAnimation",0xeb5c74a3,"flixel.ui.FlxTypedButton.setupAnimation","flixel/ui/FlxButton.hx",245,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_255_destroy,"flixel.ui.FlxTypedButton","destroy",0xe11bbd9e,"flixel.ui.FlxTypedButton.destroy","flixel/ui/FlxButton.hx",255,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_281_update,"flixel.ui.FlxTypedButton","update",0xc4b5d5e5,"flixel.ui.FlxTypedButton.update","flixel/ui/FlxButton.hx",281,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_304_updateStatusAnimation,"flixel.ui.FlxTypedButton","updateStatusAnimation",0x00250d0d,"flixel.ui.FlxTypedButton.updateStatusAnimation","flixel/ui/FlxButton.hx",304,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_311_draw,"flixel.ui.FlxTypedButton","draw",0x18618ce0,"flixel.ui.FlxTypedButton.draw","flixel/ui/FlxButton.hx",311,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_326_drawDebug,"flixel.ui.FlxTypedButton","drawDebug",0xd8c08953,"flixel.ui.FlxTypedButton.drawDebug","flixel/ui/FlxButton.hx",326,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_345_stampOnAtlas,"flixel.ui.FlxTypedButton","stampOnAtlas",0xa90d96c5,"flixel.ui.FlxTypedButton.stampOnAtlas","flixel/ui/FlxButton.hx",345,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_374_updateButton,"flixel.ui.FlxTypedButton","updateButton",0x576ba5b7,"flixel.ui.FlxTypedButton.updateButton","flixel/ui/FlxButton.hx",374,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_395_checkMouseOverlap,"flixel.ui.FlxTypedButton","checkMouseOverlap",0xee0aca6e,"flixel.ui.FlxTypedButton.checkMouseOverlap","flixel/ui/FlxButton.hx",395,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_428_checkTouchOverlap,"flixel.ui.FlxTypedButton","checkTouchOverlap",0x36c79014,"flixel.ui.FlxTypedButton.checkTouchOverlap","flixel/ui/FlxButton.hx",428,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_432_checkInput,"flixel.ui.FlxTypedButton","checkInput",0xf7b933fe,"flixel.ui.FlxTypedButton.checkInput","flixel/ui/FlxButton.hx",432,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_453_updateStatus,"flixel.ui.FlxTypedButton","updateStatus",0x83872af7,"flixel.ui.FlxTypedButton.updateStatus","flixel/ui/FlxButton.hx",453,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_474_updateLabelPosition,"flixel.ui.FlxTypedButton","updateLabelPosition",0x7d4d6d98,"flixel.ui.FlxTypedButton.updateLabelPosition","flixel/ui/FlxButton.hx",474,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_483_updateLabelAlpha,"flixel.ui.FlxTypedButton","updateLabelAlpha",0x2352ff0f,"flixel.ui.FlxTypedButton.updateLabelAlpha","flixel/ui/FlxButton.hx",483,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_496_onUpEventListener,"flixel.ui.FlxTypedButton","onUpEventListener",0x0f960298,"flixel.ui.FlxTypedButton.onUpEventListener","flixel/ui/FlxButton.hx",496,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_507_onUpHandler,"flixel.ui.FlxTypedButton","onUpHandler",0xf0255834,"flixel.ui.FlxTypedButton.onUpHandler","flixel/ui/FlxButton.hx",507,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_519_onDownHandler,"flixel.ui.FlxTypedButton","onDownHandler",0x6003504d,"flixel.ui.FlxTypedButton.onDownHandler","flixel/ui/FlxButton.hx",519,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_530_onOverHandler,"flixel.ui.FlxTypedButton","onOverHandler",0x3b6b999b,"flixel.ui.FlxTypedButton.onOverHandler","flixel/ui/FlxButton.hx",530,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_540_onOutHandler,"flixel.ui.FlxTypedButton","onOutHandler",0x1cacc3b7,"flixel.ui.FlxTypedButton.onOutHandler","flixel/ui/FlxButton.hx",540,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_548_set_label,"flixel.ui.FlxTypedButton","set_label",0xd03f57fb,"flixel.ui.FlxTypedButton.set_label","flixel/ui/FlxButton.hx",548,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_565_set_status,"flixel.ui.FlxTypedButton","set_status",0x23ac634b,"flixel.ui.FlxTypedButton.set_status","flixel/ui/FlxButton.hx",565,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_572_set_alpha,"flixel.ui.FlxTypedButton","set_alpha",0x8226f165,"flixel.ui.FlxTypedButton.set_alpha","flixel/ui/FlxButton.hx",572,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_579_set_x,"flixel.ui.FlxTypedButton","set_x",0xd772faff,"flixel.ui.FlxTypedButton.set_x","flixel/ui/FlxButton.hx",579,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_586_set_y,"flixel.ui.FlxTypedButton","set_y",0xd772fb00,"flixel.ui.FlxTypedButton.set_y","flixel/ui/FlxButton.hx",586,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_594_get_justReleased,"flixel.ui.FlxTypedButton","get_justReleased",0x06e7426e,"flixel.ui.FlxTypedButton.get_justReleased","flixel/ui/FlxButton.hx",594,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_599_get_released,"flixel.ui.FlxTypedButton","get_released",0xa9c8d9a2,"flixel.ui.FlxTypedButton.get_released","flixel/ui/FlxButton.hx",599,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_604_get_pressed,"flixel.ui.FlxTypedButton","get_pressed",0x0c35e55d,"flixel.ui.FlxTypedButton.get_pressed","flixel/ui/FlxButton.hx",604,0xc64cf442)
HX_LOCAL_STACK_FRAME(_hx_pos_6947f0146d371c6d_609_get_justPressed,"flixel.ui.FlxTypedButton","get_justPressed",0x7ad59a11,"flixel.ui.FlxTypedButton.get_justPressed","flixel/ui/FlxButton.hx",609,0xc64cf442)
namespace flixel{
namespace ui{

void FlxTypedButton_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic OnClick){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_6947f0146d371c6d_114_new)
HXLINE( 193)		this->lastStatus = (int)-1;
HXLINE( 150)		this->maxInputMovement = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 143)		this->mouseButtons = ::Array_obj< int >::fromData( _hx_array_data_f696ad12_1,1);
HXLINE( 138)		this->allowSwiping = true;
HXLINE( 133)		this->statusAnimations = ::Array_obj< ::String >::fromData( _hx_array_data_f696ad12_2,3);
HXLINE( 128)		this->labelAlphas = ::Array_obj< Float >::fromData( _hx_array_data_f696ad12_3,3);
HXLINE( 123)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 123)		point->_inPool = false;
HXDLIN( 123)		 ::flixel::math::FlxPoint _hx_tmp = point;
HXDLIN( 123)		 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 123)		point1->_inPool = false;
HXDLIN( 123)		 ::flixel::math::FlxPoint _hx_tmp1 = point1;
HXDLIN( 123)		 ::flixel::math::FlxPoint point2 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)1);
HXDLIN( 123)		point2->_inPool = false;
HXDLIN( 123)		this->labelOffsets = ::Array_obj< ::Dynamic>::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,point2);
HXLINE( 204)		super::__construct(X,Y,null());
HXLINE( 206)		this->loadDefaultGraphic();
HXLINE( 208)		this->onUp =  ::flixel::ui::_FlxButton::FlxButtonEvent_obj::__alloc( HX_CTX ,OnClick,null());
HXLINE( 209)		this->onDown =  ::flixel::ui::_FlxButton::FlxButtonEvent_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 210)		this->onOver =  ::flixel::ui::_FlxButton::FlxButtonEvent_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 211)		this->onOut =  ::flixel::ui::_FlxButton::FlxButtonEvent_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 213)		this->set_status((int)0);
HXLINE( 216)		this->scrollFactor->set(null(),null());
HXLINE( 219)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->addEventListener(::openfl::_legacy::events::MouseEvent_obj::MOUSE_UP,this->onUpEventListener_dyn(),null(),null(),null());
HXLINE( 227)		this->input =  ::flixel::input::FlxInput_obj::__alloc( HX_CTX ,(int)0);
            	}

Dynamic FlxTypedButton_obj::__CreateEmpty() { return new FlxTypedButton_obj; }

void *FlxTypedButton_obj::_hx_vtable = 0;

Dynamic FlxTypedButton_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTypedButton_obj > _hx_result = new FlxTypedButton_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool FlxTypedButton_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1aa5d1c2) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x1aa5d1c2;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

static ::flixel::input::IFlxInput_obj _hx_flixel_ui_FlxTypedButton__hx_flixel_input_IFlxInput= {
	( bool (hx::Object::*)())&::flixel::ui::FlxTypedButton_obj::get_justReleased,
	( bool (hx::Object::*)())&::flixel::ui::FlxTypedButton_obj::get_released,
	( bool (hx::Object::*)())&::flixel::ui::FlxTypedButton_obj::get_pressed,
	( bool (hx::Object::*)())&::flixel::ui::FlxTypedButton_obj::get_justPressed,
};

void *FlxTypedButton_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x52baf533: return &_hx_flixel_ui_FlxTypedButton__hx_flixel_input_IFlxInput;
	}
	return super::_hx_getInterface(inHash);
}

void FlxTypedButton_obj::graphicLoaded(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_231_graphicLoaded)
HXLINE( 232)		this->super::graphicLoaded();
HXLINE( 234)		this->setupAnimation(HX_("normal",27,72,69,30),(int)0);
HXLINE( 235)		this->setupAnimation(HX_("highlight",34,56,00,ed),(int)1);
HXLINE( 236)		this->setupAnimation(HX_("pressed",a2,d2,e6,39),(int)2);
            	}


void FlxTypedButton_obj::loadDefaultGraphic(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_241_loadDefaultGraphic)
HXDLIN( 241)		this->loadGraphic(HX_("flixel/images/ui/button.png",44,ee,2f,34),true,(int)80,(int)20,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,loadDefaultGraphic,(void))

void FlxTypedButton_obj::setupAnimation(::String animationName,int frameIndex){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_245_setupAnimation)
HXLINE( 247)		frameIndex = ::Std_obj::_hx_int(::Math_obj::min(frameIndex,(this->animation->_sprite->numFrames - (int)1)));
HXLINE( 248)		this->animation->add(animationName,::Array_obj< int >::__new(1)->init(0,frameIndex),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedButton_obj,setupAnimation,(void))

void FlxTypedButton_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_255_destroy)
HXLINE( 256)		this->set_label(::flixel::util::FlxDestroyUtil_obj::destroy(this->label));
HXLINE( 257)		this->_spriteLabel = null();
HXLINE( 259)		this->onUp = ( ( ::flixel::ui::_FlxButton::FlxButtonEvent)(::flixel::util::FlxDestroyUtil_obj::destroy(this->onUp)) );
HXLINE( 260)		this->onDown = ( ( ::flixel::ui::_FlxButton::FlxButtonEvent)(::flixel::util::FlxDestroyUtil_obj::destroy(this->onDown)) );
HXLINE( 261)		this->onOver = ( ( ::flixel::ui::_FlxButton::FlxButtonEvent)(::flixel::util::FlxDestroyUtil_obj::destroy(this->onOver)) );
HXLINE( 262)		this->onOut = ( ( ::flixel::ui::_FlxButton::FlxButtonEvent)(::flixel::util::FlxDestroyUtil_obj::destroy(this->onOut)) );
HXLINE( 264)		this->labelOffsets = ::flixel::util::FlxDestroyUtil_obj::putArray(this->labelOffsets);
HXLINE( 266)		this->labelAlphas = null();
HXLINE( 267)		this->currentInput = null();
HXLINE( 268)		this->input = null();
HXLINE( 271)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->removeEventListener(::openfl::_legacy::events::MouseEvent_obj::MOUSE_UP,this->onUpEventListener_dyn(),null());
HXLINE( 274)		this->super::destroy();
            	}


void FlxTypedButton_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_281_update)
HXLINE( 282)		this->super::update(elapsed);
HXLINE( 284)		this->input->update();
HXLINE( 286)		if (this->visible) {
HXLINE( 290)			this->updateButton();
HXLINE( 294)			if ((this->lastStatus != this->status)) {
HXLINE( 296)				this->updateStatusAnimation();
HXLINE( 297)				this->lastStatus = this->status;
            			}
            		}
            	}


void FlxTypedButton_obj::updateStatusAnimation(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_304_updateStatusAnimation)
HXDLIN( 304)		 ::flixel::animation::FlxAnimationController _hx_tmp = this->animation;
HXDLIN( 304)		_hx_tmp->play(this->statusAnimations->__get(this->status),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,updateStatusAnimation,(void))

void FlxTypedButton_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_311_draw)
HXLINE( 312)		this->super::draw();
HXLINE( 314)		bool _hx_tmp;
HXDLIN( 314)		if (hx::IsNotNull( this->_spriteLabel )) {
HXLINE( 314)			_hx_tmp = this->_spriteLabel->visible;
            		}
            		else {
HXLINE( 314)			_hx_tmp = false;
            		}
HXDLIN( 314)		if (_hx_tmp) {
HXLINE( 316)			 ::flixel::FlxSprite _hx_tmp1 = this->_spriteLabel;
HXDLIN( 316)			_hx_tmp1->set_cameras(this->get_cameras());
HXLINE( 317)			this->_spriteLabel->draw();
            		}
            	}


void FlxTypedButton_obj::drawDebug(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_326_drawDebug)
HXLINE( 327)		this->super::drawDebug();
HXLINE( 329)		if (hx::IsNotNull( this->_spriteLabel )) {
HXLINE( 331)			this->_spriteLabel->drawDebug();
            		}
            	}


bool FlxTypedButton_obj::stampOnAtlas( ::flixel::graphics::atlas::FlxAtlas atlas){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_345_stampOnAtlas)
HXLINE( 346)		 ::flixel::graphics::atlas::FlxNode buttonNode = atlas->addNode(this->graphic->bitmap,this->graphic->key);
HXLINE( 347)		bool result = hx::IsNotNull( buttonNode );
HXLINE( 349)		if (hx::IsNotNull( buttonNode )) {
HXLINE( 351)			 ::flixel::graphics::frames::FlxTileFrames buttonFrames = ( ( ::flixel::graphics::frames::FlxTileFrames)(this->frames) );
HXLINE( 352)			Float X = buttonFrames->tileSize->x;
HXDLIN( 352)			Float Y = buttonFrames->tileSize->y;
HXDLIN( 352)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 352)			point->_inPool = false;
HXDLIN( 352)			 ::flixel::math::FlxPoint tileSize = point;
HXLINE( 353)			 ::flixel::graphics::frames::FlxTileFrames tileFrames = buttonNode->getTileFrames(tileSize,null(),null());
HXLINE( 354)			this->set_frames(tileFrames);
            		}
HXLINE( 357)		bool _hx_tmp;
HXDLIN( 357)		if (result) {
HXLINE( 357)			_hx_tmp = hx::IsNotNull( this->label );
            		}
            		else {
HXLINE( 357)			_hx_tmp = false;
            		}
HXDLIN( 357)		if (_hx_tmp) {
HXLINE( 359)			 ::flixel::graphics::atlas::FlxNode labelNode = atlas->addNode(( ( ::flixel::FlxSprite)(this->label) )->graphic->bitmap,( ( ::flixel::FlxSprite)(this->label) )->graphic->key);
HXLINE( 360)			if (result) {
HXLINE( 360)				result = hx::IsNotNull( labelNode );
            			}
            			else {
HXLINE( 360)				result = false;
            			}
HXLINE( 362)			if (hx::IsNotNull( labelNode )) {
HXLINE( 363)				 ::Dynamic _hx_tmp1 = this->label;
HXDLIN( 363)				( ( ::flixel::FlxSprite)(_hx_tmp1) )->set_frames(labelNode->getImageFrame());
            			}
            		}
HXLINE( 366)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedButton_obj,stampOnAtlas,return )

void FlxTypedButton_obj::updateButton(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_374_updateButton)
HXLINE( 376)		bool overlapFound = this->checkMouseOverlap();
HXLINE( 377)		if (!(overlapFound)) {
HXLINE( 378)			overlapFound = this->checkTouchOverlap();
            		}
HXLINE( 387)		bool _hx_tmp;
HXDLIN( 387)		if ((this->status != (int)0)) {
HXLINE( 388)			if (!(!(overlapFound))) {
HXLINE( 388)				if (hx::IsNotNull( this->currentInput )) {
HXLINE( 387)					_hx_tmp = ( (bool)(this->currentInput->__Field(HX_("get_justReleased",92,07,fa,6a),hx::paccDynamic)()) );
            				}
            				else {
HXLINE( 387)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 387)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 387)			_hx_tmp = false;
            		}
HXDLIN( 387)		if (_hx_tmp) {
HXLINE( 390)			this->onOutHandler();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,updateButton,(void))

bool FlxTypedButton_obj::checkMouseOverlap(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_395_checkMouseOverlap)
HXLINE( 397)		{
HXLINE( 397)			int _g = (int)0;
HXDLIN( 397)			::Array< ::Dynamic> _g1 = this->get_cameras();
HXDLIN( 397)			while((_g < _g1->length)){
HXLINE( 397)				 ::flixel::FlxCamera camera = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 397)				_g = (_g + (int)1);
HXLINE( 399)				{
HXLINE( 399)					int _g2 = (int)0;
HXDLIN( 399)					::Array< int > _g3 = this->mouseButtons;
HXDLIN( 399)					while((_g2 < _g3->length)){
HXLINE( 399)						int buttonID = _g3->__get(_g2);
HXDLIN( 399)						_g2 = (_g2 + (int)1);
HXLINE( 401)						 ::flixel::input::mouse::FlxMouseButton button = ::flixel::input::mouse::FlxMouseButton_obj::getByID(buttonID);
HXLINE( 402)						bool _hx_tmp;
HXDLIN( 402)						if (hx::IsNotNull( button )) {
HXLINE( 402)							_hx_tmp = this->checkInput(::flixel::FlxG_obj::mouse,button,button->justPressedPosition,camera);
            						}
            						else {
HXLINE( 402)							_hx_tmp = false;
            						}
HXDLIN( 402)						if (_hx_tmp) {
HXLINE( 404)							return true;
            						}
            					}
            				}
            			}
            		}
HXLINE( 410)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,checkMouseOverlap,return )

bool FlxTypedButton_obj::checkTouchOverlap(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_428_checkTouchOverlap)
HXDLIN( 428)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,checkTouchOverlap,return )

bool FlxTypedButton_obj::checkInput( ::flixel::input::FlxPointer pointer,::Dynamic input, ::flixel::math::FlxPoint justPressedPosition, ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_432_checkInput)
HXLINE( 433)		bool _hx_tmp;
HXDLIN( 433)		bool _hx_tmp1;
HXDLIN( 433)		if ((this->maxInputMovement != ::Math_obj::POSITIVE_INFINITY)) {
HXLINE( 434)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 434)			point->_inPool = false;
HXDLIN( 434)			 ::flixel::math::FlxPoint point1 = point;
HXDLIN( 434)			point1->_weak = true;
HXDLIN( 434)			Float _hx_tmp2 = justPressedPosition->distanceTo(pointer->getScreenPosition(null(),point1));
HXLINE( 433)			_hx_tmp1 = (_hx_tmp2 > this->maxInputMovement);
            		}
            		else {
HXLINE( 433)			_hx_tmp1 = false;
            		}
HXDLIN( 433)		if (_hx_tmp1) {
HXLINE( 433)			_hx_tmp = hx::IsEq( input,this->currentInput );
            		}
            		else {
HXLINE( 433)			_hx_tmp = false;
            		}
HXDLIN( 433)		if (!(_hx_tmp)) {
HXLINE( 439)			if (this->overlapsPoint(pointer->getWorldPosition(camera,this->_point),true,camera)) {
HXLINE( 441)				this->updateStatus(input);
HXLINE( 442)				return true;
            			}
            		}
HXLINE( 445)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxTypedButton_obj,checkInput,return )

void FlxTypedButton_obj::updateStatus(::Dynamic input){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_453_updateStatus)
HXDLIN( 453)		if (( (bool)(input->__Field(HX_("get_justPressed",6d,c5,88,b3),hx::paccDynamic)()) )) {
HXLINE( 455)			this->currentInput = input;
HXLINE( 456)			this->onDownHandler();
            		}
            		else {
HXLINE( 458)			if ((this->status == (int)0)) {
HXLINE( 461)				bool _hx_tmp;
HXDLIN( 461)				if (this->allowSwiping) {
HXLINE( 461)					_hx_tmp = ( (bool)(input->__Field(HX_("get_pressed",b9,32,e1,bf),hx::paccDynamic)()) );
            				}
            				else {
HXLINE( 461)					_hx_tmp = false;
            				}
HXDLIN( 461)				if (_hx_tmp) {
HXLINE( 463)					this->onDownHandler();
            				}
            				else {
HXLINE( 467)					this->onOverHandler();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedButton_obj,updateStatus,(void))

void FlxTypedButton_obj::updateLabelPosition(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_474_updateLabelPosition)
HXDLIN( 474)		if (hx::IsNotNull( this->_spriteLabel )) {
HXLINE( 476)			 ::flixel::FlxSprite _hx_tmp = this->_spriteLabel;
HXDLIN( 476)			Float _hx_tmp1;
HXDLIN( 476)			if (this->pixelPerfectPosition) {
HXLINE( 476)				_hx_tmp1 = ::Math_obj::floor(this->x);
            			}
            			else {
HXLINE( 476)				_hx_tmp1 = this->x;
            			}
HXDLIN( 476)			_hx_tmp->set_x((_hx_tmp1 + this->labelOffsets->__get(this->status).StaticCast<  ::flixel::math::FlxPoint >()->x));
HXLINE( 477)			 ::flixel::FlxSprite _hx_tmp2 = this->_spriteLabel;
HXDLIN( 477)			Float _hx_tmp3;
HXDLIN( 477)			if (this->pixelPerfectPosition) {
HXLINE( 477)				_hx_tmp3 = ::Math_obj::floor(this->y);
            			}
            			else {
HXLINE( 477)				_hx_tmp3 = this->y;
            			}
HXDLIN( 477)			_hx_tmp2->set_y((_hx_tmp3 + this->labelOffsets->__get(this->status).StaticCast<  ::flixel::math::FlxPoint >()->y));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,updateLabelPosition,(void))

void FlxTypedButton_obj::updateLabelAlpha(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_483_updateLabelAlpha)
HXDLIN( 483)		bool _hx_tmp;
HXDLIN( 483)		if (hx::IsNotNull( this->_spriteLabel )) {
HXDLIN( 483)			_hx_tmp = (this->labelAlphas->length > this->status);
            		}
            		else {
HXDLIN( 483)			_hx_tmp = false;
            		}
HXDLIN( 483)		if (_hx_tmp) {
HXLINE( 485)			 ::flixel::FlxSprite _hx_tmp1 = this->_spriteLabel;
HXDLIN( 485)			Float _hx_tmp2 = this->alpha;
HXDLIN( 485)			_hx_tmp1->set_alpha((_hx_tmp2 * this->labelAlphas->__get(this->status)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,updateLabelAlpha,(void))

void FlxTypedButton_obj::onUpEventListener( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_496_onUpEventListener)
HXDLIN( 496)		bool _hx_tmp;
HXDLIN( 496)		bool _hx_tmp1;
HXDLIN( 496)		bool _hx_tmp2;
HXDLIN( 496)		if (this->visible) {
HXDLIN( 496)			_hx_tmp2 = this->exists;
            		}
            		else {
HXDLIN( 496)			_hx_tmp2 = false;
            		}
HXDLIN( 496)		if (_hx_tmp2) {
HXDLIN( 496)			_hx_tmp1 = this->active;
            		}
            		else {
HXDLIN( 496)			_hx_tmp1 = false;
            		}
HXDLIN( 496)		if (_hx_tmp1) {
HXDLIN( 496)			_hx_tmp = (this->status == (int)2);
            		}
            		else {
HXDLIN( 496)			_hx_tmp = false;
            		}
HXDLIN( 496)		if (_hx_tmp) {
HXLINE( 498)			this->onUpHandler();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedButton_obj,onUpEventListener,(void))

void FlxTypedButton_obj::onUpHandler(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_507_onUpHandler)
HXLINE( 508)		this->set_status((int)0);
HXLINE( 509)		this->input->release();
HXLINE( 510)		this->currentInput = null();
HXLINE( 512)		{
HXLINE( 512)			 ::flixel::ui::_FlxButton::FlxButtonEvent _this = this->onUp;
HXDLIN( 512)			if (hx::IsNotNull( _this->callback )) {
HXLINE( 512)				_this->callback();
            			}
HXDLIN( 512)			if (hx::IsNotNull( _this->sound )) {
HXLINE( 512)				_this->sound->play(true,null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,onUpHandler,(void))

void FlxTypedButton_obj::onDownHandler(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_519_onDownHandler)
HXLINE( 520)		this->set_status((int)2);
HXLINE( 521)		this->input->press();
HXLINE( 523)		{
HXLINE( 523)			 ::flixel::ui::_FlxButton::FlxButtonEvent _this = this->onDown;
HXDLIN( 523)			if (hx::IsNotNull( _this->callback )) {
HXLINE( 523)				_this->callback();
            			}
HXDLIN( 523)			if (hx::IsNotNull( _this->sound )) {
HXLINE( 523)				_this->sound->play(true,null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,onDownHandler,(void))

void FlxTypedButton_obj::onOverHandler(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_530_onOverHandler)
HXLINE( 531)		this->set_status((int)1);
HXLINE( 533)		{
HXLINE( 533)			 ::flixel::ui::_FlxButton::FlxButtonEvent _this = this->onOver;
HXDLIN( 533)			if (hx::IsNotNull( _this->callback )) {
HXLINE( 533)				_this->callback();
            			}
HXDLIN( 533)			if (hx::IsNotNull( _this->sound )) {
HXLINE( 533)				_this->sound->play(true,null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,onOverHandler,(void))

void FlxTypedButton_obj::onOutHandler(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_540_onOutHandler)
HXLINE( 541)		this->set_status((int)0);
HXLINE( 542)		this->input->release();
HXLINE( 544)		{
HXLINE( 544)			 ::flixel::ui::_FlxButton::FlxButtonEvent _this = this->onOut;
HXDLIN( 544)			if (hx::IsNotNull( _this->callback )) {
HXLINE( 544)				_this->callback();
            			}
HXDLIN( 544)			if (hx::IsNotNull( _this->sound )) {
HXLINE( 544)				_this->sound->play(true,null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,onOutHandler,(void))

 ::Dynamic FlxTypedButton_obj::set_label( ::Dynamic Value){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_548_set_label)
HXLINE( 549)		if (hx::IsNotNull( Value )) {
HXLINE( 552)			( ( ::flixel::FlxObject)(Value) )->scrollFactor->put();
HXLINE( 553)			( ( ::flixel::FlxObject)(Value) )->scrollFactor = this->scrollFactor;
            		}
HXLINE( 556)		this->label = Value;
HXLINE( 557)		this->_spriteLabel = ( ( ::flixel::FlxSprite)(this->label) );
HXLINE( 559)		this->updateLabelPosition();
HXLINE( 561)		return Value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedButton_obj,set_label,return )

int FlxTypedButton_obj::set_status(int Value){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_565_set_status)
HXLINE( 566)		this->status = Value;
HXLINE( 567)		this->updateLabelAlpha();
HXLINE( 568)		return this->status;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedButton_obj,set_status,return )

Float FlxTypedButton_obj::set_alpha(Float Value){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_572_set_alpha)
HXLINE( 573)		this->super::set_alpha(Value);
HXLINE( 574)		this->updateLabelAlpha();
HXLINE( 575)		return this->alpha;
            	}


Float FlxTypedButton_obj::set_x(Float Value){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_579_set_x)
HXLINE( 580)		this->super::set_x(Value);
HXLINE( 581)		this->updateLabelPosition();
HXLINE( 582)		return this->x;
            	}


Float FlxTypedButton_obj::set_y(Float Value){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_586_set_y)
HXLINE( 587)		this->super::set_y(Value);
HXLINE( 588)		this->updateLabelPosition();
HXLINE( 589)		return this->y;
            	}


bool FlxTypedButton_obj::get_justReleased(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_594_get_justReleased)
HXDLIN( 594)		return (this->input->current == (int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,get_justReleased,return )

bool FlxTypedButton_obj::get_released(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_599_get_released)
HXDLIN( 599)		 ::flixel::input::FlxInput _this = this->input;
HXDLIN( 599)		if ((_this->current != (int)0)) {
HXDLIN( 599)			return (_this->current == (int)-1);
            		}
            		else {
HXDLIN( 599)			return true;
            		}
HXDLIN( 599)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,get_released,return )

bool FlxTypedButton_obj::get_pressed(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_604_get_pressed)
HXDLIN( 604)		 ::flixel::input::FlxInput _this = this->input;
HXDLIN( 604)		if ((_this->current != (int)1)) {
HXDLIN( 604)			return (_this->current == (int)2);
            		}
            		else {
HXDLIN( 604)			return true;
            		}
HXDLIN( 604)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,get_pressed,return )

bool FlxTypedButton_obj::get_justPressed(){
            	HX_STACKFRAME(&_hx_pos_6947f0146d371c6d_609_get_justPressed)
HXDLIN( 609)		return (this->input->current == (int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,get_justPressed,return )


hx::ObjectPtr< FlxTypedButton_obj > FlxTypedButton_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic OnClick) {
	hx::ObjectPtr< FlxTypedButton_obj > __this = new FlxTypedButton_obj();
	__this->__construct(__o_X,__o_Y,OnClick);
	return __this;
}

hx::ObjectPtr< FlxTypedButton_obj > FlxTypedButton_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic OnClick) {
	FlxTypedButton_obj *__this = (FlxTypedButton_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxTypedButton_obj), true, "flixel.ui.FlxTypedButton"));
	*(void **)__this = FlxTypedButton_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,OnClick);
	return __this;
}

FlxTypedButton_obj::FlxTypedButton_obj()
{
}

void FlxTypedButton_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTypedButton);
	HX_MARK_MEMBER_NAME(label,"label");
	HX_MARK_MEMBER_NAME(labelOffsets,"labelOffsets");
	HX_MARK_MEMBER_NAME(labelAlphas,"labelAlphas");
	HX_MARK_MEMBER_NAME(statusAnimations,"statusAnimations");
	HX_MARK_MEMBER_NAME(allowSwiping,"allowSwiping");
	HX_MARK_MEMBER_NAME(mouseButtons,"mouseButtons");
	HX_MARK_MEMBER_NAME(maxInputMovement,"maxInputMovement");
	HX_MARK_MEMBER_NAME(status,"status");
	HX_MARK_MEMBER_NAME(onUp,"onUp");
	HX_MARK_MEMBER_NAME(onDown,"onDown");
	HX_MARK_MEMBER_NAME(onOver,"onOver");
	HX_MARK_MEMBER_NAME(onOut,"onOut");
	HX_MARK_MEMBER_NAME(_spriteLabel,"_spriteLabel");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(currentInput,"currentInput");
	HX_MARK_MEMBER_NAME(lastStatus,"lastStatus");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTypedButton_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(label,"label");
	HX_VISIT_MEMBER_NAME(labelOffsets,"labelOffsets");
	HX_VISIT_MEMBER_NAME(labelAlphas,"labelAlphas");
	HX_VISIT_MEMBER_NAME(statusAnimations,"statusAnimations");
	HX_VISIT_MEMBER_NAME(allowSwiping,"allowSwiping");
	HX_VISIT_MEMBER_NAME(mouseButtons,"mouseButtons");
	HX_VISIT_MEMBER_NAME(maxInputMovement,"maxInputMovement");
	HX_VISIT_MEMBER_NAME(status,"status");
	HX_VISIT_MEMBER_NAME(onUp,"onUp");
	HX_VISIT_MEMBER_NAME(onDown,"onDown");
	HX_VISIT_MEMBER_NAME(onOver,"onOver");
	HX_VISIT_MEMBER_NAME(onOut,"onOut");
	HX_VISIT_MEMBER_NAME(_spriteLabel,"_spriteLabel");
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(currentInput,"currentInput");
	HX_VISIT_MEMBER_NAME(lastStatus,"lastStatus");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxTypedButton_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"onUp") ) { return hx::Val( onUp ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { return hx::Val( label ); }
		if (HX_FIELD_EQ(inName,"onOut") ) { return hx::Val( onOut ); }
		if (HX_FIELD_EQ(inName,"input") ) { return hx::Val( input ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"status") ) { return hx::Val( status ); }
		if (HX_FIELD_EQ(inName,"onDown") ) { return hx::Val( onDown ); }
		if (HX_FIELD_EQ(inName,"onOver") ) { return hx::Val( onOver ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pressed") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pressed() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"released") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_released() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawDebug") ) { return hx::Val( drawDebug_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_label") ) { return hx::Val( set_label_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastStatus") ) { return hx::Val( lastStatus ); }
		if (HX_FIELD_EQ(inName,"checkInput") ) { return hx::Val( checkInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_status") ) { return hx::Val( set_status_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"labelAlphas") ) { return hx::Val( labelAlphas ); }
		if (HX_FIELD_EQ(inName,"justPressed") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_justPressed() ); }
		if (HX_FIELD_EQ(inName,"onUpHandler") ) { return hx::Val( onUpHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_pressed") ) { return hx::Val( get_pressed_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"labelOffsets") ) { return hx::Val( labelOffsets ); }
		if (HX_FIELD_EQ(inName,"allowSwiping") ) { return hx::Val( allowSwiping ); }
		if (HX_FIELD_EQ(inName,"mouseButtons") ) { return hx::Val( mouseButtons ); }
		if (HX_FIELD_EQ(inName,"justReleased") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_justReleased() ); }
		if (HX_FIELD_EQ(inName,"_spriteLabel") ) { return hx::Val( _spriteLabel ); }
		if (HX_FIELD_EQ(inName,"currentInput") ) { return hx::Val( currentInput ); }
		if (HX_FIELD_EQ(inName,"stampOnAtlas") ) { return hx::Val( stampOnAtlas_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateButton") ) { return hx::Val( updateButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateStatus") ) { return hx::Val( updateStatus_dyn() ); }
		if (HX_FIELD_EQ(inName,"onOutHandler") ) { return hx::Val( onOutHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_released") ) { return hx::Val( get_released_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"graphicLoaded") ) { return hx::Val( graphicLoaded_dyn() ); }
		if (HX_FIELD_EQ(inName,"onDownHandler") ) { return hx::Val( onDownHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"onOverHandler") ) { return hx::Val( onOverHandler_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setupAnimation") ) { return hx::Val( setupAnimation_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_justPressed") ) { return hx::Val( get_justPressed_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"statusAnimations") ) { return hx::Val( statusAnimations ); }
		if (HX_FIELD_EQ(inName,"maxInputMovement") ) { return hx::Val( maxInputMovement ); }
		if (HX_FIELD_EQ(inName,"updateLabelAlpha") ) { return hx::Val( updateLabelAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_justReleased") ) { return hx::Val( get_justReleased_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"checkMouseOverlap") ) { return hx::Val( checkMouseOverlap_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkTouchOverlap") ) { return hx::Val( checkTouchOverlap_dyn() ); }
		if (HX_FIELD_EQ(inName,"onUpEventListener") ) { return hx::Val( onUpEventListener_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"loadDefaultGraphic") ) { return hx::Val( loadDefaultGraphic_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"updateLabelPosition") ) { return hx::Val( updateLabelPosition_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"updateStatusAnimation") ) { return hx::Val( updateStatusAnimation_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxTypedButton_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"onUp") ) { onUp=inValue.Cast<  ::flixel::ui::_FlxButton::FlxButtonEvent >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_label(inValue.Cast<  ::Dynamic >()) );label=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onOut") ) { onOut=inValue.Cast<  ::flixel::ui::_FlxButton::FlxButtonEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast<  ::flixel::input::FlxInput >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"status") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_status(inValue.Cast< int >()) );status=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onDown") ) { onDown=inValue.Cast<  ::flixel::ui::_FlxButton::FlxButtonEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onOver") ) { onOver=inValue.Cast<  ::flixel::ui::_FlxButton::FlxButtonEvent >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastStatus") ) { lastStatus=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"labelAlphas") ) { labelAlphas=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"labelOffsets") ) { labelOffsets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowSwiping") ) { allowSwiping=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseButtons") ) { mouseButtons=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_spriteLabel") ) { _spriteLabel=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentInput") ) { currentInput=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"statusAnimations") ) { statusAnimations=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxInputMovement") ) { maxInputMovement=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTypedButton_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("label","\xf4","\x0d","\xaf","\x6f"));
	outFields->push(HX_HCSTRING("labelOffsets","\xec","\x89","\xc7","\x2c"));
	outFields->push(HX_HCSTRING("labelAlphas","\x69","\x3c","\x3c","\x8d"));
	outFields->push(HX_HCSTRING("statusAnimations","\xc1","\xd2","\xc0","\xc5"));
	outFields->push(HX_HCSTRING("allowSwiping","\xae","\x3a","\x40","\x43"));
	outFields->push(HX_HCSTRING("mouseButtons","\x9c","\xa2","\x1a","\xac"));
	outFields->push(HX_HCSTRING("maxInputMovement","\x15","\x8e","\xe1","\x5a"));
	outFields->push(HX_HCSTRING("status","\x32","\xe7","\xfb","\x05"));
	outFields->push(HX_HCSTRING("onUp","\x5a","\x71","\xb2","\x49"));
	outFields->push(HX_HCSTRING("onDown","\x21","\x01","\xf8","\xe4"));
	outFields->push(HX_HCSTRING("onOver","\x13","\x9a","\x42","\xec"));
	outFields->push(HX_HCSTRING("onOut","\xaf","\x34","\x6c","\x32"));
	outFields->push(HX_HCSTRING("justReleased","\x09","\x1b","\x5b","\x66"));
	outFields->push(HX_HCSTRING("released","\xbd","\x88","\xe7","\x76"));
	outFields->push(HX_HCSTRING("pressed","\xa2","\xd2","\xe6","\x39"));
	outFields->push(HX_HCSTRING("justPressed","\xd6","\x0d","\xa7","\xf2"));
	outFields->push(HX_HCSTRING("_spriteLabel","\xb0","\x9d","\x5b","\x0c"));
	outFields->push(HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"));
	outFields->push(HX_HCSTRING("currentInput","\x11","\xa9","\x29","\x05"));
	outFields->push(HX_HCSTRING("lastStatus","\x28","\xca","\xd6","\xd0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTypedButton_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTypedButton_obj,label),HX_HCSTRING("label","\xf4","\x0d","\xaf","\x6f")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxTypedButton_obj,labelOffsets),HX_HCSTRING("labelOffsets","\xec","\x89","\xc7","\x2c")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(FlxTypedButton_obj,labelAlphas),HX_HCSTRING("labelAlphas","\x69","\x3c","\x3c","\x8d")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(FlxTypedButton_obj,statusAnimations),HX_HCSTRING("statusAnimations","\xc1","\xd2","\xc0","\xc5")},
	{hx::fsBool,(int)offsetof(FlxTypedButton_obj,allowSwiping),HX_HCSTRING("allowSwiping","\xae","\x3a","\x40","\x43")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxTypedButton_obj,mouseButtons),HX_HCSTRING("mouseButtons","\x9c","\xa2","\x1a","\xac")},
	{hx::fsFloat,(int)offsetof(FlxTypedButton_obj,maxInputMovement),HX_HCSTRING("maxInputMovement","\x15","\x8e","\xe1","\x5a")},
	{hx::fsInt,(int)offsetof(FlxTypedButton_obj,status),HX_HCSTRING("status","\x32","\xe7","\xfb","\x05")},
	{hx::fsObject /*::flixel::ui::_FlxButton::FlxButtonEvent*/ ,(int)offsetof(FlxTypedButton_obj,onUp),HX_HCSTRING("onUp","\x5a","\x71","\xb2","\x49")},
	{hx::fsObject /*::flixel::ui::_FlxButton::FlxButtonEvent*/ ,(int)offsetof(FlxTypedButton_obj,onDown),HX_HCSTRING("onDown","\x21","\x01","\xf8","\xe4")},
	{hx::fsObject /*::flixel::ui::_FlxButton::FlxButtonEvent*/ ,(int)offsetof(FlxTypedButton_obj,onOver),HX_HCSTRING("onOver","\x13","\x9a","\x42","\xec")},
	{hx::fsObject /*::flixel::ui::_FlxButton::FlxButtonEvent*/ ,(int)offsetof(FlxTypedButton_obj,onOut),HX_HCSTRING("onOut","\xaf","\x34","\x6c","\x32")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(FlxTypedButton_obj,_spriteLabel),HX_HCSTRING("_spriteLabel","\xb0","\x9d","\x5b","\x0c")},
	{hx::fsObject /*::flixel::input::FlxInput*/ ,(int)offsetof(FlxTypedButton_obj,input),HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe")},
	{hx::fsObject /*::flixel::input::IFlxInput*/ ,(int)offsetof(FlxTypedButton_obj,currentInput),HX_HCSTRING("currentInput","\x11","\xa9","\x29","\x05")},
	{hx::fsInt,(int)offsetof(FlxTypedButton_obj,lastStatus),HX_HCSTRING("lastStatus","\x28","\xca","\xd6","\xd0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTypedButton_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTypedButton_obj_sMemberFields[] = {
	HX_HCSTRING("label","\xf4","\x0d","\xaf","\x6f"),
	HX_HCSTRING("labelOffsets","\xec","\x89","\xc7","\x2c"),
	HX_HCSTRING("labelAlphas","\x69","\x3c","\x3c","\x8d"),
	HX_HCSTRING("statusAnimations","\xc1","\xd2","\xc0","\xc5"),
	HX_HCSTRING("allowSwiping","\xae","\x3a","\x40","\x43"),
	HX_HCSTRING("mouseButtons","\x9c","\xa2","\x1a","\xac"),
	HX_HCSTRING("maxInputMovement","\x15","\x8e","\xe1","\x5a"),
	HX_HCSTRING("status","\x32","\xe7","\xfb","\x05"),
	HX_HCSTRING("onUp","\x5a","\x71","\xb2","\x49"),
	HX_HCSTRING("onDown","\x21","\x01","\xf8","\xe4"),
	HX_HCSTRING("onOver","\x13","\x9a","\x42","\xec"),
	HX_HCSTRING("onOut","\xaf","\x34","\x6c","\x32"),
	HX_HCSTRING("_spriteLabel","\xb0","\x9d","\x5b","\x0c"),
	HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"),
	HX_HCSTRING("currentInput","\x11","\xa9","\x29","\x05"),
	HX_HCSTRING("lastStatus","\x28","\xca","\xd6","\xd0"),
	HX_HCSTRING("graphicLoaded","\xcd","\x84","\x20","\x16"),
	HX_HCSTRING("loadDefaultGraphic","\xad","\x18","\x08","\x83"),
	HX_HCSTRING("setupAnimation","\xc7","\xe8","\xce","\xb6"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateStatusAnimation","\x69","\x25","\xc1","\x4d"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("drawDebug","\xaf","\x87","\x2a","\x9f"),
	HX_HCSTRING("stampOnAtlas","\xe9","\xf9","\x45","\x2b"),
	HX_HCSTRING("updateButton","\xdb","\x08","\xa4","\xd9"),
	HX_HCSTRING("checkMouseOverlap","\xca","\x84","\x64","\x1a"),
	HX_HCSTRING("checkTouchOverlap","\x70","\x4a","\x21","\x63"),
	HX_HCSTRING("checkInput","\x22","\xc6","\x0d","\xce"),
	HX_HCSTRING("updateStatus","\x1b","\x8e","\xbf","\x05"),
	HX_HCSTRING("updateLabelPosition","\xf4","\x76","\x4f","\xbf"),
	HX_HCSTRING("updateLabelAlpha","\x33","\xc4","\x65","\x87"),
	HX_HCSTRING("onUpEventListener","\xf4","\xbc","\xef","\x3b"),
	HX_HCSTRING("onUpHandler","\x90","\xa5","\xd0","\xa3"),
	HX_HCSTRING("onDownHandler","\xa9","\xac","\x21","\xcf"),
	HX_HCSTRING("onOverHandler","\xf7","\xf5","\x89","\xaa"),
	HX_HCSTRING("onOutHandler","\xdb","\x26","\xe5","\x9e"),
	HX_HCSTRING("set_label","\x57","\x56","\xa9","\x96"),
	HX_HCSTRING("set_status","\x6f","\xf5","\x00","\xfa"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_justReleased","\x92","\x07","\xfa","\x6a"),
	HX_HCSTRING("get_released","\xc6","\x3c","\x01","\x2c"),
	HX_HCSTRING("get_pressed","\xb9","\x32","\xe1","\xbf"),
	HX_HCSTRING("get_justPressed","\x6d","\xc5","\x88","\xb3"),
	::String(null()) };

static void FlxTypedButton_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTypedButton_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTypedButton_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTypedButton_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxTypedButton_obj::__mClass;

void FlxTypedButton_obj::__register()
{
	hx::Object *dummy = new FlxTypedButton_obj;
	FlxTypedButton_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.ui.FlxTypedButton","\x12","\xad","\x96","\xf6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTypedButton_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTypedButton_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTypedButton_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTypedButton_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTypedButton_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTypedButton_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace ui
