// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_util_LabelValuePair
#include <flixel/util/FlxPool_flixel_util_LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BlendMode
#include <openfl/_legacy/display/BlendMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_ColorTransform
#include <openfl/_legacy/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_29953dbeb33e4775_29_new,"flixel.ui.FlxBar","new",0xec11b05b,"flixel.ui.FlxBar.new","flixel/ui/FlxBar.hx",29,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_181_destroy,"flixel.ui.FlxBar","destroy",0x13b32675,"flixel.ui.FlxBar.destroy","flixel/ui/FlxBar.hx",181,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_217_trackParent,"flixel.ui.FlxBar","trackParent",0x235ed510,"flixel.ui.FlxBar.trackParent","flixel/ui/FlxBar.hx",217,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_238_setParent,"flixel.ui.FlxBar","setParent",0x1ca008a7,"flixel.ui.FlxBar.setParent","flixel/ui/FlxBar.hx",238,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_257_stopTrackingParent,"flixel.ui.FlxBar","stopTrackingParent",0x3b6e39c8,"flixel.ui.FlxBar.stopTrackingParent","flixel/ui/FlxBar.hx",257,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_273_setCallbacks,"flixel.ui.FlxBar","setCallbacks",0x67217bb1,"flixel.ui.FlxBar.setCallbacks","flixel/ui/FlxBar.hx",273,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_286_setRange,"flixel.ui.FlxBar","setRange",0x4a8160e0,"flixel.ui.FlxBar.setRange","flixel/ui/FlxBar.hx",286,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_321_createFilledBar,"flixel.ui.FlxBar","createFilledBar",0x6a7e3330,"flixel.ui.FlxBar.createFilledBar","flixel/ui/FlxBar.hx",321,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_336_createColoredEmptyBar,"flixel.ui.FlxBar","createColoredEmptyBar",0xa6df1307,"flixel.ui.FlxBar.createColoredEmptyBar","flixel/ui/FlxBar.hx",336,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_389_createColoredFilledBar,"flixel.ui.FlxBar","createColoredFilledBar",0x03a68870,"flixel.ui.FlxBar.createColoredFilledBar","flixel/ui/FlxBar.hx",389,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_446_createGradientBar,"flixel.ui.FlxBar","createGradientBar",0x851ca162,"flixel.ui.FlxBar.createGradientBar","flixel/ui/FlxBar.hx",446,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_463_createGradientEmptyBar,"flixel.ui.FlxBar","createGradientEmptyBar",0x05ffcf57,"flixel.ui.FlxBar.createGradientEmptyBar","flixel/ui/FlxBar.hx",463,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_527_createGradientFilledBar,"flixel.ui.FlxBar","createGradientFilledBar",0xe12a9220,"flixel.ui.FlxBar.createGradientFilledBar","flixel/ui/FlxBar.hx",527,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_593_createImageBar,"flixel.ui.FlxBar","createImageBar",0xf0f89039,"flixel.ui.FlxBar.createImageBar","flixel/ui/FlxBar.hx",593,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_607_createImageEmptyBar,"flixel.ui.FlxBar","createImageEmptyBar",0xa6dfb520,"flixel.ui.FlxBar.createImageEmptyBar","flixel/ui/FlxBar.hx",607,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_649_createImageFilledBar,"flixel.ui.FlxBar","createImageFilledBar",0x0433bc37,"flixel.ui.FlxBar.createImageFilledBar","flixel/ui/FlxBar.hx",649,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_682_set_fillDirection,"flixel.ui.FlxBar","set_fillDirection",0x7ac2afda,"flixel.ui.FlxBar.set_fillDirection","flixel/ui/FlxBar.hx",682,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_699_updateValueFromParent,"flixel.ui.FlxBar","updateValueFromParent",0x9d60d3b7,"flixel.ui.FlxBar.updateValueFromParent","flixel/ui/FlxBar.hx",699,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_707_updateBar,"flixel.ui.FlxBar","updateBar",0x52521d85,"flixel.ui.FlxBar.updateBar","flixel/ui/FlxBar.hx",707,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_717_updateEmptyBar,"flixel.ui.FlxBar","updateEmptyBar",0x77e67454,"flixel.ui.FlxBar.updateEmptyBar","flixel/ui/FlxBar.hx",717,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_728_updateFilledBar,"flixel.ui.FlxBar","updateFilledBar",0x19144a83,"flixel.ui.FlxBar.updateFilledBar","flixel/ui/FlxBar.hx",728,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_803_update,"flixel.ui.FlxBar","update",0xdbe594ee,"flixel.ui.FlxBar.update","flixel/ui/FlxBar.hx",803,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_822_draw,"flixel.ui.FlxBar","draw",0x9cd647a9,"flixel.ui.FlxBar.draw","flixel/ui/FlxBar.hx",822,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_866_set_pixels,"flixel.ui.FlxBar","set_pixels",0x3c70e2cf,"flixel.ui.FlxBar.set_pixels","flixel/ui/FlxBar.hx",866,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_878_toString,"flixel.ui.FlxBar","toString",0x909c22d1,"flixel.ui.FlxBar.toString","flixel/ui/FlxBar.hx",878,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_888_get_percent,"flixel.ui.FlxBar","get_percent",0x8cbbddd7,"flixel.ui.FlxBar.get_percent","flixel/ui/FlxBar.hx",888,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_898_set_percent,"flixel.ui.FlxBar","set_percent",0x9728e4e3,"flixel.ui.FlxBar.set_percent","flixel/ui/FlxBar.hx",898,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_907_set_value,"flixel.ui.FlxBar","set_value",0x282d560f,"flixel.ui.FlxBar.set_value","flixel/ui/FlxBar.hx",907,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_938_get_value,"flixel.ui.FlxBar","get_value",0x44dc6a03,"flixel.ui.FlxBar.get_value","flixel/ui/FlxBar.hx",938,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_942_set_numDivisions,"flixel.ui.FlxBar","set_numDivisions",0x1f308ca2,"flixel.ui.FlxBar.set_numDivisions","flixel/ui/FlxBar.hx",942,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_949_get_frontFrames,"flixel.ui.FlxBar","get_frontFrames",0xa222c541,"flixel.ui.FlxBar.get_frontFrames","flixel/ui/FlxBar.hx",949,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_958_set_frontFrames,"flixel.ui.FlxBar","set_frontFrames",0x9dee424d,"flixel.ui.FlxBar.set_frontFrames","flixel/ui/FlxBar.hx",958,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_972_get_backFrames,"flixel.ui.FlxBar","get_backFrames",0x7b96195b,"flixel.ui.FlxBar.get_backFrames","flixel/ui/FlxBar.hx",972,0x9c56c8d5)
HX_LOCAL_STACK_FRAME(_hx_pos_29953dbeb33e4775_981_set_backFrames,"flixel.ui.FlxBar","set_backFrames",0x9bb601cf,"flixel.ui.FlxBar.set_backFrames","flixel/ui/FlxBar.hx",981,0x9c56c8d5)
namespace flixel{
namespace ui{

void FlxBar_obj::__construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y, ::flixel::ui::FlxBarFillDirection direction,hx::Null< int >  __o_width,hx::Null< int >  __o_height, ::Dynamic parentRef,::String __o_variable,hx::Null< Float >  __o_min,hx::Null< Float >  __o_max,hx::Null< bool >  __o_showBorder){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
int width = __o_width.Default(100);
int height = __o_height.Default(10);
::String variable = __o_variable.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
Float min = __o_min.Default(0);
Float max = __o_max.Default(100);
bool showBorder = __o_showBorder.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_29953dbeb33e4775_29_new)
HXLINE( 131)		this->_maxPercent = (int)100;
HXLINE(  78)		this->numDivisions = (int)100;
HXLINE(  47)		this->killOnEmpty = false;
HXLINE(  35)		this->fixedPosition = true;
HXLINE( 149)		super::__construct(x,y,null());
HXLINE( 151)		if (hx::IsNull( direction )) {
HXLINE( 151)			direction = ::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn();
            		}
            		else {
HXLINE( 151)			direction = direction;
            		}
HXLINE( 153)		this->barWidth = width;
HXLINE( 154)		this->barHeight = height;
HXLINE( 156)		this->_filledBarPoint =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 157)		this->_filledBarRect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 158)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 160)			this->_zeroOffset =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 161)			this->_emptyBarRect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 162)			this->makeGraphic(width,height,(int)0,true,null());
            		}
            		else {
HXLINE( 166)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 166)			_this->x = (int)0;
HXDLIN( 166)			_this->y = (int)0;
HXDLIN( 166)			_this->width = (int)0;
HXDLIN( 166)			_this->height = (int)0;
HXDLIN( 166)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 166)			rect->_inPool = false;
HXDLIN( 166)			this->_filledFlxRect = rect;
            		}
HXLINE( 169)		if (hx::IsNotNull( parentRef )) {
HXLINE( 171)			this->parent = parentRef;
HXLINE( 172)			this->parentVariable = variable;
            		}
HXLINE( 175)		this->set_fillDirection(direction);
HXLINE( 176)		this->createFilledBar((int)-16756480,(int)-16714752,showBorder,null());
HXLINE( 177)		this->setRange(min,max);
            	}

Dynamic FlxBar_obj::__CreateEmpty() { return new FlxBar_obj; }

void *FlxBar_obj::_hx_vtable = 0;

Dynamic FlxBar_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxBar_obj > _hx_result = new FlxBar_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9]);
	return _hx_result;
}

bool FlxBar_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x7bb853f1;
	}
}

void FlxBar_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_181_destroy)
HXLINE( 182)		this->positionOffset = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->positionOffset)) );
HXLINE( 184)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 186)			this->_frontFrame = null();
HXLINE( 187)			this->_filledFlxRect = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->_filledFlxRect)) );
            		}
            		else {
HXLINE( 191)			this->_emptyBarRect = null();
HXLINE( 192)			this->_zeroOffset = null();
HXLINE( 193)			this->_emptyBar = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_emptyBar);
HXLINE( 194)			this->_filledBar = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_filledBar);
            		}
HXLINE( 196)		this->_filledBarRect = null();
HXLINE( 197)		this->_filledBarPoint = null();
HXLINE( 199)		this->parent = null();
HXLINE( 200)		this->positionOffset = null();
HXLINE( 201)		this->emptyCallback = null();
HXLINE( 202)		this->filledCallback = null();
HXLINE( 204)		this->super::destroy();
            	}


void FlxBar_obj::trackParent(int offsetX,int offsetY){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_217_trackParent)
HXLINE( 218)		this->fixedPosition = false;
HXLINE( 219)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(offsetX,offsetY);
HXDLIN( 219)		point->_inPool = false;
HXDLIN( 219)		this->positionOffset = point;
HXLINE( 221)		if (::Reflect_obj::hasField(this->parent,HX_("scrollFactor",bc,ec,cf,3b))) {
HXLINE( 223)			this->scrollFactor->set_x(( (Float)( ::Dynamic(this->parent->__Field(HX_("scrollFactor",bc,ec,cf,3b),hx::paccDynamic))->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ));
HXLINE( 224)			this->scrollFactor->set_y(( (Float)( ::Dynamic(this->parent->__Field(HX_("scrollFactor",bc,ec,cf,3b),hx::paccDynamic))->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxBar_obj,trackParent,(void))

void FlxBar_obj::setParent( ::Dynamic parentRef,::String variable,hx::Null< bool >  __o_track,hx::Null< int >  __o_offsetX,hx::Null< int >  __o_offsetY){
bool track = __o_track.Default(false);
int offsetX = __o_offsetX.Default(0);
int offsetY = __o_offsetY.Default(0);
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_238_setParent)
HXLINE( 239)		this->parent = parentRef;
HXLINE( 240)		this->parentVariable = variable;
HXLINE( 242)		if (track) {
HXLINE( 244)			this->trackParent(offsetX,offsetY);
            		}
HXLINE( 247)		this->updateValueFromParent();
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxBar_obj,setParent,(void))

void FlxBar_obj::stopTrackingParent(int posX,int posY){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_257_stopTrackingParent)
HXLINE( 258)		this->fixedPosition = true;
HXLINE( 259)		this->set_x(posX);
HXLINE( 260)		this->set_y(posY);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxBar_obj,stopTrackingParent,(void))

void FlxBar_obj::setCallbacks( ::Dynamic onEmpty, ::Dynamic onFilled,hx::Null< bool >  __o_killOnEmpty){
bool killOnEmpty = __o_killOnEmpty.Default(false);
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_273_setCallbacks)
HXLINE( 274)		 ::Dynamic _hx_tmp;
HXDLIN( 274)		if (hx::IsNotNull( onEmpty )) {
HXLINE( 274)			_hx_tmp = onEmpty;
            		}
            		else {
HXLINE( 274)			_hx_tmp = this->emptyCallback;
            		}
HXDLIN( 274)		this->emptyCallback = _hx_tmp;
HXLINE( 275)		 ::Dynamic _hx_tmp1;
HXDLIN( 275)		if (hx::IsNotNull( onFilled )) {
HXLINE( 275)			_hx_tmp1 = onFilled;
            		}
            		else {
HXLINE( 275)			_hx_tmp1 = this->filledCallback;
            		}
HXDLIN( 275)		this->filledCallback = _hx_tmp1;
HXLINE( 276)		this->killOnEmpty = killOnEmpty;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxBar_obj,setCallbacks,(void))

void FlxBar_obj::setRange(Float min,Float max){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_286_setRange)
HXLINE( 287)		if ((max <= min)) {
HXLINE( 289)			HX_STACK_DO_THROW(HX_("FlxBar: max cannot be less than or equal to min",5b,e6,e7,51));
            		}
HXLINE( 293)		this->min = min;
HXLINE( 294)		this->max = max;
HXLINE( 295)		this->range = (max - min);
HXLINE( 296)		this->pct = ((Float)this->range / (Float)this->_maxPercent);
HXLINE( 298)		Float _hx_tmp;
HXDLIN( 298)		if (this->_fillHorizontal) {
HXLINE( 298)			_hx_tmp = ((Float)this->barWidth / (Float)this->_maxPercent);
            		}
            		else {
HXLINE( 298)			_hx_tmp = ((Float)this->barHeight / (Float)this->_maxPercent);
            		}
HXDLIN( 298)		this->pxPerPercent = _hx_tmp;
HXLINE( 300)		if (!(::Math_obj::isNaN(this->get_value()))) {
HXLINE( 302)			this->set_value(::Math_obj::max(min,::Math_obj::min(this->get_value(),max)));
            		}
            		else {
HXLINE( 306)			this->set_value(min);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxBar_obj,setRange,(void))

 ::flixel::ui::FlxBar FlxBar_obj::createFilledBar(int empty,int fill,hx::Null< bool >  __o_showBorder,hx::Null< int >  __o_border){
bool showBorder = __o_showBorder.Default(false);
int border = __o_border.Default(-1);
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_321_createFilledBar)
HXLINE( 322)		this->createColoredEmptyBar(empty,showBorder,border);
HXLINE( 323)		this->createColoredFilledBar(fill,showBorder,border);
HXLINE( 324)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBar_obj,createFilledBar,return )

 ::flixel::ui::FlxBar FlxBar_obj::createColoredEmptyBar(int empty,hx::Null< bool >  __o_showBorder,hx::Null< int >  __o_border){
bool showBorder = __o_showBorder.Default(false);
int border = __o_border.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_29953dbeb33e4775_336_createColoredEmptyBar)
HXLINE( 337)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 339)			::String emptyKey = ((((HX_("empty: ",73,ea,c7,c6) + this->barWidth) + HX_("x",78,00,00,00)) + this->barHeight) + HX_(":",3a,00,00,00));
HXDLIN( 339)			::String emptyKey1;
HXDLIN( 339)			emptyKey1 = HX_("0x",48,2a,00,00);
HXDLIN( 339)			::String emptyKey2;
HXDLIN( 339)			emptyKey2 = ::StringTools_obj::hex(((int)((int)empty >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 339)			::String emptyKey3 = (emptyKey1 + emptyKey2);
HXDLIN( 339)			::String emptyKey4 = (emptyKey3 + ::StringTools_obj::hex(((int)((int)empty >> (int)(int)16) & (int)(int)255),(int)2));
HXDLIN( 339)			::String emptyKey5 = (emptyKey4 + ::StringTools_obj::hex(((int)((int)empty >> (int)(int)8) & (int)(int)255),(int)2));
HXDLIN( 339)			::String emptyKey6 = (emptyKey + (emptyKey5 + ::StringTools_obj::hex(((int)empty & (int)(int)255),(int)2)));
HXLINE( 340)			if (showBorder) {
HXLINE( 341)				::String emptyKey7;
HXDLIN( 341)				emptyKey7 = HX_("0x",48,2a,00,00);
HXDLIN( 341)				::String emptyKey8;
HXDLIN( 341)				emptyKey8 = ::StringTools_obj::hex(((int)((int)border >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 341)				::String emptyKey9 = (emptyKey7 + emptyKey8);
HXDLIN( 341)				::String emptyKey10 = (emptyKey9 + ::StringTools_obj::hex(((int)((int)border >> (int)(int)16) & (int)(int)255),(int)2));
HXDLIN( 341)				::String emptyKey11 = (emptyKey10 + ::StringTools_obj::hex(((int)((int)border >> (int)(int)8) & (int)(int)255),(int)2));
HXDLIN( 341)				emptyKey6 = (emptyKey6 + (HX_(",border: ",be,9e,76,9a) + (emptyKey11 + ::StringTools_obj::hex(((int)border & (int)(int)255),(int)2))));
            			}
HXLINE( 343)			if (hx::IsNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,emptyKey6)) ) )) {
HXLINE( 345)				 ::openfl::_legacy::display::BitmapData emptyBar = null();
HXLINE( 347)				if (showBorder) {
HXLINE( 349)					emptyBar =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,this->barWidth,this->barHeight,true,border,null());
HXLINE( 350)					int _hx_tmp = (this->barWidth - (int)2);
HXDLIN( 350)					emptyBar->fillRect( ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,(int)1,(int)1,_hx_tmp,(this->barHeight - (int)2)),empty);
            				}
            				else {
HXLINE( 354)					emptyBar =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,this->barWidth,this->barHeight,true,empty,null());
            				}
HXLINE( 357)				::flixel::FlxG_obj::bitmap->add(emptyBar,false,emptyKey6);
            			}
HXLINE( 360)			this->set_frames(( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,emptyKey6)) )->get_imageFrame());
            		}
            		else {
HXLINE( 364)			if (showBorder) {
HXLINE( 366)				this->_emptyBar =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,this->barWidth,this->barHeight,true,border,null());
HXLINE( 367)				 ::openfl::_legacy::display::BitmapData _hx_tmp1 = this->_emptyBar;
HXDLIN( 367)				int _hx_tmp2 = (this->barWidth - (int)2);
HXDLIN( 367)				_hx_tmp1->fillRect( ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,(int)1,(int)1,_hx_tmp2,(this->barHeight - (int)2)),empty);
            			}
            			else {
HXLINE( 371)				this->_emptyBar =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,this->barWidth,this->barHeight,true,empty,null());
            			}
HXLINE( 374)			this->_emptyBarRect->setTo((int)0,(int)0,this->barWidth,this->barHeight);
HXLINE( 375)			this->updateEmptyBar();
            		}
HXLINE( 378)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxBar_obj,createColoredEmptyBar,return )

 ::flixel::ui::FlxBar FlxBar_obj::createColoredFilledBar(int fill,hx::Null< bool >  __o_showBorder,hx::Null< int >  __o_border){
bool showBorder = __o_showBorder.Default(false);
int border = __o_border.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_29953dbeb33e4775_389_createColoredFilledBar)
HXLINE( 390)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 392)			::String filledKey = ((((HX_("filled: ",c8,6c,47,79) + this->barWidth) + HX_("x",78,00,00,00)) + this->barHeight) + HX_(":",3a,00,00,00));
HXDLIN( 392)			::String filledKey1;
HXDLIN( 392)			filledKey1 = HX_("0x",48,2a,00,00);
HXDLIN( 392)			::String filledKey2;
HXDLIN( 392)			filledKey2 = ::StringTools_obj::hex(((int)((int)fill >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 392)			::String filledKey3 = (filledKey1 + filledKey2);
HXDLIN( 392)			::String filledKey4 = (filledKey3 + ::StringTools_obj::hex(((int)((int)fill >> (int)(int)16) & (int)(int)255),(int)2));
HXDLIN( 392)			::String filledKey5 = (filledKey4 + ::StringTools_obj::hex(((int)((int)fill >> (int)(int)8) & (int)(int)255),(int)2));
HXDLIN( 392)			::String filledKey6 = (filledKey + (filledKey5 + ::StringTools_obj::hex(((int)fill & (int)(int)255),(int)2)));
HXLINE( 393)			if (showBorder) {
HXLINE( 394)				::String filledKey7;
HXDLIN( 394)				filledKey7 = HX_("0x",48,2a,00,00);
HXDLIN( 394)				::String filledKey8;
HXDLIN( 394)				filledKey8 = ::StringTools_obj::hex(((int)((int)border >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 394)				::String filledKey9 = (filledKey7 + filledKey8);
HXDLIN( 394)				::String filledKey10 = (filledKey9 + ::StringTools_obj::hex(((int)((int)border >> (int)(int)16) & (int)(int)255),(int)2));
HXDLIN( 394)				::String filledKey11 = (filledKey10 + ::StringTools_obj::hex(((int)((int)border >> (int)(int)8) & (int)(int)255),(int)2));
HXDLIN( 394)				filledKey6 = (filledKey6 + (HX_(",border: ",be,9e,76,9a) + (filledKey11 + ::StringTools_obj::hex(((int)border & (int)(int)255),(int)2))));
            			}
HXLINE( 396)			if (hx::IsNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,filledKey6)) ) )) {
HXLINE( 398)				 ::openfl::_legacy::display::BitmapData filledBar = null();
HXLINE( 400)				if (showBorder) {
HXLINE( 402)					filledBar =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,this->barWidth,this->barHeight,true,border,null());
HXLINE( 403)					int _hx_tmp = (this->barWidth - (int)2);
HXDLIN( 403)					filledBar->fillRect( ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,(int)1,(int)1,_hx_tmp,(this->barHeight - (int)2)),fill);
            				}
            				else {
HXLINE( 407)					filledBar =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,this->barWidth,this->barHeight,true,fill,null());
            				}
HXLINE( 410)				::flixel::FlxG_obj::bitmap->add(filledBar,false,filledKey6);
            			}
HXLINE( 413)			this->set_frontFrames(( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,filledKey6)) )->get_imageFrame());
            		}
            		else {
HXLINE( 417)			if (showBorder) {
HXLINE( 419)				this->_filledBar =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,this->barWidth,this->barHeight,true,border,null());
HXLINE( 420)				 ::openfl::_legacy::display::BitmapData _hx_tmp1 = this->_filledBar;
HXDLIN( 420)				int _hx_tmp2 = (this->barWidth - (int)2);
HXDLIN( 420)				_hx_tmp1->fillRect( ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,(int)1,(int)1,_hx_tmp2,(this->barHeight - (int)2)),fill);
            			}
            			else {
HXLINE( 424)				this->_filledBar =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,this->barWidth,this->barHeight,true,fill,null());
            			}
HXLINE( 427)			this->_filledBarRect->setTo((int)0,(int)0,this->barWidth,this->barHeight);
HXLINE( 428)			this->updateFilledBar();
            		}
HXLINE( 430)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxBar_obj,createColoredFilledBar,return )

 ::flixel::ui::FlxBar FlxBar_obj::createGradientBar(::Array< int > empty,::Array< int > fill,hx::Null< int >  __o_chunkSize,hx::Null< int >  __o_rotation,hx::Null< bool >  __o_showBorder,hx::Null< int >  __o_border){
int chunkSize = __o_chunkSize.Default(1);
int rotation = __o_rotation.Default(180);
bool showBorder = __o_showBorder.Default(false);
int border = __o_border.Default(-1);
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_446_createGradientBar)
HXLINE( 447)		this->createGradientEmptyBar(empty,chunkSize,rotation,showBorder,border);
HXLINE( 448)		this->createGradientFilledBar(fill,chunkSize,rotation,showBorder,border);
HXLINE( 449)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxBar_obj,createGradientBar,return )

 ::flixel::ui::FlxBar FlxBar_obj::createGradientEmptyBar(::Array< int > empty,hx::Null< int >  __o_chunkSize,hx::Null< int >  __o_rotation,hx::Null< bool >  __o_showBorder,hx::Null< int >  __o_border){
int chunkSize = __o_chunkSize.Default(1);
int rotation = __o_rotation.Default(180);
bool showBorder = __o_showBorder.Default(false);
int border = __o_border.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_29953dbeb33e4775_463_createGradientEmptyBar)
HXLINE( 464)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 466)			::String emptyKey = ((((HX_("Gradient:",2a,58,e6,6e) + this->barWidth) + HX_("x",78,00,00,00)) + this->barHeight) + HX_(",colors:[",bd,d0,85,cb));
HXLINE( 467)			{
HXLINE( 467)				int _g = (int)0;
HXDLIN( 467)				while((_g < empty->length)){
HXLINE( 467)					int col = empty->__get(_g);
HXDLIN( 467)					_g = (_g + (int)1);
HXLINE( 469)					::String emptyKey1;
HXDLIN( 469)					emptyKey1 = HX_("0x",48,2a,00,00);
HXDLIN( 469)					::String emptyKey2;
HXDLIN( 469)					emptyKey2 = ::StringTools_obj::hex(((int)((int)col >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 469)					::String emptyKey3 = (emptyKey1 + emptyKey2);
HXDLIN( 469)					::String emptyKey4 = (emptyKey3 + ::StringTools_obj::hex(((int)((int)col >> (int)(int)16) & (int)(int)255),(int)2));
HXDLIN( 469)					::String emptyKey5 = (emptyKey4 + ::StringTools_obj::hex(((int)((int)col >> (int)(int)8) & (int)(int)255),(int)2));
HXDLIN( 469)					emptyKey = (emptyKey + ((emptyKey5 + ::StringTools_obj::hex(((int)col & (int)(int)255),(int)2)) + HX_(",",2c,00,00,00)));
            				}
            			}
HXLINE( 471)			emptyKey = (emptyKey + (((HX_("],chunkSize: ",25,ff,35,eb) + chunkSize) + HX_(",rotation: ",90,2a,b9,0a)) + rotation));
HXLINE( 473)			if (showBorder) {
HXLINE( 475)				::String emptyKey6;
HXDLIN( 475)				emptyKey6 = HX_("0x",48,2a,00,00);
HXDLIN( 475)				::String emptyKey7;
HXDLIN( 475)				emptyKey7 = ::StringTools_obj::hex(((int)((int)border >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 475)				::String emptyKey8 = (emptyKey6 + emptyKey7);
HXDLIN( 475)				::String emptyKey9 = (emptyKey8 + ::StringTools_obj::hex(((int)((int)border >> (int)(int)16) & (int)(int)255),(int)2));
HXDLIN( 475)				::String emptyKey10 = (emptyKey9 + ::StringTools_obj::hex(((int)((int)border >> (int)(int)8) & (int)(int)255),(int)2));
HXDLIN( 475)				emptyKey = (emptyKey + (HX_(",border: ",be,9e,76,9a) + (emptyKey10 + ::StringTools_obj::hex(((int)border & (int)(int)255),(int)2))));
            			}
HXLINE( 478)			if (hx::IsNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,emptyKey)) ) )) {
HXLINE( 480)				 ::openfl::_legacy::display::BitmapData emptyBar = null();
HXLINE( 482)				if (showBorder) {
HXLINE( 484)					emptyBar =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,this->barWidth,this->barHeight,true,border,null());
HXLINE( 485)					int _hx_tmp = (this->barWidth - (int)2);
HXDLIN( 485)					::flixel::util::FlxGradient_obj::overlayGradientOnBitmapData(emptyBar,_hx_tmp,(this->barHeight - (int)2),empty,(int)1,(int)1,chunkSize,rotation,null());
            				}
            				else {
HXLINE( 489)					emptyBar = ::flixel::util::FlxGradient_obj::createGradientBitmapData(this->barWidth,this->barHeight,empty,chunkSize,rotation,null());
            				}
HXLINE( 492)				::flixel::FlxG_obj::bitmap->add(emptyBar,false,emptyKey);
            			}
HXLINE( 495)			this->set_frames(( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,emptyKey)) )->get_imageFrame());
            		}
            		else {
HXLINE( 499)			if (showBorder) {
HXLINE( 501)				this->_emptyBar =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,this->barWidth,this->barHeight,true,border,null());
HXLINE( 502)				 ::openfl::_legacy::display::BitmapData _hx_tmp1 = this->_emptyBar;
HXDLIN( 502)				int _hx_tmp2 = (this->barWidth - (int)2);
HXDLIN( 502)				::flixel::util::FlxGradient_obj::overlayGradientOnBitmapData(_hx_tmp1,_hx_tmp2,(this->barHeight - (int)2),empty,(int)1,(int)1,chunkSize,rotation,null());
            			}
            			else {
HXLINE( 506)				this->_emptyBar = ::flixel::util::FlxGradient_obj::createGradientBitmapData(this->barWidth,this->barHeight,empty,chunkSize,rotation,null());
            			}
HXLINE( 509)			this->_emptyBarRect->setTo((int)0,(int)0,this->barWidth,this->barHeight);
HXLINE( 510)			this->updateEmptyBar();
            		}
HXLINE( 513)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxBar_obj,createGradientEmptyBar,return )

 ::flixel::ui::FlxBar FlxBar_obj::createGradientFilledBar(::Array< int > fill,hx::Null< int >  __o_chunkSize,hx::Null< int >  __o_rotation,hx::Null< bool >  __o_showBorder,hx::Null< int >  __o_border){
int chunkSize = __o_chunkSize.Default(1);
int rotation = __o_rotation.Default(180);
bool showBorder = __o_showBorder.Default(false);
int border = __o_border.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_29953dbeb33e4775_527_createGradientFilledBar)
HXLINE( 528)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 530)			::String filledKey = ((((HX_("Gradient:",2a,58,e6,6e) + this->barWidth) + HX_("x",78,00,00,00)) + this->barHeight) + HX_(",colors:[",bd,d0,85,cb));
HXLINE( 531)			{
HXLINE( 531)				int _g = (int)0;
HXDLIN( 531)				while((_g < fill->length)){
HXLINE( 531)					int col = fill->__get(_g);
HXDLIN( 531)					_g = (_g + (int)1);
HXLINE( 533)					::String filledKey1;
HXDLIN( 533)					filledKey1 = HX_("0x",48,2a,00,00);
HXDLIN( 533)					::String filledKey2;
HXDLIN( 533)					filledKey2 = ::StringTools_obj::hex(((int)((int)col >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 533)					::String filledKey3 = (filledKey1 + filledKey2);
HXDLIN( 533)					::String filledKey4 = (filledKey3 + ::StringTools_obj::hex(((int)((int)col >> (int)(int)16) & (int)(int)255),(int)2));
HXDLIN( 533)					::String filledKey5 = (filledKey4 + ::StringTools_obj::hex(((int)((int)col >> (int)(int)8) & (int)(int)255),(int)2));
HXDLIN( 533)					filledKey = (filledKey + ((filledKey5 + ::StringTools_obj::hex(((int)col & (int)(int)255),(int)2)) + HX_(",",2c,00,00,00)));
            				}
            			}
HXLINE( 535)			filledKey = (filledKey + (((HX_("],chunkSize: ",25,ff,35,eb) + chunkSize) + HX_(",rotation: ",90,2a,b9,0a)) + rotation));
HXLINE( 537)			if (showBorder) {
HXLINE( 539)				::String filledKey6;
HXDLIN( 539)				filledKey6 = HX_("0x",48,2a,00,00);
HXDLIN( 539)				::String filledKey7;
HXDLIN( 539)				filledKey7 = ::StringTools_obj::hex(((int)((int)border >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 539)				::String filledKey8 = (filledKey6 + filledKey7);
HXDLIN( 539)				::String filledKey9 = (filledKey8 + ::StringTools_obj::hex(((int)((int)border >> (int)(int)16) & (int)(int)255),(int)2));
HXDLIN( 539)				::String filledKey10 = (filledKey9 + ::StringTools_obj::hex(((int)((int)border >> (int)(int)8) & (int)(int)255),(int)2));
HXDLIN( 539)				filledKey = (filledKey + (HX_(",border: ",be,9e,76,9a) + (filledKey10 + ::StringTools_obj::hex(((int)border & (int)(int)255),(int)2))));
            			}
HXLINE( 542)			if (hx::IsNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,filledKey)) ) )) {
HXLINE( 544)				 ::openfl::_legacy::display::BitmapData filledBar = null();
HXLINE( 546)				if (showBorder) {
HXLINE( 548)					filledBar =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,this->barWidth,this->barHeight,true,border,null());
HXLINE( 549)					int _hx_tmp = (this->barWidth - (int)2);
HXDLIN( 549)					::flixel::util::FlxGradient_obj::overlayGradientOnBitmapData(filledBar,_hx_tmp,(this->barHeight - (int)2),fill,(int)1,(int)1,chunkSize,rotation,null());
            				}
            				else {
HXLINE( 553)					filledBar = ::flixel::util::FlxGradient_obj::createGradientBitmapData(this->barWidth,this->barHeight,fill,chunkSize,rotation,null());
            				}
HXLINE( 556)				::flixel::FlxG_obj::bitmap->add(filledBar,false,filledKey);
            			}
HXLINE( 559)			this->set_frontFrames(( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,filledKey)) )->get_imageFrame());
            		}
            		else {
HXLINE( 563)			if (showBorder) {
HXLINE( 565)				this->_filledBar =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,this->barWidth,this->barHeight,true,border,null());
HXLINE( 566)				 ::openfl::_legacy::display::BitmapData _hx_tmp1 = this->_filledBar;
HXDLIN( 566)				int _hx_tmp2 = (this->barWidth - (int)2);
HXDLIN( 566)				::flixel::util::FlxGradient_obj::overlayGradientOnBitmapData(_hx_tmp1,_hx_tmp2,(this->barHeight - (int)2),fill,(int)1,(int)1,chunkSize,rotation,null());
            			}
            			else {
HXLINE( 570)				this->_filledBar = ::flixel::util::FlxGradient_obj::createGradientBitmapData(this->barWidth,this->barHeight,fill,chunkSize,rotation,null());
            			}
HXLINE( 573)			this->_filledBarRect->setTo((int)0,(int)0,this->barWidth,this->barHeight);
HXLINE( 574)			this->updateFilledBar();
            		}
HXLINE( 577)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxBar_obj,createGradientFilledBar,return )

 ::flixel::ui::FlxBar FlxBar_obj::createImageBar( ::Dynamic empty, ::Dynamic fill,hx::Null< int >  __o_emptyBackground,hx::Null< int >  __o_fillBackground){
int emptyBackground = __o_emptyBackground.Default(-16777216);
int fillBackground = __o_fillBackground.Default(-16711936);
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_593_createImageBar)
HXLINE( 594)		this->createImageEmptyBar(empty,emptyBackground);
HXLINE( 595)		this->createImageFilledBar(fill,fillBackground);
HXLINE( 596)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBar_obj,createImageBar,return )

 ::flixel::ui::FlxBar FlxBar_obj::createImageEmptyBar( ::Dynamic empty,hx::Null< int >  __o_emptyBackground){
int emptyBackground = __o_emptyBackground.Default(-16777216);
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_607_createImageEmptyBar)
HXLINE( 608)		if (hx::IsNotNull( empty )) {
HXLINE( 610)			 ::flixel::graphics::FlxGraphic emptyGraphic = ::flixel::FlxG_obj::bitmap->add(empty,null(),null());
HXLINE( 612)			if (::flixel::FlxG_obj::renderTile) {
HXLINE( 614)				this->set_frames(emptyGraphic->get_imageFrame());
            			}
            			else {
HXLINE( 618)				this->_emptyBar = emptyGraphic->bitmap->clone();
HXLINE( 620)				this->barWidth = this->_emptyBar->get_width();
HXLINE( 621)				this->barHeight = this->_emptyBar->get_height();
HXLINE( 623)				this->_emptyBarRect->setTo((int)0,(int)0,this->barWidth,this->barHeight);
HXLINE( 625)				bool _hx_tmp;
HXDLIN( 625)				if (hx::IsNotNull( this->graphic )) {
HXLINE( 625)					if ((this->frame->sourceSize->x == this->barWidth)) {
HXLINE( 625)						_hx_tmp = (this->frame->sourceSize->y != this->barHeight);
            					}
            					else {
HXLINE( 625)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE( 625)					_hx_tmp = true;
            				}
HXDLIN( 625)				if (_hx_tmp) {
HXLINE( 627)					this->makeGraphic(this->barWidth,this->barHeight,(int)0,true,null());
            				}
HXLINE( 630)				this->updateEmptyBar();
            			}
            		}
            		else {
HXLINE( 635)			this->createColoredEmptyBar(emptyBackground,null(),null());
            		}
HXLINE( 638)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxBar_obj,createImageEmptyBar,return )

 ::flixel::ui::FlxBar FlxBar_obj::createImageFilledBar( ::Dynamic fill,hx::Null< int >  __o_fillBackground){
int fillBackground = __o_fillBackground.Default(-16711936);
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_649_createImageFilledBar)
HXLINE( 650)		if (hx::IsNotNull( fill )) {
HXLINE( 652)			 ::flixel::graphics::FlxGraphic filledGraphic = ::flixel::FlxG_obj::bitmap->add(fill,null(),null());
HXLINE( 654)			if (::flixel::FlxG_obj::renderTile) {
HXLINE( 656)				this->set_frontFrames(filledGraphic->get_imageFrame());
            			}
            			else {
HXLINE( 660)				this->_filledBar = filledGraphic->bitmap->clone();
HXLINE( 662)				this->_filledBarRect->setTo((int)0,(int)0,this->barWidth,this->barHeight);
HXLINE( 664)				bool _hx_tmp;
HXDLIN( 664)				if (hx::IsNotNull( this->graphic )) {
HXLINE( 664)					if ((this->frame->sourceSize->x == this->barWidth)) {
HXLINE( 664)						_hx_tmp = (this->frame->sourceSize->y != this->barHeight);
            					}
            					else {
HXLINE( 664)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE( 664)					_hx_tmp = true;
            				}
HXDLIN( 664)				if (_hx_tmp) {
HXLINE( 666)					this->makeGraphic(this->barWidth,this->barHeight,(int)0,true,null());
            				}
HXLINE( 669)				Float _hx_tmp1;
HXDLIN( 669)				if (this->_fillHorizontal) {
HXLINE( 669)					_hx_tmp1 = ((Float)this->barWidth / (Float)this->_maxPercent);
            				}
            				else {
HXLINE( 669)					_hx_tmp1 = ((Float)this->barHeight / (Float)this->_maxPercent);
            				}
HXDLIN( 669)				this->pxPerPercent = _hx_tmp1;
HXLINE( 670)				this->updateFilledBar();
            			}
            		}
            		else {
HXLINE( 675)			this->createColoredFilledBar(fillBackground,null(),null());
            		}
HXLINE( 678)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxBar_obj,createImageFilledBar,return )

 ::flixel::ui::FlxBarFillDirection FlxBar_obj::set_fillDirection( ::flixel::ui::FlxBarFillDirection direction){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_682_set_fillDirection)
HXLINE( 683)		this->fillDirection = direction;
HXLINE( 685)		switch((int)(_hx_getEnumValueIndex(direction))){
            			case (int)0: case (int)1: case (int)4: case (int)5: {
HXLINE( 688)				this->_fillHorizontal = true;
            			}
            			break;
            			case (int)2: case (int)3: case (int)6: case (int)7: {
HXLINE( 691)				this->_fillHorizontal = false;
            			}
            			break;
            		}
HXLINE( 694)		return this->fillDirection;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBar_obj,set_fillDirection,return )

void FlxBar_obj::updateValueFromParent(){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_699_updateValueFromParent)
HXDLIN( 699)		this->set_value(( (Float)(::Reflect_obj::getProperty(this->parent,this->parentVariable)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBar_obj,updateValueFromParent,(void))

void FlxBar_obj::updateBar(){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_707_updateBar)
HXLINE( 708)		this->updateEmptyBar();
HXLINE( 709)		this->updateFilledBar();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBar_obj,updateBar,(void))

void FlxBar_obj::updateEmptyBar(){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_717_updateEmptyBar)
HXDLIN( 717)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 719)			this->get_pixels()->copyPixels(this->_emptyBar,this->_emptyBarRect,this->_zeroOffset,null(),null(),null());
HXLINE( 720)			this->dirty = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBar_obj,updateEmptyBar,(void))

void FlxBar_obj::updateFilledBar(){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_728_updateFilledBar)
HXLINE( 729)		this->_filledBarRect->width = this->barWidth;
HXLINE( 730)		this->_filledBarRect->height = this->barHeight;
HXLINE( 732)		Float fraction = this->get_value();
HXDLIN( 732)		Float fraction1 = ((Float)(fraction - this->min) / (Float)this->range);
HXLINE( 733)		Float percent = (fraction1 * this->_maxPercent);
HXLINE( 734)		Float maxScale;
HXDLIN( 734)		if (this->_fillHorizontal) {
HXLINE( 734)			maxScale = this->barWidth;
            		}
            		else {
HXLINE( 734)			maxScale = this->barHeight;
            		}
HXLINE( 735)		Float scaleInterval = ((Float)maxScale / (Float)this->numDivisions);
HXLINE( 736)		Float interval = (::Std_obj::_hx_int(((Float)(fraction1 * maxScale) / (Float)scaleInterval)) * scaleInterval);
HXLINE( 738)		if (this->_fillHorizontal) {
HXLINE( 740)			this->_filledBarRect->width = ::Std_obj::_hx_int(interval);
            		}
            		else {
HXLINE( 744)			this->_filledBarRect->height = ::Std_obj::_hx_int(interval);
            		}
HXLINE( 747)		if ((percent > (int)0)) {
HXLINE( 749)			{
HXLINE( 749)				 ::flixel::ui::FlxBarFillDirection _g = this->fillDirection;
HXDLIN( 749)				switch((int)(_hx_getEnumValueIndex(_g))){
            					case (int)0: case (int)2: {
            					}
            					break;
            					case (int)1: {
HXLINE( 759)						this->_filledBarRect->x = (this->barWidth - this->_filledBarRect->width);
HXLINE( 760)						this->_filledBarPoint->x = (this->barWidth - this->_filledBarRect->width);
            					}
            					break;
            					case (int)3: {
HXLINE( 755)						this->_filledBarRect->y = (this->barHeight - this->_filledBarRect->height);
HXLINE( 756)						this->_filledBarPoint->y = (this->barHeight - this->_filledBarRect->height);
            					}
            					break;
            					case (int)4: {
HXLINE( 763)						Float _hx_tmp = ((Float)this->barWidth / (Float)(int)2);
HXDLIN( 763)						this->_filledBarRect->x = ::Std_obj::_hx_int((_hx_tmp - ((Float)this->_filledBarRect->width / (Float)(int)2)));
HXLINE( 764)						Float _hx_tmp1 = ((Float)this->barWidth / (Float)(int)2);
HXDLIN( 764)						this->_filledBarPoint->x = ::Std_obj::_hx_int((_hx_tmp1 - ((Float)this->_filledBarRect->width / (Float)(int)2)));
            					}
            					break;
            					case (int)5: {
HXLINE( 767)						this->_filledBarRect->width = ::Std_obj::_hx_int((maxScale - interval));
HXLINE( 768)						this->_filledBarPoint->x = ::Std_obj::_hx_int(((Float)(this->barWidth - this->_filledBarRect->width) / (Float)(int)2));
            					}
            					break;
            					case (int)6: {
HXLINE( 771)						Float _hx_tmp2 = ((Float)this->barHeight / (Float)(int)2);
HXDLIN( 771)						this->_filledBarRect->y = ::Std_obj::_hx_int((_hx_tmp2 - ((Float)this->_filledBarRect->height / (Float)(int)2)));
HXLINE( 772)						Float _hx_tmp3 = ((Float)this->barHeight / (Float)(int)2);
HXDLIN( 772)						this->_filledBarPoint->y = ::Std_obj::_hx_int((_hx_tmp3 - ((Float)this->_filledBarRect->height / (Float)(int)2)));
            					}
            					break;
            					case (int)7: {
HXLINE( 775)						this->_filledBarRect->height = ::Std_obj::_hx_int((maxScale - interval));
HXLINE( 776)						this->_filledBarPoint->y = ::Std_obj::_hx_int(((Float)(this->barHeight - this->_filledBarRect->height) / (Float)(int)2));
            					}
            					break;
            				}
            			}
HXLINE( 779)			if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 781)				this->get_pixels()->copyPixels(this->_filledBar,this->_filledBarRect,this->_filledBarPoint,null(),null(),true);
            			}
            			else {
HXLINE( 785)				if (hx::IsNotNull( this->get_frontFrames() )) {
HXLINE( 787)					{
HXLINE( 787)						 ::flixel::math::FlxRect _this = this->_filledFlxRect;
HXDLIN( 787)						 ::openfl::_legacy::geom::Rectangle FlashRect = this->_filledBarRect;
HXDLIN( 787)						_this->x = FlashRect->x;
HXDLIN( 787)						_this->y = FlashRect->y;
HXDLIN( 787)						_this->width = FlashRect->width;
HXDLIN( 787)						_this->height = FlashRect->height;
HXDLIN( 787)						 ::flixel::math::FlxRect _this1 = _this;
HXDLIN( 787)						_this1->x = ::Math_obj::round(_this1->x);
HXDLIN( 787)						_this1->y = ::Math_obj::round(_this1->y);
HXDLIN( 787)						_this1->width = ::Math_obj::round(_this1->width);
HXDLIN( 787)						_this1->height = ::Math_obj::round(_this1->height);
            					}
HXLINE( 788)					if ((::Std_obj::_hx_int(percent) > (int)0)) {
HXLINE( 790)						this->_frontFrame = this->get_frontFrames()->get_frame()->clipTo(this->_filledFlxRect,this->_frontFrame);
            					}
            				}
            			}
            		}
HXLINE( 796)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 798)			this->dirty = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBar_obj,updateFilledBar,(void))

void FlxBar_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_803_update)
HXLINE( 804)		if (hx::IsNotNull( this->parent )) {
HXLINE( 806)			 ::Dynamic _hx_tmp = ::Reflect_obj::getProperty(this->parent,this->parentVariable);
HXDLIN( 806)			if (hx::IsNotEq( _hx_tmp,this->get_value() )) {
HXLINE( 808)				this->updateValueFromParent();
            			}
HXLINE( 811)			if (!(this->fixedPosition)) {
HXLINE( 813)				this->set_x(( (Float)(( ::Dynamic(this->parent->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) + this->positionOffset->x)) ));
HXLINE( 814)				this->set_y(( (Float)(( ::Dynamic(this->parent->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) + this->positionOffset->y)) ));
            			}
            		}
HXLINE( 818)		this->super::update(elapsed);
            	}


void FlxBar_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_822_draw)
HXLINE( 823)		this->super::draw();
HXLINE( 825)		if (!(::flixel::FlxG_obj::renderTile)) {
HXLINE( 826)			return;
            		}
HXLINE( 828)		if ((this->alpha == (int)0)) {
HXLINE( 829)			return;
            		}
HXLINE( 831)		bool _hx_tmp;
HXDLIN( 831)		if ((this->get_percent() > (int)0)) {
HXLINE( 831)			_hx_tmp = (this->_frontFrame->type != (int)2);
            		}
            		else {
HXLINE( 831)			_hx_tmp = false;
            		}
HXDLIN( 831)		if (_hx_tmp) {
HXLINE( 833)			int _g = (int)0;
HXDLIN( 833)			::Array< ::Dynamic> _g1 = this->get_cameras();
HXDLIN( 833)			while((_g < _g1->length)){
HXLINE( 833)				 ::flixel::FlxCamera camera = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 833)				_g = (_g + (int)1);
HXLINE( 835)				bool _hx_tmp1;
HXDLIN( 835)				bool _hx_tmp2;
HXDLIN( 835)				if (!(!(camera->visible))) {
HXLINE( 835)					_hx_tmp2 = !(camera->exists);
            				}
            				else {
HXLINE( 835)					_hx_tmp2 = true;
            				}
HXDLIN( 835)				if (!(_hx_tmp2)) {
HXLINE( 835)					_hx_tmp1 = !(this->isOnScreen(camera));
            				}
            				else {
HXLINE( 835)					_hx_tmp1 = true;
            				}
HXDLIN( 835)				if (_hx_tmp1) {
HXLINE( 837)					continue;
            				}
HXLINE( 840)				this->getScreenPosition(this->_point,camera)->subtractPoint(this->offset);
HXLINE( 842)				this->_frontFrame->prepareMatrix(this->_matrix,(int)0,this->flipX,this->flipY);
HXLINE( 843)				this->_matrix->translate(-(this->origin->x),-(this->origin->y));
HXLINE( 844)				this->_matrix->scale(this->scale->x,this->scale->y);
HXLINE( 847)				if ((this->angle != (int)0)) {
HXLINE( 849)					 ::flixel::math::FlxMatrix _this = this->_matrix;
HXDLIN( 849)					Float cos = this->_cosAngle;
HXDLIN( 849)					Float sin = this->_sinAngle;
HXDLIN( 849)					Float a1 = (_this->a * cos);
HXDLIN( 849)					Float a11 = (a1 - (_this->b * sin));
HXDLIN( 849)					Float _hx_tmp3 = (_this->a * sin);
HXDLIN( 849)					_this->b = (_hx_tmp3 + (_this->b * cos));
HXDLIN( 849)					_this->a = a11;
HXDLIN( 849)					Float c1 = (_this->c * cos);
HXDLIN( 849)					Float c11 = (c1 - (_this->d * sin));
HXDLIN( 849)					Float _hx_tmp4 = (_this->c * sin);
HXDLIN( 849)					_this->d = (_hx_tmp4 + (_this->d * cos));
HXDLIN( 849)					_this->c = c11;
HXDLIN( 849)					Float tx1 = (_this->tx * cos);
HXDLIN( 849)					Float tx11 = (tx1 - (_this->ty * sin));
HXDLIN( 849)					Float _hx_tmp5 = (_this->tx * sin);
HXDLIN( 849)					_this->ty = (_hx_tmp5 + (_this->ty * cos));
HXDLIN( 849)					_this->tx = tx11;
            				}
HXLINE( 852)				{
HXLINE( 852)					 ::flixel::math::FlxPoint _this1 = this->_point;
HXDLIN( 852)					Float Y = this->origin->y;
HXDLIN( 852)					{
HXLINE( 852)						 ::flixel::math::FlxPoint _g2 = _this1;
HXDLIN( 852)						_g2->set_x((_g2->x + this->origin->x));
            					}
HXDLIN( 852)					{
HXLINE( 852)						 ::flixel::math::FlxPoint _g3 = _this1;
HXDLIN( 852)						_g3->set_y((_g3->y + Y));
            					}
            				}
HXLINE( 853)				if (this->isPixelPerfectRender(camera)) {
HXLINE( 855)					 ::flixel::math::FlxPoint _this2 = this->_point;
HXDLIN( 855)					_this2->set_x(::Math_obj::floor(_this2->x));
HXDLIN( 855)					_this2->set_y(::Math_obj::floor(_this2->y));
            				}
HXLINE( 858)				this->_matrix->translate(this->_point->x,this->_point->y);
HXLINE( 859)				camera->drawPixels(this->_frontFrame,null(),this->_matrix,this->colorTransform,this->blend,this->antialiasing,this->shader);
            			}
            		}
            	}


 ::openfl::_legacy::display::BitmapData FlxBar_obj::set_pixels( ::openfl::_legacy::display::BitmapData Pixels){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_866_set_pixels)
HXDLIN( 866)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 868)			return Pixels;
            		}
            		else {
HXLINE( 872)			return this->super::set_pixels(Pixels);
            		}
HXLINE( 866)		return null();
            	}


::String FlxBar_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_878_toString)
HXLINE( 879)		 ::Dynamic value = this->min;
HXDLIN( 879)		 ::flixel::util::LabelValuePair _this = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 879)		_this->label = HX_("min",92,11,53,00);
HXDLIN( 879)		_this->value = value;
HXDLIN( 879)		 ::flixel::util::LabelValuePair _hx_tmp = _this;
HXLINE( 880)		 ::Dynamic value1 = this->max;
HXDLIN( 880)		 ::flixel::util::LabelValuePair _this1 = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 880)		_this1->label = HX_("max",a4,0a,53,00);
HXDLIN( 880)		_this1->value = value1;
HXDLIN( 880)		 ::flixel::util::LabelValuePair _hx_tmp1 = _this1;
HXLINE( 881)		 ::Dynamic value2 = this->range;
HXDLIN( 881)		 ::flixel::util::LabelValuePair _this2 = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 881)		_this2->label = HX_("range",bd,a5,1f,e4);
HXDLIN( 881)		_this2->value = value2;
HXDLIN( 881)		 ::flixel::util::LabelValuePair _hx_tmp2 = _this2;
HXLINE( 882)		 ::Dynamic value3 = this->pct;
HXDLIN( 882)		 ::flixel::util::LabelValuePair _this3 = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 882)		_this3->label = HX_("%",25,00,00,00);
HXDLIN( 882)		_this3->value = value3;
HXDLIN( 882)		 ::flixel::util::LabelValuePair _hx_tmp3 = _this3;
HXLINE( 883)		 ::Dynamic value4 = this->pxPerPercent;
HXDLIN( 883)		 ::flixel::util::LabelValuePair _this4 = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 883)		_this4->label = HX_("px/%",1e,1d,63,4a);
HXDLIN( 883)		_this4->value = value4;
HXDLIN( 883)		 ::flixel::util::LabelValuePair _hx_tmp4 = _this4;
HXLINE( 884)		 ::Dynamic value5 = this->get_value();
HXDLIN( 884)		 ::flixel::util::LabelValuePair _this5 = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 884)		_this5->label = HX_("value",71,7f,b8,31);
HXDLIN( 884)		_this5->value = value5;
HXLINE( 878)		return ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(6)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_hx_tmp3)->init(4,_hx_tmp4)->init(5,_this5));
            	}


Float FlxBar_obj::get_percent(){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_888_get_percent)
HXLINE( 889)		Float _hx_tmp = this->get_value();
HXDLIN( 889)		if ((_hx_tmp > this->max)) {
HXLINE( 891)			return this->_maxPercent;
            		}
HXLINE( 894)		Float _hx_tmp1 = this->get_value();
HXDLIN( 894)		return ::Math_obj::floor((((Float)(_hx_tmp1 - this->min) / (Float)this->range) * this->_maxPercent));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBar_obj,get_percent,return )

Float FlxBar_obj::set_percent(Float newPct){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_898_set_percent)
HXLINE( 899)		bool _hx_tmp;
HXDLIN( 899)		if ((newPct >= (int)0)) {
HXLINE( 899)			_hx_tmp = (newPct <= this->_maxPercent);
            		}
            		else {
HXLINE( 899)			_hx_tmp = false;
            		}
HXDLIN( 899)		if (_hx_tmp) {
HXLINE( 901)			this->set_value((this->pct * newPct));
            		}
HXLINE( 903)		return newPct;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBar_obj,set_percent,return )

Float FlxBar_obj::set_value(Float newValue){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_907_set_value)
HXLINE( 908)		Float _hx_tmp = this->min;
HXDLIN( 908)		this->value = ::Math_obj::max(_hx_tmp,::Math_obj::min(newValue,this->max));
HXLINE( 910)		bool _hx_tmp1;
HXDLIN( 910)		Float _hx_tmp2 = this->get_value();
HXDLIN( 910)		if ((_hx_tmp2 == this->min)) {
HXLINE( 910)			_hx_tmp1 = hx::IsNotNull( this->emptyCallback );
            		}
            		else {
HXLINE( 910)			_hx_tmp1 = false;
            		}
HXDLIN( 910)		if (_hx_tmp1) {
HXLINE( 912)			this->emptyCallback();
            		}
HXLINE( 915)		bool _hx_tmp3;
HXDLIN( 915)		Float _hx_tmp4 = this->get_value();
HXDLIN( 915)		if ((_hx_tmp4 == this->max)) {
HXLINE( 915)			_hx_tmp3 = hx::IsNotNull( this->filledCallback );
            		}
            		else {
HXLINE( 915)			_hx_tmp3 = false;
            		}
HXDLIN( 915)		if (_hx_tmp3) {
HXLINE( 917)			this->filledCallback();
            		}
HXLINE( 920)		bool _hx_tmp5;
HXDLIN( 920)		Float _hx_tmp6 = this->get_value();
HXDLIN( 920)		if ((_hx_tmp6 == this->min)) {
HXLINE( 920)			_hx_tmp5 = this->killOnEmpty;
            		}
            		else {
HXLINE( 920)			_hx_tmp5 = false;
            		}
HXDLIN( 920)		if (_hx_tmp5) {
HXLINE( 922)			this->kill();
            		}
HXLINE( 925)		this->updateBar();
HXLINE( 926)		return newValue;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBar_obj,set_value,return )

Float FlxBar_obj::get_value(){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_938_get_value)
HXDLIN( 938)		return this->value;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBar_obj,get_value,return )

int FlxBar_obj::set_numDivisions(int newValue){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_942_set_numDivisions)
HXLINE( 943)		int _hx_tmp;
HXDLIN( 943)		if ((newValue > (int)0)) {
HXLINE( 943)			_hx_tmp = newValue;
            		}
            		else {
HXLINE( 943)			_hx_tmp = (int)100;
            		}
HXDLIN( 943)		this->numDivisions = _hx_tmp;
HXLINE( 944)		this->updateFilledBar();
HXLINE( 945)		return newValue;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBar_obj,set_numDivisions,return )

 ::flixel::graphics::frames::FlxImageFrame FlxBar_obj::get_frontFrames(){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_949_get_frontFrames)
HXLINE( 950)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 952)			return this->frontFrames;
            		}
HXLINE( 954)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBar_obj,get_frontFrames,return )

 ::flixel::graphics::frames::FlxImageFrame FlxBar_obj::set_frontFrames( ::flixel::graphics::frames::FlxImageFrame value){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_958_set_frontFrames)
HXLINE( 959)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 961)			this->frontFrames = value;
HXLINE( 962)			 ::flixel::graphics::frames::FlxFrame _hx_tmp;
HXDLIN( 962)			if (hx::IsNotNull( value )) {
HXLINE( 962)				_hx_tmp = value->get_frame()->copyTo(this->_frontFrame);
            			}
            			else {
HXLINE( 962)				_hx_tmp = null();
            			}
HXDLIN( 962)			this->_frontFrame = _hx_tmp;
            		}
            		else {
HXLINE( 966)			this->createImageFilledBar(value->get_frame()->paint(null(),null(),null(),null()),null());
            		}
HXLINE( 968)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBar_obj,set_frontFrames,return )

 ::flixel::graphics::frames::FlxImageFrame FlxBar_obj::get_backFrames(){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_972_get_backFrames)
HXLINE( 973)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 975)			return ( ( ::flixel::graphics::frames::FlxImageFrame)(this->frames) );
            		}
HXLINE( 977)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBar_obj,get_backFrames,return )

 ::flixel::graphics::frames::FlxImageFrame FlxBar_obj::set_backFrames( ::flixel::graphics::frames::FlxImageFrame value){
            	HX_STACKFRAME(&_hx_pos_29953dbeb33e4775_981_set_backFrames)
HXLINE( 982)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 984)			this->set_frames(value);
            		}
            		else {
HXLINE( 988)			this->createImageEmptyBar(value->get_frame()->paint(null(),null(),null(),null()),null());
            		}
HXLINE( 990)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBar_obj,set_backFrames,return )


hx::ObjectPtr< FlxBar_obj > FlxBar_obj::__new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y, ::flixel::ui::FlxBarFillDirection direction,hx::Null< int >  __o_width,hx::Null< int >  __o_height, ::Dynamic parentRef,::String __o_variable,hx::Null< Float >  __o_min,hx::Null< Float >  __o_max,hx::Null< bool >  __o_showBorder) {
	hx::ObjectPtr< FlxBar_obj > __this = new FlxBar_obj();
	__this->__construct(__o_x,__o_y,direction,__o_width,__o_height,parentRef,__o_variable,__o_min,__o_max,__o_showBorder);
	return __this;
}

hx::ObjectPtr< FlxBar_obj > FlxBar_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y, ::flixel::ui::FlxBarFillDirection direction,hx::Null< int >  __o_width,hx::Null< int >  __o_height, ::Dynamic parentRef,::String __o_variable,hx::Null< Float >  __o_min,hx::Null< Float >  __o_max,hx::Null< bool >  __o_showBorder) {
	FlxBar_obj *__this = (FlxBar_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxBar_obj), true, "flixel.ui.FlxBar"));
	*(void **)__this = FlxBar_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,direction,__o_width,__o_height,parentRef,__o_variable,__o_min,__o_max,__o_showBorder);
	return __this;
}

FlxBar_obj::FlxBar_obj()
{
}

void FlxBar_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxBar);
	HX_MARK_MEMBER_NAME(fixedPosition,"fixedPosition");
	HX_MARK_MEMBER_NAME(pxPerPercent,"pxPerPercent");
	HX_MARK_MEMBER_NAME(positionOffset,"positionOffset");
	HX_MARK_MEMBER_NAME(killOnEmpty,"killOnEmpty");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(min,"min");
	HX_MARK_MEMBER_NAME(max,"max");
	HX_MARK_MEMBER_NAME(range,"range");
	HX_MARK_MEMBER_NAME(pct,"pct");
	HX_MARK_MEMBER_NAME(numDivisions,"numDivisions");
	HX_MARK_MEMBER_NAME(emptyCallback,"emptyCallback");
	HX_MARK_MEMBER_NAME(filledCallback,"filledCallback");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(parentVariable,"parentVariable");
	HX_MARK_MEMBER_NAME(barWidth,"barWidth");
	HX_MARK_MEMBER_NAME(barHeight,"barHeight");
	HX_MARK_MEMBER_NAME(frontFrames,"frontFrames");
	HX_MARK_MEMBER_NAME(fillDirection,"fillDirection");
	HX_MARK_MEMBER_NAME(_fillHorizontal,"_fillHorizontal");
	HX_MARK_MEMBER_NAME(_frontFrame,"_frontFrame");
	HX_MARK_MEMBER_NAME(_filledFlxRect,"_filledFlxRect");
	HX_MARK_MEMBER_NAME(_emptyBar,"_emptyBar");
	HX_MARK_MEMBER_NAME(_emptyBarRect,"_emptyBarRect");
	HX_MARK_MEMBER_NAME(_filledBar,"_filledBar");
	HX_MARK_MEMBER_NAME(_zeroOffset,"_zeroOffset");
	HX_MARK_MEMBER_NAME(_filledBarRect,"_filledBarRect");
	HX_MARK_MEMBER_NAME(_filledBarPoint,"_filledBarPoint");
	HX_MARK_MEMBER_NAME(_maxPercent,"_maxPercent");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxBar_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(fixedPosition,"fixedPosition");
	HX_VISIT_MEMBER_NAME(pxPerPercent,"pxPerPercent");
	HX_VISIT_MEMBER_NAME(positionOffset,"positionOffset");
	HX_VISIT_MEMBER_NAME(killOnEmpty,"killOnEmpty");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(min,"min");
	HX_VISIT_MEMBER_NAME(max,"max");
	HX_VISIT_MEMBER_NAME(range,"range");
	HX_VISIT_MEMBER_NAME(pct,"pct");
	HX_VISIT_MEMBER_NAME(numDivisions,"numDivisions");
	HX_VISIT_MEMBER_NAME(emptyCallback,"emptyCallback");
	HX_VISIT_MEMBER_NAME(filledCallback,"filledCallback");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(parentVariable,"parentVariable");
	HX_VISIT_MEMBER_NAME(barWidth,"barWidth");
	HX_VISIT_MEMBER_NAME(barHeight,"barHeight");
	HX_VISIT_MEMBER_NAME(frontFrames,"frontFrames");
	HX_VISIT_MEMBER_NAME(fillDirection,"fillDirection");
	HX_VISIT_MEMBER_NAME(_fillHorizontal,"_fillHorizontal");
	HX_VISIT_MEMBER_NAME(_frontFrame,"_frontFrame");
	HX_VISIT_MEMBER_NAME(_filledFlxRect,"_filledFlxRect");
	HX_VISIT_MEMBER_NAME(_emptyBar,"_emptyBar");
	HX_VISIT_MEMBER_NAME(_emptyBarRect,"_emptyBarRect");
	HX_VISIT_MEMBER_NAME(_filledBar,"_filledBar");
	HX_VISIT_MEMBER_NAME(_zeroOffset,"_zeroOffset");
	HX_VISIT_MEMBER_NAME(_filledBarRect,"_filledBarRect");
	HX_VISIT_MEMBER_NAME(_filledBarPoint,"_filledBarPoint");
	HX_VISIT_MEMBER_NAME(_maxPercent,"_maxPercent");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxBar_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { return hx::Val( min ); }
		if (HX_FIELD_EQ(inName,"max") ) { return hx::Val( max ); }
		if (HX_FIELD_EQ(inName,"pct") ) { return hx::Val( pct ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( inCallProp == hx::paccAlways ? get_value() : value ); }
		if (HX_FIELD_EQ(inName,"range") ) { return hx::Val( range ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"percent") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_percent() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"barWidth") ) { return hx::Val( barWidth ); }
		if (HX_FIELD_EQ(inName,"setRange") ) { return hx::Val( setRange_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"barHeight") ) { return hx::Val( barHeight ); }
		if (HX_FIELD_EQ(inName,"_emptyBar") ) { return hx::Val( _emptyBar ); }
		if (HX_FIELD_EQ(inName,"setParent") ) { return hx::Val( setParent_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateBar") ) { return hx::Val( updateBar_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_value") ) { return hx::Val( set_value_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_value") ) { return hx::Val( get_value_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"backFrames") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_backFrames() ); }
		if (HX_FIELD_EQ(inName,"_filledBar") ) { return hx::Val( _filledBar ); }
		if (HX_FIELD_EQ(inName,"set_pixels") ) { return hx::Val( set_pixels_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"killOnEmpty") ) { return hx::Val( killOnEmpty ); }
		if (HX_FIELD_EQ(inName,"frontFrames") ) { return hx::Val( inCallProp == hx::paccAlways ? get_frontFrames() : frontFrames ); }
		if (HX_FIELD_EQ(inName,"_frontFrame") ) { return hx::Val( _frontFrame ); }
		if (HX_FIELD_EQ(inName,"_zeroOffset") ) { return hx::Val( _zeroOffset ); }
		if (HX_FIELD_EQ(inName,"_maxPercent") ) { return hx::Val( _maxPercent ); }
		if (HX_FIELD_EQ(inName,"trackParent") ) { return hx::Val( trackParent_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_percent") ) { return hx::Val( get_percent_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_percent") ) { return hx::Val( set_percent_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"pxPerPercent") ) { return hx::Val( pxPerPercent ); }
		if (HX_FIELD_EQ(inName,"numDivisions") ) { return hx::Val( numDivisions ); }
		if (HX_FIELD_EQ(inName,"setCallbacks") ) { return hx::Val( setCallbacks_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fixedPosition") ) { return hx::Val( fixedPosition ); }
		if (HX_FIELD_EQ(inName,"emptyCallback") ) { return hx::Val( emptyCallback ); }
		if (HX_FIELD_EQ(inName,"fillDirection") ) { return hx::Val( fillDirection ); }
		if (HX_FIELD_EQ(inName,"_emptyBarRect") ) { return hx::Val( _emptyBarRect ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"positionOffset") ) { return hx::Val( positionOffset ); }
		if (HX_FIELD_EQ(inName,"filledCallback") ) { return hx::Val( filledCallback ); }
		if (HX_FIELD_EQ(inName,"parentVariable") ) { return hx::Val( parentVariable ); }
		if (HX_FIELD_EQ(inName,"_filledFlxRect") ) { return hx::Val( _filledFlxRect ); }
		if (HX_FIELD_EQ(inName,"_filledBarRect") ) { return hx::Val( _filledBarRect ); }
		if (HX_FIELD_EQ(inName,"createImageBar") ) { return hx::Val( createImageBar_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateEmptyBar") ) { return hx::Val( updateEmptyBar_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_backFrames") ) { return hx::Val( get_backFrames_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_backFrames") ) { return hx::Val( set_backFrames_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_fillHorizontal") ) { return hx::Val( _fillHorizontal ); }
		if (HX_FIELD_EQ(inName,"_filledBarPoint") ) { return hx::Val( _filledBarPoint ); }
		if (HX_FIELD_EQ(inName,"createFilledBar") ) { return hx::Val( createFilledBar_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateFilledBar") ) { return hx::Val( updateFilledBar_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_frontFrames") ) { return hx::Val( get_frontFrames_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_frontFrames") ) { return hx::Val( set_frontFrames_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"set_numDivisions") ) { return hx::Val( set_numDivisions_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"createGradientBar") ) { return hx::Val( createGradientBar_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fillDirection") ) { return hx::Val( set_fillDirection_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"stopTrackingParent") ) { return hx::Val( stopTrackingParent_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"createImageEmptyBar") ) { return hx::Val( createImageEmptyBar_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"createImageFilledBar") ) { return hx::Val( createImageFilledBar_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createColoredEmptyBar") ) { return hx::Val( createColoredEmptyBar_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateValueFromParent") ) { return hx::Val( updateValueFromParent_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"createColoredFilledBar") ) { return hx::Val( createColoredFilledBar_dyn() ); }
		if (HX_FIELD_EQ(inName,"createGradientEmptyBar") ) { return hx::Val( createGradientEmptyBar_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"createGradientFilledBar") ) { return hx::Val( createGradientFilledBar_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxBar_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { min=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"max") ) { max=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pct") ) { pct=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_value(inValue.Cast< Float >()) );value=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"range") ) { range=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"percent") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_percent(inValue.Cast< Float >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"barWidth") ) { barWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"barHeight") ) { barHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_emptyBar") ) { _emptyBar=inValue.Cast<  ::openfl::_legacy::display::BitmapData >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"backFrames") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_backFrames(inValue.Cast<  ::flixel::graphics::frames::FlxImageFrame >()) ); }
		if (HX_FIELD_EQ(inName,"_filledBar") ) { _filledBar=inValue.Cast<  ::openfl::_legacy::display::BitmapData >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"killOnEmpty") ) { killOnEmpty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frontFrames") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frontFrames(inValue.Cast<  ::flixel::graphics::frames::FlxImageFrame >()) );frontFrames=inValue.Cast<  ::flixel::graphics::frames::FlxImageFrame >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_frontFrame") ) { _frontFrame=inValue.Cast<  ::flixel::graphics::frames::FlxFrame >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_zeroOffset") ) { _zeroOffset=inValue.Cast<  ::openfl::_legacy::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_maxPercent") ) { _maxPercent=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"pxPerPercent") ) { pxPerPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numDivisions") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_numDivisions(inValue.Cast< int >()) );numDivisions=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fixedPosition") ) { fixedPosition=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"emptyCallback") ) { emptyCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fillDirection") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fillDirection(inValue.Cast<  ::flixel::ui::FlxBarFillDirection >()) );fillDirection=inValue.Cast<  ::flixel::ui::FlxBarFillDirection >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_emptyBarRect") ) { _emptyBarRect=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"positionOffset") ) { positionOffset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"filledCallback") ) { filledCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parentVariable") ) { parentVariable=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_filledFlxRect") ) { _filledFlxRect=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_filledBarRect") ) { _filledBarRect=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_fillHorizontal") ) { _fillHorizontal=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_filledBarPoint") ) { _filledBarPoint=inValue.Cast<  ::openfl::_legacy::geom::Point >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxBar_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("fixedPosition","\x3d","\xea","\xd2","\x12"));
	outFields->push(HX_HCSTRING("pxPerPercent","\x90","\xc3","\x28","\x3b"));
	outFields->push(HX_HCSTRING("positionOffset","\x1c","\x11","\x32","\xb5"));
	outFields->push(HX_HCSTRING("killOnEmpty","\xf0","\x70","\x0b","\xae"));
	outFields->push(HX_HCSTRING("percent","\xc5","\xaa","\xda","\x78"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("min","\x92","\x11","\x53","\x00"));
	outFields->push(HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"));
	outFields->push(HX_HCSTRING("range","\xbd","\xa5","\x1f","\xe4"));
	outFields->push(HX_HCSTRING("pct","\x21","\x53","\x55","\x00"));
	outFields->push(HX_HCSTRING("numDivisions","\x80","\x33","\x9c","\x26"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("parentVariable","\x86","\x0d","\xe5","\x30"));
	outFields->push(HX_HCSTRING("barWidth","\x33","\xf7","\x30","\x99"));
	outFields->push(HX_HCSTRING("barHeight","\x1a","\xce","\xf6","\x27"));
	outFields->push(HX_HCSTRING("frontFrames","\x2f","\xa1","\xf5","\xbc"));
	outFields->push(HX_HCSTRING("backFrames","\x2d","\x95","\x0f","\xeb"));
	outFields->push(HX_HCSTRING("fillDirection","\x3c","\x0b","\x89","\xf1"));
	outFields->push(HX_HCSTRING("_fillHorizontal","\xe6","\x79","\x6f","\x9d"));
	outFields->push(HX_HCSTRING("_frontFrame","\xe3","\x97","\xe5","\x05"));
	outFields->push(HX_HCSTRING("_filledFlxRect","\x75","\x41","\xba","\xea"));
	outFields->push(HX_HCSTRING("_emptyBar","\xa5","\x7c","\xc1","\x6f"));
	outFields->push(HX_HCSTRING("_emptyBarRect","\x69","\xac","\xcd","\xcb"));
	outFields->push(HX_HCSTRING("_filledBar","\x12","\x89","\xe0","\x00"));
	outFields->push(HX_HCSTRING("_zeroOffset","\xfa","\xb5","\x5e","\xc4"));
	outFields->push(HX_HCSTRING("_filledBarRect","\x56","\xf3","\x0f","\x6a"));
	outFields->push(HX_HCSTRING("_filledBarPoint","\xde","\x79","\xb8","\x43"));
	outFields->push(HX_HCSTRING("_maxPercent","\xa0","\xf1","\x88","\xb5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxBar_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(FlxBar_obj,fixedPosition),HX_HCSTRING("fixedPosition","\x3d","\xea","\xd2","\x12")},
	{hx::fsFloat,(int)offsetof(FlxBar_obj,pxPerPercent),HX_HCSTRING("pxPerPercent","\x90","\xc3","\x28","\x3b")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxBar_obj,positionOffset),HX_HCSTRING("positionOffset","\x1c","\x11","\x32","\xb5")},
	{hx::fsBool,(int)offsetof(FlxBar_obj,killOnEmpty),HX_HCSTRING("killOnEmpty","\xf0","\x70","\x0b","\xae")},
	{hx::fsFloat,(int)offsetof(FlxBar_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsFloat,(int)offsetof(FlxBar_obj,min),HX_HCSTRING("min","\x92","\x11","\x53","\x00")},
	{hx::fsFloat,(int)offsetof(FlxBar_obj,max),HX_HCSTRING("max","\xa4","\x0a","\x53","\x00")},
	{hx::fsFloat,(int)offsetof(FlxBar_obj,range),HX_HCSTRING("range","\xbd","\xa5","\x1f","\xe4")},
	{hx::fsFloat,(int)offsetof(FlxBar_obj,pct),HX_HCSTRING("pct","\x21","\x53","\x55","\x00")},
	{hx::fsInt,(int)offsetof(FlxBar_obj,numDivisions),HX_HCSTRING("numDivisions","\x80","\x33","\x9c","\x26")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxBar_obj,emptyCallback),HX_HCSTRING("emptyCallback","\x72","\x65","\x53","\x13")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxBar_obj,filledCallback),HX_HCSTRING("filledCallback","\x87","\xd5","\x00","\xe4")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxBar_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsString,(int)offsetof(FlxBar_obj,parentVariable),HX_HCSTRING("parentVariable","\x86","\x0d","\xe5","\x30")},
	{hx::fsInt,(int)offsetof(FlxBar_obj,barWidth),HX_HCSTRING("barWidth","\x33","\xf7","\x30","\x99")},
	{hx::fsInt,(int)offsetof(FlxBar_obj,barHeight),HX_HCSTRING("barHeight","\x1a","\xce","\xf6","\x27")},
	{hx::fsObject /*::flixel::graphics::frames::FlxImageFrame*/ ,(int)offsetof(FlxBar_obj,frontFrames),HX_HCSTRING("frontFrames","\x2f","\xa1","\xf5","\xbc")},
	{hx::fsObject /*::flixel::ui::FlxBarFillDirection*/ ,(int)offsetof(FlxBar_obj,fillDirection),HX_HCSTRING("fillDirection","\x3c","\x0b","\x89","\xf1")},
	{hx::fsBool,(int)offsetof(FlxBar_obj,_fillHorizontal),HX_HCSTRING("_fillHorizontal","\xe6","\x79","\x6f","\x9d")},
	{hx::fsObject /*::flixel::graphics::frames::FlxFrame*/ ,(int)offsetof(FlxBar_obj,_frontFrame),HX_HCSTRING("_frontFrame","\xe3","\x97","\xe5","\x05")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxBar_obj,_filledFlxRect),HX_HCSTRING("_filledFlxRect","\x75","\x41","\xba","\xea")},
	{hx::fsObject /*::openfl::_legacy::display::BitmapData*/ ,(int)offsetof(FlxBar_obj,_emptyBar),HX_HCSTRING("_emptyBar","\xa5","\x7c","\xc1","\x6f")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(FlxBar_obj,_emptyBarRect),HX_HCSTRING("_emptyBarRect","\x69","\xac","\xcd","\xcb")},
	{hx::fsObject /*::openfl::_legacy::display::BitmapData*/ ,(int)offsetof(FlxBar_obj,_filledBar),HX_HCSTRING("_filledBar","\x12","\x89","\xe0","\x00")},
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(int)offsetof(FlxBar_obj,_zeroOffset),HX_HCSTRING("_zeroOffset","\xfa","\xb5","\x5e","\xc4")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(FlxBar_obj,_filledBarRect),HX_HCSTRING("_filledBarRect","\x56","\xf3","\x0f","\x6a")},
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(int)offsetof(FlxBar_obj,_filledBarPoint),HX_HCSTRING("_filledBarPoint","\xde","\x79","\xb8","\x43")},
	{hx::fsInt,(int)offsetof(FlxBar_obj,_maxPercent),HX_HCSTRING("_maxPercent","\xa0","\xf1","\x88","\xb5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxBar_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxBar_obj_sMemberFields[] = {
	HX_HCSTRING("fixedPosition","\x3d","\xea","\xd2","\x12"),
	HX_HCSTRING("pxPerPercent","\x90","\xc3","\x28","\x3b"),
	HX_HCSTRING("positionOffset","\x1c","\x11","\x32","\xb5"),
	HX_HCSTRING("killOnEmpty","\xf0","\x70","\x0b","\xae"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("range","\xbd","\xa5","\x1f","\xe4"),
	HX_HCSTRING("pct","\x21","\x53","\x55","\x00"),
	HX_HCSTRING("numDivisions","\x80","\x33","\x9c","\x26"),
	HX_HCSTRING("emptyCallback","\x72","\x65","\x53","\x13"),
	HX_HCSTRING("filledCallback","\x87","\xd5","\x00","\xe4"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("parentVariable","\x86","\x0d","\xe5","\x30"),
	HX_HCSTRING("barWidth","\x33","\xf7","\x30","\x99"),
	HX_HCSTRING("barHeight","\x1a","\xce","\xf6","\x27"),
	HX_HCSTRING("frontFrames","\x2f","\xa1","\xf5","\xbc"),
	HX_HCSTRING("fillDirection","\x3c","\x0b","\x89","\xf1"),
	HX_HCSTRING("_fillHorizontal","\xe6","\x79","\x6f","\x9d"),
	HX_HCSTRING("_frontFrame","\xe3","\x97","\xe5","\x05"),
	HX_HCSTRING("_filledFlxRect","\x75","\x41","\xba","\xea"),
	HX_HCSTRING("_emptyBar","\xa5","\x7c","\xc1","\x6f"),
	HX_HCSTRING("_emptyBarRect","\x69","\xac","\xcd","\xcb"),
	HX_HCSTRING("_filledBar","\x12","\x89","\xe0","\x00"),
	HX_HCSTRING("_zeroOffset","\xfa","\xb5","\x5e","\xc4"),
	HX_HCSTRING("_filledBarRect","\x56","\xf3","\x0f","\x6a"),
	HX_HCSTRING("_filledBarPoint","\xde","\x79","\xb8","\x43"),
	HX_HCSTRING("_maxPercent","\xa0","\xf1","\x88","\xb5"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("trackParent","\x15","\x02","\x78","\x95"),
	HX_HCSTRING("setParent","\x6c","\x7a","\x25","\x4d"),
	HX_HCSTRING("stopTrackingParent","\x63","\xe7","\x80","\x2a"),
	HX_HCSTRING("setCallbacks","\x0c","\xb3","\x0f","\xcb"),
	HX_HCSTRING("setRange","\xbb","\x0e","\x54","\xf2"),
	HX_HCSTRING("createFilledBar","\xb5","\xc6","\x32","\x46"),
	HX_HCSTRING("createColoredEmptyBar","\x4c","\x98","\x6a","\xaf"),
	HX_HCSTRING("createColoredFilledBar","\x8b","\x9f","\x2f","\x75"),
	HX_HCSTRING("createGradientBar","\x27","\xe0","\xc0","\x25"),
	HX_HCSTRING("createGradientEmptyBar","\x72","\xe6","\x88","\x77"),
	HX_HCSTRING("createGradientFilledBar","\xa5","\xb2","\x95","\xc7"),
	HX_HCSTRING("createImageBar","\x54","\x94","\x67","\xd6"),
	HX_HCSTRING("createImageEmptyBar","\x25","\xef","\x24","\xe8"),
	HX_HCSTRING("createImageFilledBar","\x92","\x46","\x81","\xdf"),
	HX_HCSTRING("set_fillDirection","\x9f","\xee","\x66","\x1b"),
	HX_HCSTRING("updateValueFromParent","\xfc","\x58","\xec","\xa5"),
	HX_HCSTRING("updateBar","\x4a","\x8f","\xd7","\x82"),
	HX_HCSTRING("updateEmptyBar","\x6f","\x78","\x55","\x5d"),
	HX_HCSTRING("updateFilledBar","\x08","\xde","\xc8","\xf4"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("set_pixels","\x6a","\xfd","\xae","\x80"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("get_percent","\xdc","\x0a","\xd5","\xfe"),
	HX_HCSTRING("set_percent","\xe8","\x11","\x42","\x09"),
	HX_HCSTRING("set_value","\xd4","\xc7","\xb2","\x58"),
	HX_HCSTRING("get_value","\xc8","\xdb","\x61","\x75"),
	HX_HCSTRING("set_numDivisions","\x7d","\x0d","\x7d","\x81"),
	HX_HCSTRING("get_frontFrames","\xc6","\x58","\xd7","\x7d"),
	HX_HCSTRING("set_frontFrames","\xd2","\xd5","\xa2","\x79"),
	HX_HCSTRING("get_backFrames","\x76","\x1d","\x05","\x61"),
	HX_HCSTRING("set_backFrames","\xea","\x05","\x25","\x81"),
	::String(null()) };

static void FlxBar_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxBar_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxBar_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxBar_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxBar_obj::__mClass;

void FlxBar_obj::__register()
{
	hx::Object *dummy = new FlxBar_obj;
	FlxBar_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.ui.FlxBar","\xe9","\xe6","\x0d","\x71");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxBar_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxBar_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxBar_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxBar_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxBar_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxBar_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace ui
