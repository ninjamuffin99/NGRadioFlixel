// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_atlas_FlxAtlas
#include <flixel/graphics/atlas/FlxAtlas.h>
#endif
#ifndef INCLUDED_flixel_graphics_atlas_FlxNode
#include <flixel/graphics/atlas/FlxNode.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxAssets
#include <flixel/system/FlxAssets.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextFormat
#include <flixel/text/FlxTextFormat.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextFormatMarkerPair
#include <flixel/text/FlxTextFormatMarkerPair.h>
#endif
#ifndef INCLUDED_flixel_text__FlxText_FlxTextAlign_Impl_
#include <flixel/text/_FlxText/FlxTextAlign_Impl_.h>
#endif
#ifndef INCLUDED_flixel_text__FlxText_FlxTextFormatRange
#include <flixel/text/_FlxText/FlxTextFormatRange.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_helpers_FlxRange
#include <flixel/util/helpers/FlxRange.h>
#endif
#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetType
#include <openfl/_legacy/AssetType.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BlendMode
#include <openfl/_legacy/display/BlendMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_ColorTransform
#include <openfl/_legacy/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_Font
#include <openfl/_legacy/text/Font.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextField
#include <openfl/_legacy/text/TextField.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextFieldAutoSize
#include <openfl/_legacy/text/TextFieldAutoSize.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextFormat
#include <openfl/_legacy/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7d9cf70d988be490_36_new,"flixel.text.FlxText","new",0x8fca03a2,"flixel.text.FlxText.new","flixel/text/FlxText.hx",36,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_219_destroy,"flixel.text.FlxText","destroy",0x1704293c,"flixel.text.FlxText.destroy","flixel/text/FlxText.hx",219,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_229_drawFrame,"flixel.text.FlxText","drawFrame",0xd9b5be4b,"flixel.text.FlxText.drawFrame","flixel/text/FlxText.hx",229,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_243_stampOnAtlas,"flixel.text.FlxText","stampOnAtlas",0x66244e67,"flixel.text.FlxText.stampOnAtlas","flixel/text/FlxText.hx",243,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_282_applyMarkup,"flixel.text.FlxText","applyMarkup",0x660988f8,"flixel.text.FlxText.applyMarkup","flixel/text/FlxText.hx",282,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_396_addFormat,"flixel.text.FlxText","addFormat",0xc0d9d4fa,"flixel.text.FlxText.addFormat","flixel/text/FlxText.hx",396,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_391_addFormat,"flixel.text.FlxText","addFormat",0xc0d9d4fa,"flixel.text.FlxText.addFormat","flixel/text/FlxText.hx",391,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_408_removeFormat,"flixel.text.FlxText","removeFormat",0xa79a7f19,"flixel.text.FlxText.removeFormat","flixel/text/FlxText.hx",408,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_429_clearFormats,"flixel.text.FlxText","clearFormats",0xf58bc7cd,"flixel.text.FlxText.clearFormats","flixel/text/FlxText.hx",429,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_450_setFormat,"flixel.text.FlxText","setFormat",0x685d153b,"flixel.text.FlxText.setFormat","flixel/text/FlxText.hx",450,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_482_setBorderStyle,"flixel.text.FlxText","setBorderStyle",0x26cf9c21,"flixel.text.FlxText.setBorderStyle","flixel/text/FlxText.hx",482,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_492_set_fieldWidth,"flixel.text.FlxText","set_fieldWidth",0x9c758fa7,"flixel.text.FlxText.set_fieldWidth","flixel/text/FlxText.hx",492,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_514_get_fieldWidth,"flixel.text.FlxText","get_fieldWidth",0x7c55a733,"flixel.text.FlxText.get_fieldWidth","flixel/text/FlxText.hx",514,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_518_set_autoSize,"flixel.text.FlxText","set_autoSize",0x346abbcb,"flixel.text.FlxText.set_autoSize","flixel/text/FlxText.hx",518,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_530_get_autoSize,"flixel.text.FlxText","get_autoSize",0x1f719857,"flixel.text.FlxText.get_autoSize","flixel/text/FlxText.hx",530,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_534_set_text,"flixel.text.FlxText","set_text",0xb6d09f28,"flixel.text.FlxText.set_text","flixel/text/FlxText.hx",534,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_547_get_size,"flixel.text.FlxText","get_size",0x07cd19c8,"flixel.text.FlxText.get_size","flixel/text/FlxText.hx",547,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_551_set_size,"flixel.text.FlxText","set_size",0xb62a733c,"flixel.text.FlxText.set_size","flixel/text/FlxText.hx",551,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_558_set_color,"flixel.text.FlxText","set_color",0x7c7dca88,"flixel.text.FlxText.set_color","flixel/text/FlxText.hx",558,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_571_get_font,"flixel.text.FlxText","get_font",0xff39d6d6,"flixel.text.FlxText.get_font","flixel/text/FlxText.hx",571,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_575_set_font,"flixel.text.FlxText","set_font",0xad97304a,"flixel.text.FlxText.set_font","flixel/text/FlxText.hx",575,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_599_get_embedded,"flixel.text.FlxText","get_embedded",0xce5a2211,"flixel.text.FlxText.get_embedded","flixel/text/FlxText.hx",599,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_604_get_systemFont,"flixel.text.FlxText","get_systemFont",0xd6b43ca5,"flixel.text.FlxText.get_systemFont","flixel/text/FlxText.hx",604,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_608_set_systemFont,"flixel.text.FlxText","set_systemFont",0xf6d42519,"flixel.text.FlxText.set_systemFont","flixel/text/FlxText.hx",608,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_617_get_bold,"flixel.text.FlxText","get_bold",0xfc94fa8c,"flixel.text.FlxText.get_bold","flixel/text/FlxText.hx",617,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_621_set_bold,"flixel.text.FlxText","set_bold",0xaaf25400,"flixel.text.FlxText.set_bold","flixel/text/FlxText.hx",621,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_632_get_italic,"flixel.text.FlxText","get_italic",0xadf337b7,"flixel.text.FlxText.get_italic","flixel/text/FlxText.hx",632,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_636_set_italic,"flixel.text.FlxText","set_italic",0xb170d62b,"flixel.text.FlxText.set_italic","flixel/text/FlxText.hx",636,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_647_get_wordWrap,"flixel.text.FlxText","get_wordWrap",0xf0d31d3b,"flixel.text.FlxText.get_wordWrap","flixel/text/FlxText.hx",647,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_651_set_wordWrap,"flixel.text.FlxText","set_wordWrap",0x05cc40af,"flixel.text.FlxText.set_wordWrap","flixel/text/FlxText.hx",651,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_662_get_alignment,"flixel.text.FlxText","get_alignment",0xf34d507c,"flixel.text.FlxText.get_alignment","flixel/text/FlxText.hx",662,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_666_set_alignment,"flixel.text.FlxText","set_alignment",0x38533288,"flixel.text.FlxText.set_alignment","flixel/text/FlxText.hx",666,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_673_set_borderStyle,"flixel.text.FlxText","set_borderStyle",0x0a5ab38a,"flixel.text.FlxText.set_borderStyle","flixel/text/FlxText.hx",673,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_681_set_borderColor,"flixel.text.FlxText","set_borderColor",0xd0997fbc,"flixel.text.FlxText.set_borderColor","flixel/text/FlxText.hx",681,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_689_set_borderSize,"flixel.text.FlxText","set_borderSize",0x0b7e6088,"flixel.text.FlxText.set_borderSize","flixel/text/FlxText.hx",689,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_697_set_borderQuality,"flixel.text.FlxText","set_borderQuality",0x9eac1b58,"flixel.text.FlxText.set_borderQuality","flixel/text/FlxText.hx",697,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_706_set_graphic,"flixel.text.FlxText","set_graphic",0x740d070d,"flixel.text.FlxText.set_graphic","flixel/text/FlxText.hx",706,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_714_get_width,"flixel.text.FlxText","get_width",0x1933231f,"flixel.text.FlxText.get_width","flixel/text/FlxText.hx",714,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_720_get_height,"flixel.text.FlxText","get_height",0xa9db10ae,"flixel.text.FlxText.get_height","flixel/text/FlxText.hx",720,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_726_updateColorTransform,"flixel.text.FlxText","updateColorTransform",0x81f611f0,"flixel.text.FlxText.updateColorTransform","flixel/text/FlxText.hx",726,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_745_regenGraphic,"flixel.text.FlxText","regenGraphic",0xc617a9e9,"flixel.text.FlxText.regenGraphic","flixel/text/FlxText.hx",745,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_846_drawTextFieldTo,"flixel.text.FlxText","drawTextFieldTo",0xda5cac46,"flixel.text.FlxText.drawTextFieldTo","flixel/text/FlxText.hx",846,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_868_draw,"flixel.text.FlxText","draw",0x3a66d282,"flixel.text.FlxText.draw","flixel/text/FlxText.hx",868,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_879_calcFrame,"flixel.text.FlxText","calcFrame",0x04b3a41a,"flixel.text.FlxText.calcFrame","flixel/text/FlxText.hx",879,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_891_applyBorderStyle,"flixel.text.FlxText","applyBorderStyle",0x7fb82955,"flixel.text.FlxText.applyBorderStyle","flixel/text/FlxText.hx",891,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_957_applyBorderTransparency,"flixel.text.FlxText","applyBorderTransparency",0x59c1b674,"flixel.text.FlxText.applyBorderTransparency","flixel/text/FlxText.hx",957,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_973_copyTextWithOffset,"flixel.text.FlxText","copyTextWithOffset",0x8b535ed9,"flixel.text.FlxText.copyTextWithOffset","flixel/text/FlxText.hx",973,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_980_applyFormats,"flixel.text.FlxText","applyFormats",0x597a620c,"flixel.text.FlxText.applyFormats","flixel/text/FlxText.hx",980,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_1007_copyTextFormat,"flixel.text.FlxText","copyTextFormat",0xce0953d7,"flixel.text.FlxText.copyTextFormat","flixel/text/FlxText.hx",1007,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_1023_dtfCopy,"flixel.text.FlxText","dtfCopy",0x79c34ded,"flixel.text.FlxText.dtfCopy","flixel/text/FlxText.hx",1023,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_1029_updateDefaultFormat,"flixel.text.FlxText","updateDefaultFormat",0x3cb6b251,"flixel.text.FlxText.updateDefaultFormat","flixel/text/FlxText.hx",1029,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_1036_set_frames,"flixel.text.FlxText","set_frames",0x579256e1,"flixel.text.FlxText.set_frames","flixel/text/FlxText.hx",1036,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_41_boot,"flixel.text.FlxText","boot",0x39122ab0,"flixel.text.FlxText.boot","flixel/text/FlxText.hx",41,0xdf165a6e)
namespace flixel{
namespace text{

void FlxText_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Float >  __o_FieldWidth,::String Text,hx::Null< int >  __o_Size,hx::Null< bool >  __o_EmbeddedFont){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
Float FieldWidth = __o_FieldWidth.Default(0);
int Size = __o_Size.Default(8);
bool EmbeddedFont = __o_EmbeddedFont.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_7d9cf70d988be490_36_new)
HXLINE( 153)		this->_hasBorderAlpha = false;
HXLINE( 144)		this->_regen = true;
HXLINE( 138)		this->_formatRanges = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 111)		this->borderQuality = ((Float)1);
HXLINE( 104)		this->borderSize = ((Float)1);
HXLINE(  99)		this->borderColor = (int)0;
HXLINE(  94)		this->borderStyle = ::flixel::text::FlxTextBorderStyle_obj::NONE_dyn();
HXLINE(  46)		this->text = HX_("",00,00,00,00);
HXLINE( 175)		super::__construct(X,Y,null());
HXLINE( 177)		bool _hx_tmp;
HXDLIN( 177)		if (hx::IsNotNull( Text )) {
HXLINE( 177)			_hx_tmp = (Text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 177)			_hx_tmp = true;
            		}
HXDLIN( 177)		if (_hx_tmp) {
HXLINE( 181)			this->set_text(HX_("",00,00,00,00));
HXLINE( 182)			Text = HX_(" ",20,00,00,00);
            		}
            		else {
HXLINE( 186)			this->set_text(Text);
            		}
HXLINE( 189)		this->textField =  ::openfl::_legacy::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 190)		this->textField->set_selectable(false);
HXLINE( 191)		this->textField->set_multiline(true);
HXLINE( 192)		this->textField->set_wordWrap(true);
HXLINE( 193)		this->_defaultFormat =  ::openfl::_legacy::text::TextFormat_obj::__alloc( HX_CTX ,null(),Size,(int)16777215,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 194)		this->set_font(::flixel::_hx_system::FlxAssets_obj::FONT_DEFAULT);
HXLINE( 195)		this->_formatAdjusted =  ::openfl::_legacy::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 196)		this->textField->set_defaultTextFormat(this->_defaultFormat);
HXLINE( 197)		this->textField->set_text(Text);
HXLINE( 198)		this->set_fieldWidth(FieldWidth);
HXLINE( 199)		this->textField->set_embedFonts(EmbeddedFont);
HXLINE( 205)		Float _hx_tmp1;
HXDLIN( 205)		if ((Text.length <= (int)0)) {
HXLINE( 205)			_hx_tmp1 = (int)1;
            		}
            		else {
HXLINE( 205)			_hx_tmp1 = (int)10;
            		}
HXDLIN( 205)		this->textField->set_height(_hx_tmp1);
HXLINE( 207)		this->set_allowCollisions((int)0);
HXLINE( 208)		this->set_moves(false);
HXLINE( 210)		this->drawFrame(null());
HXLINE( 212)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)1,(int)1);
HXDLIN( 212)		point->_inPool = false;
HXDLIN( 212)		this->shadowOffset = point;
            	}

Dynamic FlxText_obj::__CreateEmpty() { return new FlxText_obj; }

void *FlxText_obj::_hx_vtable = 0;

Dynamic FlxText_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxText_obj > _hx_result = new FlxText_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool FlxText_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x4d1b55ae;
	}
}

void FlxText_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_219_destroy)
HXLINE( 220)		this->textField = null();
HXLINE( 221)		this->_font = null();
HXLINE( 222)		this->_defaultFormat = null();
HXLINE( 223)		this->_formatAdjusted = null();
HXLINE( 224)		this->shadowOffset = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->shadowOffset)) );
HXLINE( 225)		this->super::destroy();
            	}


void FlxText_obj::drawFrame(hx::Null< bool >  __o_Force){
bool Force = __o_Force.Default(false);
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_229_drawFrame)
HXLINE( 230)		bool _hx_tmp;
HXDLIN( 230)		if (!(this->_regen)) {
HXLINE( 230)			_hx_tmp = Force;
            		}
            		else {
HXLINE( 230)			_hx_tmp = true;
            		}
HXDLIN( 230)		this->_regen = _hx_tmp;
HXLINE( 231)		this->super::drawFrame(this->_regen);
            	}


bool FlxText_obj::stampOnAtlas( ::flixel::graphics::atlas::FlxAtlas atlas){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_243_stampOnAtlas)
HXLINE( 244)		this->regenGraphic();
HXLINE( 246)		 ::flixel::graphics::atlas::FlxNode node = atlas->addNode(this->graphic->bitmap,this->graphic->key);
HXLINE( 247)		bool result = hx::IsNotNull( node );
HXLINE( 249)		if (hx::IsNotNull( node )) {
HXLINE( 251)			this->set_frames(node->getImageFrame());
            		}
HXLINE( 254)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,stampOnAtlas,return )

 ::flixel::text::FlxText FlxText_obj::applyMarkup(::String input,::Array< ::Dynamic> rules){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_282_applyMarkup)
HXLINE( 283)		bool _hx_tmp;
HXDLIN( 283)		if (hx::IsNotNull( rules )) {
HXLINE( 283)			_hx_tmp = (rules->length == (int)0);
            		}
            		else {
HXLINE( 283)			_hx_tmp = true;
            		}
HXDLIN( 283)		if (_hx_tmp) {
HXLINE( 284)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 286)		this->clearFormats();
HXLINE( 288)		::Array< int > rangeStarts = ::Array_obj< int >::__new(0);
HXLINE( 289)		::Array< int > rangeEnds = ::Array_obj< int >::__new(0);
HXLINE( 290)		::Array< ::Dynamic> rulesToApply = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 292)		int i = (int)0;
HXLINE( 293)		{
HXLINE( 293)			int _g = (int)0;
HXDLIN( 293)			while((_g < rules->length)){
HXLINE( 293)				 ::flixel::text::FlxTextFormatMarkerPair rule = rules->__get(_g).StaticCast<  ::flixel::text::FlxTextFormatMarkerPair >();
HXDLIN( 293)				_g = (_g + (int)1);
HXLINE( 295)				bool _hx_tmp1;
HXDLIN( 295)				if (hx::IsNotNull( rule->marker )) {
HXLINE( 295)					_hx_tmp1 = hx::IsNull( rule->format );
            				}
            				else {
HXLINE( 295)					_hx_tmp1 = true;
            				}
HXDLIN( 295)				if (_hx_tmp1) {
HXLINE( 296)					continue;
            				}
HXLINE( 298)				bool start = false;
HXLINE( 299)				int markerLength = ::haxe::Utf8_obj::length(rule->marker);
HXLINE( 301)				if ((input.indexOf(rule->marker,null()) == (int)-1)) {
HXLINE( 302)					continue;
            				}
HXLINE( 305)				{
HXLINE( 305)					int _g2 = (int)0;
HXDLIN( 305)					int _g1 = ::haxe::Utf8_obj::length(input);
HXDLIN( 305)					while((_g2 < _g1)){
HXLINE( 305)						_g2 = (_g2 + (int)1);
HXDLIN( 305)						int charIndex = (_g2 - (int)1);
HXLINE( 307)						::String _hx_tmp2 = ::haxe::Utf8_obj::sub(input,charIndex,markerLength);
HXDLIN( 307)						if ((::haxe::Utf8_obj::compare(_hx_tmp2,rule->marker) != (int)0)) {
HXLINE( 308)							continue;
            						}
HXLINE( 310)						if (start) {
HXLINE( 312)							start = false;
HXLINE( 313)							rangeEnds->push(charIndex);
            						}
            						else {
HXLINE( 317)							start = true;
HXLINE( 318)							rangeStarts->push(charIndex);
HXLINE( 319)							rulesToApply->push(rule);
            						}
            					}
            				}
HXLINE( 323)				if (start) {
HXLINE( 326)					rangeEnds->push((int)-1);
            				}
HXLINE( 329)				i = (i + (int)1);
            			}
            		}
HXLINE( 333)		{
HXLINE( 333)			int _g3 = (int)0;
HXDLIN( 333)			while((_g3 < rules->length)){
HXLINE( 333)				 ::flixel::text::FlxTextFormatMarkerPair rule1 = rules->__get(_g3).StaticCast<  ::flixel::text::FlxTextFormatMarkerPair >();
HXDLIN( 333)				_g3 = (_g3 + (int)1);
HXLINE( 334)				input = ::StringTools_obj::replace(input,rule1->marker,HX_("",00,00,00,00));
            			}
            		}
HXLINE( 337)		{
HXLINE( 337)			int _g11 = (int)0;
HXDLIN( 337)			int _g4 = rangeStarts->length;
HXDLIN( 337)			while((_g11 < _g4)){
HXLINE( 337)				_g11 = (_g11 + (int)1);
HXDLIN( 337)				int i1 = (_g11 - (int)1);
HXLINE( 340)				int delIndex = rangeStarts->__get(i1);
HXLINE( 341)				int markerLength1 = ::haxe::Utf8_obj::length(rulesToApply->__get(i1).StaticCast<  ::flixel::text::FlxTextFormatMarkerPair >()->marker);
HXLINE( 344)				{
HXLINE( 344)					int _g31 = (int)0;
HXDLIN( 344)					int _g21 = rangeStarts->length;
HXDLIN( 344)					while((_g31 < _g21)){
HXLINE( 344)						_g31 = (_g31 + (int)1);
HXDLIN( 344)						int j = (_g31 - (int)1);
HXLINE( 346)						if ((rangeStarts->__get(j) > delIndex)) {
HXLINE( 348)							::Array< int > rangeStarts1 = rangeStarts;
HXDLIN( 348)							int j1 = j;
HXDLIN( 348)							rangeStarts1[j1] = (rangeStarts1->__get(j1) - markerLength1);
            						}
HXLINE( 350)						if ((rangeEnds->__get(j) > delIndex)) {
HXLINE( 352)							::Array< int > rangeEnds1 = rangeEnds;
HXDLIN( 352)							int j2 = j;
HXDLIN( 352)							rangeEnds1[j2] = (rangeEnds1->__get(j2) - markerLength1);
            						}
            					}
            				}
HXLINE( 357)				delIndex = rangeEnds->__get(i1);
HXLINE( 360)				{
HXLINE( 360)					int _g32 = (int)0;
HXDLIN( 360)					int _g22 = rangeStarts->length;
HXDLIN( 360)					while((_g32 < _g22)){
HXLINE( 360)						_g32 = (_g32 + (int)1);
HXDLIN( 360)						int j3 = (_g32 - (int)1);
HXLINE( 362)						if ((rangeStarts->__get(j3) > delIndex)) {
HXLINE( 364)							::Array< int > rangeStarts2 = rangeStarts;
HXDLIN( 364)							int j4 = j3;
HXDLIN( 364)							rangeStarts2[j4] = (rangeStarts2->__get(j4) - markerLength1);
            						}
HXLINE( 366)						if ((rangeEnds->__get(j3) > delIndex)) {
HXLINE( 368)							::Array< int > rangeEnds2 = rangeEnds;
HXDLIN( 368)							int j5 = j3;
HXDLIN( 368)							rangeEnds2[j5] = (rangeEnds2->__get(j5) - markerLength1);
            						}
            					}
            				}
            			}
            		}
HXLINE( 374)		this->set_text(input);
HXLINE( 377)		{
HXLINE( 377)			int _g12 = (int)0;
HXDLIN( 377)			int _g5 = rangeStarts->length;
HXDLIN( 377)			while((_g12 < _g5)){
HXLINE( 377)				_g12 = (_g12 + (int)1);
HXDLIN( 377)				int i2 = (_g12 - (int)1);
HXLINE( 378)				 ::flixel::text::FlxTextFormat rulesToApply1 = rulesToApply->__get(i2).StaticCast<  ::flixel::text::FlxTextFormatMarkerPair >()->format;
HXDLIN( 378)				this->addFormat(rulesToApply1,rangeStarts->__get(i2),rangeEnds->__get(i2));
            			}
            		}
HXLINE( 380)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxText_obj,applyMarkup,return )

 ::flixel::text::FlxText FlxText_obj::addFormat( ::flixel::text::FlxTextFormat Format,hx::Null< int >  __o_Start,hx::Null< int >  __o_End){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run( ::flixel::text::_FlxText::FlxTextFormatRange left, ::flixel::text::_FlxText::FlxTextFormatRange right){
            			HX_GC_STACKFRAME(&_hx_pos_7d9cf70d988be490_396_addFormat)
HXLINE( 396)			if ((( (int)(left->range->start) ) < ( (int)(right->range->start) ))) {
HXLINE( 396)				return (int)-1;
            			}
            			else {
HXLINE( 396)				return (int)1;
            			}
HXDLIN( 396)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC2(return)

int Start = __o_Start.Default(-1);
int End = __o_End.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_7d9cf70d988be490_391_addFormat)
HXLINE( 392)		::Array< ::Dynamic> _hx_tmp = this->_formatRanges;
HXDLIN( 392)		_hx_tmp->push( ::flixel::text::_FlxText::FlxTextFormatRange_obj::__alloc( HX_CTX ,Format,Start,End));
HXLINE( 394)		this->_formatRanges->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 398)		this->_regen = true;
HXLINE( 400)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxText_obj,addFormat,return )

 ::flixel::text::FlxText FlxText_obj::removeFormat( ::flixel::text::FlxTextFormat Format, ::Dynamic Start, ::Dynamic End){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_408_removeFormat)
HXLINE( 409)		{
HXLINE( 409)			int _g = (int)0;
HXDLIN( 409)			::Array< ::Dynamic> _g1 = this->_formatRanges;
HXDLIN( 409)			while((_g < _g1->length)){
HXLINE( 409)				 ::flixel::text::_FlxText::FlxTextFormatRange formatRange = _g1->__get(_g).StaticCast<  ::flixel::text::_FlxText::FlxTextFormatRange >();
HXDLIN( 409)				_g = (_g + (int)1);
HXLINE( 411)				if (hx::IsNotEq( formatRange->format,Format )) {
HXLINE( 412)					continue;
            				}
HXLINE( 414)				bool _hx_tmp;
HXDLIN( 414)				bool _hx_tmp1;
HXDLIN( 414)				if (hx::IsNotNull( Start )) {
HXLINE( 414)					_hx_tmp1 = hx::IsNotNull( End );
            				}
            				else {
HXLINE( 414)					_hx_tmp1 = false;
            				}
HXDLIN( 414)				if (_hx_tmp1) {
HXLINE( 415)					if (hx::IsLessEq( Start,( (int)(formatRange->range->end) ) )) {
HXLINE( 414)						_hx_tmp = hx::IsLess( End,( (int)(formatRange->range->start) ) );
            					}
            					else {
HXLINE( 414)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE( 414)					_hx_tmp = false;
            				}
HXDLIN( 414)				if (_hx_tmp) {
HXLINE( 416)					continue;
            				}
HXLINE( 418)				this->_formatRanges->remove(formatRange);
            			}
            		}
HXLINE( 420)		this->_regen = true;
HXLINE( 422)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxText_obj,removeFormat,return )

 ::flixel::text::FlxText FlxText_obj::clearFormats(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_429_clearFormats)
HXLINE( 430)		this->_formatRanges = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 431)		{
HXLINE( 431)			this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 431)			this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 431)			this->_regen = true;
            		}
HXLINE( 433)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,clearFormats,return )

 ::flixel::text::FlxText FlxText_obj::setFormat(::String Font,hx::Null< int >  __o_Size,hx::Null< int >  __o_Color,::String Alignment, ::flixel::text::FlxTextBorderStyle BorderStyle,hx::Null< int >  __o_BorderColor,hx::Null< bool >  __o_EmbeddedFont){
int Size = __o_Size.Default(8);
int Color = __o_Color.Default(-1);
int BorderColor = __o_BorderColor.Default(0);
bool EmbeddedFont = __o_EmbeddedFont.Default(true);
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_450_setFormat)
HXLINE( 451)		if (hx::IsNull( BorderStyle )) {
HXLINE( 451)			BorderStyle = ::flixel::text::FlxTextBorderStyle_obj::NONE_dyn();
            		}
            		else {
HXLINE( 451)			BorderStyle = BorderStyle;
            		}
HXLINE( 453)		if (EmbeddedFont) {
HXLINE( 455)			this->set_font(Font);
            		}
            		else {
HXLINE( 457)			if (hx::IsNotNull( Font )) {
HXLINE( 459)				this->set_systemFont(Font);
            			}
            		}
HXLINE( 462)		this->set_size(Size);
HXLINE( 463)		this->set_color(Color);
HXLINE( 464)		if (hx::IsNotNull( Alignment )) {
HXLINE( 465)			this->set_alignment(Alignment);
            		}
HXLINE( 466)		{
HXLINE( 466)			this->set_borderStyle(BorderStyle);
HXDLIN( 466)			this->set_borderColor(BorderColor);
HXDLIN( 466)			this->set_borderSize((int)1);
HXDLIN( 466)			this->set_borderQuality((int)1);
            		}
HXLINE( 468)		{
HXLINE( 468)			this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 468)			this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 468)			this->_regen = true;
            		}
HXLINE( 470)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxText_obj,setFormat,return )

 ::flixel::text::FlxText FlxText_obj::setBorderStyle( ::flixel::text::FlxTextBorderStyle Style,hx::Null< int >  __o_Color,hx::Null< Float >  __o_Size,hx::Null< Float >  __o_Quality){
int Color = __o_Color.Default(0);
Float Size = __o_Size.Default(1);
Float Quality = __o_Quality.Default(1);
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_482_setBorderStyle)
HXLINE( 483)		this->set_borderStyle(Style);
HXLINE( 484)		this->set_borderColor(Color);
HXLINE( 485)		this->set_borderSize(Size);
HXLINE( 486)		this->set_borderQuality(Quality);
HXLINE( 488)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxText_obj,setBorderStyle,return )

Float FlxText_obj::set_fieldWidth(Float value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_492_set_fieldWidth)
HXLINE( 493)		if (hx::IsNull( this->textField )) {
HXLINE( 494)			return value;
            		}
HXLINE( 496)		if ((value <= (int)0)) {
HXLINE( 498)			this->set_wordWrap(false);
HXLINE( 499)			this->set_autoSize(true);
            		}
            		else {
HXLINE( 503)			this->set_autoSize(false);
HXLINE( 504)			this->set_wordWrap(true);
HXLINE( 505)			this->textField->set_width(value);
            		}
HXLINE( 508)		this->_regen = true;
HXLINE( 509)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_fieldWidth,return )

Float FlxText_obj::get_fieldWidth(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_514_get_fieldWidth)
HXDLIN( 514)		if (hx::IsNotNull( this->textField )) {
HXDLIN( 514)			return this->textField->get_width();
            		}
            		else {
HXDLIN( 514)			return (int)0;
            		}
HXDLIN( 514)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_fieldWidth,return )

bool FlxText_obj::set_autoSize(bool value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_518_set_autoSize)
HXLINE( 519)		if (hx::IsNotNull( this->textField )) {
HXLINE( 521)			 ::openfl::_legacy::text::TextFieldAutoSize _hx_tmp;
HXDLIN( 521)			if (value) {
HXLINE( 521)				_hx_tmp = ::openfl::_legacy::text::TextFieldAutoSize_obj::LEFT_dyn();
            			}
            			else {
HXLINE( 521)				_hx_tmp = ::openfl::_legacy::text::TextFieldAutoSize_obj::NONE_dyn();
            			}
HXDLIN( 521)			this->textField->set_autoSize(_hx_tmp);
HXLINE( 522)			this->_regen = true;
            		}
HXLINE( 525)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_autoSize,return )

bool FlxText_obj::get_autoSize(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_530_get_autoSize)
HXDLIN( 530)		if (hx::IsNotNull( this->textField )) {
HXDLIN( 530)			return hx::IsNotEq( this->textField->get_autoSize(),::openfl::_legacy::text::TextFieldAutoSize_obj::NONE_dyn() );
            		}
            		else {
HXDLIN( 530)			return false;
            		}
HXDLIN( 530)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_autoSize,return )

::String FlxText_obj::set_text(::String Text){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_534_set_text)
HXLINE( 535)		this->text = Text;
HXLINE( 536)		if (hx::IsNotNull( this->textField )) {
HXLINE( 538)			::String ot = this->textField->get_text();
HXLINE( 539)			this->textField->set_text(Text);
HXLINE( 540)			bool _hx_tmp;
HXDLIN( 540)			if ((this->textField->get_text() == ot)) {
HXLINE( 540)				_hx_tmp = this->_regen;
            			}
            			else {
HXLINE( 540)				_hx_tmp = true;
            			}
HXDLIN( 540)			this->_regen = _hx_tmp;
            		}
HXLINE( 542)		return Text;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_text,return )

int FlxText_obj::get_size(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_547_get_size)
HXDLIN( 547)		return ::Std_obj::_hx_int(this->_defaultFormat->size);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_size,return )

int FlxText_obj::set_size(int Size){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_551_set_size)
HXLINE( 552)		this->_defaultFormat->size = Size;
HXLINE( 553)		{
HXLINE( 553)			this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 553)			this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 553)			this->_regen = true;
            		}
HXLINE( 554)		return Size;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_size,return )

int FlxText_obj::set_color(int Color){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_558_set_color)
HXLINE( 559)		if (hx::IsEq( this->_defaultFormat->color,((int)Color & (int)(int)16777215) )) {
HXLINE( 561)			return Color;
            		}
HXLINE( 563)		this->_defaultFormat->color = ((int)Color & (int)(int)16777215);
HXLINE( 564)		this->color = Color;
HXLINE( 565)		{
HXLINE( 565)			this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 565)			this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 565)			this->_regen = true;
            		}
HXLINE( 566)		return Color;
            	}


::String FlxText_obj::get_font(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_571_get_font)
HXDLIN( 571)		return this->_font;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_font,return )

::String FlxText_obj::set_font(::String Font){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_575_set_font)
HXLINE( 576)		this->textField->set_embedFonts(true);
HXLINE( 578)		if (hx::IsNotNull( Font )) {
HXLINE( 580)			::String newFontName = Font;
HXLINE( 581)			if (::openfl::_legacy::Assets_obj::exists(Font,::openfl::_legacy::AssetType_obj::FONT_dyn())) {
HXLINE( 583)				newFontName = ::openfl::_legacy::Assets_obj::getFont(Font,null())->fontName;
            			}
HXLINE( 586)			this->_defaultFormat->font = newFontName;
            		}
            		else {
HXLINE( 590)			this->_defaultFormat->font = ::flixel::_hx_system::FlxAssets_obj::FONT_DEFAULT;
            		}
HXLINE( 593)		{
HXLINE( 593)			this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 593)			this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 593)			this->_regen = true;
            		}
HXLINE( 594)		return (this->_font = this->_defaultFormat->font);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_font,return )

bool FlxText_obj::get_embedded(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_599_get_embedded)
HXDLIN( 599)		return this->textField->set_embedFonts(true);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_embedded,return )

::String FlxText_obj::get_systemFont(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_604_get_systemFont)
HXDLIN( 604)		return this->_defaultFormat->font;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_systemFont,return )

::String FlxText_obj::set_systemFont(::String Font){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_608_set_systemFont)
HXLINE( 609)		this->textField->set_embedFonts(false);
HXLINE( 610)		this->_defaultFormat->font = Font;
HXLINE( 611)		{
HXLINE( 611)			this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 611)			this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 611)			this->_regen = true;
            		}
HXLINE( 612)		return Font;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_systemFont,return )

bool FlxText_obj::get_bold(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_617_get_bold)
HXDLIN( 617)		return this->_defaultFormat->bold;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_bold,return )

bool FlxText_obj::set_bold(bool value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_621_set_bold)
HXLINE( 622)		if (hx::IsNotEq( this->_defaultFormat->bold,value )) {
HXLINE( 624)			this->_defaultFormat->bold = value;
HXLINE( 625)			{
HXLINE( 625)				this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 625)				this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 625)				this->_regen = true;
            			}
            		}
HXLINE( 627)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_bold,return )

bool FlxText_obj::get_italic(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_632_get_italic)
HXDLIN( 632)		return this->_defaultFormat->italic;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_italic,return )

bool FlxText_obj::set_italic(bool value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_636_set_italic)
HXLINE( 637)		if (hx::IsNotEq( this->_defaultFormat->italic,value )) {
HXLINE( 639)			this->_defaultFormat->italic = value;
HXLINE( 640)			{
HXLINE( 640)				this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 640)				this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 640)				this->_regen = true;
            			}
            		}
HXLINE( 642)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_italic,return )

bool FlxText_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_647_get_wordWrap)
HXDLIN( 647)		return this->textField->get_wordWrap();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_wordWrap,return )

bool FlxText_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_651_set_wordWrap)
HXLINE( 652)		if ((this->textField->get_wordWrap() != value)) {
HXLINE( 654)			this->textField->set_wordWrap(value);
HXLINE( 655)			this->_regen = true;
            		}
HXLINE( 657)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_wordWrap,return )

::String FlxText_obj::get_alignment(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_662_get_alignment)
HXDLIN( 662)		return ::flixel::text::_FlxText::FlxTextAlign_Impl__obj::fromOpenFL(this->_defaultFormat->align);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_alignment,return )

::String FlxText_obj::set_alignment(::String Alignment){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_666_set_alignment)
HXLINE( 667)		this->_defaultFormat->align = ::flixel::text::_FlxText::FlxTextAlign_Impl__obj::toOpenFL(Alignment);
HXLINE( 668)		{
HXLINE( 668)			this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 668)			this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 668)			this->_regen = true;
            		}
HXLINE( 669)		return Alignment;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_alignment,return )

 ::flixel::text::FlxTextBorderStyle FlxText_obj::set_borderStyle( ::flixel::text::FlxTextBorderStyle style){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_673_set_borderStyle)
HXLINE( 674)		if (hx::IsNotEq( style,this->borderStyle )) {
HXLINE( 675)			this->_regen = true;
            		}
HXLINE( 677)		return (this->borderStyle = style);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_borderStyle,return )

int FlxText_obj::set_borderColor(int Color){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_681_set_borderColor)
HXLINE( 682)		bool _hx_tmp;
HXDLIN( 682)		if ((this->borderColor != Color)) {
HXLINE( 682)			_hx_tmp = hx::IsNotEq( this->borderStyle,::flixel::text::FlxTextBorderStyle_obj::NONE_dyn() );
            		}
            		else {
HXLINE( 682)			_hx_tmp = false;
            		}
HXDLIN( 682)		if (_hx_tmp) {
HXLINE( 683)			this->_regen = true;
            		}
HXLINE( 684)		this->_hasBorderAlpha = (((Float)((int)((int)Color >> (int)(int)24) & (int)(int)255) / (Float)(int)255) < (int)1);
HXLINE( 685)		return (this->borderColor = Color);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_borderColor,return )

Float FlxText_obj::set_borderSize(Float Value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_689_set_borderSize)
HXLINE( 690)		bool _hx_tmp;
HXDLIN( 690)		if ((Value != this->borderSize)) {
HXLINE( 690)			_hx_tmp = hx::IsNotEq( this->borderStyle,::flixel::text::FlxTextBorderStyle_obj::NONE_dyn() );
            		}
            		else {
HXLINE( 690)			_hx_tmp = false;
            		}
HXDLIN( 690)		if (_hx_tmp) {
HXLINE( 691)			this->_regen = true;
            		}
HXLINE( 693)		return (this->borderSize = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_borderSize,return )

Float FlxText_obj::set_borderQuality(Float Value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_697_set_borderQuality)
HXLINE( 698)		Float lowerBound;
HXDLIN( 698)		if ((Value < (int)0)) {
HXLINE( 698)			lowerBound = (int)0;
            		}
            		else {
HXLINE( 698)			lowerBound = Value;
            		}
HXDLIN( 698)		 ::Dynamic Value1;
HXDLIN( 698)		if ((lowerBound > (int)1)) {
HXLINE( 698)			Value1 = (int)1;
            		}
            		else {
HXLINE( 698)			Value1 = lowerBound;
            		}
HXDLIN( 698)		Value = Value1;
HXLINE( 699)		bool _hx_tmp;
HXDLIN( 699)		if ((Value != this->borderQuality)) {
HXLINE( 699)			_hx_tmp = hx::IsNotEq( this->borderStyle,::flixel::text::FlxTextBorderStyle_obj::NONE_dyn() );
            		}
            		else {
HXLINE( 699)			_hx_tmp = false;
            		}
HXDLIN( 699)		if (_hx_tmp) {
HXLINE( 700)			this->_regen = true;
            		}
HXLINE( 702)		return (this->borderQuality = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_borderQuality,return )

 ::flixel::graphics::FlxGraphic FlxText_obj::set_graphic( ::flixel::graphics::FlxGraphic Value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_706_set_graphic)
HXLINE( 707)		 ::flixel::graphics::FlxGraphic oldGraphic = this->graphic;
HXLINE( 708)		 ::flixel::graphics::FlxGraphic graph = this->super::set_graphic(Value);
HXLINE( 709)		::flixel::FlxG_obj::bitmap->removeIfNoUse(oldGraphic);
HXLINE( 710)		return graph;
            	}


Float FlxText_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_714_get_width)
HXLINE( 715)		this->regenGraphic();
HXLINE( 716)		return this->super::get_width();
            	}


Float FlxText_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_720_get_height)
HXLINE( 721)		this->regenGraphic();
HXLINE( 722)		return this->super::get_height();
            	}


void FlxText_obj::updateColorTransform(){
            	HX_GC_STACKFRAME(&_hx_pos_7d9cf70d988be490_726_updateColorTransform)
HXLINE( 727)		if (hx::IsNull( this->colorTransform )) {
HXLINE( 728)			this->colorTransform =  ::openfl::_legacy::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE( 730)		if ((this->alpha != (int)1)) {
HXLINE( 732)			this->colorTransform->alphaMultiplier = this->alpha;
HXLINE( 733)			this->useColorTransform = true;
            		}
            		else {
HXLINE( 737)			this->colorTransform->alphaMultiplier = (int)1;
HXLINE( 738)			this->useColorTransform = false;
            		}
HXLINE( 741)		this->dirty = true;
            	}


void FlxText_obj::regenGraphic(){
            	HX_GC_STACKFRAME(&_hx_pos_7d9cf70d988be490_745_regenGraphic)
HXLINE( 746)		bool _hx_tmp;
HXDLIN( 746)		if (hx::IsNotNull( this->textField )) {
HXLINE( 746)			_hx_tmp = !(this->_regen);
            		}
            		else {
HXLINE( 746)			_hx_tmp = true;
            		}
HXDLIN( 746)		if (_hx_tmp) {
HXLINE( 747)			return;
            		}
HXLINE( 749)		int oldWidth = (int)0;
HXLINE( 750)		int oldHeight = (int)4;
HXLINE( 752)		if (hx::IsNotNull( this->graphic )) {
HXLINE( 754)			oldWidth = this->graphic->width;
HXLINE( 755)			oldHeight = this->graphic->height;
            		}
HXLINE( 758)		Float newWidth = this->textField->get_width();
HXLINE( 760)		Float newHeight = (this->textField->get_textHeight() + (int)4);
HXLINE( 763)		if ((this->textField->get_textHeight() == (int)0)) {
HXLINE( 765)			newHeight = oldHeight;
            		}
HXLINE( 768)		bool _hx_tmp1;
HXDLIN( 768)		if ((oldWidth == newWidth)) {
HXLINE( 768)			_hx_tmp1 = (oldHeight != newHeight);
            		}
            		else {
HXLINE( 768)			_hx_tmp1 = true;
            		}
HXDLIN( 768)		if (_hx_tmp1) {
HXLINE( 771)			this->set_height(newHeight);
HXLINE( 772)			::String key = ::flixel::FlxG_obj::bitmap->getUniqueKey(HX_("text",ad,cc,f9,4c));
HXLINE( 774)			int _hx_tmp2 = ::Std_obj::_hx_int(newWidth);
HXDLIN( 774)			this->makeGraphic(_hx_tmp2,::Std_obj::_hx_int(newHeight),(int)0,false,key);
HXLINE( 775)			if (this->_hasBorderAlpha) {
HXLINE( 776)				this->_borderPixels = this->graphic->bitmap->clone();
            			}
HXLINE( 777)			this->frameHeight = ::Std_obj::_hx_int(this->get_height());
HXLINE( 778)			 ::openfl::_legacy::text::TextField _hx_tmp3 = this->textField;
HXDLIN( 778)			_hx_tmp3->set_height((this->get_height() * ((Float)1.2)));
HXLINE( 779)			this->_flashRect->x = (int)0;
HXLINE( 780)			this->_flashRect->y = (int)0;
HXLINE( 781)			this->_flashRect->width = newWidth;
HXLINE( 782)			this->_flashRect->height = newHeight;
            		}
            		else {
HXLINE( 786)			this->graphic->bitmap->fillRect(this->_flashRect,(int)0);
HXLINE( 787)			if (this->_hasBorderAlpha) {
HXLINE( 789)				if (hx::IsNull( this->_borderPixels )) {
HXLINE( 790)					this->_borderPixels =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,this->frameWidth,this->frameHeight,true,null(),null());
            				}
            				else {
HXLINE( 792)					this->_borderPixels->fillRect(this->_flashRect,(int)0);
            				}
            			}
            		}
HXLINE( 796)		bool _hx_tmp4;
HXDLIN( 796)		bool _hx_tmp5;
HXDLIN( 796)		if (hx::IsNotNull( this->textField )) {
HXLINE( 796)			_hx_tmp5 = hx::IsNotNull( this->textField->get_text() );
            		}
            		else {
HXLINE( 796)			_hx_tmp5 = false;
            		}
HXDLIN( 796)		if (_hx_tmp5) {
HXLINE( 796)			_hx_tmp4 = (this->textField->get_text().length > (int)0);
            		}
            		else {
HXLINE( 796)			_hx_tmp4 = false;
            		}
HXDLIN( 796)		if (_hx_tmp4) {
HXLINE( 799)			this->copyTextFormat(this->_defaultFormat,this->_formatAdjusted,null());
HXLINE( 801)			this->_matrix->identity();
HXLINE( 803)			this->applyBorderStyle();
HXLINE( 804)			if (!(!(this->_hasBorderAlpha))) {
HXLINE( 804)				if (hx::IsNull( this->_borderColorTransform )) {
HXLINE( 804)					this->_borderColorTransform =  ::openfl::_legacy::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            				}
HXDLIN( 804)				this->_borderColorTransform->alphaMultiplier = ((Float)((int)((int)this->borderColor >> (int)(int)24) & (int)(int)255) / (Float)(int)255);
HXDLIN( 804)				 ::openfl::_legacy::display::BitmapData _hx_tmp6 = this->_borderPixels;
HXDLIN( 804)				 ::openfl::_legacy::geom::Rectangle _hx_tmp7 = this->_borderPixels->get_rect();
HXDLIN( 804)				_hx_tmp6->colorTransform(_hx_tmp7,this->_borderColorTransform);
HXDLIN( 804)				this->graphic->bitmap->draw(this->_borderPixels,null(),null(),null(),null(),null());
            			}
HXLINE( 805)			this->applyFormats(this->_formatAdjusted,false);
HXLINE( 807)			this->drawTextFieldTo(this->graphic->bitmap);
            		}
HXLINE( 810)		this->_regen = false;
HXLINE( 811)		this->set_frame(this->frame);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,regenGraphic,(void))

void FlxText_obj::drawTextFieldTo( ::openfl::_legacy::display::BitmapData graphic){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_846_drawTextFieldTo)
HXDLIN( 846)		graphic->draw(this->textField,this->_matrix,null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,drawTextFieldTo,(void))

void FlxText_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_868_draw)
HXLINE( 869)		this->regenGraphic();
HXLINE( 870)		this->super::draw();
            	}


void FlxText_obj::calcFrame(hx::Null< bool >  __o_RunOnCpp){
bool RunOnCpp = __o_RunOnCpp.Default(false);
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_879_calcFrame)
HXLINE( 880)		if (hx::IsNull( this->textField )) {
HXLINE( 881)			return;
            		}
HXLINE( 883)		bool _hx_tmp;
HXDLIN( 883)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 883)			_hx_tmp = !(RunOnCpp);
            		}
            		else {
HXLINE( 883)			_hx_tmp = false;
            		}
HXDLIN( 883)		if (_hx_tmp) {
HXLINE( 884)			return;
            		}
HXLINE( 886)		this->regenGraphic();
HXLINE( 887)		this->super::calcFrame(RunOnCpp);
            	}


void FlxText_obj::applyBorderStyle(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_891_applyBorderStyle)
HXLINE( 892)		int iterations = ::Std_obj::_hx_int((this->borderSize * this->borderQuality));
HXLINE( 893)		if ((iterations <= (int)0)) {
HXLINE( 895)			iterations = (int)1;
            		}
HXLINE( 897)		Float delta = ((Float)this->borderSize / (Float)iterations);
HXLINE( 899)		{
HXLINE( 899)			 ::flixel::text::FlxTextBorderStyle _g = this->borderStyle;
HXDLIN( 899)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
            				}
            				break;
            				case (int)1: {
HXLINE( 904)					this->applyFormats(this->_formatAdjusted,true);
HXLINE( 906)					{
HXLINE( 906)						int _g1 = (int)0;
HXDLIN( 906)						int _g2 = iterations;
HXDLIN( 906)						while((_g1 < _g2)){
HXLINE( 906)							_g1 = (_g1 + (int)1);
HXDLIN( 906)							int i = (_g1 - (int)1);
HXLINE( 908)							{
HXLINE( 908)								 ::openfl::_legacy::display::BitmapData graphic;
HXDLIN( 908)								if (this->_hasBorderAlpha) {
HXLINE( 908)									graphic = this->_borderPixels;
            								}
            								else {
HXLINE( 908)									graphic = this->graphic->bitmap;
            								}
HXDLIN( 908)								this->_matrix->translate(delta,delta);
HXDLIN( 908)								this->drawTextFieldTo(graphic);
            							}
            						}
            					}
HXLINE( 911)					 ::flixel::math::FlxMatrix _hx_tmp = this->_matrix;
HXDLIN( 911)					Float _hx_tmp1 = (-(this->shadowOffset->x) * this->borderSize);
HXDLIN( 911)					_hx_tmp->translate(_hx_tmp1,(-(this->shadowOffset->y) * this->borderSize));
            				}
            				break;
            				case (int)2: {
HXLINE( 916)					this->applyFormats(this->_formatAdjusted,true);
HXLINE( 918)					Float curDelta = delta;
HXLINE( 919)					{
HXLINE( 919)						int _g11 = (int)0;
HXDLIN( 919)						int _g3 = iterations;
HXDLIN( 919)						while((_g11 < _g3)){
HXLINE( 919)							_g11 = (_g11 + (int)1);
HXDLIN( 919)							int i1 = (_g11 - (int)1);
HXLINE( 921)							{
HXLINE( 921)								 ::openfl::_legacy::display::BitmapData graphic1;
HXDLIN( 921)								if (this->_hasBorderAlpha) {
HXLINE( 921)									graphic1 = this->_borderPixels;
            								}
            								else {
HXLINE( 921)									graphic1 = this->graphic->bitmap;
            								}
HXDLIN( 921)								this->_matrix->translate(-(curDelta),-(curDelta));
HXDLIN( 921)								this->drawTextFieldTo(graphic1);
            							}
HXLINE( 922)							{
HXLINE( 922)								 ::openfl::_legacy::display::BitmapData graphic2;
HXDLIN( 922)								if (this->_hasBorderAlpha) {
HXLINE( 922)									graphic2 = this->_borderPixels;
            								}
            								else {
HXLINE( 922)									graphic2 = this->graphic->bitmap;
            								}
HXDLIN( 922)								this->_matrix->translate(curDelta,(int)0);
HXDLIN( 922)								this->drawTextFieldTo(graphic2);
            							}
HXLINE( 923)							{
HXLINE( 923)								 ::openfl::_legacy::display::BitmapData graphic3;
HXDLIN( 923)								if (this->_hasBorderAlpha) {
HXLINE( 923)									graphic3 = this->_borderPixels;
            								}
            								else {
HXLINE( 923)									graphic3 = this->graphic->bitmap;
            								}
HXDLIN( 923)								this->_matrix->translate(curDelta,(int)0);
HXDLIN( 923)								this->drawTextFieldTo(graphic3);
            							}
HXLINE( 924)							{
HXLINE( 924)								 ::openfl::_legacy::display::BitmapData graphic4;
HXDLIN( 924)								if (this->_hasBorderAlpha) {
HXLINE( 924)									graphic4 = this->_borderPixels;
            								}
            								else {
HXLINE( 924)									graphic4 = this->graphic->bitmap;
            								}
HXDLIN( 924)								this->_matrix->translate((int)0,curDelta);
HXDLIN( 924)								this->drawTextFieldTo(graphic4);
            							}
HXLINE( 925)							{
HXLINE( 925)								 ::openfl::_legacy::display::BitmapData graphic5;
HXDLIN( 925)								if (this->_hasBorderAlpha) {
HXLINE( 925)									graphic5 = this->_borderPixels;
            								}
            								else {
HXLINE( 925)									graphic5 = this->graphic->bitmap;
            								}
HXDLIN( 925)								this->_matrix->translate((int)0,curDelta);
HXDLIN( 925)								this->drawTextFieldTo(graphic5);
            							}
HXLINE( 926)							{
HXLINE( 926)								 ::openfl::_legacy::display::BitmapData graphic6;
HXDLIN( 926)								if (this->_hasBorderAlpha) {
HXLINE( 926)									graphic6 = this->_borderPixels;
            								}
            								else {
HXLINE( 926)									graphic6 = this->graphic->bitmap;
            								}
HXDLIN( 926)								this->_matrix->translate(-(curDelta),(int)0);
HXDLIN( 926)								this->drawTextFieldTo(graphic6);
            							}
HXLINE( 927)							{
HXLINE( 927)								 ::openfl::_legacy::display::BitmapData graphic7;
HXDLIN( 927)								if (this->_hasBorderAlpha) {
HXLINE( 927)									graphic7 = this->_borderPixels;
            								}
            								else {
HXLINE( 927)									graphic7 = this->graphic->bitmap;
            								}
HXDLIN( 927)								this->_matrix->translate(-(curDelta),(int)0);
HXDLIN( 927)								this->drawTextFieldTo(graphic7);
            							}
HXLINE( 928)							{
HXLINE( 928)								 ::openfl::_legacy::display::BitmapData graphic8;
HXDLIN( 928)								if (this->_hasBorderAlpha) {
HXLINE( 928)									graphic8 = this->_borderPixels;
            								}
            								else {
HXLINE( 928)									graphic8 = this->graphic->bitmap;
            								}
HXDLIN( 928)								this->_matrix->translate((int)0,-(curDelta));
HXDLIN( 928)								this->drawTextFieldTo(graphic8);
            							}
HXLINE( 930)							this->_matrix->translate(curDelta,(int)0);
HXLINE( 931)							curDelta = (curDelta + delta);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 938)					this->applyFormats(this->_formatAdjusted,true);
HXLINE( 940)					Float curDelta1 = delta;
HXLINE( 941)					{
HXLINE( 941)						int _g12 = (int)0;
HXDLIN( 941)						int _g4 = iterations;
HXDLIN( 941)						while((_g12 < _g4)){
HXLINE( 941)							_g12 = (_g12 + (int)1);
HXDLIN( 941)							int i2 = (_g12 - (int)1);
HXLINE( 943)							{
HXLINE( 943)								 ::openfl::_legacy::display::BitmapData graphic9;
HXDLIN( 943)								if (this->_hasBorderAlpha) {
HXLINE( 943)									graphic9 = this->_borderPixels;
            								}
            								else {
HXLINE( 943)									graphic9 = this->graphic->bitmap;
            								}
HXDLIN( 943)								this->_matrix->translate(-(curDelta1),-(curDelta1));
HXDLIN( 943)								this->drawTextFieldTo(graphic9);
            							}
HXLINE( 944)							{
HXLINE( 944)								 ::openfl::_legacy::display::BitmapData graphic10;
HXDLIN( 944)								if (this->_hasBorderAlpha) {
HXLINE( 944)									graphic10 = this->_borderPixels;
            								}
            								else {
HXLINE( 944)									graphic10 = this->graphic->bitmap;
            								}
HXDLIN( 944)								 ::flixel::math::FlxMatrix _hx_tmp2 = this->_matrix;
HXDLIN( 944)								_hx_tmp2->translate((curDelta1 * (int)2),(int)0);
HXDLIN( 944)								this->drawTextFieldTo(graphic10);
            							}
HXLINE( 945)							{
HXLINE( 945)								 ::openfl::_legacy::display::BitmapData graphic11;
HXDLIN( 945)								if (this->_hasBorderAlpha) {
HXLINE( 945)									graphic11 = this->_borderPixels;
            								}
            								else {
HXLINE( 945)									graphic11 = this->graphic->bitmap;
            								}
HXDLIN( 945)								 ::flixel::math::FlxMatrix _hx_tmp3 = this->_matrix;
HXDLIN( 945)								_hx_tmp3->translate((int)0,(curDelta1 * (int)2));
HXDLIN( 945)								this->drawTextFieldTo(graphic11);
            							}
HXLINE( 946)							{
HXLINE( 946)								 ::openfl::_legacy::display::BitmapData graphic12;
HXDLIN( 946)								if (this->_hasBorderAlpha) {
HXLINE( 946)									graphic12 = this->_borderPixels;
            								}
            								else {
HXLINE( 946)									graphic12 = this->graphic->bitmap;
            								}
HXDLIN( 946)								 ::flixel::math::FlxMatrix _hx_tmp4 = this->_matrix;
HXDLIN( 946)								_hx_tmp4->translate((-(curDelta1) * (int)2),(int)0);
HXDLIN( 946)								this->drawTextFieldTo(graphic12);
            							}
HXLINE( 948)							this->_matrix->translate(curDelta1,-(curDelta1));
HXLINE( 949)							curDelta1 = (curDelta1 + delta);
            						}
            					}
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,applyBorderStyle,(void))

void FlxText_obj::applyBorderTransparency(){
            	HX_GC_STACKFRAME(&_hx_pos_7d9cf70d988be490_957_applyBorderTransparency)
HXLINE( 958)		if (!(this->_hasBorderAlpha)) {
HXLINE( 959)			return;
            		}
HXLINE( 961)		if (hx::IsNull( this->_borderColorTransform )) {
HXLINE( 962)			this->_borderColorTransform =  ::openfl::_legacy::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE( 964)		this->_borderColorTransform->alphaMultiplier = ((Float)((int)((int)this->borderColor >> (int)(int)24) & (int)(int)255) / (Float)(int)255);
HXLINE( 965)		 ::openfl::_legacy::display::BitmapData _hx_tmp = this->_borderPixels;
HXDLIN( 965)		 ::openfl::_legacy::geom::Rectangle _hx_tmp1 = this->_borderPixels->get_rect();
HXDLIN( 965)		_hx_tmp->colorTransform(_hx_tmp1,this->_borderColorTransform);
HXLINE( 966)		this->graphic->bitmap->draw(this->_borderPixels,null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,applyBorderTransparency,(void))

void FlxText_obj::copyTextWithOffset(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_973_copyTextWithOffset)
HXLINE( 974)		 ::openfl::_legacy::display::BitmapData graphic;
HXDLIN( 974)		if (this->_hasBorderAlpha) {
HXLINE( 974)			graphic = this->_borderPixels;
            		}
            		else {
HXLINE( 974)			graphic = this->graphic->bitmap;
            		}
HXLINE( 975)		this->_matrix->translate(x,y);
HXLINE( 976)		this->drawTextFieldTo(graphic);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxText_obj,copyTextWithOffset,(void))

void FlxText_obj::applyFormats( ::openfl::_legacy::text::TextFormat FormatAdjusted,hx::Null< bool >  __o_UseBorderColor){
bool UseBorderColor = __o_UseBorderColor.Default(false);
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_980_applyFormats)
HXLINE( 982)		this->copyTextFormat(this->_defaultFormat,FormatAdjusted,false);
HXLINE( 983)		 ::Dynamic _hx_tmp;
HXDLIN( 983)		if (UseBorderColor) {
HXLINE( 983)			_hx_tmp = ((int)this->borderColor & (int)(int)16777215);
            		}
            		else {
HXLINE( 983)			_hx_tmp = this->_defaultFormat->color;
            		}
HXDLIN( 983)		FormatAdjusted->color = _hx_tmp;
HXLINE( 984)		this->textField->setTextFormat(FormatAdjusted,null(),null());
HXLINE( 987)		{
HXLINE( 987)			int _g = (int)0;
HXDLIN( 987)			::Array< ::Dynamic> _g1 = this->_formatRanges;
HXDLIN( 987)			while((_g < _g1->length)){
HXLINE( 987)				 ::flixel::text::_FlxText::FlxTextFormatRange formatRange = _g1->__get(_g).StaticCast<  ::flixel::text::_FlxText::FlxTextFormatRange >();
HXDLIN( 987)				_g = (_g + (int)1);
HXLINE( 989)				int _hx_tmp1 = (this->textField->get_text().length - (int)1);
HXDLIN( 989)				if ((_hx_tmp1 < ( (int)(formatRange->range->start) ))) {
HXLINE( 992)					goto _hx_goto_58;
            				}
            				else {
HXLINE( 996)					 ::openfl::_legacy::text::TextFormat textFormat = formatRange->format->format;
HXLINE( 997)					this->copyTextFormat(textFormat,FormatAdjusted,false);
HXLINE( 998)					 ::Dynamic _hx_tmp2;
HXDLIN( 998)					if (UseBorderColor) {
HXLINE( 998)						_hx_tmp2 = ((int)formatRange->format->borderColor & (int)(int)16777215);
            					}
            					else {
HXLINE( 998)						_hx_tmp2 = textFormat->color;
            					}
HXDLIN( 998)					FormatAdjusted->color = _hx_tmp2;
            				}
HXLINE(1001)				 ::openfl::_legacy::text::TextField _hx_tmp3 = this->textField;
HXDLIN(1001)				int formatRange1 = ( (int)(formatRange->range->start) );
HXLINE(1002)				int formatRange2 = ( (int)(formatRange->range->end) );
HXLINE(1001)				_hx_tmp3->setTextFormat(FormatAdjusted,formatRange1,::Std_obj::_hx_int(::Math_obj::min(formatRange2,this->textField->get_text().length)));
            			}
            			_hx_goto_58:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxText_obj,applyFormats,(void))

void FlxText_obj::copyTextFormat( ::openfl::_legacy::text::TextFormat from, ::openfl::_legacy::text::TextFormat to,hx::Null< bool >  __o_withAlign){
bool withAlign = __o_withAlign.Default(true);
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_1007_copyTextFormat)
HXLINE(1008)		to->font = from->font;
HXLINE(1009)		to->bold = from->bold;
HXLINE(1010)		to->italic = from->italic;
HXLINE(1011)		to->size = from->size;
HXLINE(1012)		to->color = from->color;
HXLINE(1013)		if (withAlign) {
HXLINE(1014)			to->align = from->align;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxText_obj,copyTextFormat,(void))

 ::openfl::_legacy::text::TextFormat FlxText_obj::dtfCopy(){
            	HX_GC_STACKFRAME(&_hx_pos_7d9cf70d988be490_1023_dtfCopy)
HXLINE(1024)		 ::openfl::_legacy::text::TextFormat dtf = this->textField->get_defaultTextFormat();
HXLINE(1025)		return  ::openfl::_legacy::text::TextFormat_obj::__alloc( HX_CTX ,dtf->font,dtf->size,dtf->color,dtf->bold,dtf->italic,dtf->underline,dtf->url,dtf->target,dtf->align,null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,dtfCopy,return )

void FlxText_obj::updateDefaultFormat(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_1029_updateDefaultFormat)
HXLINE(1030)		this->textField->set_defaultTextFormat(this->_defaultFormat);
HXLINE(1031)		this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXLINE(1032)		this->_regen = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,updateDefaultFormat,(void))

 ::flixel::graphics::frames::FlxFramesCollection FlxText_obj::set_frames( ::flixel::graphics::frames::FlxFramesCollection Frames){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_1036_set_frames)
HXLINE(1037)		this->super::set_frames(Frames);
HXLINE(1038)		this->_regen = false;
HXLINE(1039)		return Frames;
            	}


int FlxText_obj::VERTICAL_GUTTER;


hx::ObjectPtr< FlxText_obj > FlxText_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Float >  __o_FieldWidth,::String Text,hx::Null< int >  __o_Size,hx::Null< bool >  __o_EmbeddedFont) {
	hx::ObjectPtr< FlxText_obj > __this = new FlxText_obj();
	__this->__construct(__o_X,__o_Y,__o_FieldWidth,Text,__o_Size,__o_EmbeddedFont);
	return __this;
}

hx::ObjectPtr< FlxText_obj > FlxText_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Float >  __o_FieldWidth,::String Text,hx::Null< int >  __o_Size,hx::Null< bool >  __o_EmbeddedFont) {
	FlxText_obj *__this = (FlxText_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxText_obj), true, "flixel.text.FlxText"));
	*(void **)__this = FlxText_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,__o_FieldWidth,Text,__o_Size,__o_EmbeddedFont);
	return __this;
}

FlxText_obj::FlxText_obj()
{
}

void FlxText_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxText);
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(borderStyle,"borderStyle");
	HX_MARK_MEMBER_NAME(borderColor,"borderColor");
	HX_MARK_MEMBER_NAME(borderSize,"borderSize");
	HX_MARK_MEMBER_NAME(borderQuality,"borderQuality");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(shadowOffset,"shadowOffset");
	HX_MARK_MEMBER_NAME(_defaultFormat,"_defaultFormat");
	HX_MARK_MEMBER_NAME(_formatAdjusted,"_formatAdjusted");
	HX_MARK_MEMBER_NAME(_formatRanges,"_formatRanges");
	HX_MARK_MEMBER_NAME(_font,"_font");
	HX_MARK_MEMBER_NAME(_regen,"_regen");
	HX_MARK_MEMBER_NAME(_borderPixels,"_borderPixels");
	HX_MARK_MEMBER_NAME(_borderColorTransform,"_borderColorTransform");
	HX_MARK_MEMBER_NAME(_hasBorderAlpha,"_hasBorderAlpha");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxText_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(borderStyle,"borderStyle");
	HX_VISIT_MEMBER_NAME(borderColor,"borderColor");
	HX_VISIT_MEMBER_NAME(borderSize,"borderSize");
	HX_VISIT_MEMBER_NAME(borderQuality,"borderQuality");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(shadowOffset,"shadowOffset");
	HX_VISIT_MEMBER_NAME(_defaultFormat,"_defaultFormat");
	HX_VISIT_MEMBER_NAME(_formatAdjusted,"_formatAdjusted");
	HX_VISIT_MEMBER_NAME(_formatRanges,"_formatRanges");
	HX_VISIT_MEMBER_NAME(_font,"_font");
	HX_VISIT_MEMBER_NAME(_regen,"_regen");
	HX_VISIT_MEMBER_NAME(_borderPixels,"_borderPixels");
	HX_VISIT_MEMBER_NAME(_borderColorTransform,"_borderColorTransform");
	HX_VISIT_MEMBER_NAME(_hasBorderAlpha,"_hasBorderAlpha");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxText_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_size() ); }
		if (HX_FIELD_EQ(inName,"font") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_font() ); }
		if (HX_FIELD_EQ(inName,"bold") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bold() ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_font") ) { return hx::Val( _font ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"italic") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_italic() ); }
		if (HX_FIELD_EQ(inName,"_regen") ) { return hx::Val( _regen ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"dtfCopy") ) { return hx::Val( dtfCopy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"embedded") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_embedded() ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_wordWrap() ); }
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_autoSize() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return hx::Val( set_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_font") ) { return hx::Val( get_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_font") ) { return hx::Val( set_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bold") ) { return hx::Val( get_bold_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bold") ) { return hx::Val( set_bold_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"alignment") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_alignment() ); }
		if (HX_FIELD_EQ(inName,"textField") ) { return hx::Val( textField ); }
		if (HX_FIELD_EQ(inName,"drawFrame") ) { return hx::Val( drawFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"addFormat") ) { return hx::Val( addFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFormat") ) { return hx::Val( setFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"calcFrame") ) { return hx::Val( calcFrame_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"systemFont") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_systemFont() ); }
		if (HX_FIELD_EQ(inName,"borderSize") ) { return hx::Val( borderSize ); }
		if (HX_FIELD_EQ(inName,"fieldWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_fieldWidth() ); }
		if (HX_FIELD_EQ(inName,"get_italic") ) { return hx::Val( get_italic_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_italic") ) { return hx::Val( set_italic_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_frames") ) { return hx::Val( set_frames_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderStyle") ) { return hx::Val( borderStyle ); }
		if (HX_FIELD_EQ(inName,"borderColor") ) { return hx::Val( borderColor ); }
		if (HX_FIELD_EQ(inName,"applyMarkup") ) { return hx::Val( applyMarkup_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_graphic") ) { return hx::Val( set_graphic_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"shadowOffset") ) { return hx::Val( shadowOffset ); }
		if (HX_FIELD_EQ(inName,"stampOnAtlas") ) { return hx::Val( stampOnAtlas_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeFormat") ) { return hx::Val( removeFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearFormats") ) { return hx::Val( clearFormats_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return hx::Val( set_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_autoSize") ) { return hx::Val( get_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_embedded") ) { return hx::Val( get_embedded_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return hx::Val( get_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return hx::Val( set_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"regenGraphic") ) { return hx::Val( regenGraphic_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyFormats") ) { return hx::Val( applyFormats_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"borderQuality") ) { return hx::Val( borderQuality ); }
		if (HX_FIELD_EQ(inName,"_formatRanges") ) { return hx::Val( _formatRanges ); }
		if (HX_FIELD_EQ(inName,"_borderPixels") ) { return hx::Val( _borderPixels ); }
		if (HX_FIELD_EQ(inName,"get_alignment") ) { return hx::Val( get_alignment_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alignment") ) { return hx::Val( set_alignment_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_defaultFormat") ) { return hx::Val( _defaultFormat ); }
		if (HX_FIELD_EQ(inName,"setBorderStyle") ) { return hx::Val( setBorderStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fieldWidth") ) { return hx::Val( set_fieldWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_fieldWidth") ) { return hx::Val( get_fieldWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_systemFont") ) { return hx::Val( get_systemFont_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_systemFont") ) { return hx::Val( set_systemFont_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_borderSize") ) { return hx::Val( set_borderSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyTextFormat") ) { return hx::Val( copyTextFormat_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_formatAdjusted") ) { return hx::Val( _formatAdjusted ); }
		if (HX_FIELD_EQ(inName,"_hasBorderAlpha") ) { return hx::Val( _hasBorderAlpha ); }
		if (HX_FIELD_EQ(inName,"set_borderStyle") ) { return hx::Val( set_borderStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_borderColor") ) { return hx::Val( set_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTextFieldTo") ) { return hx::Val( drawTextFieldTo_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"applyBorderStyle") ) { return hx::Val( applyBorderStyle_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"set_borderQuality") ) { return hx::Val( set_borderQuality_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"copyTextWithOffset") ) { return hx::Val( copyTextWithOffset_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"updateDefaultFormat") ) { return hx::Val( updateDefaultFormat_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"updateColorTransform") ) { return hx::Val( updateColorTransform_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_borderColorTransform") ) { return hx::Val( _borderColorTransform ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"applyBorderTransparency") ) { return hx::Val( applyBorderTransparency_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxText_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) );text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_size(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"font") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_font(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"bold") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bold(inValue.Cast< bool >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_font") ) { _font=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"italic") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_italic(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"_regen") ) { _regen=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_wordWrap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_autoSize(inValue.Cast< bool >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"alignment") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alignment(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::_legacy::text::TextField >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"systemFont") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_systemFont(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"borderSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_borderSize(inValue.Cast< Float >()) );borderSize=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fieldWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fieldWidth(inValue.Cast< Float >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderStyle") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_borderStyle(inValue.Cast<  ::flixel::text::FlxTextBorderStyle >()) );borderStyle=inValue.Cast<  ::flixel::text::FlxTextBorderStyle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_borderColor(inValue.Cast< int >()) );borderColor=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"shadowOffset") ) { shadowOffset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"borderQuality") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_borderQuality(inValue.Cast< Float >()) );borderQuality=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_formatRanges") ) { _formatRanges=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_borderPixels") ) { _borderPixels=inValue.Cast<  ::openfl::_legacy::display::BitmapData >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_defaultFormat") ) { _defaultFormat=inValue.Cast<  ::openfl::_legacy::text::TextFormat >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_formatAdjusted") ) { _formatAdjusted=inValue.Cast<  ::openfl::_legacy::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_hasBorderAlpha") ) { _hasBorderAlpha=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_borderColorTransform") ) { _borderColorTransform=inValue.Cast<  ::openfl::_legacy::geom::ColorTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxText_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"));
	outFields->push(HX_HCSTRING("embedded","\x8a","\x19","\x62","\xde"));
	outFields->push(HX_HCSTRING("systemFont","\x5e","\xc4","\x43","\xf2"));
	outFields->push(HX_HCSTRING("bold","\x85","\x81","\x1b","\x41"));
	outFields->push(HX_HCSTRING("italic","\xf0","\x2e","\x64","\x06"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("alignment","\xe3","\xe2","\x3d","\xea"));
	outFields->push(HX_HCSTRING("borderStyle","\xa5","\x70","\x96","\x10"));
	outFields->push(HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"));
	outFields->push(HX_HCSTRING("borderSize","\xcd","\xff","\xed","\x06"));
	outFields->push(HX_HCSTRING("borderQuality","\x33","\x95","\x25","\x79"));
	outFields->push(HX_HCSTRING("textField","\xcd","\x24","\x81","\x99"));
	outFields->push(HX_HCSTRING("fieldWidth","\xec","\x2e","\xe5","\x97"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("shadowOffset","\x93","\xfb","\x0b","\xdc"));
	outFields->push(HX_HCSTRING("_defaultFormat","\x19","\x53","\x59","\x36"));
	outFields->push(HX_HCSTRING("_formatAdjusted","\xa4","\xc9","\xb6","\x80"));
	outFields->push(HX_HCSTRING("_formatRanges","\x8c","\xb9","\x14","\xd7"));
	outFields->push(HX_HCSTRING("_font","\xae","\x79","\xd1","\xf6"));
	outFields->push(HX_HCSTRING("_regen","\xfe","\x75","\xa6","\xe2"));
	outFields->push(HX_HCSTRING("_borderPixels","\x18","\xbc","\x51","\xcc"));
	outFields->push(HX_HCSTRING("_borderColorTransform","\x74","\x07","\x2f","\x6f"));
	outFields->push(HX_HCSTRING("_hasBorderAlpha","\x37","\xfe","\xf9","\xe8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxText_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(FlxText_obj,text),HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c")},
	{hx::fsObject /*::flixel::text::FlxTextBorderStyle*/ ,(int)offsetof(FlxText_obj,borderStyle),HX_HCSTRING("borderStyle","\xa5","\x70","\x96","\x10")},
	{hx::fsInt,(int)offsetof(FlxText_obj,borderColor),HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6")},
	{hx::fsFloat,(int)offsetof(FlxText_obj,borderSize),HX_HCSTRING("borderSize","\xcd","\xff","\xed","\x06")},
	{hx::fsFloat,(int)offsetof(FlxText_obj,borderQuality),HX_HCSTRING("borderQuality","\x33","\x95","\x25","\x79")},
	{hx::fsObject /*::openfl::_legacy::text::TextField*/ ,(int)offsetof(FlxText_obj,textField),HX_HCSTRING("textField","\xcd","\x24","\x81","\x99")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxText_obj,shadowOffset),HX_HCSTRING("shadowOffset","\x93","\xfb","\x0b","\xdc")},
	{hx::fsObject /*::openfl::_legacy::text::TextFormat*/ ,(int)offsetof(FlxText_obj,_defaultFormat),HX_HCSTRING("_defaultFormat","\x19","\x53","\x59","\x36")},
	{hx::fsObject /*::openfl::_legacy::text::TextFormat*/ ,(int)offsetof(FlxText_obj,_formatAdjusted),HX_HCSTRING("_formatAdjusted","\xa4","\xc9","\xb6","\x80")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxText_obj,_formatRanges),HX_HCSTRING("_formatRanges","\x8c","\xb9","\x14","\xd7")},
	{hx::fsString,(int)offsetof(FlxText_obj,_font),HX_HCSTRING("_font","\xae","\x79","\xd1","\xf6")},
	{hx::fsBool,(int)offsetof(FlxText_obj,_regen),HX_HCSTRING("_regen","\xfe","\x75","\xa6","\xe2")},
	{hx::fsObject /*::openfl::_legacy::display::BitmapData*/ ,(int)offsetof(FlxText_obj,_borderPixels),HX_HCSTRING("_borderPixels","\x18","\xbc","\x51","\xcc")},
	{hx::fsObject /*::openfl::_legacy::geom::ColorTransform*/ ,(int)offsetof(FlxText_obj,_borderColorTransform),HX_HCSTRING("_borderColorTransform","\x74","\x07","\x2f","\x6f")},
	{hx::fsBool,(int)offsetof(FlxText_obj,_hasBorderAlpha),HX_HCSTRING("_hasBorderAlpha","\x37","\xfe","\xf9","\xe8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxText_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &FlxText_obj::VERTICAL_GUTTER,HX_HCSTRING("VERTICAL_GUTTER","\x04","\xb3","\x89","\x07")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxText_obj_sMemberFields[] = {
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("borderStyle","\xa5","\x70","\x96","\x10"),
	HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"),
	HX_HCSTRING("borderSize","\xcd","\xff","\xed","\x06"),
	HX_HCSTRING("borderQuality","\x33","\x95","\x25","\x79"),
	HX_HCSTRING("textField","\xcd","\x24","\x81","\x99"),
	HX_HCSTRING("shadowOffset","\x93","\xfb","\x0b","\xdc"),
	HX_HCSTRING("_defaultFormat","\x19","\x53","\x59","\x36"),
	HX_HCSTRING("_formatAdjusted","\xa4","\xc9","\xb6","\x80"),
	HX_HCSTRING("_formatRanges","\x8c","\xb9","\x14","\xd7"),
	HX_HCSTRING("_font","\xae","\x79","\xd1","\xf6"),
	HX_HCSTRING("_regen","\xfe","\x75","\xa6","\xe2"),
	HX_HCSTRING("_borderPixels","\x18","\xbc","\x51","\xcc"),
	HX_HCSTRING("_borderColorTransform","\x74","\x07","\x2f","\x6f"),
	HX_HCSTRING("_hasBorderAlpha","\x37","\xfe","\xf9","\xe8"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("drawFrame","\x89","\xad","\x8e","\xce"),
	HX_HCSTRING("stampOnAtlas","\xe9","\xf9","\x45","\x2b"),
	HX_HCSTRING("applyMarkup","\xb6","\x43","\x6b","\xf6"),
	HX_HCSTRING("addFormat","\x38","\xc4","\xb2","\xb5"),
	HX_HCSTRING("removeFormat","\x9b","\x2a","\xbc","\x6c"),
	HX_HCSTRING("clearFormats","\x4f","\x73","\xad","\xba"),
	HX_HCSTRING("setFormat","\x79","\x04","\x36","\x5d"),
	HX_HCSTRING("setBorderStyle","\x23","\xac","\x54","\xb8"),
	HX_HCSTRING("set_fieldWidth","\xa9","\x9f","\xfa","\x2d"),
	HX_HCSTRING("get_fieldWidth","\x35","\xb7","\xda","\x0d"),
	HX_HCSTRING("set_autoSize","\x4d","\x67","\x8c","\xf9"),
	HX_HCSTRING("get_autoSize","\xd9","\x43","\x93","\xe4"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	HX_HCSTRING("set_size","\xbe","\xb5","\x6b","\x7a"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("get_font","\x58","\x19","\x7b","\xc3"),
	HX_HCSTRING("set_font","\xcc","\x72","\xd8","\x71"),
	HX_HCSTRING("get_embedded","\x93","\xcd","\x7b","\x93"),
	HX_HCSTRING("get_systemFont","\xa7","\x4c","\x39","\x68"),
	HX_HCSTRING("set_systemFont","\x1b","\x35","\x59","\x88"),
	HX_HCSTRING("get_bold","\x0e","\x3d","\xd6","\xc0"),
	HX_HCSTRING("set_bold","\x82","\x96","\x33","\x6f"),
	HX_HCSTRING("get_italic","\xb9","\x9e","\xeb","\xf6"),
	HX_HCSTRING("set_italic","\x2d","\x3d","\x69","\xfa"),
	HX_HCSTRING("get_wordWrap","\xbd","\xc8","\xf4","\xb5"),
	HX_HCSTRING("set_wordWrap","\x31","\xec","\xed","\xca"),
	HX_HCSTRING("get_alignment","\xba","\xb6","\xa1","\xab"),
	HX_HCSTRING("set_alignment","\xc6","\x98","\xa7","\xf0"),
	HX_HCSTRING("set_borderStyle","\x48","\xa5","\x43","\xcd"),
	HX_HCSTRING("set_borderColor","\x7a","\x71","\x82","\x93"),
	HX_HCSTRING("set_borderSize","\x8a","\x70","\x03","\x9d"),
	HX_HCSTRING("set_borderQuality","\x96","\x78","\x03","\xa3"),
	HX_HCSTRING("set_graphic","\xcb","\xc1","\x6e","\x04"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("updateColorTransform","\x72","\x0f","\xd2","\x2f"),
	HX_HCSTRING("regenGraphic","\x6b","\x55","\x39","\x8b"),
	HX_HCSTRING("drawTextFieldTo","\x04","\x9e","\x45","\x9d"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("calcFrame","\x58","\x93","\x8c","\xf9"),
	HX_HCSTRING("applyBorderStyle","\xd7","\xbd","\xa2","\x48"),
	HX_HCSTRING("applyBorderTransparency","\x32","\x96","\xaf","\x17"),
	HX_HCSTRING("copyTextWithOffset","\xdb","\x97","\x6d","\x53"),
	HX_HCSTRING("applyFormats","\x8e","\x0d","\x9c","\x1e"),
	HX_HCSTRING("copyTextFormat","\xd9","\x63","\x8e","\x5f"),
	HX_HCSTRING("dtfCopy","\xab","\x51","\x45","\x87"),
	HX_HCSTRING("updateDefaultFormat","\x0f","\x5b","\x8e","\x8b"),
	HX_HCSTRING("set_frames","\xe3","\xbd","\x8a","\xa0"),
	::String(null()) };

static void FlxText_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxText_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxText_obj::VERTICAL_GUTTER,"VERTICAL_GUTTER");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxText_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxText_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxText_obj::VERTICAL_GUTTER,"VERTICAL_GUTTER");
};

#endif

hx::Class FlxText_obj::__mClass;

static ::String FlxText_obj_sStaticFields[] = {
	HX_HCSTRING("VERTICAL_GUTTER","\x04","\xb3","\x89","\x07"),
	::String(null())
};

void FlxText_obj::__register()
{
	hx::Object *dummy = new FlxText_obj;
	FlxText_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.text.FlxText","\xb0","\x4a","\x1b","\xca");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxText_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxText_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxText_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxText_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxText_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxText_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxText_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxText_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_41_boot)
HXDLIN(  41)		VERTICAL_GUTTER = (int)4;
            	}
}

} // end namespace flixel
} // end namespace text
