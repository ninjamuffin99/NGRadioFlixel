// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_flixel_text_FlxTextFormat
#include <flixel/text/FlxTextFormat.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextFormat
#include <openfl/_legacy/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a69907c6a733237a_1059_new,"flixel.text.FlxTextFormat","new",0x67be2279,"flixel.text.FlxTextFormat.new","flixel/text/FlxText.hx",1059,0xdf165a6e)
namespace flixel{
namespace text{

void FlxTextFormat_obj::__construct( ::Dynamic FontColor, ::Dynamic Bold, ::Dynamic Italic, ::Dynamic BorderColor){
            	HX_GC_STACKFRAME(&_hx_pos_a69907c6a733237a_1059_new)
HXLINE(1060)		this->format =  ::openfl::_legacy::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),FontColor,Bold,Italic,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(1061)		int _hx_tmp;
HXDLIN(1061)		if (hx::IsNull( BorderColor )) {
HXLINE(1061)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE(1061)			_hx_tmp = BorderColor;
            		}
HXDLIN(1061)		this->borderColor = _hx_tmp;
            	}

Dynamic FlxTextFormat_obj::__CreateEmpty() { return new FlxTextFormat_obj; }

void *FlxTextFormat_obj::_hx_vtable = 0;

Dynamic FlxTextFormat_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTextFormat_obj > _hx_result = new FlxTextFormat_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxTextFormat_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x39cd0569;
}


hx::ObjectPtr< FlxTextFormat_obj > FlxTextFormat_obj::__new( ::Dynamic FontColor, ::Dynamic Bold, ::Dynamic Italic, ::Dynamic BorderColor) {
	hx::ObjectPtr< FlxTextFormat_obj > __this = new FlxTextFormat_obj();
	__this->__construct(FontColor,Bold,Italic,BorderColor);
	return __this;
}

hx::ObjectPtr< FlxTextFormat_obj > FlxTextFormat_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic FontColor, ::Dynamic Bold, ::Dynamic Italic, ::Dynamic BorderColor) {
	FlxTextFormat_obj *__this = (FlxTextFormat_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxTextFormat_obj), true, "flixel.text.FlxTextFormat"));
	*(void **)__this = FlxTextFormat_obj::_hx_vtable;
	__this->__construct(FontColor,Bold,Italic,BorderColor);
	return __this;
}

FlxTextFormat_obj::FlxTextFormat_obj()
{
}

void FlxTextFormat_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTextFormat);
	HX_MARK_MEMBER_NAME(borderColor,"borderColor");
	HX_MARK_MEMBER_NAME(format,"format");
	HX_MARK_END_CLASS();
}

void FlxTextFormat_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(borderColor,"borderColor");
	HX_VISIT_MEMBER_NAME(format,"format");
}

hx::Val FlxTextFormat_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { return hx::Val( format ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { return hx::Val( borderColor ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxTextFormat_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { format=inValue.Cast<  ::openfl::_legacy::text::TextFormat >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { borderColor=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTextFormat_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"));
	outFields->push(HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTextFormat_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FlxTextFormat_obj,borderColor),HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6")},
	{hx::fsObject /*::openfl::_legacy::text::TextFormat*/ ,(int)offsetof(FlxTextFormat_obj,format),HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTextFormat_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTextFormat_obj_sMemberFields[] = {
	HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"),
	HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"),
	::String(null()) };

static void FlxTextFormat_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTextFormat_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTextFormat_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTextFormat_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxTextFormat_obj::__mClass;

void FlxTextFormat_obj::__register()
{
	hx::Object *dummy = new FlxTextFormat_obj;
	FlxTextFormat_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.text.FlxTextFormat","\x07","\x72","\x93","\xcd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTextFormat_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTextFormat_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTextFormat_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTextFormat_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTextFormat_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTextFormat_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace text
