// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_xml_Parser
#include <haxe/xml/Parser.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_61da4a8008b80acb_370_new,"Xml","new",0x2e496e29,"Xml.new","C:\\HaxeToolkit\\haxe\\std/Xml.hx",370,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_220_get,"Xml","get",0x2e441e5f,"Xml.get","C:\\HaxeToolkit\\haxe\\std/Xml.hx",220,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_231_set,"Xml","set",0x2e4d396b,"Xml.set","C:\\HaxeToolkit\\haxe\\std/Xml.hx",231,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_253_exists,"Xml","exists",0x446683b3,"Xml.exists","C:\\HaxeToolkit\\haxe\\std/Xml.hx",253,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_283_elements,"Xml","elements",0x0310ffce,"Xml.elements","C:\\HaxeToolkit\\haxe\\std/Xml.hx",283,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_293_elementsNamed,"Xml","elementsNamed",0x6b28f50b,"Xml.elementsNamed","C:\\HaxeToolkit\\haxe\\std/Xml.hx",293,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_310_firstElement,"Xml","firstElement",0xc103a583,"Xml.firstElement","C:\\HaxeToolkit\\haxe\\std/Xml.hx",310,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_326_addChild,"Xml","addChild",0x3e639952,"Xml.addChild","C:\\HaxeToolkit\\haxe\\std/Xml.hx",326,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_339_removeChild,"Xml","removeChild",0x9bd39581,"Xml.removeChild","C:\\HaxeToolkit\\haxe\\std/Xml.hx",339,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_98_parse,"Xml","parse",0x8a44f23c,"Xml.parse","C:\\HaxeToolkit\\haxe\\std/Xml.hx",98,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_158_createElement,"Xml","createElement",0x97359a29,"Xml.createElement","C:\\HaxeToolkit\\haxe\\std/Xml.hx",158,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_167_createPCData,"Xml","createPCData",0x3cc9ead0,"Xml.createPCData","C:\\HaxeToolkit\\haxe\\std/Xml.hx",167,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_176_createCData,"Xml","createCData",0xaf49365a,"Xml.createCData","C:\\HaxeToolkit\\haxe\\std/Xml.hx",176,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_185_createComment,"Xml","createComment",0x125165cc,"Xml.createComment","C:\\HaxeToolkit\\haxe\\std/Xml.hx",185,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_194_createDocType,"Xml","createDocType",0x696de8bf,"Xml.createDocType","C:\\HaxeToolkit\\haxe\\std/Xml.hx",194,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_203_createProcessingInstruction,"Xml","createProcessingInstruction",0x632a1f28,"Xml.createProcessingInstruction","C:\\HaxeToolkit\\haxe\\std/Xml.hx",203,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_213_createDocument,"Xml","createDocument",0xcf00030e,"Xml.createDocument","C:\\HaxeToolkit\\haxe\\std/Xml.hx",213,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_68_boot,"Xml","boot",0x4a0ff649,"Xml.boot","C:\\HaxeToolkit\\haxe\\std/Xml.hx",68,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_72_boot,"Xml","boot",0x4a0ff649,"Xml.boot","C:\\HaxeToolkit\\haxe\\std/Xml.hx",72,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_76_boot,"Xml","boot",0x4a0ff649,"Xml.boot","C:\\HaxeToolkit\\haxe\\std/Xml.hx",76,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_80_boot,"Xml","boot",0x4a0ff649,"Xml.boot","C:\\HaxeToolkit\\haxe\\std/Xml.hx",80,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_84_boot,"Xml","boot",0x4a0ff649,"Xml.boot","C:\\HaxeToolkit\\haxe\\std/Xml.hx",84,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_88_boot,"Xml","boot",0x4a0ff649,"Xml.boot","C:\\HaxeToolkit\\haxe\\std/Xml.hx",88,0x6fe08e00)
HX_LOCAL_STACK_FRAME(_hx_pos_61da4a8008b80acb_92_boot,"Xml","boot",0x4a0ff649,"Xml.boot","C:\\HaxeToolkit\\haxe\\std/Xml.hx",92,0x6fe08e00)

void Xml_obj::__construct(int nodeType){
            	HX_GC_STACKFRAME(&_hx_pos_61da4a8008b80acb_370_new)
HXLINE( 371)		this->nodeType = nodeType;
HXLINE( 372)		this->children = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 373)		this->attributeMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}

Dynamic Xml_obj::__CreateEmpty() { return new Xml_obj; }

void *Xml_obj::_hx_vtable = 0;

Dynamic Xml_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Xml_obj > _hx_result = new Xml_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Xml_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x004325b7;
}

::String Xml_obj::get(::String att){
            	HX_STACKFRAME(&_hx_pos_61da4a8008b80acb_220_get)
HXLINE( 221)		if ((this->nodeType != ::Xml_obj::Element)) {
HXLINE( 222)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + this->nodeType));
            		}
HXLINE( 224)		return ( (::String)(this->attributeMap->get(att)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Xml_obj,get,return )

void Xml_obj::set(::String att,::String value){
            	HX_STACKFRAME(&_hx_pos_61da4a8008b80acb_231_set)
HXLINE( 232)		if ((this->nodeType != ::Xml_obj::Element)) {
HXLINE( 233)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + this->nodeType));
            		}
HXLINE( 235)		this->attributeMap->set(att,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Xml_obj,set,(void))

bool Xml_obj::exists(::String att){
            	HX_STACKFRAME(&_hx_pos_61da4a8008b80acb_253_exists)
HXLINE( 254)		if ((this->nodeType != ::Xml_obj::Element)) {
HXLINE( 255)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + this->nodeType));
            		}
HXLINE( 257)		return this->attributeMap->exists(att);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Xml_obj,exists,return )

 ::Dynamic Xml_obj::elements(){
            	HX_STACKFRAME(&_hx_pos_61da4a8008b80acb_283_elements)
HXLINE( 284)		bool _hx_tmp;
HXDLIN( 284)		if ((this->nodeType != ::Xml_obj::Document)) {
HXLINE( 284)			_hx_tmp = (this->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 284)			_hx_tmp = false;
            		}
HXDLIN( 284)		if (_hx_tmp) {
HXLINE( 284)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + this->nodeType));
            		}
HXLINE( 285)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 285)		{
HXLINE( 285)			int _g1 = (int)0;
HXDLIN( 285)			::Array< ::Dynamic> _g2 = this->children;
HXDLIN( 285)			while((_g1 < _g2->length)){
HXLINE( 285)				 ::Xml child = _g2->__get(_g1).StaticCast<  ::Xml >();
HXDLIN( 285)				_g1 = (_g1 + (int)1);
HXDLIN( 285)				if ((child->nodeType == ::Xml_obj::Element)) {
HXLINE( 285)					_g->push(child);
            				}
            			}
            		}
HXDLIN( 285)		::Array< ::Dynamic> ret = _g;
HXLINE( 286)		return ret->iterator();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Xml_obj,elements,return )

 ::Dynamic Xml_obj::elementsNamed(::String name){
            	HX_STACKFRAME(&_hx_pos_61da4a8008b80acb_293_elementsNamed)
HXLINE( 294)		bool _hx_tmp;
HXDLIN( 294)		if ((this->nodeType != ::Xml_obj::Document)) {
HXLINE( 294)			_hx_tmp = (this->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 294)			_hx_tmp = false;
            		}
HXDLIN( 294)		if (_hx_tmp) {
HXLINE( 294)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + this->nodeType));
            		}
HXLINE( 295)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 295)		{
HXLINE( 295)			int _g1 = (int)0;
HXDLIN( 295)			::Array< ::Dynamic> _g2 = this->children;
HXDLIN( 295)			while((_g1 < _g2->length)){
HXLINE( 295)				 ::Xml child = _g2->__get(_g1).StaticCast<  ::Xml >();
HXDLIN( 295)				_g1 = (_g1 + (int)1);
HXDLIN( 295)				bool _hx_tmp1;
HXDLIN( 295)				if ((child->nodeType == ::Xml_obj::Element)) {
HXLINE( 295)					if ((child->nodeType != ::Xml_obj::Element)) {
HXLINE( 295)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + child->nodeType));
            					}
HXDLIN( 295)					_hx_tmp1 = (child->nodeName == name);
            				}
            				else {
HXLINE( 295)					_hx_tmp1 = false;
            				}
HXDLIN( 295)				if (_hx_tmp1) {
HXLINE( 295)					_g->push(child);
            				}
            			}
            		}
HXDLIN( 295)		::Array< ::Dynamic> ret = _g;
HXLINE( 296)		return ret->iterator();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Xml_obj,elementsNamed,return )

 ::Xml Xml_obj::firstElement(){
            	HX_STACKFRAME(&_hx_pos_61da4a8008b80acb_310_firstElement)
HXLINE( 311)		bool _hx_tmp;
HXDLIN( 311)		if ((this->nodeType != ::Xml_obj::Document)) {
HXLINE( 311)			_hx_tmp = (this->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 311)			_hx_tmp = false;
            		}
HXDLIN( 311)		if (_hx_tmp) {
HXLINE( 311)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + this->nodeType));
            		}
HXLINE( 312)		{
HXLINE( 312)			int _g = (int)0;
HXDLIN( 312)			::Array< ::Dynamic> _g1 = this->children;
HXDLIN( 312)			while((_g < _g1->length)){
HXLINE( 312)				 ::Xml child = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN( 312)				_g = (_g + (int)1);
HXLINE( 313)				if ((child->nodeType == ::Xml_obj::Element)) {
HXLINE( 314)					return child;
            				}
            			}
            		}
HXLINE( 317)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Xml_obj,firstElement,return )

void Xml_obj::addChild( ::Xml x){
            	HX_STACKFRAME(&_hx_pos_61da4a8008b80acb_326_addChild)
HXLINE( 327)		bool _hx_tmp;
HXDLIN( 327)		if ((this->nodeType != ::Xml_obj::Document)) {
HXLINE( 327)			_hx_tmp = (this->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 327)			_hx_tmp = false;
            		}
HXDLIN( 327)		if (_hx_tmp) {
HXLINE( 327)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + this->nodeType));
            		}
HXLINE( 328)		if (hx::IsNotNull( x->parent )) {
HXLINE( 329)			x->parent->removeChild(x);
            		}
HXLINE( 331)		this->children->push(x);
HXLINE( 332)		x->parent = hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Xml_obj,addChild,(void))

bool Xml_obj::removeChild( ::Xml x){
            	HX_STACKFRAME(&_hx_pos_61da4a8008b80acb_339_removeChild)
HXLINE( 340)		bool _hx_tmp;
HXDLIN( 340)		if ((this->nodeType != ::Xml_obj::Document)) {
HXLINE( 340)			_hx_tmp = (this->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 340)			_hx_tmp = false;
            		}
HXDLIN( 340)		if (_hx_tmp) {
HXLINE( 340)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + this->nodeType));
            		}
HXLINE( 341)		if (this->children->remove(x)) {
HXLINE( 342)			x->parent = null();
HXLINE( 343)			return true;
            		}
HXLINE( 345)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Xml_obj,removeChild,return )

int Xml_obj::Element;

int Xml_obj::PCData;

int Xml_obj::CData;

int Xml_obj::Comment;

int Xml_obj::DocType;

int Xml_obj::ProcessingInstruction;

int Xml_obj::Document;

 ::Xml Xml_obj::parse(::String str){
            	HX_STACKFRAME(&_hx_pos_61da4a8008b80acb_98_parse)
HXDLIN(  98)		return ::haxe::xml::Parser_obj::parse(str,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Xml_obj,parse,return )

 ::Xml Xml_obj::createElement(::String name){
            	HX_GC_STACKFRAME(&_hx_pos_61da4a8008b80acb_158_createElement)
HXLINE( 159)		 ::Xml xml =  ::Xml_obj::__alloc( HX_CTX ,::Xml_obj::Element);
HXLINE( 160)		{
HXLINE( 160)			if ((xml->nodeType != ::Xml_obj::Element)) {
HXLINE( 160)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + xml->nodeType));
            			}
HXDLIN( 160)			xml->nodeName = name;
            		}
HXLINE( 161)		return xml;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Xml_obj,createElement,return )

 ::Xml Xml_obj::createPCData(::String data){
            	HX_GC_STACKFRAME(&_hx_pos_61da4a8008b80acb_167_createPCData)
HXLINE( 168)		 ::Xml xml =  ::Xml_obj::__alloc( HX_CTX ,::Xml_obj::PCData);
HXLINE( 169)		{
HXLINE( 169)			bool _hx_tmp;
HXDLIN( 169)			if ((xml->nodeType != ::Xml_obj::Document)) {
HXLINE( 169)				_hx_tmp = (xml->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 169)				_hx_tmp = true;
            			}
HXDLIN( 169)			if (_hx_tmp) {
HXLINE( 169)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + xml->nodeType));
            			}
HXDLIN( 169)			xml->nodeValue = data;
            		}
HXLINE( 170)		return xml;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Xml_obj,createPCData,return )

 ::Xml Xml_obj::createCData(::String data){
            	HX_GC_STACKFRAME(&_hx_pos_61da4a8008b80acb_176_createCData)
HXLINE( 177)		 ::Xml xml =  ::Xml_obj::__alloc( HX_CTX ,::Xml_obj::CData);
HXLINE( 178)		{
HXLINE( 178)			bool _hx_tmp;
HXDLIN( 178)			if ((xml->nodeType != ::Xml_obj::Document)) {
HXLINE( 178)				_hx_tmp = (xml->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 178)				_hx_tmp = true;
            			}
HXDLIN( 178)			if (_hx_tmp) {
HXLINE( 178)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + xml->nodeType));
            			}
HXDLIN( 178)			xml->nodeValue = data;
            		}
HXLINE( 179)		return xml;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Xml_obj,createCData,return )

 ::Xml Xml_obj::createComment(::String data){
            	HX_GC_STACKFRAME(&_hx_pos_61da4a8008b80acb_185_createComment)
HXLINE( 186)		 ::Xml xml =  ::Xml_obj::__alloc( HX_CTX ,::Xml_obj::Comment);
HXLINE( 187)		{
HXLINE( 187)			bool _hx_tmp;
HXDLIN( 187)			if ((xml->nodeType != ::Xml_obj::Document)) {
HXLINE( 187)				_hx_tmp = (xml->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 187)				_hx_tmp = true;
            			}
HXDLIN( 187)			if (_hx_tmp) {
HXLINE( 187)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + xml->nodeType));
            			}
HXDLIN( 187)			xml->nodeValue = data;
            		}
HXLINE( 188)		return xml;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Xml_obj,createComment,return )

 ::Xml Xml_obj::createDocType(::String data){
            	HX_GC_STACKFRAME(&_hx_pos_61da4a8008b80acb_194_createDocType)
HXLINE( 195)		 ::Xml xml =  ::Xml_obj::__alloc( HX_CTX ,::Xml_obj::DocType);
HXLINE( 196)		{
HXLINE( 196)			bool _hx_tmp;
HXDLIN( 196)			if ((xml->nodeType != ::Xml_obj::Document)) {
HXLINE( 196)				_hx_tmp = (xml->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 196)				_hx_tmp = true;
            			}
HXDLIN( 196)			if (_hx_tmp) {
HXLINE( 196)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + xml->nodeType));
            			}
HXDLIN( 196)			xml->nodeValue = data;
            		}
HXLINE( 197)		return xml;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Xml_obj,createDocType,return )

 ::Xml Xml_obj::createProcessingInstruction(::String data){
            	HX_GC_STACKFRAME(&_hx_pos_61da4a8008b80acb_203_createProcessingInstruction)
HXLINE( 204)		 ::Xml xml =  ::Xml_obj::__alloc( HX_CTX ,::Xml_obj::ProcessingInstruction);
HXLINE( 205)		{
HXLINE( 205)			bool _hx_tmp;
HXDLIN( 205)			if ((xml->nodeType != ::Xml_obj::Document)) {
HXLINE( 205)				_hx_tmp = (xml->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 205)				_hx_tmp = true;
            			}
HXDLIN( 205)			if (_hx_tmp) {
HXLINE( 205)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + xml->nodeType));
            			}
HXDLIN( 205)			xml->nodeValue = data;
            		}
HXLINE( 206)		return xml;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Xml_obj,createProcessingInstruction,return )

 ::Xml Xml_obj::createDocument(){
            	HX_GC_STACKFRAME(&_hx_pos_61da4a8008b80acb_213_createDocument)
HXDLIN( 213)		return  ::Xml_obj::__alloc( HX_CTX ,::Xml_obj::Document);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Xml_obj,createDocument,return )


hx::ObjectPtr< Xml_obj > Xml_obj::__new(int nodeType) {
	hx::ObjectPtr< Xml_obj > __this = new Xml_obj();
	__this->__construct(nodeType);
	return __this;
}

hx::ObjectPtr< Xml_obj > Xml_obj::__alloc(hx::Ctx *_hx_ctx,int nodeType) {
	Xml_obj *__this = (Xml_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Xml_obj), true, "Xml"));
	*(void **)__this = Xml_obj::_hx_vtable;
	__this->__construct(nodeType);
	return __this;
}

Xml_obj::Xml_obj()
{
}

void Xml_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Xml);
	HX_MARK_MEMBER_NAME(nodeType,"nodeType");
	HX_MARK_MEMBER_NAME(nodeName,"nodeName");
	HX_MARK_MEMBER_NAME(nodeValue,"nodeValue");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(children,"children");
	HX_MARK_MEMBER_NAME(attributeMap,"attributeMap");
	HX_MARK_END_CLASS();
}

void Xml_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(nodeType,"nodeType");
	HX_VISIT_MEMBER_NAME(nodeName,"nodeName");
	HX_VISIT_MEMBER_NAME(nodeValue,"nodeValue");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(children,"children");
	HX_VISIT_MEMBER_NAME(attributeMap,"attributeMap");
}

hx::Val Xml_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"exists") ) { return hx::Val( exists_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"nodeType") ) { return hx::Val( nodeType ); }
		if (HX_FIELD_EQ(inName,"nodeName") ) { return hx::Val( nodeName ); }
		if (HX_FIELD_EQ(inName,"children") ) { return hx::Val( children ); }
		if (HX_FIELD_EQ(inName,"elements") ) { return hx::Val( elements_dyn() ); }
		if (HX_FIELD_EQ(inName,"addChild") ) { return hx::Val( addChild_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nodeValue") ) { return hx::Val( nodeValue ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"removeChild") ) { return hx::Val( removeChild_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"attributeMap") ) { return hx::Val( attributeMap ); }
		if (HX_FIELD_EQ(inName,"firstElement") ) { return hx::Val( firstElement_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"elementsNamed") ) { return hx::Val( elementsNamed_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Xml_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"CData") ) { outValue = ( CData ); return true; }
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = parse_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"PCData") ) { outValue = ( PCData ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"Element") ) { outValue = ( Element ); return true; }
		if (HX_FIELD_EQ(inName,"Comment") ) { outValue = ( Comment ); return true; }
		if (HX_FIELD_EQ(inName,"DocType") ) { outValue = ( DocType ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"Document") ) { outValue = ( Document ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"createCData") ) { outValue = createCData_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"createPCData") ) { outValue = createPCData_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createElement") ) { outValue = createElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createComment") ) { outValue = createComment_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createDocType") ) { outValue = createDocType_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"createDocument") ) { outValue = createDocument_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"ProcessingInstruction") ) { outValue = ( ProcessingInstruction ); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"createProcessingInstruction") ) { outValue = createProcessingInstruction_dyn(); return true; }
	}
	return false;
}

hx::Val Xml_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::Xml >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"nodeType") ) { nodeType=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nodeName") ) { nodeName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"children") ) { children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nodeValue") ) { nodeValue=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"attributeMap") ) { attributeMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Xml_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"CData") ) { CData=ioValue.Cast< int >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"PCData") ) { PCData=ioValue.Cast< int >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"Element") ) { Element=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"Comment") ) { Comment=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"DocType") ) { DocType=ioValue.Cast< int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"Document") ) { Document=ioValue.Cast< int >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"ProcessingInstruction") ) { ProcessingInstruction=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Xml_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("nodeType","\xdc","\x51","\x86","\xf6"));
	outFields->push(HX_HCSTRING("nodeName","\x6d","\xd1","\x7c","\xf2"));
	outFields->push(HX_HCSTRING("nodeValue","\x0f","\x5e","\xee","\xd5"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("children","\x3f","\x19","\x6a","\x70"));
	outFields->push(HX_HCSTRING("attributeMap","\xe0","\x4b","\xb2","\x95"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Xml_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Xml_obj,nodeType),HX_HCSTRING("nodeType","\xdc","\x51","\x86","\xf6")},
	{hx::fsString,(int)offsetof(Xml_obj,nodeName),HX_HCSTRING("nodeName","\x6d","\xd1","\x7c","\xf2")},
	{hx::fsString,(int)offsetof(Xml_obj,nodeValue),HX_HCSTRING("nodeValue","\x0f","\x5e","\xee","\xd5")},
	{hx::fsObject /*::Xml*/ ,(int)offsetof(Xml_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Xml_obj,children),HX_HCSTRING("children","\x3f","\x19","\x6a","\x70")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Xml_obj,attributeMap),HX_HCSTRING("attributeMap","\xe0","\x4b","\xb2","\x95")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Xml_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Xml_obj::Element,HX_HCSTRING("Element","\x9c","\xd6","\xa5","\xd3")},
	{hx::fsInt,(void *) &Xml_obj::PCData,HX_HCSTRING("PCData","\xbd","\x3d","\xa2","\xbd")},
	{hx::fsInt,(void *) &Xml_obj::CData,HX_HCSTRING("CData","\x0d","\x60","\x15","\xc1")},
	{hx::fsInt,(void *) &Xml_obj::Comment,HX_HCSTRING("Comment","\x3f","\xa2","\xc1","\x4e")},
	{hx::fsInt,(void *) &Xml_obj::DocType,HX_HCSTRING("DocType","\x32","\x25","\xde","\xa5")},
	{hx::fsInt,(void *) &Xml_obj::ProcessingInstruction,HX_HCSTRING("ProcessingInstruction","\xdb","\x1e","\x14","\x6a")},
	{hx::fsInt,(void *) &Xml_obj::Document,HX_HCSTRING("Document","\x3b","\xab","\xc4","\x74")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Xml_obj_sMemberFields[] = {
	HX_HCSTRING("nodeType","\xdc","\x51","\x86","\xf6"),
	HX_HCSTRING("nodeName","\x6d","\xd1","\x7c","\xf2"),
	HX_HCSTRING("nodeValue","\x0f","\x5e","\xee","\xd5"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("children","\x3f","\x19","\x6a","\x70"),
	HX_HCSTRING("attributeMap","\xe0","\x4b","\xb2","\x95"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("elements","\x37","\x36","\xc4","\x83"),
	HX_HCSTRING("elementsNamed","\x02","\xe2","\x8a","\xc2"),
	HX_HCSTRING("firstElement","\x6c","\xc4","\x9c","\x2f"),
	HX_HCSTRING("addChild","\xbb","\xcf","\x16","\xbf"),
	HX_HCSTRING("removeChild","\xb8","\x86","\xed","\x43"),
	::String(null()) };

static void Xml_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Xml_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Xml_obj::Element,"Element");
	HX_MARK_MEMBER_NAME(Xml_obj::PCData,"PCData");
	HX_MARK_MEMBER_NAME(Xml_obj::CData,"CData");
	HX_MARK_MEMBER_NAME(Xml_obj::Comment,"Comment");
	HX_MARK_MEMBER_NAME(Xml_obj::DocType,"DocType");
	HX_MARK_MEMBER_NAME(Xml_obj::ProcessingInstruction,"ProcessingInstruction");
	HX_MARK_MEMBER_NAME(Xml_obj::Document,"Document");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Xml_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Xml_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Xml_obj::Element,"Element");
	HX_VISIT_MEMBER_NAME(Xml_obj::PCData,"PCData");
	HX_VISIT_MEMBER_NAME(Xml_obj::CData,"CData");
	HX_VISIT_MEMBER_NAME(Xml_obj::Comment,"Comment");
	HX_VISIT_MEMBER_NAME(Xml_obj::DocType,"DocType");
	HX_VISIT_MEMBER_NAME(Xml_obj::ProcessingInstruction,"ProcessingInstruction");
	HX_VISIT_MEMBER_NAME(Xml_obj::Document,"Document");
};

#endif

hx::Class Xml_obj::__mClass;

static ::String Xml_obj_sStaticFields[] = {
	HX_HCSTRING("Element","\x9c","\xd6","\xa5","\xd3"),
	HX_HCSTRING("PCData","\xbd","\x3d","\xa2","\xbd"),
	HX_HCSTRING("CData","\x0d","\x60","\x15","\xc1"),
	HX_HCSTRING("Comment","\x3f","\xa2","\xc1","\x4e"),
	HX_HCSTRING("DocType","\x32","\x25","\xde","\xa5"),
	HX_HCSTRING("ProcessingInstruction","\xdb","\x1e","\x14","\x6a"),
	HX_HCSTRING("Document","\x3b","\xab","\xc4","\x74"),
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	HX_HCSTRING("createElement","\x20","\x87","\x97","\xee"),
	HX_HCSTRING("createPCData","\xb9","\x09","\x63","\xab"),
	HX_HCSTRING("createCData","\x91","\x27","\x63","\x57"),
	HX_HCSTRING("createComment","\xc3","\x52","\xb3","\x69"),
	HX_HCSTRING("createDocType","\xb6","\xd5","\xcf","\xc0"),
	HX_HCSTRING("createProcessingInstruction","\x5f","\x2e","\x58","\x38"),
	HX_HCSTRING("createDocument","\x37","\x6e","\x4d","\xed"),
	::String(null())
};

void Xml_obj::__register()
{
	hx::Object *dummy = new Xml_obj;
	Xml_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Xml","\xb7","\x25","\x43","\x00");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Xml_obj::__GetStatic;
	__mClass->mSetStaticField = &Xml_obj::__SetStatic;
	__mClass->mMarkFunc = Xml_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Xml_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Xml_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Xml_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Xml_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Xml_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Xml_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Xml_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_61da4a8008b80acb_68_boot)
HXDLIN(  68)		Element = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_61da4a8008b80acb_72_boot)
HXDLIN(  72)		PCData = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_61da4a8008b80acb_76_boot)
HXDLIN(  76)		CData = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_61da4a8008b80acb_80_boot)
HXDLIN(  80)		Comment = (int)3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_61da4a8008b80acb_84_boot)
HXDLIN(  84)		DocType = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_61da4a8008b80acb_88_boot)
HXDLIN(  88)		ProcessingInstruction = (int)5;
            	}
{
            	HX_STACKFRAME(&_hx_pos_61da4a8008b80acb_92_boot)
HXDLIN(  92)		Document = (int)6;
            	}
}

