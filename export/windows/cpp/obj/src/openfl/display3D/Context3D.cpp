// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DirectRenderer
#include <openfl/_legacy/display/DirectRenderer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_MovieClip
#include <openfl/_legacy/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_OpenGLView
#include <openfl/_legacy/display/OpenGLView.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Stage
#include <openfl/_legacy/display/Stage.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl__legacy_gl_GL
#include <openfl/_legacy/gl/GL.h>
#endif
#ifndef INCLUDED_openfl__legacy_gl_GLBuffer
#include <openfl/_legacy/gl/GLBuffer.h>
#endif
#ifndef INCLUDED_openfl__legacy_gl_GLFramebuffer
#include <openfl/_legacy/gl/GLFramebuffer.h>
#endif
#ifndef INCLUDED_openfl__legacy_gl_GLObject
#include <openfl/_legacy/gl/GLObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_gl_GLProgram
#include <openfl/_legacy/gl/GLProgram.h>
#endif
#ifndef INCLUDED_openfl__legacy_gl_GLRenderbuffer
#include <openfl/_legacy/gl/GLRenderbuffer.h>
#endif
#ifndef INCLUDED_openfl__legacy_gl_GLTexture
#include <openfl/_legacy/gl/GLTexture.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_ArrayBufferView
#include <openfl/_legacy/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_ByteArray
#include <openfl/_legacy/utils/ByteArray.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_Float32Array
#include <openfl/_legacy/utils/Float32Array.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataInput
#include <openfl/_legacy/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataOutput
#include <openfl/_legacy/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IMemoryRange
#include <openfl/_legacy/utils/IMemoryRange.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3DBufferUsage
#include <openfl/display3D/Context3DBufferUsage.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3DMipFilter
#include <openfl/display3D/Context3DMipFilter.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3DProgramType
#include <openfl/display3D/Context3DProgramType.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3DTextureFilter
#include <openfl/display3D/Context3DTextureFilter.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3DTextureFormat
#include <openfl/display3D/Context3DTextureFormat.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3DVertexBufferFormat
#include <openfl/display3D/Context3DVertexBufferFormat.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3DWrapMode
#include <openfl/display3D/Context3DWrapMode.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3D_SamplerState
#include <openfl/display3D/_Context3D/SamplerState.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_CubeTexture
#include <openfl/display3D/textures/CubeTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_Texture
#include <openfl/display3D/textures/Texture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_67_new,"openfl.display3D.Context3D","new",0x4f12c019,"openfl.display3D.Context3D.new","openfl/display3D/Context3D.hx",67,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_109_clear,"openfl.display3D.Context3D","clear",0xf8808186,"openfl.display3D.Context3D.clear","openfl/display3D/Context3D.hx",109,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_136_configureBackBuffer,"openfl.display3D.Context3D","configureBackBuffer",0x7210edc6,"openfl.display3D.Context3D.configureBackBuffer","openfl/display3D/Context3D.hx",136,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_147_setBackBufferViewPort,"openfl.display3D.Context3D","setBackBufferViewPort",0x25ccd868,"openfl.display3D.Context3D.setBackBufferViewPort","openfl/display3D/Context3D.hx",147,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_167_updateBackBufferViewPort,"openfl.display3D.Context3D","updateBackBufferViewPort",0xbe6a863d,"openfl.display3D.Context3D.updateBackBufferViewPort","openfl/display3D/Context3D.hx",167,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_175_updateDepthAndStencilState,"openfl.display3D.Context3D","updateDepthAndStencilState",0x7630ca39,"openfl.display3D.Context3D.updateDepthAndStencilState","openfl/display3D/Context3D.hx",175,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_201_createCubeTexture,"openfl.display3D.Context3D","createCubeTexture",0xbb69e843,"openfl.display3D.Context3D.createCubeTexture","openfl/display3D/Context3D.hx",201,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_210_createIndexBuffer,"openfl.display3D.Context3D","createIndexBuffer",0x3b80e18f,"openfl.display3D.Context3D.createIndexBuffer","openfl/display3D/Context3D.hx",210,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_220_createProgram,"openfl.display3D.Context3D","createProgram",0x0b5753e1,"openfl.display3D.Context3D.createProgram","openfl/display3D/Context3D.hx",220,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_229_createRectangleTexture,"openfl.display3D.Context3D","createRectangleTexture",0x8720f36f,"openfl.display3D.Context3D.createRectangleTexture","openfl/display3D/Context3D.hx",229,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_238_createTexture,"openfl.display3D.Context3D","createTexture",0xb63ed238,"openfl.display3D.Context3D.createTexture","openfl/display3D/Context3D.hx",238,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_247_createVertexBuffer,"openfl.display3D.Context3D","createVertexBuffer",0x49fb9507,"openfl.display3D.Context3D.createVertexBuffer","openfl/display3D/Context3D.hx",247,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_257___deleteTexture,"openfl.display3D.Context3D","__deleteTexture",0x1620b609,"openfl.display3D.Context3D.__deleteTexture","openfl/display3D/Context3D.hx",257,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_268___deleteVertexBuffer,"openfl.display3D.Context3D","__deleteVertexBuffer",0x4df93b96,"openfl.display3D.Context3D.__deleteVertexBuffer","openfl/display3D/Context3D.hx",268,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_279___deleteIndexBuffer,"openfl.display3D.Context3D","__deleteIndexBuffer",0xec4f81e0,"openfl.display3D.Context3D.__deleteIndexBuffer","openfl/display3D/Context3D.hx",279,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_290___deleteProgram,"openfl.display3D.Context3D","__deleteProgram",0x6b3937b2,"openfl.display3D.Context3D.__deleteProgram","openfl/display3D/Context3D.hx",290,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_301_dispose,"openfl.display3D.Context3D","dispose",0x8ad040d8,"openfl.display3D.Context3D.dispose","openfl/display3D/Context3D.hx",301,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_359_drawToBitmapData,"openfl.display3D.Context3D","drawToBitmapData",0x474f45df,"openfl.display3D.Context3D.drawToBitmapData","openfl/display3D/Context3D.hx",359,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_366_drawTriangles,"openfl.display3D.Context3D","drawTriangles",0x0d837500,"openfl.display3D.Context3D.drawTriangles","openfl/display3D/Context3D.hx",366,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_397_present,"openfl.display3D.Context3D","present",0x095ffb34,"openfl.display3D.Context3D.present","openfl/display3D/Context3D.hx",397,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_422_removeRenderMethod,"openfl.display3D.Context3D","removeRenderMethod",0xa41ae1a2,"openfl.display3D.Context3D.removeRenderMethod","openfl/display3D/Context3D.hx",422,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_427_setBlendFactors,"openfl.display3D.Context3D","setBlendFactors",0x86d16c6e,"openfl.display3D.Context3D.setBlendFactors","openfl/display3D/Context3D.hx",427,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_442_setColorMask,"openfl.display3D.Context3D","setColorMask",0xad4f5d14,"openfl.display3D.Context3D.setColorMask","openfl/display3D/Context3D.hx",442,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_448_setCulling,"openfl.display3D.Context3D","setCulling",0x39687055,"openfl.display3D.Context3D.setCulling","openfl/display3D/Context3D.hx",448,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_497_setDepthTest,"openfl.display3D.Context3D","setDepthTest",0x2d08b41a,"openfl.display3D.Context3D.setDepthTest","openfl/display3D/Context3D.hx",497,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_507_setGLSLProgramConstantsFromByteArray,"openfl.display3D.Context3D","setGLSLProgramConstantsFromByteArray",0xf444f7a3,"openfl.display3D.Context3D.setGLSLProgramConstantsFromByteArray","openfl/display3D/Context3D.hx",507,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_516_setGLSLProgramConstantsFromMatrix,"openfl.display3D.Context3D","setGLSLProgramConstantsFromMatrix",0x2c9d8ccf,"openfl.display3D.Context3D.setGLSLProgramConstantsFromMatrix","openfl/display3D/Context3D.hx",516,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_524_setGLSLProgramConstantsFromVector4,"openfl.display3D.Context3D","setGLSLProgramConstantsFromVector4",0x24735fc3,"openfl.display3D.Context3D.setGLSLProgramConstantsFromVector4","openfl/display3D/Context3D.hx",524,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_532_setGLSLTextureAt,"openfl.display3D.Context3D","setGLSLTextureAt",0xd796fc95,"openfl.display3D.Context3D.setGLSLTextureAt","openfl/display3D/Context3D.hx",532,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_595_setGLSLVertexBufferAt,"openfl.display3D.Context3D","setGLSLVertexBufferAt",0x58133e50,"openfl.display3D.Context3D.setGLSLVertexBufferAt","openfl/display3D/Context3D.hx",595,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_664_setProgram,"openfl.display3D.Context3D","setProgram",0xd9d9d869,"openfl.display3D.Context3D.setProgram","openfl/display3D/Context3D.hx",664,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_682_setProgramConstantsFromByteArray,"openfl.display3D.Context3D","setProgramConstantsFromByteArray",0xd8990de1,"openfl.display3D.Context3D.setProgramConstantsFromByteArray","openfl/display3D/Context3D.hx",682,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_696_setProgramConstantsFromMatrix,"openfl.display3D.Context3D","setProgramConstantsFromMatrix",0x29e843d1,"openfl.display3D.Context3D.setProgramConstantsFromMatrix","openfl/display3D/Context3D.hx",696,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_719_setProgramConstantsFromVector,"openfl.display3D.Context3D","setProgramConstantsFromVector",0x057dbe53,"openfl.display3D.Context3D.setProgramConstantsFromVector","openfl/display3D/Context3D.hx",719,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_734_setRenderMethod,"openfl.display3D.Context3D","setRenderMethod",0x286aeed2,"openfl.display3D.Context3D.setRenderMethod","openfl/display3D/Context3D.hx",734,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_739_setRenderToBackBuffer,"openfl.display3D.Context3D","setRenderToBackBuffer",0x6095d693,"openfl.display3D.Context3D.setRenderToBackBuffer","openfl/display3D/Context3D.hx",739,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_765_setRenderToTexture,"openfl.display3D.Context3D","setRenderToTexture",0x25c5d54f,"openfl.display3D.Context3D.setRenderToTexture","openfl/display3D/Context3D.hx",765,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_822_setSamplerStateAt,"openfl.display3D.Context3D","setSamplerStateAt",0x9f8ad1f7,"openfl.display3D.Context3D.setSamplerStateAt","openfl/display3D/Context3D.hx",822,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_837_setScissorRectangle,"openfl.display3D.Context3D","setScissorRectangle",0x712bb5ee,"openfl.display3D.Context3D.setScissorRectangle","openfl/display3D/Context3D.hx",837,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_855_updateScissorRectangle,"openfl.display3D.Context3D","updateScissorRectangle",0x9654d483,"openfl.display3D.Context3D.updateScissorRectangle","openfl/display3D/Context3D.hx",855,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_870_setStencilActions,"openfl.display3D.Context3D","setStencilActions",0x1fe08e1c,"openfl.display3D.Context3D.setStencilActions","openfl/display3D/Context3D.hx",870,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_879_setStencilReferenceValue,"openfl.display3D.Context3D","setStencilReferenceValue",0xaa284f67,"openfl.display3D.Context3D.setStencilReferenceValue","openfl/display3D/Context3D.hx",879,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_890_setTextureAt,"openfl.display3D.Context3D","setTextureAt",0x38d4bfd3,"openfl.display3D.Context3D.setTextureAt","openfl/display3D/Context3D.hx",890,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_898_setTextureParameters,"openfl.display3D.Context3D","setTextureParameters",0x0709098a,"openfl.display3D.Context3D.setTextureParameters","openfl/display3D/Context3D.hx",898,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1135_setVertexBufferAt,"openfl.display3D.Context3D","setVertexBufferAt",0xbb32fa52,"openfl.display3D.Context3D.setVertexBufferAt","openfl/display3D/Context3D.hx",1135,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1143___getUniformLocationNameFromAgalRegisterIndex,"openfl.display3D.Context3D","__getUniformLocationNameFromAgalRegisterIndex",0x072a804f,"openfl.display3D.Context3D.__getUniformLocationNameFromAgalRegisterIndex","openfl/display3D/Context3D.hx",1143,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1164___updateBlendStatus,"openfl.display3D.Context3D","__updateBlendStatus",0x3fc75d73,"openfl.display3D.Context3D.__updateBlendStatus","openfl/display3D/Context3D.hx",1164,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_29_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",29,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_30_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",30,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_31_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",31,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_33_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",33,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_34_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",34,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_35_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",35,0xc899cbb9)
namespace openfl{
namespace display3D{

void Context3D_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_67_new)
HXLINE(  69)		this->disposed = false;
HXLINE(  71)		int this1 = (int)519;
HXDLIN(  71)		this->stencilCompareMode = this1;
HXLINE(  72)		this->stencilRef = (int)0;
HXLINE(  73)		this->stencilReadMask = (int)255;
HXLINE(  75)		this->_yFlip = (int)1;
HXLINE(  77)		this->vertexBuffersCreated = ::Array_obj< ::Dynamic>::__new();
HXLINE(  78)		this->indexBuffersCreated = ::Array_obj< ::Dynamic>::__new();
HXLINE(  79)		this->programsCreated = ::Array_obj< ::Dynamic>::__new();
HXLINE(  80)		this->texturesCreated = ::Array_obj< ::Dynamic>::__new();
HXLINE(  81)		this->samplerParameters = ::Array_obj< ::Dynamic>::__new();
HXLINE(  83)		{
HXLINE(  83)			int _g1 = (int)0;
HXDLIN(  83)			int _g = ::openfl::display3D::Context3D_obj::MAX_SAMPLERS;
HXDLIN(  83)			while((_g1 < _g)){
HXLINE(  83)				_g1 = (_g1 + (int)1);
HXDLIN(  83)				int i = (_g1 - (int)1);
HXLINE(  85)				::Array< ::Dynamic> _hx_tmp = this->samplerParameters;
HXDLIN(  85)				_hx_tmp[i] =  ::openfl::display3D::_Context3D::SamplerState_obj::__alloc( HX_CTX );
HXLINE(  86)				this->samplerParameters->__get(i).StaticCast<  ::openfl::display3D::_Context3D::SamplerState >()->wrap = ::openfl::display3D::Context3DWrapMode_obj::CLAMP_dyn();
HXLINE(  87)				this->samplerParameters->__get(i).StaticCast<  ::openfl::display3D::_Context3D::SamplerState >()->filter = ::openfl::display3D::Context3DTextureFilter_obj::LINEAR_dyn();
HXLINE(  88)				this->samplerParameters->__get(i).StaticCast<  ::openfl::display3D::_Context3D::SamplerState >()->mipfilter = ::openfl::display3D::Context3DMipFilter_obj::MIPNONE_dyn();
            			}
            		}
HXLINE(  92)		 ::openfl::_legacy::display::Stage stage = ::openfl::_legacy::Lib_obj::get_current()->get_stage();
HXLINE(  94)		this->ogl =  ::openfl::_legacy::display::OpenGLView_obj::__alloc( HX_CTX );
HXLINE(  95)		 ::openfl::_legacy::display::OpenGLView _hx_tmp1 = this->ogl;
HXDLIN(  95)		int _hx_tmp2 = stage->get_stageWidth();
HXDLIN(  95)		_hx_tmp1->set_scrollRect( ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,_hx_tmp2,stage->get_stageHeight()));
HXLINE(  96)		this->scrollRect = this->ogl->get_scrollRect()->clone();
HXLINE(  97)		 ::openfl::_legacy::display::OpenGLView _hx_tmp3 = this->ogl;
HXDLIN(  97)		_hx_tmp3->set_width(stage->get_stageWidth());
HXLINE(  98)		 ::openfl::_legacy::display::OpenGLView _hx_tmp4 = this->ogl;
HXDLIN(  98)		_hx_tmp4->set_height(stage->get_stageHeight());
HXLINE( 100)		stage->addChildAt(this->ogl,(int)0);
            	}

Dynamic Context3D_obj::__CreateEmpty() { return new Context3D_obj; }

void *Context3D_obj::_hx_vtable = 0;

Dynamic Context3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Context3D_obj > _hx_result = new Context3D_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Context3D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6271873d;
}

void Context3D_obj::clear(hx::Null< Float >  __o_red,hx::Null< Float >  __o_green,hx::Null< Float >  __o_blue,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_depth,hx::Null< int >  __o_stencil,hx::Null< int >  __o_mask){
Float red = __o_red.Default(0);
Float green = __o_green.Default(0);
Float blue = __o_blue.Default(0);
Float alpha = __o_alpha.Default(1);
Float depth = __o_depth.Default(1);
int stencil = __o_stencil.Default(0);
int mask = __o_mask.Default(17664);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_109_clear)
HXLINE( 111)		if (!(this->drawing)) {
HXLINE( 113)			this->_hx___updateBlendStatus();
HXLINE( 114)			this->drawing = true;
            		}
HXLINE( 119)		::openfl::_legacy::gl::GL_obj::lime_gl_depth_mask(true);
HXLINE( 124)		::openfl::_legacy::gl::GL_obj::lime_gl_clear_color(red,green,blue,alpha);
HXLINE( 125)		::openfl::_legacy::gl::GL_obj::lime_gl_clear_depth(depth);
HXLINE( 126)		::openfl::_legacy::gl::GL_obj::lime_gl_clear_stencil(stencil);
HXLINE( 128)		::openfl::_legacy::gl::GL_obj::lime_gl_clear(mask);
            	}


HX_DEFINE_DYNAMIC_FUNC7(Context3D_obj,clear,(void))

void Context3D_obj::configureBackBuffer(int width,int height,int antiAlias,hx::Null< bool >  __o_enableDepthAndStencil){
bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(true);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_136_configureBackBuffer)
HXLINE( 138)		this->backBufferDepthAndStencil = enableDepthAndStencil;
HXLINE( 139)		this->updateDepthAndStencilState();
HXLINE( 142)		this->setBackBufferViewPort(null(),null(),width,height);
HXLINE( 143)		this->updateScissorRectangle();
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,configureBackBuffer,(void))

void Context3D_obj::setBackBufferViewPort( ::Dynamic x, ::Dynamic y, ::Dynamic width, ::Dynamic height){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_147_setBackBufferViewPort)
HXLINE( 149)		if (hx::IsNull( x )) {
HXLINE( 149)			x = ::Std_obj::_hx_int(this->scrollRect->x);
            		}
HXLINE( 150)		if (hx::IsNull( y )) {
HXLINE( 150)			y = ::Std_obj::_hx_int(this->scrollRect->y);
            		}
HXLINE( 151)		if (hx::IsNull( width )) {
HXLINE( 151)			width = ::Std_obj::_hx_int(this->scrollRect->width);
            		}
HXLINE( 152)		if (hx::IsNull( height )) {
HXLINE( 152)			height = ::Std_obj::_hx_int(this->scrollRect->height);
            		}
HXLINE( 154)		this->scrollRect->x = x;
HXLINE( 155)		this->scrollRect->y = y;
HXLINE( 156)		this->scrollRect->width = width;
HXLINE( 157)		this->scrollRect->height = height;
HXLINE( 158)		 ::openfl::_legacy::display::OpenGLView _hx_tmp = this->ogl;
HXDLIN( 158)		_hx_tmp->set_width((x + width));
HXLINE( 159)		 ::openfl::_legacy::display::OpenGLView _hx_tmp1 = this->ogl;
HXDLIN( 159)		_hx_tmp1->set_height((y + height));
HXLINE( 161)		this->updateBackBufferViewPort();
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setBackBufferViewPort,(void))

void Context3D_obj::updateBackBufferViewPort(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_167_updateBackBufferViewPort)
HXDLIN( 167)		if (!(this->renderToTexture)) {
HXLINE( 169)			int x = ::Std_obj::_hx_int(this->scrollRect->x);
HXDLIN( 169)			int y = ::Std_obj::_hx_int(this->scrollRect->y);
HXDLIN( 169)			int width = ::Std_obj::_hx_int(this->scrollRect->width);
HXDLIN( 169)			int height = ::Std_obj::_hx_int(this->scrollRect->height);
HXDLIN( 169)			::openfl::_legacy::gl::GL_obj::lime_gl_viewport(x,y,width,height);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,updateBackBufferViewPort,(void))

void Context3D_obj::updateDepthAndStencilState(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_175_updateDepthAndStencilState)
HXLINE( 178)		bool depthAndStencil;
HXDLIN( 178)		if (this->renderToTexture) {
HXLINE( 178)			depthAndStencil = this->rttDepthAndStencil;
            		}
            		else {
HXLINE( 178)			depthAndStencil = this->backBufferDepthAndStencil;
            		}
HXLINE( 196)		::openfl::_legacy::gl::GL_obj::lime_gl_disable((int)2929);
HXLINE( 197)		::openfl::_legacy::gl::GL_obj::lime_gl_disable((int)2960);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,updateDepthAndStencilState,(void))

 ::openfl::display3D::textures::CubeTexture Context3D_obj::createCubeTexture(int size, ::openfl::display3D::Context3DTextureFormat format,bool optimizeForRenderToTexture,hx::Null< int >  __o_streamingLevels){
int streamingLevels = __o_streamingLevels.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_201_createCubeTexture)
HXLINE( 203)		int texture = ::openfl::_legacy::gl::GL_obj::get_version();
HXDLIN( 203)		 ::openfl::display3D::textures::CubeTexture texture1 =  ::openfl::display3D::textures::CubeTexture_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this), ::openfl::_legacy::gl::GLTexture_obj::__alloc( HX_CTX ,texture,::openfl::_legacy::gl::GL_obj::lime_gl_create_texture()),size);
HXLINE( 204)		this->texturesCreated->push(texture1);
HXLINE( 205)		return texture1;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,createCubeTexture,return )

 ::openfl::display3D::IndexBuffer3D Context3D_obj::createIndexBuffer(int numIndices, ::openfl::display3D::Context3DBufferUsage bufferUsage){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_210_createIndexBuffer)
HXLINE( 212)		if (hx::IsNull( bufferUsage )) {
HXLINE( 212)			bufferUsage = ::openfl::display3D::Context3DBufferUsage_obj::STATIC_DRAW_dyn();
            		}
HXLINE( 213)		int indexBuffer = ::openfl::_legacy::gl::GL_obj::get_version();
HXDLIN( 213)		 ::Dynamic indexBuffer1 = ::openfl::_legacy::gl::GL_obj::lime_gl_create_buffer();
HXDLIN( 213)		int indexBuffer2;
HXDLIN( 213)		if (hx::IsEq( bufferUsage,::openfl::display3D::Context3DBufferUsage_obj::STATIC_DRAW_dyn() )) {
HXLINE( 213)			indexBuffer2 = (int)35044;
            		}
            		else {
HXLINE( 213)			indexBuffer2 = (int)35048;
            		}
HXDLIN( 213)		 ::openfl::display3D::IndexBuffer3D indexBuffer3 =  ::openfl::display3D::IndexBuffer3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this), ::openfl::_legacy::gl::GLBuffer_obj::__alloc( HX_CTX ,indexBuffer,indexBuffer1),numIndices,indexBuffer2);
HXLINE( 214)		this->indexBuffersCreated->push(indexBuffer3);
HXLINE( 215)		return indexBuffer3;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,createIndexBuffer,return )

 ::openfl::display3D::Program3D Context3D_obj::createProgram(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_220_createProgram)
HXLINE( 222)		int program = ::openfl::_legacy::gl::GL_obj::get_version();
HXDLIN( 222)		 ::openfl::display3D::Program3D program1 =  ::openfl::display3D::Program3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this), ::openfl::_legacy::gl::GLProgram_obj::__alloc( HX_CTX ,program,::openfl::_legacy::gl::GL_obj::lime_gl_create_program()));
HXLINE( 223)		this->programsCreated->push(program1);
HXLINE( 224)		return program1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,createProgram,return )

 ::openfl::display3D::textures::RectangleTexture Context3D_obj::createRectangleTexture(int width,int height, ::openfl::display3D::Context3DTextureFormat format,bool optimizeForRenderToTexture){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_229_createRectangleTexture)
HXLINE( 231)		int texture = ::openfl::_legacy::gl::GL_obj::get_version();
HXDLIN( 231)		 ::openfl::display3D::textures::RectangleTexture texture1 =  ::openfl::display3D::textures::RectangleTexture_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this), ::openfl::_legacy::gl::GLTexture_obj::__alloc( HX_CTX ,texture,::openfl::_legacy::gl::GL_obj::lime_gl_create_texture()),optimizeForRenderToTexture,width,height);
HXLINE( 232)		this->texturesCreated->push(texture1);
HXLINE( 233)		return texture1;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,createRectangleTexture,return )

 ::openfl::display3D::textures::Texture Context3D_obj::createTexture(int width,int height, ::openfl::display3D::Context3DTextureFormat format,bool optimizeForRenderToTexture,hx::Null< int >  __o_streamingLevels){
int streamingLevels = __o_streamingLevels.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_238_createTexture)
HXLINE( 240)		int texture = ::openfl::_legacy::gl::GL_obj::get_version();
HXDLIN( 240)		 ::openfl::display3D::textures::Texture texture1 =  ::openfl::display3D::textures::Texture_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this), ::openfl::_legacy::gl::GLTexture_obj::__alloc( HX_CTX ,texture,::openfl::_legacy::gl::GL_obj::lime_gl_create_texture()),optimizeForRenderToTexture,width,height);
HXLINE( 241)		this->texturesCreated->push(texture1);
HXLINE( 242)		return texture1;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,createTexture,return )

 ::openfl::display3D::VertexBuffer3D Context3D_obj::createVertexBuffer(int numVertices,int data32PerVertex, ::openfl::display3D::Context3DBufferUsage bufferUsage){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_247_createVertexBuffer)
HXLINE( 249)		if (hx::IsNull( bufferUsage )) {
HXLINE( 249)			bufferUsage = ::openfl::display3D::Context3DBufferUsage_obj::STATIC_DRAW_dyn();
            		}
HXLINE( 250)		int vertexBuffer = ::openfl::_legacy::gl::GL_obj::get_version();
HXDLIN( 250)		 ::Dynamic vertexBuffer1 = ::openfl::_legacy::gl::GL_obj::lime_gl_create_buffer();
HXDLIN( 250)		int vertexBuffer2;
HXDLIN( 250)		if (hx::IsEq( bufferUsage,::openfl::display3D::Context3DBufferUsage_obj::STATIC_DRAW_dyn() )) {
HXLINE( 250)			vertexBuffer2 = (int)35044;
            		}
            		else {
HXLINE( 250)			vertexBuffer2 = (int)35048;
            		}
HXDLIN( 250)		 ::openfl::display3D::VertexBuffer3D vertexBuffer3 =  ::openfl::display3D::VertexBuffer3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this), ::openfl::_legacy::gl::GLBuffer_obj::__alloc( HX_CTX ,vertexBuffer,vertexBuffer1),numVertices,data32PerVertex,vertexBuffer2);
HXLINE( 251)		this->vertexBuffersCreated->push(vertexBuffer3);
HXLINE( 252)		return vertexBuffer3;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,createVertexBuffer,return )

void Context3D_obj::_hx___deleteTexture( ::openfl::display3D::textures::TextureBase texture){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_257___deleteTexture)
HXLINE( 259)		if (hx::IsNull( texture->glTexture )) {
HXLINE( 260)			return;
            		}
HXLINE( 261)		this->texturesCreated->remove(texture);
HXLINE( 262)		{
HXLINE( 262)			 ::openfl::_legacy::gl::GLTexture texture1 = texture->glTexture;
HXDLIN( 262)			::openfl::_legacy::gl::GL_obj::lime_gl_delete_texture(texture1->id);
HXDLIN( 262)			texture1->invalidate();
            		}
HXLINE( 263)		texture->glTexture = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___deleteTexture,(void))

void Context3D_obj::_hx___deleteVertexBuffer( ::openfl::display3D::VertexBuffer3D buffer){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_268___deleteVertexBuffer)
HXLINE( 270)		if (hx::IsNull( buffer->glBuffer )) {
HXLINE( 271)			return;
            		}
HXLINE( 272)		this->vertexBuffersCreated->remove(buffer);
HXLINE( 273)		{
HXLINE( 273)			 ::openfl::_legacy::gl::GLBuffer buffer1 = buffer->glBuffer;
HXDLIN( 273)			::openfl::_legacy::gl::GL_obj::lime_gl_delete_buffer(buffer1->id);
HXDLIN( 273)			buffer1->invalidate();
            		}
HXLINE( 274)		buffer->glBuffer = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___deleteVertexBuffer,(void))

void Context3D_obj::_hx___deleteIndexBuffer( ::openfl::display3D::IndexBuffer3D buffer){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_279___deleteIndexBuffer)
HXLINE( 281)		if (hx::IsNull( buffer->glBuffer )) {
HXLINE( 282)			return;
            		}
HXLINE( 283)		this->indexBuffersCreated->remove(buffer);
HXLINE( 284)		{
HXLINE( 284)			 ::openfl::_legacy::gl::GLBuffer buffer1 = buffer->glBuffer;
HXDLIN( 284)			::openfl::_legacy::gl::GL_obj::lime_gl_delete_buffer(buffer1->id);
HXDLIN( 284)			buffer1->invalidate();
            		}
HXLINE( 285)		buffer->glBuffer = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___deleteIndexBuffer,(void))

void Context3D_obj::_hx___deleteProgram( ::openfl::display3D::Program3D program){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_290___deleteProgram)
HXLINE( 292)		if (hx::IsNull( program->glProgram )) {
HXLINE( 293)			return;
            		}
HXLINE( 294)		this->programsCreated->remove(program);
HXLINE( 295)		{
HXLINE( 295)			 ::openfl::_legacy::gl::GLProgram program1 = program->glProgram;
HXDLIN( 295)			::openfl::_legacy::gl::GL_obj::lime_gl_delete_program(program1->id);
HXDLIN( 295)			program1->invalidate();
            		}
HXLINE( 296)		program->glProgram = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___deleteProgram,(void))

void Context3D_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_301_dispose)
HXLINE( 306)		{
HXLINE( 306)			int _g = (int)0;
HXDLIN( 306)			::Array< ::Dynamic> _g1 = this->vertexBuffersCreated;
HXDLIN( 306)			while((_g < _g1->length)){
HXLINE( 306)				 ::openfl::display3D::VertexBuffer3D vertexBuffer = _g1->__get(_g).StaticCast<  ::openfl::display3D::VertexBuffer3D >();
HXDLIN( 306)				_g = (_g + (int)1);
HXLINE( 308)				vertexBuffer->dispose();
            			}
            		}
HXLINE( 312)		this->vertexBuffersCreated = null();
HXLINE( 314)		{
HXLINE( 314)			int _g2 = (int)0;
HXDLIN( 314)			::Array< ::Dynamic> _g11 = this->indexBuffersCreated;
HXDLIN( 314)			while((_g2 < _g11->length)){
HXLINE( 314)				 ::openfl::display3D::IndexBuffer3D indexBuffer = _g11->__get(_g2).StaticCast<  ::openfl::display3D::IndexBuffer3D >();
HXDLIN( 314)				_g2 = (_g2 + (int)1);
HXLINE( 316)				indexBuffer->dispose();
            			}
            		}
HXLINE( 320)		this->indexBuffersCreated = null();
HXLINE( 322)		{
HXLINE( 322)			int _g3 = (int)0;
HXDLIN( 322)			::Array< ::Dynamic> _g12 = this->programsCreated;
HXDLIN( 322)			while((_g3 < _g12->length)){
HXLINE( 322)				 ::openfl::display3D::Program3D program = _g12->__get(_g3).StaticCast<  ::openfl::display3D::Program3D >();
HXDLIN( 322)				_g3 = (_g3 + (int)1);
HXLINE( 324)				program->dispose();
            			}
            		}
HXLINE( 328)		this->programsCreated = null();
HXLINE( 330)		this->samplerParameters = null();
HXLINE( 332)		{
HXLINE( 332)			int _g4 = (int)0;
HXDLIN( 332)			::Array< ::Dynamic> _g13 = this->texturesCreated;
HXDLIN( 332)			while((_g4 < _g13->length)){
HXLINE( 332)				 ::openfl::display3D::textures::TextureBase texture = _g13->__get(_g4).StaticCast<  ::openfl::display3D::textures::TextureBase >();
HXDLIN( 332)				_g4 = (_g4 + (int)1);
HXLINE( 334)				texture->dispose();
            			}
            		}
HXLINE( 338)		this->texturesCreated = null();
HXLINE( 340)		if (hx::IsNotNull( this->framebuffer )) {
HXLINE( 342)			{
HXLINE( 342)				 ::openfl::_legacy::gl::GLFramebuffer framebuffer = this->framebuffer;
HXDLIN( 342)				::openfl::_legacy::gl::GL_obj::lime_gl_delete_framebuffer(framebuffer->id);
HXDLIN( 342)				framebuffer->invalidate();
            			}
HXLINE( 343)			this->framebuffer = null();
            		}
HXLINE( 347)		if (hx::IsNotNull( this->renderbuffer )) {
HXLINE( 349)			::openfl::_legacy::gl::GL_obj::deleteRenderbuffer(this->renderbuffer);
HXLINE( 350)			this->renderbuffer = null();
            		}
HXLINE( 354)		this->disposed = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,dispose,(void))

void Context3D_obj::drawToBitmapData( ::openfl::_legacy::display::BitmapData destination){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_359_drawToBitmapData)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,drawToBitmapData,(void))

void Context3D_obj::drawTriangles( ::openfl::display3D::IndexBuffer3D indexBuffer,hx::Null< int >  __o_firstIndex,hx::Null< int >  __o_numTriangles){
int firstIndex = __o_firstIndex.Default(0);
int numTriangles = __o_numTriangles.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_366_drawTriangles)
HXLINE( 368)		 ::Dynamic location = ::openfl::_legacy::gl::GL_obj::lime_gl_get_uniform_location(this->currentProgram->glProgram->id,HX_("yflip",a6,43,3a,ef));
HXLINE( 369)		::openfl::_legacy::gl::GL_obj::lime_gl_uniform1f(location,this->_yFlip);
HXLINE( 371)		if (!(this->drawing)) {
HXLINE( 373)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Need to clear before drawing if the buffer has not been cleared since the last present() call.",69,af,70,74),null()));
            		}
HXLINE( 377)		int numIndices;
HXLINE( 379)		if ((numTriangles == (int)-1)) {
HXLINE( 381)			numIndices = indexBuffer->numIndices;
            		}
            		else {
HXLINE( 385)			numIndices = (numTriangles * (int)3);
            		}
HXLINE( 389)		int byteOffset = (firstIndex * (int)2);
HXLINE( 391)		{
HXLINE( 391)			 ::openfl::_legacy::gl::GLBuffer buffer = indexBuffer->glBuffer;
HXDLIN( 391)			 ::Dynamic _hx_tmp;
HXDLIN( 391)			if (hx::IsNull( buffer )) {
HXLINE( 391)				_hx_tmp = null();
            			}
            			else {
HXLINE( 391)				_hx_tmp = buffer->id;
            			}
HXDLIN( 391)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_buffer((int)34963,_hx_tmp);
            		}
HXLINE( 392)		::openfl::_legacy::gl::GL_obj::lime_gl_draw_elements((int)4,numIndices,(int)5123,byteOffset);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,drawTriangles,(void))

void Context3D_obj::present(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_397_present)
HXLINE( 399)		this->drawing = false;
HXLINE( 400)		::openfl::_legacy::gl::GL_obj::lime_gl_use_program(null());
HXLINE( 402)		::openfl::_legacy::gl::GL_obj::lime_gl_bind_buffer((int)34962,null());
HXLINE( 403)		::openfl::_legacy::gl::GL_obj::lime_gl_disable((int)2884);
HXLINE( 405)		if (hx::IsNotNull( this->framebuffer )) {
HXLINE( 407)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_framebuffer((int)36160,null());
            		}
HXLINE( 411)		if (hx::IsNotNull( this->renderbuffer )) {
HXLINE( 413)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_renderbuffer((int)36161,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,present,(void))

void Context3D_obj::removeRenderMethod( ::Dynamic func){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_422_removeRenderMethod)
HXDLIN( 422)		this->ogl->render = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,removeRenderMethod,(void))

void Context3D_obj::setBlendFactors(int sourceFactor,int destinationFactor){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_427_setBlendFactors)
HXLINE( 431)		this->blendEnabled = true;
HXLINE( 432)		this->blendSourceFactor = sourceFactor;
HXLINE( 433)		this->blendDestinationFactor = destinationFactor;
HXLINE( 435)		this->_hx___updateBlendStatus();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setBlendFactors,(void))

void Context3D_obj::setColorMask(bool red,bool green,bool blue,bool alpha){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_442_setColorMask)
HXDLIN( 442)		::openfl::_legacy::gl::GL_obj::lime_gl_color_mask(red,green,blue,alpha);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setColorMask,(void))

void Context3D_obj::setCulling(int triangleFaceToCull){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_448_setCulling)
HXLINE( 452)		if ((triangleFaceToCull == (int)0)) {
HXLINE( 454)			::openfl::_legacy::gl::GL_obj::lime_gl_disable((int)2884);
            		}
            		else {
HXLINE( 458)			::openfl::_legacy::gl::GL_obj::lime_gl_enable((int)2884);
HXLINE( 460)			switch((int)(triangleFaceToCull)){
            				case (int)1028: {
HXLINE( 463)					::openfl::_legacy::gl::GL_obj::lime_gl_cull_face((int)1028);
            				}
            				break;
            				case (int)1029: {
HXLINE( 462)					::openfl::_legacy::gl::GL_obj::lime_gl_cull_face((int)1029);
            				}
            				break;
            				case (int)1032: {
HXLINE( 464)					::openfl::_legacy::gl::GL_obj::lime_gl_cull_face((int)1032);
            				}
            				break;
            				default:{
HXLINE( 465)					HX_STACK_DO_THROW(HX_("Unknown Context3DTriangleFace type.",03,2c,78,96));
            				}
            			}
            		}
HXLINE( 471)		switch((int)(triangleFaceToCull)){
            			case (int)0: {
HXLINE( 487)				this->_yFlip = (int)1;
            			}
            			break;
            			case (int)1028: {
HXLINE( 479)				this->_yFlip = (int)1;
            			}
            			break;
            			case (int)1029: {
HXLINE( 475)				this->_yFlip = (int)-1;
            			}
            			break;
            			case (int)1032: {
HXLINE( 483)				this->_yFlip = (int)1;
            			}
            			break;
            			default:{
HXLINE( 491)				HX_STACK_DO_THROW(((HX_("Unknown culling mode ",77,22,39,68) + triangleFaceToCull) + HX_(".",2e,00,00,00)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setCulling,(void))

void Context3D_obj::setDepthTest(bool depthMask,int passCompareMode){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_497_setDepthTest)
HXLINE( 501)		::openfl::_legacy::gl::GL_obj::lime_gl_depth_func(passCompareMode);
HXLINE( 502)		::openfl::_legacy::gl::GL_obj::lime_gl_depth_mask(depthMask);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setDepthTest,(void))

void Context3D_obj::setGLSLProgramConstantsFromByteArray(::String locationName, ::openfl::_legacy::utils::ByteArray data,hx::Null< int >  __o_byteArrayOffset){
int byteArrayOffset = __o_byteArrayOffset.Default(0);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_507_setGLSLProgramConstantsFromByteArray)
HXLINE( 509)		data->position = byteArrayOffset;
HXLINE( 510)		 ::Dynamic location = ::openfl::_legacy::gl::GL_obj::lime_gl_get_uniform_location(this->currentProgram->glProgram->id,locationName);
HXLINE( 511)		{
HXLINE( 511)			Float x = data->readFloat();
HXDLIN( 511)			Float y = data->readFloat();
HXDLIN( 511)			Float z = data->readFloat();
HXDLIN( 511)			Float w = data->readFloat();
HXDLIN( 511)			::openfl::_legacy::gl::GL_obj::lime_gl_uniform4f(location,x,y,z,w);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,setGLSLProgramConstantsFromByteArray,(void))

void Context3D_obj::setGLSLProgramConstantsFromMatrix(::String locationName, ::openfl::geom::Matrix3D matrix,hx::Null< bool >  __o_transposedMatrix){
bool transposedMatrix = __o_transposedMatrix.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_516_setGLSLProgramConstantsFromMatrix)
HXLINE( 518)		 ::Dynamic location = ::openfl::_legacy::gl::GL_obj::lime_gl_get_uniform_location(this->currentProgram->glProgram->id,locationName);
HXLINE( 519)		{
HXLINE( 519)			 ::Dynamic _hx_tmp = hx::ClassOf< ::openfl::_legacy::gl::GL >();
HXDLIN( 519)			 ::openfl::_legacy::utils::ByteArray _hx_tmp1 =  ::openfl::_legacy::utils::Float32Array_obj::__alloc( HX_CTX ,matrix->rawData,null(),null())->getByteBuffer();
HXDLIN( 519)			::openfl::_legacy::gl::GL_obj::lime_gl_uniform_matrix(location,!(transposedMatrix),_hx_tmp1,(int)4);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,setGLSLProgramConstantsFromMatrix,(void))

void Context3D_obj::setGLSLProgramConstantsFromVector4(::String locationName,::Array< Float > data,hx::Null< int >  __o_startIndex){
int startIndex = __o_startIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_524_setGLSLProgramConstantsFromVector4)
HXLINE( 526)		 ::Dynamic location = ::openfl::_legacy::gl::GL_obj::lime_gl_get_uniform_location(this->currentProgram->glProgram->id,locationName);
HXLINE( 527)		 ::Dynamic _hx_tmp = hx::ClassOf< ::openfl::_legacy::gl::GL >();
HXDLIN( 527)		::openfl::_legacy::gl::GL_obj::lime_gl_uniform4f(location,data->__get(startIndex),data->__get((startIndex + (int)1)),data->__get((startIndex + (int)2)),data->__get((startIndex + (int)3)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,setGLSLProgramConstantsFromVector4,(void))

void Context3D_obj::setGLSLTextureAt(::String locationName, ::openfl::display3D::textures::TextureBase texture,int textureIndex){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_532_setGLSLTextureAt)
HXLINE( 534)		switch((int)(textureIndex)){
            			case (int)0: {
HXLINE( 536)				::openfl::_legacy::gl::GL_obj::lime_gl_active_texture((int)33984);
            			}
            			break;
            			case (int)1: {
HXLINE( 537)				::openfl::_legacy::gl::GL_obj::lime_gl_active_texture((int)33985);
            			}
            			break;
            			case (int)2: {
HXLINE( 538)				::openfl::_legacy::gl::GL_obj::lime_gl_active_texture((int)33986);
            			}
            			break;
            			case (int)3: {
HXLINE( 539)				::openfl::_legacy::gl::GL_obj::lime_gl_active_texture((int)33987);
            			}
            			break;
            			case (int)4: {
HXLINE( 540)				::openfl::_legacy::gl::GL_obj::lime_gl_active_texture((int)33988);
            			}
            			break;
            			case (int)5: {
HXLINE( 541)				::openfl::_legacy::gl::GL_obj::lime_gl_active_texture((int)33989);
            			}
            			break;
            			case (int)6: {
HXLINE( 542)				::openfl::_legacy::gl::GL_obj::lime_gl_active_texture((int)33990);
            			}
            			break;
            			case (int)7: {
HXLINE( 543)				::openfl::_legacy::gl::GL_obj::lime_gl_active_texture((int)33991);
            			}
            			break;
            			default:{
HXLINE( 545)				HX_STACK_DO_THROW(HX_("Does not support texture8 or more",14,7f,ab,80));
            			}
            		}
HXLINE( 549)		if (hx::IsNull( texture )) {
HXLINE( 551)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_texture((int)3553,null());
HXLINE( 552)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_texture((int)34067,null());
HXLINE( 553)			return;
            		}
HXLINE( 557)		 ::Dynamic location = ::openfl::_legacy::gl::GL_obj::lime_gl_get_uniform_location(this->currentProgram->glProgram->id,locationName);
HXLINE( 559)		if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::Texture >())) {
HXLINE( 561)			{
HXLINE( 561)				 ::openfl::_legacy::gl::GLTexture texture1 = texture->glTexture;
HXDLIN( 561)				 ::Dynamic _hx_tmp;
HXDLIN( 561)				if (hx::IsNull( texture1 )) {
HXLINE( 561)					_hx_tmp = null();
            				}
            				else {
HXLINE( 561)					_hx_tmp = texture1->id;
            				}
HXDLIN( 561)				::openfl::_legacy::gl::GL_obj::lime_gl_bind_texture((int)3553,_hx_tmp);
            			}
HXLINE( 562)			::openfl::_legacy::gl::GL_obj::lime_gl_uniform1i(location,textureIndex);
            		}
            		else {
HXLINE( 564)			if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::RectangleTexture >())) {
HXLINE( 566)				{
HXLINE( 566)					 ::openfl::_legacy::gl::GLTexture texture2 = texture->glTexture;
HXDLIN( 566)					 ::Dynamic _hx_tmp1;
HXDLIN( 566)					if (hx::IsNull( texture2 )) {
HXLINE( 566)						_hx_tmp1 = null();
            					}
            					else {
HXLINE( 566)						_hx_tmp1 = texture2->id;
            					}
HXDLIN( 566)					::openfl::_legacy::gl::GL_obj::lime_gl_bind_texture((int)3553,_hx_tmp1);
            				}
HXLINE( 567)				::openfl::_legacy::gl::GL_obj::lime_gl_uniform1i(location,textureIndex);
            			}
            			else {
HXLINE( 569)				if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::CubeTexture >())) {
HXLINE( 571)					{
HXLINE( 571)						 ::openfl::_legacy::gl::GLTexture texture3 = texture->glTexture;
HXDLIN( 571)						 ::Dynamic _hx_tmp2;
HXDLIN( 571)						if (hx::IsNull( texture3 )) {
HXLINE( 571)							_hx_tmp2 = null();
            						}
            						else {
HXLINE( 571)							_hx_tmp2 = texture3->id;
            						}
HXDLIN( 571)						::openfl::_legacy::gl::GL_obj::lime_gl_bind_texture((int)34067,_hx_tmp2);
            					}
HXLINE( 572)					::openfl::_legacy::gl::GL_obj::lime_gl_uniform1i(location,textureIndex);
            				}
            				else {
HXLINE( 576)					HX_STACK_DO_THROW(((HX_("Texture of type ",62,88,46,ef) + ::Type_obj::getClassName(::Type_obj::getClass(texture))) + HX_(" not supported yet",49,2e,29,7d)));
            				}
            			}
            		}
HXLINE( 580)		 ::openfl::display3D::_Context3D::SamplerState parameters = this->samplerParameters->__get(textureIndex).StaticCast<  ::openfl::display3D::_Context3D::SamplerState >();
HXLINE( 582)		if (hx::IsNotNull( parameters )) {
HXLINE( 584)			this->setTextureParameters(texture,parameters->wrap,parameters->filter,parameters->mipfilter);
            		}
            		else {
HXLINE( 588)			this->setTextureParameters(texture,::openfl::display3D::Context3DWrapMode_obj::CLAMP_dyn(),::openfl::display3D::Context3DTextureFilter_obj::NEAREST_dyn(),::openfl::display3D::Context3DMipFilter_obj::MIPNONE_dyn());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,setGLSLTextureAt,(void))

void Context3D_obj::setGLSLVertexBufferAt(::String locationName, ::openfl::display3D::VertexBuffer3D buffer,hx::Null< int >  __o_bufferOffset, ::openfl::display3D::Context3DVertexBufferFormat format){
int bufferOffset = __o_bufferOffset.Default(0);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_595_setGLSLVertexBufferAt)
HXLINE( 597)		int location;
HXDLIN( 597)		bool location1;
HXDLIN( 597)		if (hx::IsNotNull( this->currentProgram )) {
HXLINE( 597)			location1 = hx::IsNotNull( this->currentProgram->glProgram );
            		}
            		else {
HXLINE( 597)			location1 = false;
            		}
HXDLIN( 597)		if (location1) {
HXLINE( 597)			location = ( (int)(::openfl::_legacy::gl::GL_obj::lime_gl_get_attrib_location(this->currentProgram->glProgram->id,locationName)) );
            		}
            		else {
HXLINE( 597)			location = (int)-1;
            		}
HXLINE( 598)		if ((location == (int)-1)) {
HXLINE( 598)			return;
            		}
HXLINE( 600)		if (hx::IsNull( buffer )) {
HXLINE( 602)			if ((location > (int)-1)) {
HXLINE( 604)				::openfl::_legacy::gl::GL_obj::lime_gl_disable_vertex_attrib_array(location);
HXLINE( 607)				::openfl::_legacy::gl::GL_obj::lime_gl_bind_buffer((int)34962,null());
            			}
HXLINE( 612)			return;
            		}
HXLINE( 616)		{
HXLINE( 616)			 ::openfl::_legacy::gl::GLBuffer buffer1 = buffer->glBuffer;
HXDLIN( 616)			 ::Dynamic _hx_tmp;
HXDLIN( 616)			if (hx::IsNull( buffer1 )) {
HXLINE( 616)				_hx_tmp = null();
            			}
            			else {
HXLINE( 616)				_hx_tmp = buffer1->id;
            			}
HXDLIN( 616)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_buffer((int)34962,_hx_tmp);
            		}
HXLINE( 618)		int dimension = (int)4;
HXLINE( 619)		int type = (int)5126;
HXLINE( 620)		int numBytes = (int)4;
HXLINE( 622)		if (hx::IsEq( format,::openfl::display3D::Context3DVertexBufferFormat_obj::BYTES_4_dyn() )) {
HXLINE( 624)			dimension = (int)4;
HXLINE( 625)			type = (int)5126;
HXLINE( 626)			numBytes = (int)4;
            		}
            		else {
HXLINE( 628)			if (hx::IsEq( format,::openfl::display3D::Context3DVertexBufferFormat_obj::FLOAT_1_dyn() )) {
HXLINE( 630)				dimension = (int)1;
HXLINE( 631)				type = (int)5126;
HXLINE( 632)				numBytes = (int)4;
            			}
            			else {
HXLINE( 634)				if (hx::IsEq( format,::openfl::display3D::Context3DVertexBufferFormat_obj::FLOAT_2_dyn() )) {
HXLINE( 636)					dimension = (int)2;
HXLINE( 637)					type = (int)5126;
HXLINE( 638)					numBytes = (int)4;
            				}
            				else {
HXLINE( 640)					if (hx::IsEq( format,::openfl::display3D::Context3DVertexBufferFormat_obj::FLOAT_3_dyn() )) {
HXLINE( 642)						dimension = (int)3;
HXLINE( 643)						type = (int)5126;
HXLINE( 644)						numBytes = (int)4;
            					}
            					else {
HXLINE( 646)						if (hx::IsEq( format,::openfl::display3D::Context3DVertexBufferFormat_obj::FLOAT_4_dyn() )) {
HXLINE( 648)							dimension = (int)4;
HXLINE( 649)							type = (int)5126;
HXLINE( 650)							numBytes = (int)4;
            						}
            						else {
HXLINE( 654)							HX_STACK_DO_THROW(((HX_("Buffer format ",09,56,ec,6e) + ::Std_obj::string(format)) + HX_(" is not supported",4b,1e,c6,51)));
            						}
            					}
            				}
            			}
            		}
HXLINE( 658)		::openfl::_legacy::gl::GL_obj::lime_gl_enable_vertex_attrib_array(location);
HXLINE( 659)		{
HXLINE( 659)			 ::Dynamic _hx_tmp1 = hx::ClassOf< ::openfl::_legacy::gl::GL >();
HXDLIN( 659)			::openfl::_legacy::gl::GL_obj::lime_gl_vertex_attrib_pointer(location,dimension,type,false,(buffer->data32PerVertex * numBytes),(bufferOffset * numBytes));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setGLSLVertexBufferAt,(void))

void Context3D_obj::setProgram( ::openfl::display3D::Program3D program3D){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_664_setProgram)
HXLINE( 666)		 ::openfl::_legacy::gl::GLProgram glProgram = null();
HXLINE( 668)		if (hx::IsNotNull( program3D )) {
HXLINE( 670)			glProgram = program3D->glProgram;
            		}
HXLINE( 674)		 ::Dynamic _hx_tmp;
HXDLIN( 674)		if (hx::IsNull( glProgram )) {
HXLINE( 674)			_hx_tmp = null();
            		}
            		else {
HXLINE( 674)			_hx_tmp = glProgram->id;
            		}
HXDLIN( 674)		::openfl::_legacy::gl::GL_obj::lime_gl_use_program(_hx_tmp);
HXLINE( 675)		this->currentProgram = program3D;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setProgram,(void))

void Context3D_obj::setProgramConstantsFromByteArray( ::openfl::display3D::Context3DProgramType programType,int firstRegister,int numRegisters, ::openfl::_legacy::utils::ByteArray data,int byteArrayOffset){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_682_setProgramConstantsFromByteArray)
HXLINE( 684)		data->position = byteArrayOffset;
HXLINE( 686)		{
HXLINE( 686)			int _g1 = (int)0;
HXDLIN( 686)			int _g = numRegisters;
HXDLIN( 686)			while((_g1 < _g)){
HXLINE( 686)				_g1 = (_g1 + (int)1);
HXDLIN( 686)				int i = (_g1 - (int)1);
HXLINE( 688)				::String locationName = this->_hx___getUniformLocationNameFromAgalRegisterIndex(programType,(firstRegister + i));
HXLINE( 689)				this->setGLSLProgramConstantsFromByteArray(locationName,data,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,setProgramConstantsFromByteArray,(void))

void Context3D_obj::setProgramConstantsFromMatrix( ::openfl::display3D::Context3DProgramType programType,int firstRegister, ::openfl::geom::Matrix3D matrix,hx::Null< bool >  __o_transposedMatrix){
bool transposedMatrix = __o_transposedMatrix.Default(false);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_696_setProgramConstantsFromMatrix)
HXLINE( 701)		::Array< Float > d = matrix->rawData;
HXLINE( 702)		if (transposedMatrix) {
HXLINE( 703)			this->setProgramConstantsFromVector(programType,firstRegister,::Array_obj< Float >::__new(4)->init(0,d->__get((int)0))->init(1,d->__get((int)4))->init(2,d->__get((int)8))->init(3,d->__get((int)12)),(int)1);
HXLINE( 704)			this->setProgramConstantsFromVector(programType,(firstRegister + (int)1),::Array_obj< Float >::__new(4)->init(0,d->__get((int)1))->init(1,d->__get((int)5))->init(2,d->__get((int)9))->init(3,d->__get((int)13)),(int)1);
HXLINE( 705)			this->setProgramConstantsFromVector(programType,(firstRegister + (int)2),::Array_obj< Float >::__new(4)->init(0,d->__get((int)2))->init(1,d->__get((int)6))->init(2,d->__get((int)10))->init(3,d->__get((int)14)),(int)1);
HXLINE( 706)			this->setProgramConstantsFromVector(programType,(firstRegister + (int)3),::Array_obj< Float >::__new(4)->init(0,d->__get((int)3))->init(1,d->__get((int)7))->init(2,d->__get((int)11))->init(3,d->__get((int)15)),(int)1);
            		}
            		else {
HXLINE( 708)			this->setProgramConstantsFromVector(programType,firstRegister,::Array_obj< Float >::__new(4)->init(0,d->__get((int)0))->init(1,d->__get((int)1))->init(2,d->__get((int)2))->init(3,d->__get((int)3)),(int)1);
HXLINE( 709)			this->setProgramConstantsFromVector(programType,(firstRegister + (int)1),::Array_obj< Float >::__new(4)->init(0,d->__get((int)4))->init(1,d->__get((int)5))->init(2,d->__get((int)6))->init(3,d->__get((int)7)),(int)1);
HXLINE( 710)			this->setProgramConstantsFromVector(programType,(firstRegister + (int)2),::Array_obj< Float >::__new(4)->init(0,d->__get((int)8))->init(1,d->__get((int)9))->init(2,d->__get((int)10))->init(3,d->__get((int)11)),(int)1);
HXLINE( 711)			this->setProgramConstantsFromVector(programType,(firstRegister + (int)3),::Array_obj< Float >::__new(4)->init(0,d->__get((int)12))->init(1,d->__get((int)13))->init(2,d->__get((int)14))->init(3,d->__get((int)15)),(int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setProgramConstantsFromMatrix,(void))

void Context3D_obj::setProgramConstantsFromVector( ::openfl::display3D::Context3DProgramType programType,int firstRegister,::Array< Float > data,hx::Null< int >  __o_numRegisters){
int numRegisters = __o_numRegisters.Default(1);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_719_setProgramConstantsFromVector)
HXDLIN( 719)		int _g1 = (int)0;
HXDLIN( 719)		int _g = numRegisters;
HXDLIN( 719)		while((_g1 < _g)){
HXDLIN( 719)			_g1 = (_g1 + (int)1);
HXDLIN( 719)			int i = (_g1 - (int)1);
HXLINE( 721)			int currentIndex = (i * (int)4);
HXLINE( 722)			::String locationName = this->_hx___getUniformLocationNameFromAgalRegisterIndex(programType,(firstRegister + i));
HXLINE( 723)			this->setGLSLProgramConstantsFromVector4(locationName,data,currentIndex);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setProgramConstantsFromVector,(void))

void Context3D_obj::setRenderMethod( ::Dynamic func){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,func) HXARGC(1)
            		void _hx_run( ::openfl::_legacy::geom::Rectangle rect){
            			HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_734_setRenderMethod)
HXDLIN( 734)			func(null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_734_setRenderMethod)
HXDLIN( 734)		this->ogl->render =  ::Dynamic(new _hx_Closure_0(func));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setRenderMethod,(void))

void Context3D_obj::setRenderToBackBuffer(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_739_setRenderToBackBuffer)
HXLINE( 741)		::openfl::_legacy::gl::GL_obj::lime_gl_disable((int)2929);
HXLINE( 742)		::openfl::_legacy::gl::GL_obj::lime_gl_disable((int)2960);
HXLINE( 743)		::openfl::_legacy::gl::GL_obj::lime_gl_disable((int)3089);
HXLINE( 744)		::openfl::_legacy::gl::GL_obj::lime_gl_bind_framebuffer((int)36160,null());
HXLINE( 746)		if (hx::IsNotNull( this->framebuffer )) {
HXLINE( 748)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_framebuffer((int)36160,null());
            		}
HXLINE( 752)		if (hx::IsNotNull( this->renderbuffer )) {
HXLINE( 754)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_renderbuffer((int)36161,null());
            		}
HXLINE( 758)		this->renderToTexture = false;
HXLINE( 759)		this->updateBackBufferViewPort();
HXLINE( 760)		this->updateScissorRectangle();
HXLINE( 761)		this->updateDepthAndStencilState();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,setRenderToBackBuffer,(void))

void Context3D_obj::setRenderToTexture( ::openfl::display3D::textures::TextureBase texture,hx::Null< bool >  __o_enableDepthAndStencil,hx::Null< int >  __o_antiAlias,hx::Null< int >  __o_surfaceSelector){
bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(false);
int antiAlias = __o_antiAlias.Default(0);
int surfaceSelector = __o_surfaceSelector.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_765_setRenderToTexture)
HXLINE( 769)		if (hx::IsNull( this->framebuffer )) {
HXLINE( 771)			int _hx_tmp = ::openfl::_legacy::gl::GL_obj::get_version();
HXDLIN( 771)			this->framebuffer =  ::openfl::_legacy::gl::GLFramebuffer_obj::__alloc( HX_CTX ,_hx_tmp,::openfl::_legacy::gl::GL_obj::lime_gl_create_framebuffer());
            		}
HXLINE( 775)		{
HXLINE( 775)			 ::openfl::_legacy::gl::GLFramebuffer framebuffer = this->framebuffer;
HXDLIN( 775)			 ::Dynamic _hx_tmp1;
HXDLIN( 775)			if (hx::IsNull( framebuffer )) {
HXLINE( 775)				_hx_tmp1 = null();
            			}
            			else {
HXLINE( 775)				_hx_tmp1 = framebuffer->id;
            			}
HXDLIN( 775)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_framebuffer((int)36160,_hx_tmp1);
            		}
HXLINE( 777)		if (hx::IsNull( this->renderbuffer )) {
HXLINE( 779)			int _hx_tmp2 = ::openfl::_legacy::gl::GL_obj::get_version();
HXDLIN( 779)			this->renderbuffer =  ::openfl::_legacy::gl::GLRenderbuffer_obj::__alloc( HX_CTX ,_hx_tmp2,::openfl::_legacy::gl::GL_obj::lime_gl_create_render_buffer());
            		}
HXLINE( 783)		{
HXLINE( 783)			 ::openfl::_legacy::gl::GLRenderbuffer renderbuffer = this->renderbuffer;
HXDLIN( 783)			 ::Dynamic _hx_tmp3;
HXDLIN( 783)			if (hx::IsNull( renderbuffer )) {
HXLINE( 783)				_hx_tmp3 = null();
            			}
            			else {
HXLINE( 783)				_hx_tmp3 = renderbuffer->id;
            			}
HXDLIN( 783)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_renderbuffer((int)36161,_hx_tmp3);
            		}
HXLINE( 789)		::openfl::_legacy::gl::GL_obj::lime_gl_renderbuffer_storage((int)36161,(int)6408,texture->width,texture->height);
HXLINE( 791)		::openfl::_legacy::gl::GL_obj::lime_gl_framebuffer_texture2D((int)36160,(int)36064,(int)3553,texture->glTexture->id,(int)0);
HXLINE( 793)		::openfl::_legacy::gl::GL_obj::lime_gl_renderbuffer_storage((int)36161,(int)34041,texture->width,texture->height);
HXLINE( 794)		::openfl::_legacy::gl::GL_obj::lime_gl_framebuffer_renderbuffer((int)36160,(int)33306,(int)36161,this->renderbuffer->id);
HXLINE( 796)		if (enableDepthAndStencil) {
HXLINE( 798)			::openfl::_legacy::gl::GL_obj::lime_gl_enable((int)2929);
HXLINE( 799)			::openfl::_legacy::gl::GL_obj::lime_gl_enable((int)2960);
            		}
HXLINE( 802)		{
HXLINE( 802)			 ::openfl::_legacy::gl::GLTexture texture1 = texture->glTexture;
HXDLIN( 802)			 ::Dynamic _hx_tmp4;
HXDLIN( 802)			if (hx::IsNull( texture1 )) {
HXLINE( 802)				_hx_tmp4 = null();
            			}
            			else {
HXLINE( 802)				_hx_tmp4 = texture1->id;
            			}
HXDLIN( 802)			::openfl::_legacy::gl::GL_obj::lime_gl_bind_texture((int)3553,_hx_tmp4);
            		}
HXLINE( 803)		::openfl::_legacy::gl::GL_obj::lime_gl_tex_image_2d((int)3553,(int)0,(int)6408,texture->width,texture->height,(int)0,(int)6408,(int)5121,null(),null());
HXLINE( 804)		::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10240,(int)9729);
HXLINE( 805)		::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10241,(int)9985);
HXLINE( 807)		::openfl::_legacy::gl::GL_obj::lime_gl_viewport((int)0,(int)0,texture->width,texture->height);
HXLINE( 809)		this->renderToTexture = true;
HXLINE( 810)		this->rttDepthAndStencil = enableDepthAndStencil;
HXLINE( 811)		this->rttWidth = texture->width;
HXLINE( 812)		this->rttHeight = texture->height;
HXLINE( 813)		this->updateScissorRectangle();
HXLINE( 814)		this->updateDepthAndStencilState();
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setRenderToTexture,(void))

void Context3D_obj::setSamplerStateAt(int sampler, ::openfl::display3D::Context3DWrapMode wrap, ::openfl::display3D::Context3DTextureFilter filter, ::openfl::display3D::Context3DMipFilter mipfilter){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_822_setSamplerStateAt)
HXDLIN( 822)		bool _hx_tmp;
HXDLIN( 822)		if (((int)0 <= sampler)) {
HXDLIN( 822)			_hx_tmp = (sampler < ::openfl::display3D::Context3D_obj::MAX_SAMPLERS);
            		}
            		else {
HXDLIN( 822)			_hx_tmp = false;
            		}
HXDLIN( 822)		if (_hx_tmp) {
HXLINE( 824)			this->samplerParameters->__get(sampler).StaticCast<  ::openfl::display3D::_Context3D::SamplerState >()->wrap = wrap;
HXLINE( 825)			this->samplerParameters->__get(sampler).StaticCast<  ::openfl::display3D::_Context3D::SamplerState >()->filter = filter;
HXLINE( 826)			this->samplerParameters->__get(sampler).StaticCast<  ::openfl::display3D::_Context3D::SamplerState >()->mipfilter = mipfilter;
            		}
            		else {
HXLINE( 830)			HX_STACK_DO_THROW(HX_("Sampler is out of bounds.",a0,80,e1,15));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setSamplerStateAt,(void))

void Context3D_obj::setScissorRectangle( ::openfl::_legacy::geom::Rectangle rectangle){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_837_setScissorRectangle)
HXLINE( 840)		this->scissorRectangle = rectangle;
HXLINE( 842)		if (hx::IsNull( rectangle )) {
HXLINE( 844)			::openfl::_legacy::gl::GL_obj::lime_gl_disable((int)3089);
HXLINE( 845)			return;
            		}
HXLINE( 849)		::openfl::_legacy::gl::GL_obj::lime_gl_enable((int)3089);
HXLINE( 850)		this->updateScissorRectangle();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setScissorRectangle,(void))

void Context3D_obj::updateScissorRectangle(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_855_updateScissorRectangle)
HXLINE( 857)		if (hx::IsNull( this->scissorRectangle )) {
HXLINE( 858)			return;
            		}
HXLINE( 861)		int height;
HXDLIN( 861)		if (this->renderToTexture) {
HXLINE( 861)			height = this->rttHeight;
            		}
            		else {
HXLINE( 861)			height = ::Std_obj::_hx_int(this->scrollRect->height);
            		}
HXLINE( 862)		{
HXLINE( 862)			int x = ::Std_obj::_hx_int(this->scissorRectangle->x);
HXLINE( 863)			int y = (height - ::Std_obj::_hx_int(this->scissorRectangle->y));
HXLINE( 862)			int y1 = ::Std_obj::_hx_int((y - ::Std_obj::_hx_int(this->scissorRectangle->height)));
HXDLIN( 862)			int width = ::Std_obj::_hx_int(this->scissorRectangle->width);
HXDLIN( 862)			int height1 = ::Std_obj::_hx_int(this->scissorRectangle->height);
HXDLIN( 862)			::openfl::_legacy::gl::GL_obj::lime_gl_scissor(x,y1,width,height1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,updateScissorRectangle,(void))

void Context3D_obj::setStencilActions( ::Dynamic triangleFace, ::Dynamic compareMode, ::Dynamic actionOnBothPass, ::Dynamic actionOnDepthFail, ::Dynamic actionOnDepthPassStencilFail){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_870_setStencilActions)
HXLINE( 872)		int this1 = compareMode;
HXDLIN( 872)		this->stencilCompareMode = this1;
HXLINE( 873)		::openfl::_legacy::gl::GL_obj::lime_gl_stencil_op(actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail);
HXLINE( 874)		::openfl::_legacy::gl::GL_obj::lime_gl_stencil_func(this->stencilCompareMode,this->stencilRef,this->stencilReadMask);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,setStencilActions,(void))

void Context3D_obj::setStencilReferenceValue(int referenceValue,hx::Null< int >  __o_readMask,hx::Null< int >  __o_writeMask){
int readMask = __o_readMask.Default(255);
int writeMask = __o_writeMask.Default(255);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_879_setStencilReferenceValue)
HXLINE( 881)		this->stencilReadMask = readMask;
HXLINE( 882)		this->stencilRef = referenceValue;
HXLINE( 884)		::openfl::_legacy::gl::GL_obj::lime_gl_stencil_func(this->stencilCompareMode,this->stencilRef,this->stencilReadMask);
HXLINE( 885)		::openfl::_legacy::gl::GL_obj::lime_gl_stencil_mask(writeMask);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,setStencilReferenceValue,(void))

void Context3D_obj::setTextureAt(int sampler, ::openfl::display3D::textures::TextureBase texture){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_890_setTextureAt)
HXLINE( 892)		::String locationName = (HX_("fs",4d,59,00,00) + sampler);
HXLINE( 893)		this->setGLSLTextureAt(locationName,texture,sampler);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setTextureAt,(void))

void Context3D_obj::setTextureParameters( ::openfl::display3D::textures::TextureBase texture, ::openfl::display3D::Context3DWrapMode wrap, ::openfl::display3D::Context3DTextureFilter filter, ::openfl::display3D::Context3DMipFilter mipfilter){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_898_setTextureParameters)
HXLINE( 900)		if (!(::openfl::display3D::Context3D_obj::anisotropySupportTested)) {
HXLINE( 904)			::Array< ::String > result = ::Array_obj< ::String >::__new();
HXDLIN( 904)			::openfl::_legacy::gl::GL_obj::lime_gl_get_supported_extensions(result);
HXDLIN( 904)			::openfl::display3D::Context3D_obj::supportsAnisotropy = (result->indexOf(HX_("GL_EXT_texture_filter_anisotropic",66,5c,79,db),null()) != (int)-1);
HXLINE( 906)			if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE( 910)				::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,::openfl::display3D::Context3D_obj::maxSupportedAnisotropy);
            			}
HXLINE( 927)			::openfl::display3D::Context3D_obj::anisotropySupportTested = true;
            		}
HXLINE( 931)		if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::Texture >())) {
HXLINE( 933)			switch((int)(_hx_getEnumValueIndex(wrap))){
            				case (int)0: {
HXLINE( 937)					::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10242,(int)33071);
HXLINE( 938)					::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10243,(int)33071);
            				}
            				break;
            				case (int)1: {
HXLINE( 942)					::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10242,(int)10497);
HXLINE( 943)					::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10243,(int)10497);
            				}
            				break;
            			}
HXLINE( 950)			switch((int)(_hx_getEnumValueIndex(filter))){
            				case (int)0: {
HXLINE( 966)					if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE( 967)						Float param;
HXDLIN( 967)						int a = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN( 967)						bool aNeg = ((int)2 < (int)0);
HXDLIN( 967)						bool bNeg = (a < (int)0);
HXDLIN( 967)						bool param1;
HXDLIN( 967)						if ((aNeg != bNeg)) {
HXLINE( 967)							param1 = aNeg;
            						}
            						else {
HXLINE( 967)							param1 = ((int)2 > a);
            						}
HXDLIN( 967)						if (param1) {
HXLINE( 967)							int _hx_int = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN( 967)							if ((_hx_int < (int)0)) {
HXLINE( 967)								param = (((Float)4294967296.0) + _hx_int);
            							}
            							else {
HXLINE( 967)								param = (_hx_int + ((Float)0.0));
            							}
            						}
            						else {
HXLINE( 967)							param = (int)2;
            						}
HXDLIN( 967)						::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameterf((int)3553,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,param);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 971)					if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE( 972)						Float param2;
HXDLIN( 972)						int a1 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN( 972)						bool aNeg1 = ((int)4 < (int)0);
HXDLIN( 972)						bool bNeg1 = (a1 < (int)0);
HXDLIN( 972)						bool param3;
HXDLIN( 972)						if ((aNeg1 != bNeg1)) {
HXLINE( 972)							param3 = aNeg1;
            						}
            						else {
HXLINE( 972)							param3 = ((int)4 > a1);
            						}
HXDLIN( 972)						if (param3) {
HXLINE( 972)							int int1 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN( 972)							if ((int1 < (int)0)) {
HXLINE( 972)								param2 = (((Float)4294967296.0) + int1);
            							}
            							else {
HXLINE( 972)								param2 = (int1 + ((Float)0.0));
            							}
            						}
            						else {
HXLINE( 972)							param2 = (int)4;
            						}
HXDLIN( 972)						::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameterf((int)3553,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,param2);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 976)					if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE( 977)						Float param4;
HXDLIN( 977)						int a2 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN( 977)						bool aNeg2 = ((int)8 < (int)0);
HXDLIN( 977)						bool bNeg2 = (a2 < (int)0);
HXDLIN( 977)						bool param5;
HXDLIN( 977)						if ((aNeg2 != bNeg2)) {
HXLINE( 977)							param5 = aNeg2;
            						}
            						else {
HXLINE( 977)							param5 = ((int)8 > a2);
            						}
HXDLIN( 977)						if (param5) {
HXLINE( 977)							int int2 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN( 977)							if ((int2 < (int)0)) {
HXLINE( 977)								param4 = (((Float)4294967296.0) + int2);
            							}
            							else {
HXLINE( 977)								param4 = (int2 + ((Float)0.0));
            							}
            						}
            						else {
HXLINE( 977)							param4 = (int)8;
            						}
HXDLIN( 977)						::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameterf((int)3553,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,param4);
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 981)					if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE( 982)						Float param6;
HXDLIN( 982)						int a3 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN( 982)						bool aNeg3 = ((int)16 < (int)0);
HXDLIN( 982)						bool bNeg3 = (a3 < (int)0);
HXDLIN( 982)						bool param7;
HXDLIN( 982)						if ((aNeg3 != bNeg3)) {
HXLINE( 982)							param7 = aNeg3;
            						}
            						else {
HXLINE( 982)							param7 = ((int)16 > a3);
            						}
HXDLIN( 982)						if (param7) {
HXLINE( 982)							int int3 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN( 982)							if ((int3 < (int)0)) {
HXLINE( 982)								param6 = (((Float)4294967296.0) + int3);
            							}
            							else {
HXLINE( 982)								param6 = (int3 + ((Float)0.0));
            							}
            						}
            						else {
HXLINE( 982)							param6 = (int)16;
            						}
HXDLIN( 982)						::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameterf((int)3553,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,param6);
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 954)					::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10240,(int)9729);
HXLINE( 955)					if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE( 956)						::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameterf((int)3553,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,(int)1);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 960)					::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10240,(int)9728);
HXLINE( 961)					if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE( 962)						::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameterf((int)3553,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,(int)1);
            					}
            				}
            				break;
            			}
HXLINE( 986)			switch((int)(_hx_getEnumValueIndex(mipfilter))){
            				case (int)0: {
HXLINE( 990)					::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10241,(int)9987);
            				}
            				break;
            				case (int)1: {
HXLINE( 994)					::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10241,(int)9984);
            				}
            				break;
            				case (int)2: {
HXLINE( 998)					int _hx_tmp;
HXDLIN( 998)					if (hx::IsEq( filter,::openfl::display3D::Context3DTextureFilter_obj::NEAREST_dyn() )) {
HXLINE( 998)						_hx_tmp = (int)9728;
            					}
            					else {
HXLINE( 998)						_hx_tmp = (int)9729;
            					}
HXDLIN( 998)					::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10241,_hx_tmp);
            				}
            				break;
            			}
HXLINE(1002)			 ::openfl::display3D::textures::Texture tex = ( ( ::openfl::display3D::textures::Texture)(texture) );
HXLINE(1003)			bool _hx_tmp1;
HXDLIN(1003)			if (hx::IsNotEq( mipfilter,::openfl::display3D::Context3DMipFilter_obj::MIPNONE_dyn() )) {
HXLINE(1003)				_hx_tmp1 = !(tex->mipmapsGenerated);
            			}
            			else {
HXLINE(1003)				_hx_tmp1 = false;
            			}
HXDLIN(1003)			if (_hx_tmp1) {
HXLINE(1004)				::openfl::_legacy::gl::GL_obj::lime_gl_generate_mipmap((int)3553);
HXLINE(1005)				tex->mipmapsGenerated = true;
            			}
            		}
            		else {
HXLINE(1009)			if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::RectangleTexture >())) {
HXLINE(1011)				::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10242,(int)33071);
HXLINE(1012)				::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10243,(int)33071);
HXLINE(1014)				switch((int)(_hx_getEnumValueIndex(filter))){
            					case (int)0: {
HXLINE(1030)						if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE(1031)							Float param8;
HXDLIN(1031)							int a4 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN(1031)							bool aNeg4 = ((int)2 < (int)0);
HXDLIN(1031)							bool bNeg4 = (a4 < (int)0);
HXDLIN(1031)							bool param9;
HXDLIN(1031)							if ((aNeg4 != bNeg4)) {
HXLINE(1031)								param9 = aNeg4;
            							}
            							else {
HXLINE(1031)								param9 = ((int)2 > a4);
            							}
HXDLIN(1031)							if (param9) {
HXLINE(1031)								int int4 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN(1031)								if ((int4 < (int)0)) {
HXLINE(1031)									param8 = (((Float)4294967296.0) + int4);
            								}
            								else {
HXLINE(1031)									param8 = (int4 + ((Float)0.0));
            								}
            							}
            							else {
HXLINE(1031)								param8 = (int)2;
            							}
HXDLIN(1031)							::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameterf((int)3553,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,param8);
            						}
            					}
            					break;
            					case (int)1: {
HXLINE(1035)						if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE(1036)							Float param10;
HXDLIN(1036)							int a5 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN(1036)							bool aNeg5 = ((int)4 < (int)0);
HXDLIN(1036)							bool bNeg5 = (a5 < (int)0);
HXDLIN(1036)							bool param11;
HXDLIN(1036)							if ((aNeg5 != bNeg5)) {
HXLINE(1036)								param11 = aNeg5;
            							}
            							else {
HXLINE(1036)								param11 = ((int)4 > a5);
            							}
HXDLIN(1036)							if (param11) {
HXLINE(1036)								int int5 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN(1036)								if ((int5 < (int)0)) {
HXLINE(1036)									param10 = (((Float)4294967296.0) + int5);
            								}
            								else {
HXLINE(1036)									param10 = (int5 + ((Float)0.0));
            								}
            							}
            							else {
HXLINE(1036)								param10 = (int)4;
            							}
HXDLIN(1036)							::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameterf((int)3553,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,param10);
            						}
            					}
            					break;
            					case (int)2: {
HXLINE(1040)						if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE(1041)							Float param12;
HXDLIN(1041)							int a6 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN(1041)							bool aNeg6 = ((int)8 < (int)0);
HXDLIN(1041)							bool bNeg6 = (a6 < (int)0);
HXDLIN(1041)							bool param13;
HXDLIN(1041)							if ((aNeg6 != bNeg6)) {
HXLINE(1041)								param13 = aNeg6;
            							}
            							else {
HXLINE(1041)								param13 = ((int)8 > a6);
            							}
HXDLIN(1041)							if (param13) {
HXLINE(1041)								int int6 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN(1041)								if ((int6 < (int)0)) {
HXLINE(1041)									param12 = (((Float)4294967296.0) + int6);
            								}
            								else {
HXLINE(1041)									param12 = (int6 + ((Float)0.0));
            								}
            							}
            							else {
HXLINE(1041)								param12 = (int)8;
            							}
HXDLIN(1041)							::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameterf((int)3553,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,param12);
            						}
            					}
            					break;
            					case (int)3: {
HXLINE(1045)						if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE(1046)							Float param14;
HXDLIN(1046)							int a7 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN(1046)							bool aNeg7 = ((int)16 < (int)0);
HXDLIN(1046)							bool bNeg7 = (a7 < (int)0);
HXDLIN(1046)							bool param15;
HXDLIN(1046)							if ((aNeg7 != bNeg7)) {
HXLINE(1046)								param15 = aNeg7;
            							}
            							else {
HXLINE(1046)								param15 = ((int)16 > a7);
            							}
HXDLIN(1046)							if (param15) {
HXLINE(1046)								int int7 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN(1046)								if ((int7 < (int)0)) {
HXLINE(1046)									param14 = (((Float)4294967296.0) + int7);
            								}
            								else {
HXLINE(1046)									param14 = (int7 + ((Float)0.0));
            								}
            							}
            							else {
HXLINE(1046)								param14 = (int)16;
            							}
HXDLIN(1046)							::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameterf((int)3553,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,param14);
            						}
            					}
            					break;
            					case (int)4: {
HXLINE(1018)						::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10240,(int)9729);
HXLINE(1019)						if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE(1020)							::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameterf((int)3553,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,(int)1);
            						}
            					}
            					break;
            					case (int)5: {
HXLINE(1024)						::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10240,(int)9728);
HXLINE(1025)						if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE(1026)							::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameterf((int)3553,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,(int)1);
            						}
            					}
            					break;
            				}
HXLINE(1050)				int _hx_tmp2;
HXDLIN(1050)				if (hx::IsEq( filter,::openfl::display3D::Context3DTextureFilter_obj::NEAREST_dyn() )) {
HXLINE(1050)					_hx_tmp2 = (int)9728;
            				}
            				else {
HXLINE(1050)					_hx_tmp2 = (int)9729;
            				}
HXDLIN(1050)				::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)3553,(int)10241,_hx_tmp2);
            			}
            			else {
HXLINE(1052)				if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::CubeTexture >())) {
HXLINE(1054)					switch((int)(_hx_getEnumValueIndex(wrap))){
            						case (int)0: {
HXLINE(1058)							::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)34067,(int)10242,(int)33071);
HXLINE(1059)							::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)34067,(int)10243,(int)33071);
            						}
            						break;
            						case (int)1: {
HXLINE(1063)							::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)34067,(int)10242,(int)10497);
HXLINE(1064)							::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)34067,(int)10243,(int)10497);
            						}
            						break;
            					}
HXLINE(1068)					switch((int)(_hx_getEnumValueIndex(filter))){
            						case (int)0: {
HXLINE(1084)							if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE(1085)								Float param16;
HXDLIN(1085)								int a8 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN(1085)								bool aNeg8 = ((int)2 < (int)0);
HXDLIN(1085)								bool bNeg8 = (a8 < (int)0);
HXDLIN(1085)								bool param17;
HXDLIN(1085)								if ((aNeg8 != bNeg8)) {
HXLINE(1085)									param17 = aNeg8;
            								}
            								else {
HXLINE(1085)									param17 = ((int)2 > a8);
            								}
HXDLIN(1085)								if (param17) {
HXLINE(1085)									int int8 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN(1085)									if ((int8 < (int)0)) {
HXLINE(1085)										param16 = (((Float)4294967296.0) + int8);
            									}
            									else {
HXLINE(1085)										param16 = (int8 + ((Float)0.0));
            									}
            								}
            								else {
HXLINE(1085)									param16 = (int)2;
            								}
HXDLIN(1085)								::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameterf((int)34067,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,param16);
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1089)							if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE(1090)								Float param18;
HXDLIN(1090)								int a9 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN(1090)								bool aNeg9 = ((int)4 < (int)0);
HXDLIN(1090)								bool bNeg9 = (a9 < (int)0);
HXDLIN(1090)								bool param19;
HXDLIN(1090)								if ((aNeg9 != bNeg9)) {
HXLINE(1090)									param19 = aNeg9;
            								}
            								else {
HXLINE(1090)									param19 = ((int)4 > a9);
            								}
HXDLIN(1090)								if (param19) {
HXLINE(1090)									int int9 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN(1090)									if ((int9 < (int)0)) {
HXLINE(1090)										param18 = (((Float)4294967296.0) + int9);
            									}
            									else {
HXLINE(1090)										param18 = (int9 + ((Float)0.0));
            									}
            								}
            								else {
HXLINE(1090)									param18 = (int)4;
            								}
HXDLIN(1090)								::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameterf((int)34067,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,param18);
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1094)							if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE(1095)								Float param20;
HXDLIN(1095)								int a10 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN(1095)								bool aNeg10 = ((int)8 < (int)0);
HXDLIN(1095)								bool bNeg10 = (a10 < (int)0);
HXDLIN(1095)								bool param21;
HXDLIN(1095)								if ((aNeg10 != bNeg10)) {
HXLINE(1095)									param21 = aNeg10;
            								}
            								else {
HXLINE(1095)									param21 = ((int)8 > a10);
            								}
HXDLIN(1095)								if (param21) {
HXLINE(1095)									int int10 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN(1095)									if ((int10 < (int)0)) {
HXLINE(1095)										param20 = (((Float)4294967296.0) + int10);
            									}
            									else {
HXLINE(1095)										param20 = (int10 + ((Float)0.0));
            									}
            								}
            								else {
HXLINE(1095)									param20 = (int)8;
            								}
HXDLIN(1095)								::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameterf((int)34067,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,param20);
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1099)							if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE(1100)								Float param22;
HXDLIN(1100)								int a11 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN(1100)								bool aNeg11 = ((int)16 < (int)0);
HXDLIN(1100)								bool bNeg11 = (a11 < (int)0);
HXDLIN(1100)								bool param23;
HXDLIN(1100)								if ((aNeg11 != bNeg11)) {
HXLINE(1100)									param23 = aNeg11;
            								}
            								else {
HXLINE(1100)									param23 = ((int)16 > a11);
            								}
HXDLIN(1100)								if (param23) {
HXLINE(1100)									int int11 = ::openfl::display3D::Context3D_obj::maxSupportedAnisotropy;
HXDLIN(1100)									if ((int11 < (int)0)) {
HXLINE(1100)										param22 = (((Float)4294967296.0) + int11);
            									}
            									else {
HXLINE(1100)										param22 = (int11 + ((Float)0.0));
            									}
            								}
            								else {
HXLINE(1100)									param22 = (int)16;
            								}
HXDLIN(1100)								::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameterf((int)34067,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,param22);
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1072)							::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)34067,(int)10240,(int)9729);
HXLINE(1073)							if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE(1074)								::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameterf((int)34067,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,(int)1);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1078)							::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)34067,(int)10240,(int)9728);
HXLINE(1079)							if (::openfl::display3D::Context3D_obj::supportsAnisotropy) {
HXLINE(1080)								::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameterf((int)34067,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,(int)1);
            							}
            						}
            						break;
            					}
HXLINE(1104)					switch((int)(_hx_getEnumValueIndex(mipfilter))){
            						case (int)0: {
HXLINE(1108)							::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)34067,(int)10241,(int)9987);
            						}
            						break;
            						case (int)1: {
HXLINE(1112)							::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)34067,(int)10241,(int)9984);
            						}
            						break;
            						case (int)2: {
HXLINE(1116)							int _hx_tmp3;
HXDLIN(1116)							if (hx::IsEq( filter,::openfl::display3D::Context3DTextureFilter_obj::NEAREST_dyn() )) {
HXLINE(1116)								_hx_tmp3 = (int)9728;
            							}
            							else {
HXLINE(1116)								_hx_tmp3 = (int)9729;
            							}
HXDLIN(1116)							::openfl::_legacy::gl::GL_obj::lime_gl_tex_parameteri((int)34067,(int)10241,_hx_tmp3);
            						}
            						break;
            					}
HXLINE(1120)					 ::openfl::display3D::textures::CubeTexture cubetex = ( ( ::openfl::display3D::textures::CubeTexture)(texture) );
HXLINE(1121)					bool _hx_tmp4;
HXDLIN(1121)					if (hx::IsNotEq( mipfilter,::openfl::display3D::Context3DMipFilter_obj::MIPNONE_dyn() )) {
HXLINE(1121)						_hx_tmp4 = !(cubetex->mipmapsGenerated);
            					}
            					else {
HXLINE(1121)						_hx_tmp4 = false;
            					}
HXDLIN(1121)					if (_hx_tmp4) {
HXLINE(1122)						::openfl::_legacy::gl::GL_obj::lime_gl_generate_mipmap((int)34067);
HXLINE(1123)						cubetex->mipmapsGenerated = true;
            					}
            				}
            				else {
HXLINE(1128)					HX_STACK_DO_THROW(((HX_("Texture of type ",62,88,46,ef) + ::Type_obj::getClassName(::Type_obj::getClass(texture))) + HX_(" not supported yet",49,2e,29,7d)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setTextureParameters,(void))

void Context3D_obj::setVertexBufferAt(int index, ::openfl::display3D::VertexBuffer3D buffer,hx::Null< int >  __o_bufferOffset, ::openfl::display3D::Context3DVertexBufferFormat format){
int bufferOffset = __o_bufferOffset.Default(0);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1135_setVertexBufferAt)
HXLINE(1137)		::String locationName = (HX_("va",2b,67,00,00) + index);
HXLINE(1138)		this->setGLSLVertexBufferAt(locationName,buffer,bufferOffset,format);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setVertexBufferAt,(void))

::String Context3D_obj::_hx___getUniformLocationNameFromAgalRegisterIndex( ::openfl::display3D::Context3DProgramType programType,int firstRegister){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1143___getUniformLocationNameFromAgalRegisterIndex)
HXLINE(1145)		if (hx::IsEq( programType,::openfl::display3D::Context3DProgramType_obj::VERTEX_dyn() )) {
HXLINE(1147)			return (HX_("vc",2d,67,00,00) + firstRegister);
            		}
            		else {
HXLINE(1149)			if (hx::IsEq( programType,::openfl::display3D::Context3DProgramType_obj::FRAGMENT_dyn() )) {
HXLINE(1151)				return (HX_("fc",3d,59,00,00) + firstRegister);
            			}
            		}
HXLINE(1155)		HX_STACK_DO_THROW(((HX_("Program Type ",4a,c1,72,1b) + ::Std_obj::string(programType)) + HX_(" not supported",c1,3c,82,53)));
HXDLIN(1155)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,_hx___getUniformLocationNameFromAgalRegisterIndex,return )

void Context3D_obj::_hx___updateBlendStatus(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1164___updateBlendStatus)
HXDLIN(1164)		if (this->blendEnabled) {
HXLINE(1166)			::openfl::_legacy::gl::GL_obj::lime_gl_enable((int)3042);
HXLINE(1167)			::openfl::_legacy::gl::GL_obj::lime_gl_blend_equation((int)32774);
HXLINE(1168)			::openfl::_legacy::gl::GL_obj::lime_gl_blend_func(this->blendSourceFactor,this->blendDestinationFactor);
            		}
            		else {
HXLINE(1172)			::openfl::_legacy::gl::GL_obj::lime_gl_disable((int)3042);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___updateBlendStatus,(void))

int Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT;

int Context3D_obj::MAX_SAMPLERS;

int Context3D_obj::MAX_TEXTURE_MAX_ANISOTROPY_EXT;

bool Context3D_obj::anisotropySupportTested;

bool Context3D_obj::supportsAnisotropy;

int Context3D_obj::maxSupportedAnisotropy;


hx::ObjectPtr< Context3D_obj > Context3D_obj::__new() {
	hx::ObjectPtr< Context3D_obj > __this = new Context3D_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Context3D_obj > Context3D_obj::__alloc(hx::Ctx *_hx_ctx) {
	Context3D_obj *__this = (Context3D_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Context3D_obj), true, "openfl.display3D.Context3D"));
	*(void **)__this = Context3D_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Context3D_obj::Context3D_obj()
{
}

void Context3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Context3D);
	HX_MARK_MEMBER_NAME(driverInfo,"driverInfo");
	HX_MARK_MEMBER_NAME(enableErrorChecking,"enableErrorChecking");
	HX_MARK_MEMBER_NAME(blendDestinationFactor,"blendDestinationFactor");
	HX_MARK_MEMBER_NAME(blendEnabled,"blendEnabled");
	HX_MARK_MEMBER_NAME(blendSourceFactor,"blendSourceFactor");
	HX_MARK_MEMBER_NAME(currentProgram,"currentProgram");
	HX_MARK_MEMBER_NAME(disposed,"disposed");
	HX_MARK_MEMBER_NAME(drawing,"drawing");
	HX_MARK_MEMBER_NAME(framebuffer,"framebuffer");
	HX_MARK_MEMBER_NAME(indexBuffersCreated,"indexBuffersCreated");
	HX_MARK_MEMBER_NAME(ogl,"ogl");
	HX_MARK_MEMBER_NAME(programsCreated,"programsCreated");
	HX_MARK_MEMBER_NAME(renderbuffer,"renderbuffer");
	HX_MARK_MEMBER_NAME(samplerParameters,"samplerParameters");
	HX_MARK_MEMBER_NAME(scrollRect,"scrollRect");
	HX_MARK_MEMBER_NAME(stencilbuffer,"stencilbuffer");
	HX_MARK_MEMBER_NAME(stencilCompareMode,"stencilCompareMode");
	HX_MARK_MEMBER_NAME(stencilRef,"stencilRef");
	HX_MARK_MEMBER_NAME(stencilReadMask,"stencilReadMask");
	HX_MARK_MEMBER_NAME(texturesCreated,"texturesCreated");
	HX_MARK_MEMBER_NAME(vertexBuffersCreated,"vertexBuffersCreated");
	HX_MARK_MEMBER_NAME(_yFlip,"_yFlip");
	HX_MARK_MEMBER_NAME(backBufferDepthAndStencil,"backBufferDepthAndStencil");
	HX_MARK_MEMBER_NAME(rttDepthAndStencil,"rttDepthAndStencil");
	HX_MARK_MEMBER_NAME(scissorRectangle,"scissorRectangle");
	HX_MARK_MEMBER_NAME(renderToTexture,"renderToTexture");
	HX_MARK_MEMBER_NAME(rttWidth,"rttWidth");
	HX_MARK_MEMBER_NAME(rttHeight,"rttHeight");
	HX_MARK_END_CLASS();
}

void Context3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(driverInfo,"driverInfo");
	HX_VISIT_MEMBER_NAME(enableErrorChecking,"enableErrorChecking");
	HX_VISIT_MEMBER_NAME(blendDestinationFactor,"blendDestinationFactor");
	HX_VISIT_MEMBER_NAME(blendEnabled,"blendEnabled");
	HX_VISIT_MEMBER_NAME(blendSourceFactor,"blendSourceFactor");
	HX_VISIT_MEMBER_NAME(currentProgram,"currentProgram");
	HX_VISIT_MEMBER_NAME(disposed,"disposed");
	HX_VISIT_MEMBER_NAME(drawing,"drawing");
	HX_VISIT_MEMBER_NAME(framebuffer,"framebuffer");
	HX_VISIT_MEMBER_NAME(indexBuffersCreated,"indexBuffersCreated");
	HX_VISIT_MEMBER_NAME(ogl,"ogl");
	HX_VISIT_MEMBER_NAME(programsCreated,"programsCreated");
	HX_VISIT_MEMBER_NAME(renderbuffer,"renderbuffer");
	HX_VISIT_MEMBER_NAME(samplerParameters,"samplerParameters");
	HX_VISIT_MEMBER_NAME(scrollRect,"scrollRect");
	HX_VISIT_MEMBER_NAME(stencilbuffer,"stencilbuffer");
	HX_VISIT_MEMBER_NAME(stencilCompareMode,"stencilCompareMode");
	HX_VISIT_MEMBER_NAME(stencilRef,"stencilRef");
	HX_VISIT_MEMBER_NAME(stencilReadMask,"stencilReadMask");
	HX_VISIT_MEMBER_NAME(texturesCreated,"texturesCreated");
	HX_VISIT_MEMBER_NAME(vertexBuffersCreated,"vertexBuffersCreated");
	HX_VISIT_MEMBER_NAME(_yFlip,"_yFlip");
	HX_VISIT_MEMBER_NAME(backBufferDepthAndStencil,"backBufferDepthAndStencil");
	HX_VISIT_MEMBER_NAME(rttDepthAndStencil,"rttDepthAndStencil");
	HX_VISIT_MEMBER_NAME(scissorRectangle,"scissorRectangle");
	HX_VISIT_MEMBER_NAME(renderToTexture,"renderToTexture");
	HX_VISIT_MEMBER_NAME(rttWidth,"rttWidth");
	HX_VISIT_MEMBER_NAME(rttHeight,"rttHeight");
}

hx::Val Context3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ogl") ) { return hx::Val( ogl ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_yFlip") ) { return hx::Val( _yFlip ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"drawing") ) { return hx::Val( drawing ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"present") ) { return hx::Val( present_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"disposed") ) { return hx::Val( disposed ); }
		if (HX_FIELD_EQ(inName,"rttWidth") ) { return hx::Val( rttWidth ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rttHeight") ) { return hx::Val( rttHeight ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"driverInfo") ) { return hx::Val( driverInfo ); }
		if (HX_FIELD_EQ(inName,"scrollRect") ) { return hx::Val( scrollRect ); }
		if (HX_FIELD_EQ(inName,"stencilRef") ) { return hx::Val( stencilRef ); }
		if (HX_FIELD_EQ(inName,"setCulling") ) { return hx::Val( setCulling_dyn() ); }
		if (HX_FIELD_EQ(inName,"setProgram") ) { return hx::Val( setProgram_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"framebuffer") ) { return hx::Val( framebuffer ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"blendEnabled") ) { return hx::Val( blendEnabled ); }
		if (HX_FIELD_EQ(inName,"renderbuffer") ) { return hx::Val( renderbuffer ); }
		if (HX_FIELD_EQ(inName,"setColorMask") ) { return hx::Val( setColorMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"setDepthTest") ) { return hx::Val( setDepthTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextureAt") ) { return hx::Val( setTextureAt_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stencilbuffer") ) { return hx::Val( stencilbuffer ); }
		if (HX_FIELD_EQ(inName,"createProgram") ) { return hx::Val( createProgram_dyn() ); }
		if (HX_FIELD_EQ(inName,"createTexture") ) { return hx::Val( createTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return hx::Val( drawTriangles_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentProgram") ) { return hx::Val( currentProgram ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"programsCreated") ) { return hx::Val( programsCreated ); }
		if (HX_FIELD_EQ(inName,"stencilReadMask") ) { return hx::Val( stencilReadMask ); }
		if (HX_FIELD_EQ(inName,"texturesCreated") ) { return hx::Val( texturesCreated ); }
		if (HX_FIELD_EQ(inName,"renderToTexture") ) { return hx::Val( renderToTexture ); }
		if (HX_FIELD_EQ(inName,"__deleteTexture") ) { return hx::Val( _hx___deleteTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"__deleteProgram") ) { return hx::Val( _hx___deleteProgram_dyn() ); }
		if (HX_FIELD_EQ(inName,"setBlendFactors") ) { return hx::Val( setBlendFactors_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRenderMethod") ) { return hx::Val( setRenderMethod_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"scissorRectangle") ) { return hx::Val( scissorRectangle ); }
		if (HX_FIELD_EQ(inName,"drawToBitmapData") ) { return hx::Val( drawToBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"setGLSLTextureAt") ) { return hx::Val( setGLSLTextureAt_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"blendSourceFactor") ) { return hx::Val( blendSourceFactor ); }
		if (HX_FIELD_EQ(inName,"samplerParameters") ) { return hx::Val( samplerParameters ); }
		if (HX_FIELD_EQ(inName,"createCubeTexture") ) { return hx::Val( createCubeTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"createIndexBuffer") ) { return hx::Val( createIndexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSamplerStateAt") ) { return hx::Val( setSamplerStateAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"setStencilActions") ) { return hx::Val( setStencilActions_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVertexBufferAt") ) { return hx::Val( setVertexBufferAt_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"stencilCompareMode") ) { return hx::Val( stencilCompareMode ); }
		if (HX_FIELD_EQ(inName,"rttDepthAndStencil") ) { return hx::Val( rttDepthAndStencil ); }
		if (HX_FIELD_EQ(inName,"createVertexBuffer") ) { return hx::Val( createVertexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeRenderMethod") ) { return hx::Val( removeRenderMethod_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRenderToTexture") ) { return hx::Val( setRenderToTexture_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"enableErrorChecking") ) { return hx::Val( enableErrorChecking ); }
		if (HX_FIELD_EQ(inName,"indexBuffersCreated") ) { return hx::Val( indexBuffersCreated ); }
		if (HX_FIELD_EQ(inName,"configureBackBuffer") ) { return hx::Val( configureBackBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__deleteIndexBuffer") ) { return hx::Val( _hx___deleteIndexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScissorRectangle") ) { return hx::Val( setScissorRectangle_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateBlendStatus") ) { return hx::Val( _hx___updateBlendStatus_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"vertexBuffersCreated") ) { return hx::Val( vertexBuffersCreated ); }
		if (HX_FIELD_EQ(inName,"__deleteVertexBuffer") ) { return hx::Val( _hx___deleteVertexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextureParameters") ) { return hx::Val( setTextureParameters_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"setBackBufferViewPort") ) { return hx::Val( setBackBufferViewPort_dyn() ); }
		if (HX_FIELD_EQ(inName,"setGLSLVertexBufferAt") ) { return hx::Val( setGLSLVertexBufferAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRenderToBackBuffer") ) { return hx::Val( setRenderToBackBuffer_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"blendDestinationFactor") ) { return hx::Val( blendDestinationFactor ); }
		if (HX_FIELD_EQ(inName,"createRectangleTexture") ) { return hx::Val( createRectangleTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateScissorRectangle") ) { return hx::Val( updateScissorRectangle_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"updateBackBufferViewPort") ) { return hx::Val( updateBackBufferViewPort_dyn() ); }
		if (HX_FIELD_EQ(inName,"setStencilReferenceValue") ) { return hx::Val( setStencilReferenceValue_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"backBufferDepthAndStencil") ) { return hx::Val( backBufferDepthAndStencil ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"updateDepthAndStencilState") ) { return hx::Val( updateDepthAndStencilState_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromMatrix") ) { return hx::Val( setProgramConstantsFromMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromVector") ) { return hx::Val( setProgramConstantsFromVector_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromByteArray") ) { return hx::Val( setProgramConstantsFromByteArray_dyn() ); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"setGLSLProgramConstantsFromMatrix") ) { return hx::Val( setGLSLProgramConstantsFromMatrix_dyn() ); }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"setGLSLProgramConstantsFromVector4") ) { return hx::Val( setGLSLProgramConstantsFromVector4_dyn() ); }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"setGLSLProgramConstantsFromByteArray") ) { return hx::Val( setGLSLProgramConstantsFromByteArray_dyn() ); }
		break;
	case 45:
		if (HX_FIELD_EQ(inName,"__getUniformLocationNameFromAgalRegisterIndex") ) { return hx::Val( _hx___getUniformLocationNameFromAgalRegisterIndex_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Context3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"MAX_SAMPLERS") ) { outValue = ( MAX_SAMPLERS ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"supportsAnisotropy") ) { outValue = ( supportsAnisotropy ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"maxSupportedAnisotropy") ) { outValue = ( maxSupportedAnisotropy ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"anisotropySupportTested") ) { outValue = ( anisotropySupportTested ); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"TEXTURE_MAX_ANISOTROPY_EXT") ) { outValue = ( TEXTURE_MAX_ANISOTROPY_EXT ); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"MAX_TEXTURE_MAX_ANISOTROPY_EXT") ) { outValue = ( MAX_TEXTURE_MAX_ANISOTROPY_EXT ); return true; }
	}
	return false;
}

hx::Val Context3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ogl") ) { ogl=inValue.Cast<  ::openfl::_legacy::display::OpenGLView >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_yFlip") ) { _yFlip=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"drawing") ) { drawing=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"disposed") ) { disposed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rttWidth") ) { rttWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rttHeight") ) { rttHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"driverInfo") ) { driverInfo=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollRect") ) { scrollRect=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stencilRef") ) { stencilRef=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"framebuffer") ) { framebuffer=inValue.Cast<  ::openfl::_legacy::gl::GLFramebuffer >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"blendEnabled") ) { blendEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"renderbuffer") ) { renderbuffer=inValue.Cast<  ::openfl::_legacy::gl::GLRenderbuffer >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stencilbuffer") ) { stencilbuffer=inValue.Cast<  ::openfl::_legacy::gl::GLRenderbuffer >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentProgram") ) { currentProgram=inValue.Cast<  ::openfl::display3D::Program3D >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"programsCreated") ) { programsCreated=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stencilReadMask") ) { stencilReadMask=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texturesCreated") ) { texturesCreated=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"renderToTexture") ) { renderToTexture=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"scissorRectangle") ) { scissorRectangle=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"blendSourceFactor") ) { blendSourceFactor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"samplerParameters") ) { samplerParameters=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"stencilCompareMode") ) { stencilCompareMode=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rttDepthAndStencil") ) { rttDepthAndStencil=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"enableErrorChecking") ) { enableErrorChecking=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"indexBuffersCreated") ) { indexBuffersCreated=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"vertexBuffersCreated") ) { vertexBuffersCreated=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"blendDestinationFactor") ) { blendDestinationFactor=inValue.Cast< int >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"backBufferDepthAndStencil") ) { backBufferDepthAndStencil=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Context3D_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"MAX_SAMPLERS") ) { MAX_SAMPLERS=ioValue.Cast< int >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"supportsAnisotropy") ) { supportsAnisotropy=ioValue.Cast< bool >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"maxSupportedAnisotropy") ) { maxSupportedAnisotropy=ioValue.Cast< int >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"anisotropySupportTested") ) { anisotropySupportTested=ioValue.Cast< bool >(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"TEXTURE_MAX_ANISOTROPY_EXT") ) { TEXTURE_MAX_ANISOTROPY_EXT=ioValue.Cast< int >(); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"MAX_TEXTURE_MAX_ANISOTROPY_EXT") ) { MAX_TEXTURE_MAX_ANISOTROPY_EXT=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Context3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("driverInfo","\xb6","\x18","\x7b","\xe3"));
	outFields->push(HX_HCSTRING("enableErrorChecking","\x7f","\x3c","\x19","\xba"));
	outFields->push(HX_HCSTRING("blendDestinationFactor","\x6c","\x62","\xf3","\x77"));
	outFields->push(HX_HCSTRING("blendEnabled","\x30","\x60","\x70","\xad"));
	outFields->push(HX_HCSTRING("blendSourceFactor","\xfb","\x3d","\xbf","\x78"));
	outFields->push(HX_HCSTRING("currentProgram","\x4b","\xbf","\x8d","\x01"));
	outFields->push(HX_HCSTRING("disposed","\xe5","\x0a","\xa4","\x27"));
	outFields->push(HX_HCSTRING("drawing","\x5e","\x3b","\xe8","\xfb"));
	outFields->push(HX_HCSTRING("framebuffer","\xed","\x14","\x48","\x7a"));
	outFields->push(HX_HCSTRING("indexBuffersCreated","\x67","\x89","\x53","\x86"));
	outFields->push(HX_HCSTRING("ogl","\x54","\x94","\x54","\x00"));
	outFields->push(HX_HCSTRING("programsCreated","\x39","\x90","\x32","\x32"));
	outFields->push(HX_HCSTRING("renderbuffer","\xd6","\x4c","\x56","\x0b"));
	outFields->push(HX_HCSTRING("samplerParameters","\xd2","\x21","\xb5","\xf0"));
	outFields->push(HX_HCSTRING("scrollRect","\xd1","\xdb","\x66","\x09"));
	outFields->push(HX_HCSTRING("stencilbuffer","\xfc","\x1f","\xa5","\xfc"));
	outFields->push(HX_HCSTRING("stencilCompareMode","\x0c","\xb2","\x9a","\x77"));
	outFields->push(HX_HCSTRING("stencilRef","\xb7","\xb8","\x00","\xb8"));
	outFields->push(HX_HCSTRING("stencilReadMask","\x7e","\xf1","\x2b","\xe5"));
	outFields->push(HX_HCSTRING("texturesCreated","\x90","\xbd","\xd2","\x1d"));
	outFields->push(HX_HCSTRING("vertexBuffersCreated","\x39","\xf5","\x4f","\x1d"));
	outFields->push(HX_HCSTRING("_yFlip","\x07","\xb7","\xfa","\xd5"));
	outFields->push(HX_HCSTRING("backBufferDepthAndStencil","\x01","\xd0","\x42","\x4d"));
	outFields->push(HX_HCSTRING("rttDepthAndStencil","\x76","\xac","\x03","\xef"));
	outFields->push(HX_HCSTRING("scissorRectangle","\x73","\xa8","\x68","\x0c"));
	outFields->push(HX_HCSTRING("renderToTexture","\x6a","\x5a","\x1d","\xb7"));
	outFields->push(HX_HCSTRING("rttWidth","\x34","\xa2","\x26","\x0f"));
	outFields->push(HX_HCSTRING("rttHeight","\xf9","\xc3","\xf6","\xe8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Context3D_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Context3D_obj,driverInfo),HX_HCSTRING("driverInfo","\xb6","\x18","\x7b","\xe3")},
	{hx::fsBool,(int)offsetof(Context3D_obj,enableErrorChecking),HX_HCSTRING("enableErrorChecking","\x7f","\x3c","\x19","\xba")},
	{hx::fsInt,(int)offsetof(Context3D_obj,blendDestinationFactor),HX_HCSTRING("blendDestinationFactor","\x6c","\x62","\xf3","\x77")},
	{hx::fsBool,(int)offsetof(Context3D_obj,blendEnabled),HX_HCSTRING("blendEnabled","\x30","\x60","\x70","\xad")},
	{hx::fsInt,(int)offsetof(Context3D_obj,blendSourceFactor),HX_HCSTRING("blendSourceFactor","\xfb","\x3d","\xbf","\x78")},
	{hx::fsObject /*::openfl::display3D::Program3D*/ ,(int)offsetof(Context3D_obj,currentProgram),HX_HCSTRING("currentProgram","\x4b","\xbf","\x8d","\x01")},
	{hx::fsBool,(int)offsetof(Context3D_obj,disposed),HX_HCSTRING("disposed","\xe5","\x0a","\xa4","\x27")},
	{hx::fsBool,(int)offsetof(Context3D_obj,drawing),HX_HCSTRING("drawing","\x5e","\x3b","\xe8","\xfb")},
	{hx::fsObject /*::openfl::_legacy::gl::GLFramebuffer*/ ,(int)offsetof(Context3D_obj,framebuffer),HX_HCSTRING("framebuffer","\xed","\x14","\x48","\x7a")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Context3D_obj,indexBuffersCreated),HX_HCSTRING("indexBuffersCreated","\x67","\x89","\x53","\x86")},
	{hx::fsObject /*::openfl::_legacy::display::OpenGLView*/ ,(int)offsetof(Context3D_obj,ogl),HX_HCSTRING("ogl","\x54","\x94","\x54","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Context3D_obj,programsCreated),HX_HCSTRING("programsCreated","\x39","\x90","\x32","\x32")},
	{hx::fsObject /*::openfl::_legacy::gl::GLRenderbuffer*/ ,(int)offsetof(Context3D_obj,renderbuffer),HX_HCSTRING("renderbuffer","\xd6","\x4c","\x56","\x0b")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Context3D_obj,samplerParameters),HX_HCSTRING("samplerParameters","\xd2","\x21","\xb5","\xf0")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(Context3D_obj,scrollRect),HX_HCSTRING("scrollRect","\xd1","\xdb","\x66","\x09")},
	{hx::fsObject /*::openfl::_legacy::gl::GLRenderbuffer*/ ,(int)offsetof(Context3D_obj,stencilbuffer),HX_HCSTRING("stencilbuffer","\xfc","\x1f","\xa5","\xfc")},
	{hx::fsInt,(int)offsetof(Context3D_obj,stencilCompareMode),HX_HCSTRING("stencilCompareMode","\x0c","\xb2","\x9a","\x77")},
	{hx::fsInt,(int)offsetof(Context3D_obj,stencilRef),HX_HCSTRING("stencilRef","\xb7","\xb8","\x00","\xb8")},
	{hx::fsInt,(int)offsetof(Context3D_obj,stencilReadMask),HX_HCSTRING("stencilReadMask","\x7e","\xf1","\x2b","\xe5")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Context3D_obj,texturesCreated),HX_HCSTRING("texturesCreated","\x90","\xbd","\xd2","\x1d")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Context3D_obj,vertexBuffersCreated),HX_HCSTRING("vertexBuffersCreated","\x39","\xf5","\x4f","\x1d")},
	{hx::fsFloat,(int)offsetof(Context3D_obj,_yFlip),HX_HCSTRING("_yFlip","\x07","\xb7","\xfa","\xd5")},
	{hx::fsBool,(int)offsetof(Context3D_obj,backBufferDepthAndStencil),HX_HCSTRING("backBufferDepthAndStencil","\x01","\xd0","\x42","\x4d")},
	{hx::fsBool,(int)offsetof(Context3D_obj,rttDepthAndStencil),HX_HCSTRING("rttDepthAndStencil","\x76","\xac","\x03","\xef")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(Context3D_obj,scissorRectangle),HX_HCSTRING("scissorRectangle","\x73","\xa8","\x68","\x0c")},
	{hx::fsBool,(int)offsetof(Context3D_obj,renderToTexture),HX_HCSTRING("renderToTexture","\x6a","\x5a","\x1d","\xb7")},
	{hx::fsInt,(int)offsetof(Context3D_obj,rttWidth),HX_HCSTRING("rttWidth","\x34","\xa2","\x26","\x0f")},
	{hx::fsInt,(int)offsetof(Context3D_obj,rttHeight),HX_HCSTRING("rttHeight","\xf9","\xc3","\xf6","\xe8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Context3D_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,HX_HCSTRING("TEXTURE_MAX_ANISOTROPY_EXT","\x63","\xc1","\x6c","\x51")},
	{hx::fsInt,(void *) &Context3D_obj::MAX_SAMPLERS,HX_HCSTRING("MAX_SAMPLERS","\xc6","\x92","\x84","\x06")},
	{hx::fsInt,(void *) &Context3D_obj::MAX_TEXTURE_MAX_ANISOTROPY_EXT,HX_HCSTRING("MAX_TEXTURE_MAX_ANISOTROPY_EXT","\x7e","\x54","\xe7","\xa3")},
	{hx::fsBool,(void *) &Context3D_obj::anisotropySupportTested,HX_HCSTRING("anisotropySupportTested","\x3e","\xcd","\x45","\xae")},
	{hx::fsBool,(void *) &Context3D_obj::supportsAnisotropy,HX_HCSTRING("supportsAnisotropy","\xa6","\x0a","\x42","\xa9")},
	{hx::fsInt,(void *) &Context3D_obj::maxSupportedAnisotropy,HX_HCSTRING("maxSupportedAnisotropy","\x8c","\xab","\x46","\xa0")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Context3D_obj_sMemberFields[] = {
	HX_HCSTRING("driverInfo","\xb6","\x18","\x7b","\xe3"),
	HX_HCSTRING("enableErrorChecking","\x7f","\x3c","\x19","\xba"),
	HX_HCSTRING("blendDestinationFactor","\x6c","\x62","\xf3","\x77"),
	HX_HCSTRING("blendEnabled","\x30","\x60","\x70","\xad"),
	HX_HCSTRING("blendSourceFactor","\xfb","\x3d","\xbf","\x78"),
	HX_HCSTRING("currentProgram","\x4b","\xbf","\x8d","\x01"),
	HX_HCSTRING("disposed","\xe5","\x0a","\xa4","\x27"),
	HX_HCSTRING("drawing","\x5e","\x3b","\xe8","\xfb"),
	HX_HCSTRING("framebuffer","\xed","\x14","\x48","\x7a"),
	HX_HCSTRING("indexBuffersCreated","\x67","\x89","\x53","\x86"),
	HX_HCSTRING("ogl","\x54","\x94","\x54","\x00"),
	HX_HCSTRING("programsCreated","\x39","\x90","\x32","\x32"),
	HX_HCSTRING("renderbuffer","\xd6","\x4c","\x56","\x0b"),
	HX_HCSTRING("samplerParameters","\xd2","\x21","\xb5","\xf0"),
	HX_HCSTRING("scrollRect","\xd1","\xdb","\x66","\x09"),
	HX_HCSTRING("stencilbuffer","\xfc","\x1f","\xa5","\xfc"),
	HX_HCSTRING("stencilCompareMode","\x0c","\xb2","\x9a","\x77"),
	HX_HCSTRING("stencilRef","\xb7","\xb8","\x00","\xb8"),
	HX_HCSTRING("stencilReadMask","\x7e","\xf1","\x2b","\xe5"),
	HX_HCSTRING("texturesCreated","\x90","\xbd","\xd2","\x1d"),
	HX_HCSTRING("vertexBuffersCreated","\x39","\xf5","\x4f","\x1d"),
	HX_HCSTRING("_yFlip","\x07","\xb7","\xfa","\xd5"),
	HX_HCSTRING("backBufferDepthAndStencil","\x01","\xd0","\x42","\x4d"),
	HX_HCSTRING("rttDepthAndStencil","\x76","\xac","\x03","\xef"),
	HX_HCSTRING("scissorRectangle","\x73","\xa8","\x68","\x0c"),
	HX_HCSTRING("renderToTexture","\x6a","\x5a","\x1d","\xb7"),
	HX_HCSTRING("rttWidth","\x34","\xa2","\x26","\x0f"),
	HX_HCSTRING("rttHeight","\xf9","\xc3","\xf6","\xe8"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("configureBackBuffer","\x0d","\x3c","\x11","\x04"),
	HX_HCSTRING("setBackBufferViewPort","\x6f","\x86","\x32","\x73"),
	HX_HCSTRING("updateBackBufferViewPort","\x96","\x16","\xe6","\x25"),
	HX_HCSTRING("updateDepthAndStencilState","\xd2","\xe2","\xf3","\x5f"),
	HX_HCSTRING("createCubeTexture","\xca","\x46","\x30","\xc8"),
	HX_HCSTRING("createIndexBuffer","\x16","\x40","\x47","\x48"),
	HX_HCSTRING("createProgram","\xe8","\x22","\x3c","\xdc"),
	HX_HCSTRING("createRectangleTexture","\x88","\x8b","\xb3","\xf2"),
	HX_HCSTRING("createTexture","\x3f","\xa1","\x23","\x87"),
	HX_HCSTRING("createVertexBuffer","\xa0","\xec","\xc7","\x6a"),
	HX_HCSTRING("__deleteTexture","\xd0","\x94","\x1c","\x85"),
	HX_HCSTRING("__deleteVertexBuffer","\x6f","\x6b","\x3d","\x7c"),
	HX_HCSTRING("__deleteIndexBuffer","\x27","\xd0","\x4f","\x7e"),
	HX_HCSTRING("__deleteProgram","\x79","\x16","\x35","\xda"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("drawToBitmapData","\x38","\x55","\xb6","\xf4"),
	HX_HCSTRING("drawTriangles","\x07","\x44","\x68","\xde"),
	HX_HCSTRING("present","\xfb","\x3a","\xdc","\x39"),
	HX_HCSTRING("removeRenderMethod","\x3b","\x39","\xe7","\xc4"),
	HX_HCSTRING("setBlendFactors","\x35","\x4b","\xcd","\xf5"),
	HX_HCSTRING("setColorMask","\xed","\x8b","\x13","\x48"),
	HX_HCSTRING("setCulling","\xee","\x06","\x67","\xa6"),
	HX_HCSTRING("setDepthTest","\xf3","\xe2","\xcc","\xc7"),
	HX_HCSTRING("setGLSLProgramConstantsFromByteArray","\x7c","\x29","\xc4","\xae"),
	HX_HCSTRING("setGLSLProgramConstantsFromMatrix","\x56","\xa9","\x13","\x3b"),
	HX_HCSTRING("setGLSLProgramConstantsFromVector4","\x5c","\x39","\x56","\xbd"),
	HX_HCSTRING("setGLSLTextureAt","\xee","\x0b","\xfe","\x84"),
	HX_HCSTRING("setGLSLVertexBufferAt","\x57","\xec","\x78","\xa5"),
	HX_HCSTRING("setProgram","\x02","\x6f","\xd8","\x46"),
	HX_HCSTRING("setProgramConstantsFromByteArray","\x3a","\x1f","\x12","\xd4"),
	HX_HCSTRING("setProgramConstantsFromMatrix","\xd8","\xd0","\x45","\xbe"),
	HX_HCSTRING("setProgramConstantsFromVector","\x5a","\x4b","\xdb","\x99"),
	HX_HCSTRING("setRenderMethod","\x99","\xcd","\x66","\x97"),
	HX_HCSTRING("setRenderToBackBuffer","\x9a","\x84","\xfb","\xad"),
	HX_HCSTRING("setRenderToTexture","\xe8","\x2c","\x92","\x46"),
	HX_HCSTRING("setSamplerStateAt","\x7e","\x30","\x51","\xac"),
	HX_HCSTRING("setScissorRectangle","\x35","\x04","\x2c","\x03"),
	HX_HCSTRING("updateScissorRectangle","\x9c","\x6c","\xe7","\x01"),
	HX_HCSTRING("setStencilActions","\xa3","\xec","\xa6","\x2c"),
	HX_HCSTRING("setStencilReferenceValue","\xc0","\xdf","\xa3","\x11"),
	HX_HCSTRING("setTextureAt","\xac","\xee","\x98","\xd3"),
	HX_HCSTRING("setTextureParameters","\x63","\x39","\x4d","\x35"),
	HX_HCSTRING("setVertexBufferAt","\xd9","\x58","\xf9","\xc7"),
	HX_HCSTRING("__getUniformLocationNameFromAgalRegisterIndex","\x56","\xcb","\xdc","\xc4"),
	HX_HCSTRING("__updateBlendStatus","\xba","\xab","\xc7","\xd1"),
	::String(null()) };

static void Context3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Context3D_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,"TEXTURE_MAX_ANISOTROPY_EXT");
	HX_MARK_MEMBER_NAME(Context3D_obj::MAX_SAMPLERS,"MAX_SAMPLERS");
	HX_MARK_MEMBER_NAME(Context3D_obj::MAX_TEXTURE_MAX_ANISOTROPY_EXT,"MAX_TEXTURE_MAX_ANISOTROPY_EXT");
	HX_MARK_MEMBER_NAME(Context3D_obj::anisotropySupportTested,"anisotropySupportTested");
	HX_MARK_MEMBER_NAME(Context3D_obj::supportsAnisotropy,"supportsAnisotropy");
	HX_MARK_MEMBER_NAME(Context3D_obj::maxSupportedAnisotropy,"maxSupportedAnisotropy");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Context3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Context3D_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,"TEXTURE_MAX_ANISOTROPY_EXT");
	HX_VISIT_MEMBER_NAME(Context3D_obj::MAX_SAMPLERS,"MAX_SAMPLERS");
	HX_VISIT_MEMBER_NAME(Context3D_obj::MAX_TEXTURE_MAX_ANISOTROPY_EXT,"MAX_TEXTURE_MAX_ANISOTROPY_EXT");
	HX_VISIT_MEMBER_NAME(Context3D_obj::anisotropySupportTested,"anisotropySupportTested");
	HX_VISIT_MEMBER_NAME(Context3D_obj::supportsAnisotropy,"supportsAnisotropy");
	HX_VISIT_MEMBER_NAME(Context3D_obj::maxSupportedAnisotropy,"maxSupportedAnisotropy");
};

#endif

hx::Class Context3D_obj::__mClass;

static ::String Context3D_obj_sStaticFields[] = {
	HX_HCSTRING("TEXTURE_MAX_ANISOTROPY_EXT","\x63","\xc1","\x6c","\x51"),
	HX_HCSTRING("MAX_SAMPLERS","\xc6","\x92","\x84","\x06"),
	HX_HCSTRING("MAX_TEXTURE_MAX_ANISOTROPY_EXT","\x7e","\x54","\xe7","\xa3"),
	HX_HCSTRING("anisotropySupportTested","\x3e","\xcd","\x45","\xae"),
	HX_HCSTRING("supportsAnisotropy","\xa6","\x0a","\x42","\xa9"),
	HX_HCSTRING("maxSupportedAnisotropy","\x8c","\xab","\x46","\xa0"),
	::String(null())
};

void Context3D_obj::__register()
{
	hx::Object *dummy = new Context3D_obj;
	Context3D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display3D.Context3D","\xa7","\xbf","\xa0","\x2f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Context3D_obj::__GetStatic;
	__mClass->mSetStaticField = &Context3D_obj::__SetStatic;
	__mClass->mMarkFunc = Context3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Context3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Context3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Context3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Context3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Context3D_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_29_boot)
HXDLIN(  29)		TEXTURE_MAX_ANISOTROPY_EXT = (int)34046;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_30_boot)
HXDLIN(  30)		MAX_SAMPLERS = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_31_boot)
HXDLIN(  31)		MAX_TEXTURE_MAX_ANISOTROPY_EXT = (int)34047;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_33_boot)
HXDLIN(  33)		anisotropySupportTested = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_34_boot)
HXDLIN(  34)		supportsAnisotropy = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_35_boot)
HXDLIN(  35)		maxSupportedAnisotropy = (int)256;
            	}
}

} // end namespace openfl
} // end namespace display3D
