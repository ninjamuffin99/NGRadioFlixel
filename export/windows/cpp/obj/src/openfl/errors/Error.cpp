// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_haxe_CallStack
#include <haxe/CallStack.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7c7ee06d9b3544d2_17_new,"openfl.errors.Error","new",0xefad98b5,"openfl.errors.Error.new","openfl/errors/Error.hx",17,0x5096467b)
HX_LOCAL_STACK_FRAME(_hx_pos_7c7ee06d9b3544d2_28_getStackTrace,"openfl.errors.Error","getStackTrace",0x0bedf2e8,"openfl.errors.Error.getStackTrace","openfl/errors/Error.hx",28,0x5096467b)
HX_LOCAL_STACK_FRAME(_hx_pos_7c7ee06d9b3544d2_35_toString,"openfl.errors.Error","toString",0x62f5b437,"openfl.errors.Error.toString","openfl/errors/Error.hx",35,0x5096467b)
HX_LOCAL_STACK_FRAME(_hx_pos_7c7ee06d9b3544d2_10_boot,"openfl.errors.Error","boot",0xc051063d,"openfl.errors.Error.boot","openfl/errors/Error.hx",10,0x5096467b)
namespace openfl{
namespace errors{

void Error_obj::__construct(::String __o_message,hx::Null< int >  __o_id){
::String message = __o_message.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
int id = __o_id.Default(0);
            	HX_STACKFRAME(&_hx_pos_7c7ee06d9b3544d2_17_new)
HXLINE(  19)		this->message = message;
HXLINE(  20)		this->errorID = id;
HXLINE(  21)		this->name = HX_("Error",a8,3b,57,06);
            	}

Dynamic Error_obj::__CreateEmpty() { return new Error_obj; }

void *Error_obj::_hx_vtable = 0;

Dynamic Error_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Error_obj > _hx_result = new Error_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Error_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1fc85c4d;
}

::String Error_obj::getStackTrace(){
            	HX_STACKFRAME(&_hx_pos_7c7ee06d9b3544d2_28_getStackTrace)
HXDLIN(  28)		return ::haxe::CallStack_obj::toString(::haxe::CallStack_obj::exceptionStack());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Error_obj,getStackTrace,return )

::String Error_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_7c7ee06d9b3544d2_35_toString)
HXDLIN(  35)		if (hx::IsNotNull( this->message )) {
HXLINE(  37)			return this->message;
            		}
            		else {
HXLINE(  41)			return HX_("Error",a8,3b,57,06);
            		}
HXLINE(  35)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Error_obj,toString,return )

::String Error_obj::DEFAULT_TO_STRING;


hx::ObjectPtr< Error_obj > Error_obj::__new(::String __o_message,hx::Null< int >  __o_id) {
	hx::ObjectPtr< Error_obj > __this = new Error_obj();
	__this->__construct(__o_message,__o_id);
	return __this;
}

hx::ObjectPtr< Error_obj > Error_obj::__alloc(hx::Ctx *_hx_ctx,::String __o_message,hx::Null< int >  __o_id) {
	Error_obj *__this = (Error_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Error_obj), true, "openfl.errors.Error"));
	*(void **)__this = Error_obj::_hx_vtable;
	__this->__construct(__o_message,__o_id);
	return __this;
}

Error_obj::Error_obj()
{
}

void Error_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Error);
	HX_MARK_MEMBER_NAME(errorID,"errorID");
	HX_MARK_MEMBER_NAME(message,"message");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_END_CLASS();
}

void Error_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(errorID,"errorID");
	HX_VISIT_MEMBER_NAME(message,"message");
	HX_VISIT_MEMBER_NAME(name,"name");
}

hx::Val Error_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"errorID") ) { return hx::Val( errorID ); }
		if (HX_FIELD_EQ(inName,"message") ) { return hx::Val( message ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getStackTrace") ) { return hx::Val( getStackTrace_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Error_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"errorID") ) { errorID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"message") ) { message=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Error_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("errorID","\xa3","\x8d","\x0a","\xea"));
	outFields->push(HX_HCSTRING("message","\xc7","\x35","\x11","\x9a"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Error_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Error_obj,errorID),HX_HCSTRING("errorID","\xa3","\x8d","\x0a","\xea")},
	{hx::fsString,(int)offsetof(Error_obj,message),HX_HCSTRING("message","\xc7","\x35","\x11","\x9a")},
	{hx::fsString,(int)offsetof(Error_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Error_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Error_obj::DEFAULT_TO_STRING,HX_HCSTRING("DEFAULT_TO_STRING","\xf7","\x2d","\xdc","\x05")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Error_obj_sMemberFields[] = {
	HX_HCSTRING("errorID","\xa3","\x8d","\x0a","\xea"),
	HX_HCSTRING("message","\xc7","\x35","\x11","\x9a"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("getStackTrace","\x53","\x8e","\xb0","\x85"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void Error_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Error_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Error_obj::DEFAULT_TO_STRING,"DEFAULT_TO_STRING");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Error_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Error_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Error_obj::DEFAULT_TO_STRING,"DEFAULT_TO_STRING");
};

#endif

hx::Class Error_obj::__mClass;

static ::String Error_obj_sStaticFields[] = {
	HX_HCSTRING("DEFAULT_TO_STRING","\xf7","\x2d","\xdc","\x05"),
	::String(null())
};

void Error_obj::__register()
{
	hx::Object *dummy = new Error_obj;
	Error_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.errors.Error","\x43","\x1a","\x04","\x80");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Error_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Error_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Error_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Error_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Error_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Error_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Error_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Error_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7c7ee06d9b3544d2_10_boot)
HXDLIN(  10)		DEFAULT_TO_STRING = HX_("Error",a8,3b,57,06);
            	}
}

} // end namespace openfl
} // end namespace errors
