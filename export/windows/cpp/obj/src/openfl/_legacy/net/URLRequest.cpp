// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl__legacy_net_URLRequest
#include <openfl/_legacy/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_ByteArray
#include <openfl/_legacy/utils/ByteArray.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataInput
#include <openfl/_legacy/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataOutput
#include <openfl/_legacy/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IMemoryRange
#include <openfl/_legacy/utils/IMemoryRange.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequestHeader
#include <openfl/net/URLRequestHeader.h>
#endif
#ifndef INCLUDED_openfl_net_URLVariables
#include <openfl/net/URLVariables.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_567fe10fbce05cdc_34_new,"openfl._legacy.net.URLRequest","new",0xde83de87,"openfl._legacy.net.URLRequest.new","openfl/_legacy/net/URLRequest.hx",34,0xc5bb36e6)
HX_LOCAL_STACK_FRAME(_hx_pos_567fe10fbce05cdc_55_basicAuth,"openfl._legacy.net.URLRequest","basicAuth",0x6693ca9d,"openfl._legacy.net.URLRequest.basicAuth","openfl/_legacy/net/URLRequest.hx",55,0xc5bb36e6)
HX_LOCAL_STACK_FRAME(_hx_pos_567fe10fbce05cdc_63_digestAuth,"openfl._legacy.net.URLRequest","digestAuth",0xbef19285,"openfl._legacy.net.URLRequest.digestAuth","openfl/_legacy/net/URLRequest.hx",63,0xc5bb36e6)
HX_LOCAL_STACK_FRAME(_hx_pos_567fe10fbce05cdc_71___prepare,"openfl._legacy.net.URLRequest","__prepare",0xdd9f87ce,"openfl._legacy.net.URLRequest.__prepare","openfl/_legacy/net/URLRequest.hx",71,0xc5bb36e6)
HX_LOCAL_STACK_FRAME(_hx_pos_567fe10fbce05cdc_12_boot,"openfl._legacy.net.URLRequest","boot",0xccf7d82b,"openfl._legacy.net.URLRequest.boot","openfl/_legacy/net/URLRequest.hx",12,0xc5bb36e6)
HX_LOCAL_STACK_FRAME(_hx_pos_567fe10fbce05cdc_13_boot,"openfl._legacy.net.URLRequest","boot",0xccf7d82b,"openfl._legacy.net.URLRequest.boot","openfl/_legacy/net/URLRequest.hx",13,0xc5bb36e6)
HX_LOCAL_STACK_FRAME(_hx_pos_567fe10fbce05cdc_14_boot,"openfl._legacy.net.URLRequest","boot",0xccf7d82b,"openfl._legacy.net.URLRequest.boot","openfl/_legacy/net/URLRequest.hx",14,0xc5bb36e6)
HX_LOCAL_STACK_FRAME(_hx_pos_567fe10fbce05cdc_15_boot,"openfl._legacy.net.URLRequest","boot",0xccf7d82b,"openfl._legacy.net.URLRequest.boot","openfl/_legacy/net/URLRequest.hx",15,0xc5bb36e6)
HX_LOCAL_STACK_FRAME(_hx_pos_567fe10fbce05cdc_16_boot,"openfl._legacy.net.URLRequest","boot",0xccf7d82b,"openfl._legacy.net.URLRequest.boot","openfl/_legacy/net/URLRequest.hx",16,0xc5bb36e6)
HX_LOCAL_STACK_FRAME(_hx_pos_567fe10fbce05cdc_17_boot,"openfl._legacy.net.URLRequest","boot",0xccf7d82b,"openfl._legacy.net.URLRequest.boot","openfl/_legacy/net/URLRequest.hx",17,0xc5bb36e6)
namespace openfl{
namespace _legacy{
namespace net{

void URLRequest_obj::__construct(::String url){
            	HX_STACKFRAME(&_hx_pos_567fe10fbce05cdc_34_new)
HXLINE(  36)		if (hx::IsNotNull( url )) {
HXLINE(  38)			this->url = url;
            		}
HXLINE(  42)		this->requestHeaders = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  43)		this->method = HX_("GET",76,1c,36,00);
HXLINE(  45)		this->verbose = false;
HXLINE(  46)		this->cookieString = HX_("",00,00,00,00);
HXLINE(  47)		this->authType = (int)0;
HXLINE(  48)		this->contentType = HX_("application/x-www-form-urlencoded",9e,61,91,fa);
HXLINE(  49)		this->credentials = HX_("",00,00,00,00);
HXLINE(  50)		this->followRedirects = true;
            	}

Dynamic URLRequest_obj::__CreateEmpty() { return new URLRequest_obj; }

void *URLRequest_obj::_hx_vtable = 0;

Dynamic URLRequest_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< URLRequest_obj > _hx_result = new URLRequest_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool URLRequest_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x77b87169;
}

void URLRequest_obj::basicAuth(::String user,::String password){
            	HX_STACKFRAME(&_hx_pos_567fe10fbce05cdc_55_basicAuth)
HXLINE(  57)		this->authType = (int)1;
HXLINE(  58)		this->credentials = ((user + HX_(":",3a,00,00,00)) + password);
            	}


HX_DEFINE_DYNAMIC_FUNC2(URLRequest_obj,basicAuth,(void))

void URLRequest_obj::digestAuth(::String user,::String password){
            	HX_STACKFRAME(&_hx_pos_567fe10fbce05cdc_63_digestAuth)
HXLINE(  65)		this->authType = (int)2;
HXLINE(  66)		this->credentials = ((user + HX_(":",3a,00,00,00)) + password);
            	}


HX_DEFINE_DYNAMIC_FUNC2(URLRequest_obj,digestAuth,(void))

void URLRequest_obj::_hx___prepare(){
            	HX_GC_STACKFRAME(&_hx_pos_567fe10fbce05cdc_71___prepare)
HXLINE(  73)		if (hx::IsNull( this->userAgent )) {
HXLINE(  75)			this->userAgent = HX_("",00,00,00,00);
            		}
HXLINE(  79)		if (hx::IsNull( this->data )) {
HXLINE(  81)			this->_hx___bytes =  ::openfl::_legacy::utils::ByteArray_obj::__alloc( HX_CTX ,null());
            		}
            		else {
HXLINE(  83)			if (::Std_obj::is(this->data,hx::ClassOf< ::openfl::_legacy::utils::ByteArray >())) {
HXLINE(  85)				this->_hx___bytes = ( ( ::openfl::_legacy::utils::ByteArray)(this->data) );
            			}
            			else {
HXLINE(  87)				if (::Std_obj::is(this->data,hx::ClassOf< ::openfl::net::URLVariables >())) {
HXLINE(  89)					 ::openfl::net::URLVariables vars = ( ( ::openfl::net::URLVariables)(this->data) );
HXLINE(  90)					::String str = vars->toString();
HXLINE(  91)					this->_hx___bytes =  ::openfl::_legacy::utils::ByteArray_obj::__alloc( HX_CTX ,null());
HXLINE(  92)					this->_hx___bytes->writeUTFBytes(str);
            				}
            				else {
HXLINE(  94)					if (::Std_obj::is(this->data,hx::ClassOf< ::String >())) {
HXLINE(  96)						::String str1 = ( (::String)(this->data) );
HXLINE(  97)						this->_hx___bytes =  ::openfl::_legacy::utils::ByteArray_obj::__alloc( HX_CTX ,null());
HXLINE(  98)						this->_hx___bytes->writeUTFBytes(str1);
            					}
            					else {
HXLINE( 100)						if (::Std_obj::is(this->data,hx::ClassOf< ::Dynamic >())) {
HXLINE( 102)							 ::openfl::net::URLVariables vars1 =  ::openfl::net::URLVariables_obj::__alloc( HX_CTX ,null());
HXLINE( 104)							{
HXLINE( 104)								int _g = (int)0;
HXDLIN( 104)								::Array< ::String > _g1 = ::Reflect_obj::fields(this->data);
HXDLIN( 104)								while((_g < _g1->length)){
HXLINE( 104)									::String i = _g1->__get(_g);
HXDLIN( 104)									_g = (_g + (int)1);
HXLINE( 106)									::Reflect_obj::setField(vars1,i,::Reflect_obj::field(this->data,i));
            								}
            							}
HXLINE( 110)							::String str2 = vars1->toString();
HXLINE( 111)							this->_hx___bytes =  ::openfl::_legacy::utils::ByteArray_obj::__alloc( HX_CTX ,null());
HXLINE( 112)							this->_hx___bytes->writeUTFBytes(str2);
            						}
            						else {
HXLINE( 116)							HX_STACK_DO_THROW(HX_("Unknown data type",3a,04,3d,a1));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(URLRequest_obj,_hx___prepare,(void))

int URLRequest_obj::AUTH_BASIC;

int URLRequest_obj::AUTH_DIGEST;

int URLRequest_obj::AUTH_GSSNEGOTIATE;

int URLRequest_obj::AUTH_NTLM;

int URLRequest_obj::AUTH_DIGEST_IE;

int URLRequest_obj::AUTH_DIGEST_ANY;


hx::ObjectPtr< URLRequest_obj > URLRequest_obj::__new(::String url) {
	hx::ObjectPtr< URLRequest_obj > __this = new URLRequest_obj();
	__this->__construct(url);
	return __this;
}

hx::ObjectPtr< URLRequest_obj > URLRequest_obj::__alloc(hx::Ctx *_hx_ctx,::String url) {
	URLRequest_obj *__this = (URLRequest_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(URLRequest_obj), true, "openfl._legacy.net.URLRequest"));
	*(void **)__this = URLRequest_obj::_hx_vtable;
	__this->__construct(url);
	return __this;
}

URLRequest_obj::URLRequest_obj()
{
}

void URLRequest_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(URLRequest);
	HX_MARK_MEMBER_NAME(authType,"authType");
	HX_MARK_MEMBER_NAME(contentType,"contentType");
	HX_MARK_MEMBER_NAME(cookieString,"cookieString");
	HX_MARK_MEMBER_NAME(credentials,"credentials");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(followRedirects,"followRedirects");
	HX_MARK_MEMBER_NAME(method,"method");
	HX_MARK_MEMBER_NAME(requestHeaders,"requestHeaders");
	HX_MARK_MEMBER_NAME(url,"url");
	HX_MARK_MEMBER_NAME(userAgent,"userAgent");
	HX_MARK_MEMBER_NAME(verbose,"verbose");
	HX_MARK_MEMBER_NAME(_hx___bytes,"__bytes");
	HX_MARK_END_CLASS();
}

void URLRequest_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(authType,"authType");
	HX_VISIT_MEMBER_NAME(contentType,"contentType");
	HX_VISIT_MEMBER_NAME(cookieString,"cookieString");
	HX_VISIT_MEMBER_NAME(credentials,"credentials");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(followRedirects,"followRedirects");
	HX_VISIT_MEMBER_NAME(method,"method");
	HX_VISIT_MEMBER_NAME(requestHeaders,"requestHeaders");
	HX_VISIT_MEMBER_NAME(url,"url");
	HX_VISIT_MEMBER_NAME(userAgent,"userAgent");
	HX_VISIT_MEMBER_NAME(verbose,"verbose");
	HX_VISIT_MEMBER_NAME(_hx___bytes,"__bytes");
}

hx::Val URLRequest_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { return hx::Val( url ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"method") ) { return hx::Val( method ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"verbose") ) { return hx::Val( verbose ); }
		if (HX_FIELD_EQ(inName,"__bytes") ) { return hx::Val( _hx___bytes ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"authType") ) { return hx::Val( authType ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"userAgent") ) { return hx::Val( userAgent ); }
		if (HX_FIELD_EQ(inName,"basicAuth") ) { return hx::Val( basicAuth_dyn() ); }
		if (HX_FIELD_EQ(inName,"__prepare") ) { return hx::Val( _hx___prepare_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"digestAuth") ) { return hx::Val( digestAuth_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"contentType") ) { return hx::Val( contentType ); }
		if (HX_FIELD_EQ(inName,"credentials") ) { return hx::Val( credentials ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cookieString") ) { return hx::Val( cookieString ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"requestHeaders") ) { return hx::Val( requestHeaders ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"followRedirects") ) { return hx::Val( followRedirects ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val URLRequest_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { url=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"method") ) { method=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"verbose") ) { verbose=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__bytes") ) { _hx___bytes=inValue.Cast<  ::openfl::_legacy::utils::ByteArray >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"authType") ) { authType=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"userAgent") ) { userAgent=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"contentType") ) { contentType=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"credentials") ) { credentials=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cookieString") ) { cookieString=inValue.Cast< ::String >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"requestHeaders") ) { requestHeaders=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"followRedirects") ) { followRedirects=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void URLRequest_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("authType","\x42","\xd2","\x60","\x28"));
	outFields->push(HX_HCSTRING("contentType","\x93","\x3c","\x7b","\x2a"));
	outFields->push(HX_HCSTRING("cookieString","\x95","\x08","\x16","\xfc"));
	outFields->push(HX_HCSTRING("credentials","\xbc","\x12","\x86","\x7b"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("followRedirects","\x26","\x5a","\x40","\x75"));
	outFields->push(HX_HCSTRING("method","\xe1","\xf6","\x5a","\x09"));
	outFields->push(HX_HCSTRING("requestHeaders","\xb7","\xb2","\x4f","\xdc"));
	outFields->push(HX_HCSTRING("url","\x6f","\x2b","\x59","\x00"));
	outFields->push(HX_HCSTRING("userAgent","\x7a","\xf0","\x12","\xc8"));
	outFields->push(HX_HCSTRING("verbose","\x82","\xd7","\xb9","\x71"));
	outFields->push(HX_HCSTRING("__bytes","\x4b","\x61","\xf6","\x27"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo URLRequest_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(URLRequest_obj,authType),HX_HCSTRING("authType","\x42","\xd2","\x60","\x28")},
	{hx::fsString,(int)offsetof(URLRequest_obj,contentType),HX_HCSTRING("contentType","\x93","\x3c","\x7b","\x2a")},
	{hx::fsString,(int)offsetof(URLRequest_obj,cookieString),HX_HCSTRING("cookieString","\x95","\x08","\x16","\xfc")},
	{hx::fsString,(int)offsetof(URLRequest_obj,credentials),HX_HCSTRING("credentials","\xbc","\x12","\x86","\x7b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(URLRequest_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsBool,(int)offsetof(URLRequest_obj,followRedirects),HX_HCSTRING("followRedirects","\x26","\x5a","\x40","\x75")},
	{hx::fsString,(int)offsetof(URLRequest_obj,method),HX_HCSTRING("method","\xe1","\xf6","\x5a","\x09")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(URLRequest_obj,requestHeaders),HX_HCSTRING("requestHeaders","\xb7","\xb2","\x4f","\xdc")},
	{hx::fsString,(int)offsetof(URLRequest_obj,url),HX_HCSTRING("url","\x6f","\x2b","\x59","\x00")},
	{hx::fsString,(int)offsetof(URLRequest_obj,userAgent),HX_HCSTRING("userAgent","\x7a","\xf0","\x12","\xc8")},
	{hx::fsBool,(int)offsetof(URLRequest_obj,verbose),HX_HCSTRING("verbose","\x82","\xd7","\xb9","\x71")},
	{hx::fsObject /*::openfl::_legacy::utils::ByteArray*/ ,(int)offsetof(URLRequest_obj,_hx___bytes),HX_HCSTRING("__bytes","\x4b","\x61","\xf6","\x27")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo URLRequest_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &URLRequest_obj::AUTH_BASIC,HX_HCSTRING("AUTH_BASIC","\x37","\xcf","\x36","\x7b")},
	{hx::fsInt,(void *) &URLRequest_obj::AUTH_DIGEST,HX_HCSTRING("AUTH_DIGEST","\x7b","\x53","\xb8","\xb4")},
	{hx::fsInt,(void *) &URLRequest_obj::AUTH_GSSNEGOTIATE,HX_HCSTRING("AUTH_GSSNEGOTIATE","\x0e","\x90","\xe4","\xa1")},
	{hx::fsInt,(void *) &URLRequest_obj::AUTH_NTLM,HX_HCSTRING("AUTH_NTLM","\xbe","\x3f","\xa8","\xe2")},
	{hx::fsInt,(void *) &URLRequest_obj::AUTH_DIGEST_IE,HX_HCSTRING("AUTH_DIGEST_IE","\x60","\x21","\x93","\x3c")},
	{hx::fsInt,(void *) &URLRequest_obj::AUTH_DIGEST_ANY,HX_HCSTRING("AUTH_DIGEST_ANY","\xc8","\x08","\x24","\xc4")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String URLRequest_obj_sMemberFields[] = {
	HX_HCSTRING("authType","\x42","\xd2","\x60","\x28"),
	HX_HCSTRING("contentType","\x93","\x3c","\x7b","\x2a"),
	HX_HCSTRING("cookieString","\x95","\x08","\x16","\xfc"),
	HX_HCSTRING("credentials","\xbc","\x12","\x86","\x7b"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("followRedirects","\x26","\x5a","\x40","\x75"),
	HX_HCSTRING("method","\xe1","\xf6","\x5a","\x09"),
	HX_HCSTRING("requestHeaders","\xb7","\xb2","\x4f","\xdc"),
	HX_HCSTRING("url","\x6f","\x2b","\x59","\x00"),
	HX_HCSTRING("userAgent","\x7a","\xf0","\x12","\xc8"),
	HX_HCSTRING("verbose","\x82","\xd7","\xb9","\x71"),
	HX_HCSTRING("__bytes","\x4b","\x61","\xf6","\x27"),
	HX_HCSTRING("basicAuth","\x36","\x25","\x20","\x42"),
	HX_HCSTRING("digestAuth","\xcc","\x7d","\x34","\xfe"),
	HX_HCSTRING("__prepare","\x67","\xe2","\x2b","\xb9"),
	::String(null()) };

static void URLRequest_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(URLRequest_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(URLRequest_obj::AUTH_BASIC,"AUTH_BASIC");
	HX_MARK_MEMBER_NAME(URLRequest_obj::AUTH_DIGEST,"AUTH_DIGEST");
	HX_MARK_MEMBER_NAME(URLRequest_obj::AUTH_GSSNEGOTIATE,"AUTH_GSSNEGOTIATE");
	HX_MARK_MEMBER_NAME(URLRequest_obj::AUTH_NTLM,"AUTH_NTLM");
	HX_MARK_MEMBER_NAME(URLRequest_obj::AUTH_DIGEST_IE,"AUTH_DIGEST_IE");
	HX_MARK_MEMBER_NAME(URLRequest_obj::AUTH_DIGEST_ANY,"AUTH_DIGEST_ANY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void URLRequest_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(URLRequest_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(URLRequest_obj::AUTH_BASIC,"AUTH_BASIC");
	HX_VISIT_MEMBER_NAME(URLRequest_obj::AUTH_DIGEST,"AUTH_DIGEST");
	HX_VISIT_MEMBER_NAME(URLRequest_obj::AUTH_GSSNEGOTIATE,"AUTH_GSSNEGOTIATE");
	HX_VISIT_MEMBER_NAME(URLRequest_obj::AUTH_NTLM,"AUTH_NTLM");
	HX_VISIT_MEMBER_NAME(URLRequest_obj::AUTH_DIGEST_IE,"AUTH_DIGEST_IE");
	HX_VISIT_MEMBER_NAME(URLRequest_obj::AUTH_DIGEST_ANY,"AUTH_DIGEST_ANY");
};

#endif

hx::Class URLRequest_obj::__mClass;

static ::String URLRequest_obj_sStaticFields[] = {
	HX_HCSTRING("AUTH_BASIC","\x37","\xcf","\x36","\x7b"),
	HX_HCSTRING("AUTH_DIGEST","\x7b","\x53","\xb8","\xb4"),
	HX_HCSTRING("AUTH_GSSNEGOTIATE","\x0e","\x90","\xe4","\xa1"),
	HX_HCSTRING("AUTH_NTLM","\xbe","\x3f","\xa8","\xe2"),
	HX_HCSTRING("AUTH_DIGEST_IE","\x60","\x21","\x93","\x3c"),
	HX_HCSTRING("AUTH_DIGEST_ANY","\xc8","\x08","\x24","\xc4"),
	::String(null())
};

void URLRequest_obj::__register()
{
	hx::Object *dummy = new URLRequest_obj;
	URLRequest_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._legacy.net.URLRequest","\x15","\x8f","\x6a","\xde");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = URLRequest_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(URLRequest_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(URLRequest_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< URLRequest_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = URLRequest_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = URLRequest_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = URLRequest_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void URLRequest_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_567fe10fbce05cdc_12_boot)
HXDLIN(  12)		AUTH_BASIC = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_567fe10fbce05cdc_13_boot)
HXDLIN(  13)		AUTH_DIGEST = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_567fe10fbce05cdc_14_boot)
HXDLIN(  14)		AUTH_GSSNEGOTIATE = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_567fe10fbce05cdc_15_boot)
HXDLIN(  15)		AUTH_NTLM = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_567fe10fbce05cdc_16_boot)
HXDLIN(  16)		AUTH_DIGEST_IE = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_567fe10fbce05cdc_17_boot)
HXDLIN(  17)		AUTH_DIGEST_ANY = (int)15;
            	}
}

} // end namespace openfl
} // end namespace _legacy
} // end namespace net
