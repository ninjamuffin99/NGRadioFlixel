// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Serializer
#include <haxe/Serializer.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_filesystem_File
#include <openfl/_legacy/filesystem/File.h>
#endif
#ifndef INCLUDED_openfl__legacy_net_SharedObject
#include <openfl/_legacy/net/SharedObject.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2c0a132cf04df2c2_27_new,"openfl._legacy.net.SharedObject","new",0xdcdfaf6b,"openfl._legacy.net.SharedObject.new","openfl/_legacy/net/SharedObject.hx",27,0xecec0fc2)
HX_LOCAL_STACK_FRAME(_hx_pos_2c0a132cf04df2c2_38_clear,"openfl._legacy.net.SharedObject","clear",0x46e56958,"openfl._legacy.net.SharedObject.clear","openfl/_legacy/net/SharedObject.hx",38,0xecec0fc2)
HX_LOCAL_STACK_FRAME(_hx_pos_2c0a132cf04df2c2_59_close,"openfl._legacy.net.SharedObject","close",0x46ed0f83,"openfl._legacy.net.SharedObject.close","openfl/_legacy/net/SharedObject.hx",59,0xecec0fc2)
HX_LOCAL_STACK_FRAME(_hx_pos_2c0a132cf04df2c2_123_flush,"openfl._legacy.net.SharedObject","flush",0x01255a8f,"openfl._legacy.net.SharedObject.flush","openfl/_legacy/net/SharedObject.hx",123,0xecec0fc2)
HX_LOCAL_STACK_FRAME(_hx_pos_2c0a132cf04df2c2_254_setProperty,"openfl._legacy.net.SharedObject","setProperty",0x16fb7422,"openfl._legacy.net.SharedObject.setProperty","openfl/_legacy/net/SharedObject.hx",254,0xecec0fc2)
HX_LOCAL_STACK_FRAME(_hx_pos_2c0a132cf04df2c2_272_get_size,"openfl._legacy.net.SharedObject","get_size",0x9307155f,"openfl._legacy.net.SharedObject.get_size","openfl/_legacy/net/SharedObject.hx",272,0xecec0fc2)
HX_LOCAL_STACK_FRAME(_hx_pos_2c0a132cf04df2c2_68_mkdir,"openfl._legacy.net.SharedObject","mkdir",0x083d447a,"openfl._legacy.net.SharedObject.mkdir","openfl/_legacy/net/SharedObject.hx",68,0xecec0fc2)
HX_LOCAL_STACK_FRAME(_hx_pos_2c0a132cf04df2c2_153_getFilePath,"openfl._legacy.net.SharedObject","getFilePath",0xc3ebf302,"openfl._legacy.net.SharedObject.getFilePath","openfl/_legacy/net/SharedObject.hx",153,0xecec0fc2)
HX_LOCAL_STACK_FRAME(_hx_pos_2c0a132cf04df2c2_162_getLocal,"openfl._legacy.net.SharedObject","getLocal",0x9fc0920a,"openfl._legacy.net.SharedObject.getLocal","openfl/_legacy/net/SharedObject.hx",162,0xecec0fc2)
HX_LOCAL_STACK_FRAME(_hx_pos_2c0a132cf04df2c2_212_resolveClass,"openfl._legacy.net.SharedObject","resolveClass",0x5c912541,"openfl._legacy.net.SharedObject.resolveClass","openfl/_legacy/net/SharedObject.hx",212,0xecec0fc2)
namespace openfl{
namespace _legacy{
namespace net{

void SharedObject_obj::__construct(::String name,::String localPath, ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_2c0a132cf04df2c2_27_new)
HXLINE(  29)		super::__construct(null());
HXLINE(  31)		this->name = name;
HXLINE(  32)		this->localPath = localPath;
HXLINE(  33)		this->data = data;
            	}

Dynamic SharedObject_obj::__CreateEmpty() { return new SharedObject_obj; }

void *SharedObject_obj::_hx_vtable = 0;

Dynamic SharedObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SharedObject_obj > _hx_result = new SharedObject_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool SharedObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x01d12eb1) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x01d12eb1;
	} else {
		return inClassId==(int)0x25b00754;
	}
}

void SharedObject_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_2c0a132cf04df2c2_38_clear)
HXLINE(  46)		::String filePath = ::openfl::_legacy::net::SharedObject_obj::getFilePath(this->name,this->localPath);
HXLINE(  48)		if (::sys::FileSystem_obj::exists(filePath)) {
HXLINE(  50)			::sys::FileSystem_obj::deleteFile(filePath);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SharedObject_obj,clear,(void))

void SharedObject_obj::close(){
            	HX_STACKFRAME(&_hx_pos_2c0a132cf04df2c2_59_close)
            	}


HX_DEFINE_DYNAMIC_FUNC0(SharedObject_obj,close,(void))

 ::Dynamic SharedObject_obj::flush(hx::Null< int >  __o_minDiskSpace){
int minDiskSpace = __o_minDiskSpace.Default(0);
            	HX_STACKFRAME(&_hx_pos_2c0a132cf04df2c2_123_flush)
HXLINE( 125)		::String encodedData = ::haxe::Serializer_obj::run(this->data);
HXLINE( 133)		::String filePath = ::openfl::_legacy::net::SharedObject_obj::getFilePath(this->name,this->localPath);
HXLINE( 134)		::String folderPath = ::haxe::io::Path_obj::directory(filePath);
HXLINE( 136)		if (!(::sys::FileSystem_obj::exists(folderPath))) {
HXLINE( 138)			::openfl::_legacy::net::SharedObject_obj::mkdir(folderPath);
            		}
HXLINE( 142)		 ::sys::io::FileOutput output = ::sys::io::File_obj::write(filePath,false);
HXLINE( 143)		output->writeString(encodedData);
HXLINE( 144)		output->close();
HXLINE( 148)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SharedObject_obj,flush,return )

void SharedObject_obj::setProperty(::String propertyName, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_2c0a132cf04df2c2_254_setProperty)
HXDLIN( 254)		if (hx::IsNotNull( this->data )) {
HXLINE( 256)			::Reflect_obj::setField(this->data,propertyName,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(SharedObject_obj,setProperty,(void))

int SharedObject_obj::get_size(){
            	HX_STACKFRAME(&_hx_pos_2c0a132cf04df2c2_272_get_size)
HXDLIN( 272)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SharedObject_obj,get_size,return )

void SharedObject_obj::mkdir(::String directory){
            	HX_STACKFRAME(&_hx_pos_2c0a132cf04df2c2_68_mkdir)
HXLINE(  70)		directory = ::StringTools_obj::replace(directory,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE(  71)		::String total = HX_("",00,00,00,00);
HXLINE(  73)		if ((directory.substr((int)0,(int)1) == HX_("/",2f,00,00,00))) {
HXLINE(  75)			total = HX_("/",2f,00,00,00);
            		}
HXLINE(  79)		::Array< ::String > parts = directory.split(HX_("/",2f,00,00,00));
HXLINE(  80)		::String oldPath = HX_("",00,00,00,00);
HXLINE(  82)		bool _hx_tmp;
HXDLIN(  82)		if ((parts->length > (int)0)) {
HXLINE(  82)			_hx_tmp = (parts->__get((int)0).indexOf(HX_(":",3a,00,00,00),null()) > (int)-1);
            		}
            		else {
HXLINE(  82)			_hx_tmp = false;
            		}
HXDLIN(  82)		if (_hx_tmp) {
HXLINE(  84)			oldPath = ::Sys_obj::getCwd();
HXLINE(  85)			::Sys_obj::setCwd((parts->__get((int)0) + HX_("\\",5c,00,00,00)));
HXLINE(  86)			parts->shift();
            		}
HXLINE(  90)		{
HXLINE(  90)			int _g = (int)0;
HXDLIN(  90)			while((_g < parts->length)){
HXLINE(  90)				::String part = parts->__get(_g);
HXDLIN(  90)				_g = (_g + (int)1);
HXLINE(  92)				bool _hx_tmp1;
HXDLIN(  92)				if ((part != HX_(".",2e,00,00,00))) {
HXLINE(  92)					_hx_tmp1 = (part != HX_("",00,00,00,00));
            				}
            				else {
HXLINE(  92)					_hx_tmp1 = false;
            				}
HXDLIN(  92)				if (_hx_tmp1) {
HXLINE(  94)					bool _hx_tmp2;
HXDLIN(  94)					if ((total != HX_("",00,00,00,00))) {
HXLINE(  94)						_hx_tmp2 = (total != HX_("/",2f,00,00,00));
            					}
            					else {
HXLINE(  94)						_hx_tmp2 = false;
            					}
HXDLIN(  94)					if (_hx_tmp2) {
HXLINE(  96)						total = (total + HX_("/",2f,00,00,00));
            					}
HXLINE( 100)					total = (total + part);
HXLINE( 102)					if (!(::sys::FileSystem_obj::exists(total))) {
HXLINE( 104)						::sys::FileSystem_obj::createDirectory(total);
            					}
            				}
            			}
            		}
HXLINE( 112)		if ((oldPath != HX_("",00,00,00,00))) {
HXLINE( 114)			::Sys_obj::setCwd(oldPath);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SharedObject_obj,mkdir,(void))

::String SharedObject_obj::getFilePath(::String name,::String localPath){
            	HX_STACKFRAME(&_hx_pos_2c0a132cf04df2c2_153_getFilePath)
HXLINE( 155)		::String path = ::openfl::_legacy::filesystem::File_obj::get_applicationStorageDirectory()->nativePath;
HXLINE( 156)		path = (path + ((((HX_("/",2f,00,00,00) + localPath) + HX_("/",2f,00,00,00)) + name) + HX_(".sol",e2,74,bf,1e)));
HXLINE( 157)		return path;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SharedObject_obj,getFilePath,return )

 ::openfl::_legacy::net::SharedObject SharedObject_obj::getLocal(::String name,::String localPath,hx::Null< bool >  __o_secure){
bool secure = __o_secure.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_2c0a132cf04df2c2_162_getLocal)
HXLINE( 164)		if (hx::IsNull( localPath )) {
HXLINE( 166)			localPath = HX_("",00,00,00,00);
            		}
HXLINE( 176)		::String filePath = ::openfl::_legacy::net::SharedObject_obj::getFilePath(name,localPath);
HXLINE( 177)		::String rawData = HX_("",00,00,00,00);
HXLINE( 179)		if (::sys::FileSystem_obj::exists(filePath)) {
HXLINE( 181)			rawData = ::sys::io::File_obj::getContent(filePath);
            		}
HXLINE( 187)		 ::Dynamic loadedData =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE( 189)		bool _hx_tmp;
HXDLIN( 189)		if ((rawData != HX_("",00,00,00,00))) {
HXLINE( 189)			_hx_tmp = hx::IsNotNull( rawData );
            		}
            		else {
HXLINE( 189)			_hx_tmp = false;
            		}
HXDLIN( 189)		if (_hx_tmp) {
HXLINE( 191)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 193)				 ::haxe::Unserializer unserializer =  ::haxe::Unserializer_obj::__alloc( HX_CTX ,rawData);
HXLINE( 194)				unserializer->setResolver( ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("resolveClass",ac,bd,dd,80),::openfl::_legacy::net::SharedObject_obj::resolveClass_dyn())
            					->setFixed(1,HX_("resolveEnum",0d,90,51,de),::Type_obj::resolveEnum_dyn())));
HXLINE( 195)				loadedData = unserializer->unserialize();
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 199)					 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 199)					_hx_tmp1((HX_("Could not unserialize SharedObject: ",ef,ee,c6,ae) + name),hx::SourceInfo(HX_("SharedObject.hx",da,51,3d,f3),199,HX_("openfl._legacy.net.SharedObject",f9,1d,0b,df),HX_("getLocal",f5,d8,c7,d8)));
HXLINE( 200)					loadedData =  ::Dynamic(hx::Anon_obj::Create(0));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE( 206)		 ::openfl::_legacy::net::SharedObject so =  ::openfl::_legacy::net::SharedObject_obj::__alloc( HX_CTX ,name,localPath,loadedData);
HXLINE( 207)		return so;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SharedObject_obj,getLocal,return )

hx::Class SharedObject_obj::resolveClass(::String name){
            	HX_STACKFRAME(&_hx_pos_2c0a132cf04df2c2_212_resolveClass)
HXLINE( 214)		if (hx::IsNotNull( name )) {
HXLINE( 216)			if (::StringTools_obj::startsWith(name,HX_("neash.",ef,97,2f,63))) {
HXLINE( 218)				name = ::StringTools_obj::replace(name,HX_("neash.",ef,97,2f,63),HX_("openfl.",9e,ba,42,40));
            			}
HXLINE( 222)			if (::StringTools_obj::startsWith(name,HX_("native.",b7,9a,13,b7))) {
HXLINE( 224)				name = ::StringTools_obj::replace(name,HX_("native.",b7,9a,13,b7),HX_("openfl.",9e,ba,42,40));
            			}
HXLINE( 228)			if (::StringTools_obj::startsWith(name,HX_("flash.",7e,c4,22,38))) {
HXLINE( 230)				name = ::StringTools_obj::replace(name,HX_("flash.",7e,c4,22,38),HX_("openfl.",9e,ba,42,40));
            			}
HXLINE( 234)			if (::StringTools_obj::startsWith(name,HX_("openfl._v2.",51,5c,9c,49))) {
HXLINE( 236)				name = ::StringTools_obj::replace(name,HX_("openfl._v2.",51,5c,9c,49),HX_("openfl._legacy.",e4,67,0c,9f));
            			}
HXLINE( 240)			hx::Class value = ::Type_obj::resolveClass(name);
HXLINE( 241)			if (hx::IsNull( value )) {
HXLINE( 241)				value = ::Type_obj::resolveClass(::StringTools_obj::replace(name,HX_("openfl.",9e,ba,42,40),HX_("openfl._legacy.",e4,67,0c,9f)));
            			}
HXLINE( 243)			return value;
            		}
HXLINE( 247)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SharedObject_obj,resolveClass,return )


hx::ObjectPtr< SharedObject_obj > SharedObject_obj::__new(::String name,::String localPath, ::Dynamic data) {
	hx::ObjectPtr< SharedObject_obj > __this = new SharedObject_obj();
	__this->__construct(name,localPath,data);
	return __this;
}

hx::ObjectPtr< SharedObject_obj > SharedObject_obj::__alloc(hx::Ctx *_hx_ctx,::String name,::String localPath, ::Dynamic data) {
	SharedObject_obj *__this = (SharedObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SharedObject_obj), true, "openfl._legacy.net.SharedObject"));
	*(void **)__this = SharedObject_obj::_hx_vtable;
	__this->__construct(name,localPath,data);
	return __this;
}

SharedObject_obj::SharedObject_obj()
{
}

void SharedObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SharedObject);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(localPath,"localPath");
	HX_MARK_MEMBER_NAME(name,"name");
	 ::openfl::_legacy::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SharedObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(localPath,"localPath");
	HX_VISIT_MEMBER_NAME(name,"name");
	 ::openfl::_legacy::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SharedObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( inCallProp == hx::paccAlways ? get_size() : size ); }
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"close") ) { return hx::Val( close_dyn() ); }
		if (HX_FIELD_EQ(inName,"flush") ) { return hx::Val( flush_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"localPath") ) { return hx::Val( localPath ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setProperty") ) { return hx::Val( setProperty_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SharedObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"mkdir") ) { outValue = mkdir_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getLocal") ) { outValue = getLocal_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getFilePath") ) { outValue = getFilePath_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resolveClass") ) { outValue = resolveClass_dyn(); return true; }
	}
	return false;
}

hx::Val SharedObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"localPath") ) { localPath=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SharedObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("localPath","\xb0","\x6c","\x94","\x0c"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SharedObject_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(SharedObject_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsInt,(int)offsetof(SharedObject_obj,size),HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c")},
	{hx::fsString,(int)offsetof(SharedObject_obj,localPath),HX_HCSTRING("localPath","\xb0","\x6c","\x94","\x0c")},
	{hx::fsString,(int)offsetof(SharedObject_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SharedObject_obj_sStaticStorageInfo = 0;
#endif

static ::String SharedObject_obj_sMemberFields[] = {
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("localPath","\xb0","\x6c","\x94","\x0c"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("close","\xb8","\x17","\x63","\x48"),
	HX_HCSTRING("flush","\xc4","\x62","\x9b","\x02"),
	HX_HCSTRING("setProperty","\x17","\x12","\x99","\xdc"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	::String(null()) };

static void SharedObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SharedObject_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SharedObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SharedObject_obj::__mClass,"__mClass");
};

#endif

hx::Class SharedObject_obj::__mClass;

static ::String SharedObject_obj_sStaticFields[] = {
	HX_HCSTRING("mkdir","\xaf","\x4c","\xb3","\x09"),
	HX_HCSTRING("getFilePath","\xf7","\x90","\x89","\x89"),
	HX_HCSTRING("getLocal","\xf5","\xd8","\xc7","\xd8"),
	HX_HCSTRING("resolveClass","\xac","\xbd","\xdd","\x80"),
	::String(null())
};

void SharedObject_obj::__register()
{
	hx::Object *dummy = new SharedObject_obj;
	SharedObject_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._legacy.net.SharedObject","\xf9","\x1d","\x0b","\xdf");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SharedObject_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SharedObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SharedObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SharedObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SharedObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SharedObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SharedObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SharedObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _legacy
} // end namespace net
