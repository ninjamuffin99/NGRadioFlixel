// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_DefaultAssetLibrary
#include <DefaultAssetLibrary.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetCache
#include <openfl/_legacy/AssetCache.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetLibrary
#include <openfl/_legacy/AssetLibrary.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetType
#include <openfl/_legacy/AssetType.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_Future
#include <openfl/_legacy/Future.h>
#endif
#ifndef INCLUDED_openfl__legacy_IAssetCache
#include <openfl/_legacy/IAssetCache.h>
#endif
#ifndef INCLUDED_openfl__legacy_Promise
#include <openfl/_legacy/Promise.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_MovieClip
#include <openfl/_legacy/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_media_Sound
#include <openfl/_legacy/media/Sound.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_Font
#include <openfl/_legacy/text/Font.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_ByteArray
#include <openfl/_legacy/utils/ByteArray.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataInput
#include <openfl/_legacy/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataOutput
#include <openfl/_legacy/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IMemoryRange
#include <openfl/_legacy/utils/IMemoryRange.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_49_addEventListener,"openfl._legacy.Assets","addEventListener",0x9ea1b894,"openfl._legacy.Assets.addEventListener","openfl/_legacy/Assets.hx",49,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_58_dispatchEvent,"openfl._legacy.Assets","dispatchEvent",0x41da67d9,"openfl._legacy.Assets.dispatchEvent","openfl/_legacy/Assets.hx",58,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_67_exists,"openfl._legacy.Assets","exists",0x884f5be3,"openfl._legacy.Assets.exists","openfl/_legacy/Assets.hx",67,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_103_getBitmapData,"openfl._legacy.Assets","getBitmapData",0x0ba8b2c8,"openfl._legacy.Assets.getBitmapData","openfl/_legacy/Assets.hx",103,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_172_getBytes,"openfl._legacy.Assets","getBytes",0x4eaf25bc,"openfl._legacy.Assets.getBytes","openfl/_legacy/Assets.hx",172,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_221_getFont,"openfl._legacy.Assets","getFont",0xaf2a159e,"openfl._legacy.Assets.getFont","openfl/_legacy/Assets.hx",221,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_278_getLibrary,"openfl._legacy.Assets","getLibrary",0x9a85fa8c,"openfl._legacy.Assets.getLibrary","openfl/_legacy/Assets.hx",278,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_297_getMovieClip,"openfl._legacy.Assets","getMovieClip",0xc2f99c71,"openfl._legacy.Assets.getMovieClip","openfl/_legacy/Assets.hx",297,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_346_getMusic,"openfl._legacy.Assets","getMusic",0xa171edf6,"openfl._legacy.Assets.getMusic","openfl/_legacy/Assets.hx",346,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_415_getPath,"openfl._legacy.Assets","getPath",0xb5bb9d74,"openfl._legacy.Assets.getPath","openfl/_legacy/Assets.hx",415,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_456_getSound,"openfl._legacy.Assets","getSound",0x11e3aa20,"openfl._legacy.Assets.getSound","openfl/_legacy/Assets.hx",456,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_525_getText,"openfl._legacy.Assets","getText",0xb863847c,"openfl._legacy.Assets.getText","openfl/_legacy/Assets.hx",525,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_568_hasEventListener,"openfl._legacy.Assets","hasEventListener",0xba27dbbb,"openfl._legacy.Assets.hasEventListener","openfl/_legacy/Assets.hx",568,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_579_initialize,"openfl._legacy.Assets","initialize",0xf86f7ed7,"openfl._legacy.Assets.initialize","openfl/_legacy/Assets.hx",579,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_594_isLocal,"openfl._legacy.Assets","isLocal",0xae5d753a,"openfl._legacy.Assets.isLocal","openfl/_legacy/Assets.hx",594,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_644_isValidBitmapData,"openfl._legacy.Assets","isValidBitmapData",0xcf9de664,"openfl._legacy.Assets.isValidBitmapData","openfl/_legacy/Assets.hx",644,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_675_isValidSound,"openfl._legacy.Assets","isValidSound",0x3cb31c04,"openfl._legacy.Assets.isValidSound","openfl/_legacy/Assets.hx",675,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_685_list,"openfl._legacy.Assets","list",0x7c38faa5,"openfl._legacy.Assets.list","openfl/_legacy/Assets.hx",685,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_708_loadBitmapData,"openfl._legacy.Assets","loadBitmapData",0x55e8dc86,"openfl._legacy.Assets.loadBitmapData","openfl/_legacy/Assets.hx",708,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_717_loadBitmapData,"openfl._legacy.Assets","loadBitmapData",0x55e8dc86,"openfl._legacy.Assets.loadBitmapData","openfl/_legacy/Assets.hx",717,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_746_loadBitmapData,"openfl._legacy.Assets","loadBitmapData",0x55e8dc86,"openfl._legacy.Assets.loadBitmapData","openfl/_legacy/Assets.hx",746,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_778_loadBytes,"openfl._legacy.Assets","loadBytes",0xbf9b54be,"openfl._legacy.Assets.loadBytes","openfl/_legacy/Assets.hx",778,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_787_loadBytes,"openfl._legacy.Assets","loadBytes",0xbf9b54be,"openfl._legacy.Assets.loadBytes","openfl/_legacy/Assets.hx",787,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_822_loadFont,"openfl._legacy.Assets","loadFont",0xe5a03cdc,"openfl._legacy.Assets.loadFont","openfl/_legacy/Assets.hx",822,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_831_loadFont,"openfl._legacy.Assets","loadFont",0xe5a03cdc,"openfl._legacy.Assets.loadFont","openfl/_legacy/Assets.hx",831,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_854_loadFont,"openfl._legacy.Assets","loadFont",0xe5a03cdc,"openfl._legacy.Assets.loadFont","openfl/_legacy/Assets.hx",854,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_886_loadLibrary,"openfl._legacy.Assets","loadLibrary",0x421d6e0e,"openfl._legacy.Assets.loadLibrary","openfl/_legacy/Assets.hx",886,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_895_loadLibrary,"openfl._legacy.Assets","loadLibrary",0x421d6e0e,"openfl._legacy.Assets.loadLibrary","openfl/_legacy/Assets.hx",895,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_924_loadMusic,"openfl._legacy.Assets","loadMusic",0x125e1cf8,"openfl._legacy.Assets.loadMusic","openfl/_legacy/Assets.hx",924,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_933_loadMusic,"openfl._legacy.Assets","loadMusic",0x125e1cf8,"openfl._legacy.Assets.loadMusic","openfl/_legacy/Assets.hx",933,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_962_loadMusic,"openfl._legacy.Assets","loadMusic",0x125e1cf8,"openfl._legacy.Assets.loadMusic","openfl/_legacy/Assets.hx",962,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_994_loadMovieClip,"openfl._legacy.Assets","loadMovieClip",0x15f67473,"openfl._legacy.Assets.loadMovieClip","openfl/_legacy/Assets.hx",994,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_1003_loadMovieClip,"openfl._legacy.Assets","loadMovieClip",0x15f67473,"openfl._legacy.Assets.loadMovieClip","openfl/_legacy/Assets.hx",1003,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_1038_loadSound,"openfl._legacy.Assets","loadSound",0x82cfd922,"openfl._legacy.Assets.loadSound","openfl/_legacy/Assets.hx",1038,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_1047_loadSound,"openfl._legacy.Assets","loadSound",0x82cfd922,"openfl._legacy.Assets.loadSound","openfl/_legacy/Assets.hx",1047,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_1076_loadSound,"openfl._legacy.Assets","loadSound",0x82cfd922,"openfl._legacy.Assets.loadSound","openfl/_legacy/Assets.hx",1076,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_1108_loadText,"openfl._legacy.Assets","loadText",0xeed9abba,"openfl._legacy.Assets.loadText","openfl/_legacy/Assets.hx",1108,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_1117_loadText,"openfl._legacy.Assets","loadText",0xeed9abba,"openfl._legacy.Assets.loadText","openfl/_legacy/Assets.hx",1117,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_1152_registerLibrary,"openfl._legacy.Assets","registerLibrary",0x6f46d3f1,"openfl._legacy.Assets.registerLibrary","openfl/_legacy/Assets.hx",1152,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_1171_removeEventListener,"openfl._legacy.Assets","removeEventListener",0x0094d163,"openfl._legacy.Assets.removeEventListener","openfl/_legacy/Assets.hx",1171,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_1182_resolveClass,"openfl._legacy.Assets","resolveClass",0x1c65baf3,"openfl._legacy.Assets.resolveClass","openfl/_legacy/Assets.hx",1182,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_1187_resolveEnum,"openfl._legacy.Assets","resolveEnum",0x106118a6,"openfl._legacy.Assets.resolveEnum","openfl/_legacy/Assets.hx",1187,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_1206_unloadLibrary,"openfl._legacy.Assets","unloadLibrary",0xacbdfc95,"openfl._legacy.Assets.unloadLibrary","openfl/_legacy/Assets.hx",1206,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_1238_library_onEvent,"openfl._legacy.Assets","library_onEvent",0x9a352310,"openfl._legacy.Assets.library_onEvent","openfl/_legacy/Assets.hx",1238,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_42_boot,"openfl._legacy.Assets","boot",0x75a16279,"openfl._legacy.Assets.boot","openfl/_legacy/Assets.hx",42,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_43_boot,"openfl._legacy.Assets","boot",0x75a16279,"openfl._legacy.Assets.boot","openfl/_legacy/Assets.hx",43,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_45_boot,"openfl._legacy.Assets","boot",0x75a16279,"openfl._legacy.Assets.boot","openfl/_legacy/Assets.hx",45,0x9276b055)
HX_LOCAL_STACK_FRAME(_hx_pos_18e7e486aab8d526_46_boot,"openfl._legacy.Assets","boot",0x75a16279,"openfl._legacy.Assets.boot","openfl/_legacy/Assets.hx",46,0x9276b055)
namespace openfl{
namespace _legacy{

void Assets_obj::__construct() { }

Dynamic Assets_obj::__CreateEmpty() { return new Assets_obj; }

void *Assets_obj::_hx_vtable = 0;

Dynamic Assets_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Assets_obj > _hx_result = new Assets_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Assets_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x13f73f17;
}

::Dynamic Assets_obj::cache;

 ::haxe::ds::StringMap Assets_obj::libraries;

 ::openfl::_legacy::events::EventDispatcher Assets_obj::dispatcher;

bool Assets_obj::initialized;

void Assets_obj::addEventListener(::String type, ::Dynamic listener,hx::Null< bool >  __o_useCapture,hx::Null< int >  __o_priority,hx::Null< bool >  __o_useWeakReference){
bool useCapture = __o_useCapture.Default(false);
int priority = __o_priority.Default(0);
bool useWeakReference = __o_useWeakReference.Default(false);
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_49_addEventListener)
HXLINE(  51)		::openfl::_legacy::Assets_obj::initialize();
HXLINE(  53)		::openfl::_legacy::Assets_obj::dispatcher->addEventListener(type,listener,useCapture,priority,useWeakReference);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Assets_obj,addEventListener,(void))

bool Assets_obj::dispatchEvent( ::openfl::_legacy::events::Event event){
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_58_dispatchEvent)
HXLINE(  60)		::openfl::_legacy::Assets_obj::initialize();
HXLINE(  62)		return ::openfl::_legacy::Assets_obj::dispatcher->dispatchEvent(event);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,dispatchEvent,return )

bool Assets_obj::exists(::String id, ::openfl::_legacy::AssetType type){
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_67_exists)
HXLINE(  69)		::openfl::_legacy::Assets_obj::initialize();
HXLINE(  73)		if (hx::IsNull( type )) {
HXLINE(  75)			type = ::openfl::_legacy::AssetType_obj::BINARY_dyn();
            		}
HXLINE(  79)		::String libraryName = id.substring((int)0,id.indexOf(HX_(":",3a,00,00,00),null()));
HXLINE(  80)		::String symbolName = id.substr((id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1),null());
HXLINE(  81)		 ::openfl::_legacy::AssetLibrary library = ::openfl::_legacy::Assets_obj::getLibrary(libraryName);
HXLINE(  83)		if (hx::IsNotNull( library )) {
HXLINE(  85)			return library->exists(symbolName,type);
            		}
HXLINE(  91)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,exists,return )

 ::openfl::_legacy::display::BitmapData Assets_obj::getBitmapData(::String id,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_103_getBitmapData)
HXLINE( 105)		::openfl::_legacy::Assets_obj::initialize();
HXLINE( 109)		bool _hx_tmp;
HXDLIN( 109)		bool _hx_tmp1;
HXDLIN( 109)		if (useCache) {
HXLINE( 109)			_hx_tmp1 = ( (bool)(::openfl::_legacy::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic)()) );
            		}
            		else {
HXLINE( 109)			_hx_tmp1 = false;
            		}
HXDLIN( 109)		if (_hx_tmp1) {
HXLINE( 109)			_hx_tmp = ::openfl::_legacy::IAssetCache_obj::hasBitmapData(::openfl::_legacy::Assets_obj::cache,id);
            		}
            		else {
HXLINE( 109)			_hx_tmp = false;
            		}
HXDLIN( 109)		if (_hx_tmp) {
HXLINE( 111)			 ::openfl::_legacy::display::BitmapData bitmapData = ::openfl::_legacy::IAssetCache_obj::getBitmapData(::openfl::_legacy::Assets_obj::cache,id);
HXLINE( 113)			if (::openfl::_legacy::Assets_obj::isValidBitmapData(bitmapData)) {
HXLINE( 115)				return bitmapData;
            			}
            		}
HXLINE( 121)		::String libraryName = id.substring((int)0,id.indexOf(HX_(":",3a,00,00,00),null()));
HXLINE( 122)		::String symbolName = id.substr((id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1),null());
HXLINE( 123)		 ::openfl::_legacy::AssetLibrary library = ::openfl::_legacy::Assets_obj::getLibrary(libraryName);
HXLINE( 125)		if (hx::IsNotNull( library )) {
HXLINE( 127)			if (library->exists(symbolName,::openfl::_legacy::AssetType_obj::IMAGE_dyn())) {
HXLINE( 129)				if (library->isLocal(symbolName,::openfl::_legacy::AssetType_obj::IMAGE_dyn())) {
HXLINE( 131)					 ::openfl::_legacy::display::BitmapData bitmapData1 = library->getBitmapData(symbolName);
HXLINE( 133)					bool _hx_tmp2;
HXDLIN( 133)					if (useCache) {
HXLINE( 133)						_hx_tmp2 = ( (bool)(::openfl::_legacy::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic)()) );
            					}
            					else {
HXLINE( 133)						_hx_tmp2 = false;
            					}
HXDLIN( 133)					if (_hx_tmp2) {
HXLINE( 135)						::openfl::_legacy::IAssetCache_obj::setBitmapData(::openfl::_legacy::Assets_obj::cache,id,bitmapData1);
            					}
HXLINE( 139)					return bitmapData1;
            				}
            				else {
HXLINE( 143)					 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 143)					_hx_tmp3(((HX_("[openfl.Assets] BitmapData asset \"",14,c2,50,80) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),143,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getBitmapData",ef,11,33,90)));
            				}
            			}
            			else {
HXLINE( 149)				 ::Dynamic _hx_tmp4 = ::haxe::Log_obj::trace;
HXDLIN( 149)				_hx_tmp4(((HX_("[openfl.Assets] There is no BitmapData asset with an ID of \"",bc,c7,8d,70) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),149,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getBitmapData",ef,11,33,90)));
            			}
            		}
            		else {
HXLINE( 155)			 ::Dynamic _hx_tmp5 = ::haxe::Log_obj::trace;
HXDLIN( 155)			_hx_tmp5(((HX_("[openfl.Assets] There is no asset library named \"",58,a0,33,5b) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),155,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getBitmapData",ef,11,33,90)));
            		}
HXLINE( 161)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getBitmapData,return )

 ::openfl::_legacy::utils::ByteArray Assets_obj::getBytes(::String id){
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_172_getBytes)
HXLINE( 174)		::openfl::_legacy::Assets_obj::initialize();
HXLINE( 178)		::String libraryName = id.substring((int)0,id.indexOf(HX_(":",3a,00,00,00),null()));
HXLINE( 179)		::String symbolName = id.substr((id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1),null());
HXLINE( 180)		 ::openfl::_legacy::AssetLibrary library = ::openfl::_legacy::Assets_obj::getLibrary(libraryName);
HXLINE( 182)		if (hx::IsNotNull( library )) {
HXLINE( 184)			if (library->exists(symbolName,::openfl::_legacy::AssetType_obj::BINARY_dyn())) {
HXLINE( 186)				if (library->isLocal(symbolName,::openfl::_legacy::AssetType_obj::BINARY_dyn())) {
HXLINE( 188)					return library->getBytes(symbolName);
            				}
            				else {
HXLINE( 192)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 192)					_hx_tmp(((HX_("[openfl.Assets] String or ByteArray asset \"",ec,a2,64,a4) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),192,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getBytes",f5,17,6f,1d)));
            				}
            			}
            			else {
HXLINE( 198)				 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 198)				_hx_tmp1(((HX_("[openfl.Assets] There is no String or ByteArray asset with an ID of \"",2a,8b,28,a6) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),198,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getBytes",f5,17,6f,1d)));
            			}
            		}
            		else {
HXLINE( 204)			 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 204)			_hx_tmp2(((HX_("[openfl.Assets] There is no asset library named \"",58,a0,33,5b) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),204,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getBytes",f5,17,6f,1d)));
            		}
HXLINE( 210)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getBytes,return )

 ::openfl::_legacy::text::Font Assets_obj::getFont(::String id,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_221_getFont)
HXLINE( 223)		::openfl::_legacy::Assets_obj::initialize();
HXLINE( 227)		bool _hx_tmp;
HXDLIN( 227)		bool _hx_tmp1;
HXDLIN( 227)		if (useCache) {
HXLINE( 227)			_hx_tmp1 = ( (bool)(::openfl::_legacy::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic)()) );
            		}
            		else {
HXLINE( 227)			_hx_tmp1 = false;
            		}
HXDLIN( 227)		if (_hx_tmp1) {
HXLINE( 227)			_hx_tmp = ::openfl::_legacy::IAssetCache_obj::hasFont(::openfl::_legacy::Assets_obj::cache,id);
            		}
            		else {
HXLINE( 227)			_hx_tmp = false;
            		}
HXDLIN( 227)		if (_hx_tmp) {
HXLINE( 229)			return ::openfl::_legacy::IAssetCache_obj::getFont(::openfl::_legacy::Assets_obj::cache,id);
            		}
HXLINE( 233)		::String libraryName = id.substring((int)0,id.indexOf(HX_(":",3a,00,00,00),null()));
HXLINE( 234)		::String symbolName = id.substr((id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1),null());
HXLINE( 235)		 ::openfl::_legacy::AssetLibrary library = ::openfl::_legacy::Assets_obj::getLibrary(libraryName);
HXLINE( 237)		if (hx::IsNotNull( library )) {
HXLINE( 239)			if (library->exists(symbolName,::openfl::_legacy::AssetType_obj::FONT_dyn())) {
HXLINE( 241)				if (library->isLocal(symbolName,::openfl::_legacy::AssetType_obj::FONT_dyn())) {
HXLINE( 243)					 ::openfl::_legacy::text::Font font = library->getFont(symbolName);
HXLINE( 245)					bool _hx_tmp2;
HXDLIN( 245)					if (useCache) {
HXLINE( 245)						_hx_tmp2 = ( (bool)(::openfl::_legacy::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic)()) );
            					}
            					else {
HXLINE( 245)						_hx_tmp2 = false;
            					}
HXDLIN( 245)					if (_hx_tmp2) {
HXLINE( 247)						::openfl::_legacy::IAssetCache_obj::setFont(::openfl::_legacy::Assets_obj::cache,id,font);
            					}
HXLINE( 251)					return font;
            				}
            				else {
HXLINE( 255)					 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 255)					_hx_tmp3(((HX_("[openfl.Assets] Font asset \"",6a,33,97,c9) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),255,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getFont",85,0d,43,16)));
            				}
            			}
            			else {
HXLINE( 261)				 ::Dynamic _hx_tmp4 = ::haxe::Log_obj::trace;
HXDLIN( 261)				_hx_tmp4(((HX_("[openfl.Assets] There is no Font asset with an ID of \"",d2,d9,10,87) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),261,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getFont",85,0d,43,16)));
            			}
            		}
            		else {
HXLINE( 267)			 ::Dynamic _hx_tmp5 = ::haxe::Log_obj::trace;
HXDLIN( 267)			_hx_tmp5(((HX_("[openfl.Assets] There is no asset library named \"",58,a0,33,5b) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),267,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getFont",85,0d,43,16)));
            		}
HXLINE( 273)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getFont,return )

 ::openfl::_legacy::AssetLibrary Assets_obj::getLibrary(::String name){
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_278_getLibrary)
HXLINE( 280)		bool _hx_tmp;
HXDLIN( 280)		if (hx::IsNotNull( name )) {
HXLINE( 280)			_hx_tmp = (name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 280)			_hx_tmp = true;
            		}
HXDLIN( 280)		if (_hx_tmp) {
HXLINE( 282)			name = HX_("default",c1,d8,c3,9b);
            		}
HXLINE( 286)		return ::openfl::_legacy::Assets_obj::libraries->get(name).StaticCast<  ::openfl::_legacy::AssetLibrary >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getLibrary,return )

 ::openfl::_legacy::display::MovieClip Assets_obj::getMovieClip(::String id){
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_297_getMovieClip)
HXLINE( 299)		::openfl::_legacy::Assets_obj::initialize();
HXLINE( 303)		::String libraryName = id.substring((int)0,id.indexOf(HX_(":",3a,00,00,00),null()));
HXLINE( 304)		::String symbolName = id.substr((id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1),null());
HXLINE( 305)		 ::openfl::_legacy::AssetLibrary library = ::openfl::_legacy::Assets_obj::getLibrary(libraryName);
HXLINE( 307)		if (hx::IsNotNull( library )) {
HXLINE( 309)			if (library->exists(symbolName,::openfl::_legacy::AssetType_obj::MOVIE_CLIP_dyn())) {
HXLINE( 311)				if (library->isLocal(symbolName,::openfl::_legacy::AssetType_obj::MOVIE_CLIP_dyn())) {
HXLINE( 313)					return library->getMovieClip(symbolName);
            				}
            				else {
HXLINE( 317)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 317)					_hx_tmp(((HX_("[openfl.Assets] MovieClip asset \"",09,87,ab,4e) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),317,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getMovieClip",2a,9f,71,27)));
            				}
            			}
            			else {
HXLINE( 323)				 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 323)				_hx_tmp1(((HX_("[openfl.Assets] There is no MovieClip asset with an ID of \"",47,50,6c,1a) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),323,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getMovieClip",2a,9f,71,27)));
            			}
            		}
            		else {
HXLINE( 329)			 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 329)			_hx_tmp2(((HX_("[openfl.Assets] There is no asset library named \"",58,a0,33,5b) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),329,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getMovieClip",2a,9f,71,27)));
            		}
HXLINE( 335)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getMovieClip,return )

 ::openfl::_legacy::media::Sound Assets_obj::getMusic(::String id,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_346_getMusic)
HXLINE( 348)		::openfl::_legacy::Assets_obj::initialize();
HXLINE( 352)		bool _hx_tmp;
HXDLIN( 352)		bool _hx_tmp1;
HXDLIN( 352)		if (useCache) {
HXLINE( 352)			_hx_tmp1 = ( (bool)(::openfl::_legacy::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic)()) );
            		}
            		else {
HXLINE( 352)			_hx_tmp1 = false;
            		}
HXDLIN( 352)		if (_hx_tmp1) {
HXLINE( 352)			_hx_tmp = ::openfl::_legacy::IAssetCache_obj::hasSound(::openfl::_legacy::Assets_obj::cache,id);
            		}
            		else {
HXLINE( 352)			_hx_tmp = false;
            		}
HXDLIN( 352)		if (_hx_tmp) {
HXLINE( 354)			 ::openfl::_legacy::media::Sound sound = ::openfl::_legacy::IAssetCache_obj::getSound(::openfl::_legacy::Assets_obj::cache,id);
HXLINE( 356)			if (::openfl::_legacy::Assets_obj::isValidSound(sound)) {
HXLINE( 358)				return sound;
            			}
            		}
HXLINE( 364)		::String libraryName = id.substring((int)0,id.indexOf(HX_(":",3a,00,00,00),null()));
HXLINE( 365)		::String symbolName = id.substr((id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1),null());
HXLINE( 366)		 ::openfl::_legacy::AssetLibrary library = ::openfl::_legacy::Assets_obj::getLibrary(libraryName);
HXLINE( 368)		if (hx::IsNotNull( library )) {
HXLINE( 370)			if (library->exists(symbolName,::openfl::_legacy::AssetType_obj::MUSIC_dyn())) {
HXLINE( 372)				if (library->isLocal(symbolName,::openfl::_legacy::AssetType_obj::MUSIC_dyn())) {
HXLINE( 374)					 ::openfl::_legacy::media::Sound sound1 = library->getMusic(symbolName);
HXLINE( 376)					bool _hx_tmp2;
HXDLIN( 376)					if (useCache) {
HXLINE( 376)						_hx_tmp2 = ( (bool)(::openfl::_legacy::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic)()) );
            					}
            					else {
HXLINE( 376)						_hx_tmp2 = false;
            					}
HXDLIN( 376)					if (_hx_tmp2) {
HXLINE( 378)						::openfl::_legacy::IAssetCache_obj::setSound(::openfl::_legacy::Assets_obj::cache,id,sound1);
            					}
HXLINE( 382)					return sound1;
            				}
            				else {
HXLINE( 386)					 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 386)					_hx_tmp3(((HX_("[openfl.Assets] Sound asset \"",b8,80,92,c5) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),386,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getMusic",2f,e0,31,70)));
            				}
            			}
            			else {
HXLINE( 392)				 ::Dynamic _hx_tmp4 = ::haxe::Log_obj::trace;
HXDLIN( 392)				_hx_tmp4(((HX_("[openfl.Assets] There is no Sound asset with an ID of \"",b6,c4,50,80) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),392,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getMusic",2f,e0,31,70)));
            			}
            		}
            		else {
HXLINE( 398)			 ::Dynamic _hx_tmp5 = ::haxe::Log_obj::trace;
HXDLIN( 398)			_hx_tmp5(((HX_("[openfl.Assets] There is no asset library named \"",58,a0,33,5b) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),398,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getMusic",2f,e0,31,70)));
            		}
HXLINE( 404)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getMusic,return )

::String Assets_obj::getPath(::String id){
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_415_getPath)
HXLINE( 417)		::openfl::_legacy::Assets_obj::initialize();
HXLINE( 421)		::String libraryName = id.substring((int)0,id.indexOf(HX_(":",3a,00,00,00),null()));
HXLINE( 422)		::String symbolName = id.substr((id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1),null());
HXLINE( 423)		 ::openfl::_legacy::AssetLibrary library = ::openfl::_legacy::Assets_obj::getLibrary(libraryName);
HXLINE( 425)		if (hx::IsNotNull( library )) {
HXLINE( 427)			if (library->exists(symbolName,null())) {
HXLINE( 429)				return library->getPath(symbolName);
            			}
            			else {
HXLINE( 433)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 433)				_hx_tmp(((HX_("[openfl.Assets] There is no asset with an ID of \"",67,af,16,a0) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),433,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getPath",5b,95,d4,1c)));
            			}
            		}
            		else {
HXLINE( 439)			 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 439)			_hx_tmp1(((HX_("[openfl.Assets] There is no asset library named \"",58,a0,33,5b) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),439,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getPath",5b,95,d4,1c)));
            		}
HXLINE( 445)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getPath,return )

 ::openfl::_legacy::media::Sound Assets_obj::getSound(::String id,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_456_getSound)
HXLINE( 458)		::openfl::_legacy::Assets_obj::initialize();
HXLINE( 462)		bool _hx_tmp;
HXDLIN( 462)		bool _hx_tmp1;
HXDLIN( 462)		if (useCache) {
HXLINE( 462)			_hx_tmp1 = ( (bool)(::openfl::_legacy::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic)()) );
            		}
            		else {
HXLINE( 462)			_hx_tmp1 = false;
            		}
HXDLIN( 462)		if (_hx_tmp1) {
HXLINE( 462)			_hx_tmp = ::openfl::_legacy::IAssetCache_obj::hasSound(::openfl::_legacy::Assets_obj::cache,id);
            		}
            		else {
HXLINE( 462)			_hx_tmp = false;
            		}
HXDLIN( 462)		if (_hx_tmp) {
HXLINE( 464)			 ::openfl::_legacy::media::Sound sound = ::openfl::_legacy::IAssetCache_obj::getSound(::openfl::_legacy::Assets_obj::cache,id);
HXLINE( 466)			if (::openfl::_legacy::Assets_obj::isValidSound(sound)) {
HXLINE( 468)				return sound;
            			}
            		}
HXLINE( 474)		::String libraryName = id.substring((int)0,id.indexOf(HX_(":",3a,00,00,00),null()));
HXLINE( 475)		::String symbolName = id.substr((id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1),null());
HXLINE( 476)		 ::openfl::_legacy::AssetLibrary library = ::openfl::_legacy::Assets_obj::getLibrary(libraryName);
HXLINE( 478)		if (hx::IsNotNull( library )) {
HXLINE( 480)			if (library->exists(symbolName,::openfl::_legacy::AssetType_obj::SOUND_dyn())) {
HXLINE( 482)				if (library->isLocal(symbolName,::openfl::_legacy::AssetType_obj::SOUND_dyn())) {
HXLINE( 484)					 ::openfl::_legacy::media::Sound sound1 = library->getSound(symbolName);
HXLINE( 486)					bool _hx_tmp2;
HXDLIN( 486)					if (useCache) {
HXLINE( 486)						_hx_tmp2 = ( (bool)(::openfl::_legacy::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic)()) );
            					}
            					else {
HXLINE( 486)						_hx_tmp2 = false;
            					}
HXDLIN( 486)					if (_hx_tmp2) {
HXLINE( 488)						::openfl::_legacy::IAssetCache_obj::setSound(::openfl::_legacy::Assets_obj::cache,id,sound1);
            					}
HXLINE( 492)					return sound1;
            				}
            				else {
HXLINE( 496)					 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 496)					_hx_tmp3(((HX_("[openfl.Assets] Sound asset \"",b8,80,92,c5) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),496,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getSound",59,9c,a3,e0)));
            				}
            			}
            			else {
HXLINE( 502)				 ::Dynamic _hx_tmp4 = ::haxe::Log_obj::trace;
HXDLIN( 502)				_hx_tmp4(((HX_("[openfl.Assets] There is no Sound asset with an ID of \"",b6,c4,50,80) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),502,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getSound",59,9c,a3,e0)));
            			}
            		}
            		else {
HXLINE( 508)			 ::Dynamic _hx_tmp5 = ::haxe::Log_obj::trace;
HXDLIN( 508)			_hx_tmp5(((HX_("[openfl.Assets] There is no asset library named \"",58,a0,33,5b) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),508,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getSound",59,9c,a3,e0)));
            		}
HXLINE( 514)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getSound,return )

::String Assets_obj::getText(::String id){
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_525_getText)
HXLINE( 527)		::openfl::_legacy::Assets_obj::initialize();
HXLINE( 531)		::String libraryName = id.substring((int)0,id.indexOf(HX_(":",3a,00,00,00),null()));
HXLINE( 532)		::String symbolName = id.substr((id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1),null());
HXLINE( 533)		 ::openfl::_legacy::AssetLibrary library = ::openfl::_legacy::Assets_obj::getLibrary(libraryName);
HXLINE( 535)		if (hx::IsNotNull( library )) {
HXLINE( 537)			if (library->exists(symbolName,::openfl::_legacy::AssetType_obj::TEXT_dyn())) {
HXLINE( 539)				if (library->isLocal(symbolName,::openfl::_legacy::AssetType_obj::TEXT_dyn())) {
HXLINE( 541)					return library->getText(symbolName);
            				}
            				else {
HXLINE( 545)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 545)					_hx_tmp(((HX_("[openfl.Assets] String asset \"",ac,54,47,c5) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),545,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getText",63,7c,7c,1f)));
            				}
            			}
            			else {
HXLINE( 551)				 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 551)				_hx_tmp1(((HX_("[openfl.Assets] There is no String asset with an ID of \"",d4,dd,c2,b2) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),551,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getText",63,7c,7c,1f)));
            			}
            		}
            		else {
HXLINE( 557)			 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 557)			_hx_tmp2(((HX_("[openfl.Assets] There is no asset library named \"",58,a0,33,5b) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),557,HX_("openfl._legacy.Assets",87,27,89,1c),HX_("getText",63,7c,7c,1f)));
            		}
HXLINE( 563)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getText,return )

bool Assets_obj::hasEventListener(::String type){
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_568_hasEventListener)
HXLINE( 570)		::openfl::_legacy::Assets_obj::initialize();
HXLINE( 572)		return ::openfl::_legacy::Assets_obj::dispatcher->hasEventListener(type);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,hasEventListener,return )

void Assets_obj::initialize(){
            	HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_579_initialize)
HXDLIN( 579)		if (!(::openfl::_legacy::Assets_obj::initialized)) {
HXLINE( 583)			::openfl::_legacy::Assets_obj::registerLibrary(HX_("default",c1,d8,c3,9b), ::DefaultAssetLibrary_obj::__alloc( HX_CTX ));
HXLINE( 587)			::openfl::_legacy::Assets_obj::initialized = true;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Assets_obj,initialize,(void))

bool Assets_obj::isLocal(::String id, ::openfl::_legacy::AssetType type,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_594_isLocal)
HXLINE( 596)		::openfl::_legacy::Assets_obj::initialize();
HXLINE( 600)		bool _hx_tmp;
HXDLIN( 600)		if (useCache) {
HXLINE( 600)			_hx_tmp = ( (bool)(::openfl::_legacy::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic)()) );
            		}
            		else {
HXLINE( 600)			_hx_tmp = false;
            		}
HXDLIN( 600)		if (_hx_tmp) {
HXLINE( 602)			bool _hx_tmp1;
HXDLIN( 602)			if (hx::IsNotEq( type,::openfl::_legacy::AssetType_obj::IMAGE_dyn() )) {
HXLINE( 602)				_hx_tmp1 = hx::IsNull( type );
            			}
            			else {
HXLINE( 602)				_hx_tmp1 = true;
            			}
HXDLIN( 602)			if (_hx_tmp1) {
HXLINE( 604)				if (::openfl::_legacy::IAssetCache_obj::hasBitmapData(::openfl::_legacy::Assets_obj::cache,id)) {
HXLINE( 604)					return true;
            				}
            			}
HXLINE( 608)			bool _hx_tmp2;
HXDLIN( 608)			if (hx::IsNotEq( type,::openfl::_legacy::AssetType_obj::FONT_dyn() )) {
HXLINE( 608)				_hx_tmp2 = hx::IsNull( type );
            			}
            			else {
HXLINE( 608)				_hx_tmp2 = true;
            			}
HXDLIN( 608)			if (_hx_tmp2) {
HXLINE( 610)				if (::openfl::_legacy::IAssetCache_obj::hasFont(::openfl::_legacy::Assets_obj::cache,id)) {
HXLINE( 610)					return true;
            				}
            			}
HXLINE( 614)			bool _hx_tmp3;
HXDLIN( 614)			bool _hx_tmp4;
HXDLIN( 614)			if (hx::IsNotEq( type,::openfl::_legacy::AssetType_obj::SOUND_dyn() )) {
HXLINE( 614)				_hx_tmp4 = hx::IsEq( type,::openfl::_legacy::AssetType_obj::MUSIC_dyn() );
            			}
            			else {
HXLINE( 614)				_hx_tmp4 = true;
            			}
HXDLIN( 614)			if (!(_hx_tmp4)) {
HXLINE( 614)				_hx_tmp3 = hx::IsNull( type );
            			}
            			else {
HXLINE( 614)				_hx_tmp3 = true;
            			}
HXDLIN( 614)			if (_hx_tmp3) {
HXLINE( 616)				if (::openfl::_legacy::IAssetCache_obj::hasSound(::openfl::_legacy::Assets_obj::cache,id)) {
HXLINE( 616)					return true;
            				}
            			}
            		}
HXLINE( 622)		::String libraryName = id.substring((int)0,id.indexOf(HX_(":",3a,00,00,00),null()));
HXLINE( 623)		::String symbolName = id.substr((id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1),null());
HXLINE( 624)		 ::openfl::_legacy::AssetLibrary library = ::openfl::_legacy::Assets_obj::getLibrary(libraryName);
HXLINE( 626)		if (hx::IsNotNull( library )) {
HXLINE( 628)			return library->isLocal(symbolName,type);
            		}
HXLINE( 634)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,isLocal,return )

bool Assets_obj::isValidBitmapData( ::openfl::_legacy::display::BitmapData bitmapData){
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_644_isValidBitmapData)
HXDLIN( 644)		return hx::IsNotNull( bitmapData->_hx___handle );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,isValidBitmapData,return )

bool Assets_obj::isValidSound( ::openfl::_legacy::media::Sound sound){
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_675_isValidSound)
HXDLIN( 675)		if (hx::IsNotNull( sound->_hx___handle )) {
HXDLIN( 675)			return hx::IsNotEq( sound->_hx___handle,(int)0 );
            		}
            		else {
HXDLIN( 675)			return false;
            		}
HXDLIN( 675)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,isValidSound,return )

::Array< ::String > Assets_obj::list( ::openfl::_legacy::AssetType type){
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_685_list)
HXLINE( 687)		::openfl::_legacy::Assets_obj::initialize();
HXLINE( 689)		::Array< ::String > items = ::Array_obj< ::String >::__new(0);
HXLINE( 691)		{
HXLINE( 691)			 ::Dynamic library = ::openfl::_legacy::Assets_obj::libraries->iterator();
HXDLIN( 691)			while(( (bool)(library->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 691)				 ::openfl::_legacy::AssetLibrary library1 = ( ( ::openfl::_legacy::AssetLibrary)(library->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 693)				::Array< ::String > libraryItems = library1->list(type);
HXLINE( 695)				if (hx::IsNotNull( libraryItems )) {
HXLINE( 697)					items = items->concat(libraryItems);
            				}
            			}
            		}
HXLINE( 703)		return items;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,list,return )

 ::openfl::_legacy::Future Assets_obj::loadBitmapData(::String id,hx::Null< bool >  __o_useCache, ::Dynamic handler){
bool useCache = __o_useCache.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_708_loadBitmapData)
HXLINE( 710)		::openfl::_legacy::Assets_obj::initialize();
HXLINE( 712)		 ::openfl::_legacy::Promise promise =  ::openfl::_legacy::Promise_obj::__alloc( HX_CTX );
HXLINE( 714)		if (hx::IsNotNull( handler )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_717_loadBitmapData)
HXLINE( 717)				handler(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 716)			promise->future->onComplete(handler);
HXLINE( 717)			promise->future->onError( ::Dynamic(new _hx_Closure_0(handler)));
            		}
HXLINE( 723)		bool _hx_tmp;
HXDLIN( 723)		bool _hx_tmp1;
HXDLIN( 723)		if (useCache) {
HXLINE( 723)			_hx_tmp1 = ( (bool)(::openfl::_legacy::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic)()) );
            		}
            		else {
HXLINE( 723)			_hx_tmp1 = false;
            		}
HXDLIN( 723)		if (_hx_tmp1) {
HXLINE( 723)			_hx_tmp = ::openfl::_legacy::IAssetCache_obj::hasBitmapData(::openfl::_legacy::Assets_obj::cache,id);
            		}
            		else {
HXLINE( 723)			_hx_tmp = false;
            		}
HXDLIN( 723)		if (_hx_tmp) {
HXLINE( 725)			 ::openfl::_legacy::display::BitmapData bitmapData = ::openfl::_legacy::IAssetCache_obj::getBitmapData(::openfl::_legacy::Assets_obj::cache,id);
HXLINE( 727)			if (::openfl::_legacy::Assets_obj::isValidBitmapData(bitmapData)) {
HXLINE( 729)				promise->complete(bitmapData);
HXLINE( 730)				return promise->future;
            			}
            		}
HXLINE( 736)		int libraryName = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 736)		::String libraryName1 = id.substring((int)0,libraryName);
HXLINE( 737)		int symbolName = (id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1);
HXDLIN( 737)		::String symbolName1 = id.substr(symbolName,null());
HXLINE( 738)		 ::openfl::_legacy::AssetLibrary library = ::openfl::_legacy::Assets_obj::getLibrary(libraryName1);
HXLINE( 740)		if (hx::IsNotNull( library )) {
HXLINE( 742)			if (library->exists(symbolName1,::openfl::_legacy::AssetType_obj::IMAGE_dyn())) {
HXLINE( 744)				bool _hx_tmp2;
HXDLIN( 744)				if (useCache) {
HXLINE( 744)					_hx_tmp2 = ( (bool)(::openfl::_legacy::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic)()) );
            				}
            				else {
HXLINE( 744)					_hx_tmp2 = false;
            				}
HXDLIN( 744)				if (_hx_tmp2) {
            					HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,::String,id, ::openfl::_legacy::Promise,promise) HXARGC(1)
            					void _hx_run( ::openfl::_legacy::display::BitmapData bitmapData1){
            						HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_746_loadBitmapData)
HXLINE( 748)						::openfl::_legacy::IAssetCache_obj::setBitmapData(::openfl::_legacy::Assets_obj::cache,id,bitmapData1);
HXLINE( 749)						promise->complete(bitmapData1);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 746)					library->loadBitmapData(symbolName1, ::Dynamic(new _hx_Closure_1(id,promise)));
            				}
            				else {
HXLINE( 755)					library->loadBitmapData(symbolName1,promise->complete_dyn());
            				}
            			}
            			else {
HXLINE( 761)				promise->error(((HX_("[openfl.Assets] There is no BitmapData asset with an ID of \"",bc,c7,8d,70) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE( 767)			promise->error(((HX_("[openfl.Assets] There is no asset library named \"",58,a0,33,5b) + libraryName1) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 773)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,loadBitmapData,return )

 ::openfl::_legacy::Future Assets_obj::loadBytes(::String id, ::Dynamic handler){
            	HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_778_loadBytes)
HXLINE( 780)		::openfl::_legacy::Assets_obj::initialize();
HXLINE( 782)		 ::openfl::_legacy::Promise promise =  ::openfl::_legacy::Promise_obj::__alloc( HX_CTX );
HXLINE( 784)		if (hx::IsNotNull( handler )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_787_loadBytes)
HXLINE( 787)				handler(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 786)			promise->future->onComplete(handler);
HXLINE( 787)			promise->future->onError( ::Dynamic(new _hx_Closure_0(handler)));
            		}
HXLINE( 793)		::String libraryName = id.substring((int)0,id.indexOf(HX_(":",3a,00,00,00),null()));
HXLINE( 794)		::String symbolName = id.substr((id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1),null());
HXLINE( 795)		 ::openfl::_legacy::AssetLibrary library = ::openfl::_legacy::Assets_obj::getLibrary(libraryName);
HXLINE( 797)		if (hx::IsNotNull( library )) {
HXLINE( 799)			if (library->exists(symbolName,::openfl::_legacy::AssetType_obj::BINARY_dyn())) {
HXLINE( 801)				library->loadBytes(symbolName,promise->complete_dyn());
            			}
            			else {
HXLINE( 805)				promise->error(((HX_("[openfl.Assets] There is no String or ByteArray asset with an ID of \"",2a,8b,28,a6) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE( 811)			promise->error(((HX_("[openfl.Assets] There is no asset library named \"",58,a0,33,5b) + libraryName) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 817)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadBytes,return )

 ::openfl::_legacy::Future Assets_obj::loadFont(::String id,hx::Null< bool >  __o_useCache, ::Dynamic handler){
bool useCache = __o_useCache.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_822_loadFont)
HXLINE( 824)		::openfl::_legacy::Assets_obj::initialize();
HXLINE( 826)		 ::openfl::_legacy::Promise promise =  ::openfl::_legacy::Promise_obj::__alloc( HX_CTX );
HXLINE( 828)		if (hx::IsNotNull( handler )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_831_loadFont)
HXLINE( 831)				handler(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 830)			promise->future->onComplete(handler);
HXLINE( 831)			promise->future->onError( ::Dynamic(new _hx_Closure_0(handler)));
            		}
HXLINE( 837)		bool _hx_tmp;
HXDLIN( 837)		bool _hx_tmp1;
HXDLIN( 837)		if (useCache) {
HXLINE( 837)			_hx_tmp1 = ( (bool)(::openfl::_legacy::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic)()) );
            		}
            		else {
HXLINE( 837)			_hx_tmp1 = false;
            		}
HXDLIN( 837)		if (_hx_tmp1) {
HXLINE( 837)			_hx_tmp = ::openfl::_legacy::IAssetCache_obj::hasFont(::openfl::_legacy::Assets_obj::cache,id);
            		}
            		else {
HXLINE( 837)			_hx_tmp = false;
            		}
HXDLIN( 837)		if (_hx_tmp) {
HXLINE( 839)			 ::openfl::_legacy::text::Font _hx_tmp2 = ::openfl::_legacy::IAssetCache_obj::getFont(::openfl::_legacy::Assets_obj::cache,id);
HXDLIN( 839)			promise->complete(_hx_tmp2);
HXLINE( 840)			return promise->future;
            		}
HXLINE( 844)		int libraryName = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 844)		::String libraryName1 = id.substring((int)0,libraryName);
HXLINE( 845)		int symbolName = (id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1);
HXDLIN( 845)		::String symbolName1 = id.substr(symbolName,null());
HXLINE( 846)		 ::openfl::_legacy::AssetLibrary library = ::openfl::_legacy::Assets_obj::getLibrary(libraryName1);
HXLINE( 848)		if (hx::IsNotNull( library )) {
HXLINE( 850)			if (library->exists(symbolName1,::openfl::_legacy::AssetType_obj::FONT_dyn())) {
HXLINE( 852)				bool _hx_tmp3;
HXDLIN( 852)				if (useCache) {
HXLINE( 852)					_hx_tmp3 = ( (bool)(::openfl::_legacy::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic)()) );
            				}
            				else {
HXLINE( 852)					_hx_tmp3 = false;
            				}
HXDLIN( 852)				if (_hx_tmp3) {
            					HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,::String,id, ::openfl::_legacy::Promise,promise) HXARGC(1)
            					void _hx_run( ::openfl::_legacy::text::Font font){
            						HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_854_loadFont)
HXLINE( 856)						::openfl::_legacy::IAssetCache_obj::setFont(::openfl::_legacy::Assets_obj::cache,id,font);
HXLINE( 857)						promise->complete(font);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 854)					library->loadFont(symbolName1, ::Dynamic(new _hx_Closure_1(id,promise)));
            				}
            				else {
HXLINE( 863)					library->loadFont(symbolName1,promise->complete_dyn());
            				}
            			}
            			else {
HXLINE( 869)				promise->error(((HX_("[openfl.Assets] There is no Font asset with an ID of \"",d2,d9,10,87) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE( 875)			promise->error(((HX_("[openfl.Assets] There is no asset library named \"",58,a0,33,5b) + libraryName1) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 881)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,loadFont,return )

 ::openfl::_legacy::Future Assets_obj::loadLibrary(::String name, ::Dynamic handler){
            	HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_886_loadLibrary)
HXLINE( 888)		::openfl::_legacy::Assets_obj::initialize();
HXLINE( 890)		 ::openfl::_legacy::Promise promise =  ::openfl::_legacy::Promise_obj::__alloc( HX_CTX );
HXLINE( 892)		if (hx::IsNotNull( handler )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_895_loadLibrary)
HXLINE( 895)				handler(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 894)			promise->future->onComplete(handler);
HXLINE( 895)			promise->future->onError( ::Dynamic(new _hx_Closure_0(handler)));
            		}
HXLINE( 901)		::String data = ::openfl::_legacy::Assets_obj::getText(((HX_("libraries/",f6,c5,4d,c0) + name) + HX_(".json",56,f1,d6,c2)));
HXLINE( 903)		bool _hx_tmp;
HXDLIN( 903)		if (hx::IsNotNull( data )) {
HXLINE( 903)			_hx_tmp = (data != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 903)			_hx_tmp = false;
            		}
HXDLIN( 903)		if (_hx_tmp) {
HXLINE( 905)			 ::Dynamic info =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->parseRec();
HXLINE( 906)			hx::Class library = ::Type_obj::resolveClass(( (::String)(info->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ));
HXDLIN( 906)			 ::openfl::_legacy::AssetLibrary library1 = ( ( ::openfl::_legacy::AssetLibrary)(::Type_obj::createInstance(library,( (::cpp::VirtualArray)(info->__Field(HX_("args",5d,8d,74,40),hx::paccDynamic)) ))) );
HXLINE( 907)			::openfl::_legacy::Assets_obj::libraries->set(name,library1);
HXLINE( 908)			library1->eventCallback = ::openfl::_legacy::Assets_obj::library_onEvent_dyn();
HXLINE( 909)			library1->load(promise->complete_dyn());
            		}
            		else {
HXLINE( 913)			promise->error(((HX_("[openfl.Assets] There is no asset library named \"",58,a0,33,5b) + name) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 919)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadLibrary,return )

 ::openfl::_legacy::Future Assets_obj::loadMusic(::String id,hx::Null< bool >  __o_useCache, ::Dynamic handler){
bool useCache = __o_useCache.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_924_loadMusic)
HXLINE( 926)		::openfl::_legacy::Assets_obj::initialize();
HXLINE( 928)		 ::openfl::_legacy::Promise promise =  ::openfl::_legacy::Promise_obj::__alloc( HX_CTX );
HXLINE( 930)		if (hx::IsNotNull( handler )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_933_loadMusic)
HXLINE( 933)				handler(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 932)			promise->future->onComplete(handler);
HXLINE( 933)			promise->future->onError( ::Dynamic(new _hx_Closure_0(handler)));
            		}
HXLINE( 939)		bool _hx_tmp;
HXDLIN( 939)		bool _hx_tmp1;
HXDLIN( 939)		if (useCache) {
HXLINE( 939)			_hx_tmp1 = ( (bool)(::openfl::_legacy::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic)()) );
            		}
            		else {
HXLINE( 939)			_hx_tmp1 = false;
            		}
HXDLIN( 939)		if (_hx_tmp1) {
HXLINE( 939)			_hx_tmp = ::openfl::_legacy::IAssetCache_obj::hasSound(::openfl::_legacy::Assets_obj::cache,id);
            		}
            		else {
HXLINE( 939)			_hx_tmp = false;
            		}
HXDLIN( 939)		if (_hx_tmp) {
HXLINE( 941)			 ::openfl::_legacy::media::Sound sound = ::openfl::_legacy::IAssetCache_obj::getSound(::openfl::_legacy::Assets_obj::cache,id);
HXLINE( 943)			if (::openfl::_legacy::Assets_obj::isValidSound(sound)) {
HXLINE( 945)				promise->complete(sound);
HXLINE( 946)				return promise->future;
            			}
            		}
HXLINE( 952)		int libraryName = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 952)		::String libraryName1 = id.substring((int)0,libraryName);
HXLINE( 953)		int symbolName = (id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1);
HXDLIN( 953)		::String symbolName1 = id.substr(symbolName,null());
HXLINE( 954)		 ::openfl::_legacy::AssetLibrary library = ::openfl::_legacy::Assets_obj::getLibrary(libraryName1);
HXLINE( 956)		if (hx::IsNotNull( library )) {
HXLINE( 958)			if (library->exists(symbolName1,::openfl::_legacy::AssetType_obj::MUSIC_dyn())) {
HXLINE( 960)				bool _hx_tmp2;
HXDLIN( 960)				if (useCache) {
HXLINE( 960)					_hx_tmp2 = ( (bool)(::openfl::_legacy::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic)()) );
            				}
            				else {
HXLINE( 960)					_hx_tmp2 = false;
            				}
HXDLIN( 960)				if (_hx_tmp2) {
            					HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,::String,id, ::openfl::_legacy::Promise,promise) HXARGC(1)
            					void _hx_run( ::openfl::_legacy::media::Sound sound1){
            						HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_962_loadMusic)
HXLINE( 964)						::openfl::_legacy::IAssetCache_obj::setSound(::openfl::_legacy::Assets_obj::cache,id,sound1);
HXLINE( 965)						promise->complete(sound1);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 962)					library->loadMusic(symbolName1, ::Dynamic(new _hx_Closure_1(id,promise)));
            				}
            				else {
HXLINE( 971)					library->loadMusic(symbolName1,promise->complete_dyn());
            				}
            			}
            			else {
HXLINE( 977)				promise->error(((HX_("[openfl.Assets] There is no Sound asset with an ID of \"",b6,c4,50,80) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE( 983)			promise->error(((HX_("[openfl.Assets] There is no asset library named \"",58,a0,33,5b) + libraryName1) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 989)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,loadMusic,return )

 ::openfl::_legacy::Future Assets_obj::loadMovieClip(::String id, ::Dynamic handler){
            	HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_994_loadMovieClip)
HXLINE( 996)		::openfl::_legacy::Assets_obj::initialize();
HXLINE( 998)		 ::openfl::_legacy::Promise promise =  ::openfl::_legacy::Promise_obj::__alloc( HX_CTX );
HXLINE(1000)		if (hx::IsNotNull( handler )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_1003_loadMovieClip)
HXLINE(1003)				handler(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1002)			promise->future->onComplete(handler);
HXLINE(1003)			promise->future->onError( ::Dynamic(new _hx_Closure_0(handler)));
            		}
HXLINE(1009)		::String libraryName = id.substring((int)0,id.indexOf(HX_(":",3a,00,00,00),null()));
HXLINE(1010)		::String symbolName = id.substr((id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1),null());
HXLINE(1011)		 ::openfl::_legacy::AssetLibrary library = ::openfl::_legacy::Assets_obj::getLibrary(libraryName);
HXLINE(1013)		if (hx::IsNotNull( library )) {
HXLINE(1015)			if (library->exists(symbolName,::openfl::_legacy::AssetType_obj::MOVIE_CLIP_dyn())) {
HXLINE(1017)				library->loadMovieClip(symbolName,promise->complete_dyn());
            			}
            			else {
HXLINE(1021)				promise->error(((HX_("[openfl.Assets] There is no MovieClip asset with an ID of \"",47,50,6c,1a) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE(1027)			promise->error(((HX_("[openfl.Assets] There is no asset library named \"",58,a0,33,5b) + libraryName) + HX_("\"",22,00,00,00)));
            		}
HXLINE(1033)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadMovieClip,return )

 ::openfl::_legacy::Future Assets_obj::loadSound(::String id,hx::Null< bool >  __o_useCache, ::Dynamic handler){
bool useCache = __o_useCache.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_1038_loadSound)
HXLINE(1040)		::openfl::_legacy::Assets_obj::initialize();
HXLINE(1042)		 ::openfl::_legacy::Promise promise =  ::openfl::_legacy::Promise_obj::__alloc( HX_CTX );
HXLINE(1044)		if (hx::IsNotNull( handler )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_1047_loadSound)
HXLINE(1047)				handler(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1046)			promise->future->onComplete(handler);
HXLINE(1047)			promise->future->onError( ::Dynamic(new _hx_Closure_0(handler)));
            		}
HXLINE(1053)		bool _hx_tmp;
HXDLIN(1053)		bool _hx_tmp1;
HXDLIN(1053)		if (useCache) {
HXLINE(1053)			_hx_tmp1 = ( (bool)(::openfl::_legacy::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic)()) );
            		}
            		else {
HXLINE(1053)			_hx_tmp1 = false;
            		}
HXDLIN(1053)		if (_hx_tmp1) {
HXLINE(1053)			_hx_tmp = ::openfl::_legacy::IAssetCache_obj::hasSound(::openfl::_legacy::Assets_obj::cache,id);
            		}
            		else {
HXLINE(1053)			_hx_tmp = false;
            		}
HXDLIN(1053)		if (_hx_tmp) {
HXLINE(1055)			 ::openfl::_legacy::media::Sound sound = ::openfl::_legacy::IAssetCache_obj::getSound(::openfl::_legacy::Assets_obj::cache,id);
HXLINE(1057)			if (::openfl::_legacy::Assets_obj::isValidSound(sound)) {
HXLINE(1059)				promise->complete(sound);
HXLINE(1060)				return promise->future;
            			}
            		}
HXLINE(1066)		int libraryName = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN(1066)		::String libraryName1 = id.substring((int)0,libraryName);
HXLINE(1067)		int symbolName = (id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1);
HXDLIN(1067)		::String symbolName1 = id.substr(symbolName,null());
HXLINE(1068)		 ::openfl::_legacy::AssetLibrary library = ::openfl::_legacy::Assets_obj::getLibrary(libraryName1);
HXLINE(1070)		if (hx::IsNotNull( library )) {
HXLINE(1072)			if (library->exists(symbolName1,::openfl::_legacy::AssetType_obj::SOUND_dyn())) {
HXLINE(1074)				bool _hx_tmp2;
HXDLIN(1074)				if (useCache) {
HXLINE(1074)					_hx_tmp2 = ( (bool)(::openfl::_legacy::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic)()) );
            				}
            				else {
HXLINE(1074)					_hx_tmp2 = false;
            				}
HXDLIN(1074)				if (_hx_tmp2) {
            					HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,::String,id, ::openfl::_legacy::Promise,promise) HXARGC(1)
            					void _hx_run( ::openfl::_legacy::media::Sound sound1){
            						HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_1076_loadSound)
HXLINE(1078)						::openfl::_legacy::IAssetCache_obj::setSound(::openfl::_legacy::Assets_obj::cache,id,sound1);
HXLINE(1079)						promise->complete(sound1);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1076)					library->loadSound(symbolName1, ::Dynamic(new _hx_Closure_1(id,promise)));
            				}
            				else {
HXLINE(1085)					library->loadSound(symbolName1,promise->complete_dyn());
            				}
            			}
            			else {
HXLINE(1091)				promise->error(((HX_("[openfl.Assets] There is no Sound asset with an ID of \"",b6,c4,50,80) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE(1097)			promise->error(((HX_("[openfl.Assets] There is no asset library named \"",58,a0,33,5b) + libraryName1) + HX_("\"",22,00,00,00)));
            		}
HXLINE(1103)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,loadSound,return )

 ::openfl::_legacy::Future Assets_obj::loadText(::String id, ::Dynamic handler){
            	HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_1108_loadText)
HXLINE(1110)		::openfl::_legacy::Assets_obj::initialize();
HXLINE(1112)		 ::openfl::_legacy::Promise promise =  ::openfl::_legacy::Promise_obj::__alloc( HX_CTX );
HXLINE(1114)		if (hx::IsNotNull( handler )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_1117_loadText)
HXLINE(1117)				handler(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1116)			promise->future->onComplete(handler);
HXLINE(1117)			promise->future->onError( ::Dynamic(new _hx_Closure_0(handler)));
            		}
HXLINE(1123)		::String libraryName = id.substring((int)0,id.indexOf(HX_(":",3a,00,00,00),null()));
HXLINE(1124)		::String symbolName = id.substr((id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1),null());
HXLINE(1125)		 ::openfl::_legacy::AssetLibrary library = ::openfl::_legacy::Assets_obj::getLibrary(libraryName);
HXLINE(1127)		if (hx::IsNotNull( library )) {
HXLINE(1129)			if (library->exists(symbolName,::openfl::_legacy::AssetType_obj::TEXT_dyn())) {
HXLINE(1131)				library->loadText(symbolName,promise->complete_dyn());
            			}
            			else {
HXLINE(1135)				promise->error(((HX_("[openfl.Assets] There is no String asset with an ID of \"",d4,dd,c2,b2) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE(1141)			promise->error(((HX_("[openfl.Assets] There is no asset library named \"",58,a0,33,5b) + libraryName) + HX_("\"",22,00,00,00)));
            		}
HXLINE(1147)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadText,return )

void Assets_obj::registerLibrary(::String name, ::openfl::_legacy::AssetLibrary library){
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_1152_registerLibrary)
HXLINE(1154)		if (::openfl::_legacy::Assets_obj::libraries->exists(name)) {
HXLINE(1156)			::openfl::_legacy::Assets_obj::unloadLibrary(name);
            		}
HXLINE(1160)		if (hx::IsNotNull( library )) {
HXLINE(1162)			library->eventCallback = ::openfl::_legacy::Assets_obj::library_onEvent_dyn();
            		}
HXLINE(1166)		::openfl::_legacy::Assets_obj::libraries->set(name,library);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,registerLibrary,(void))

void Assets_obj::removeEventListener(::String type, ::Dynamic listener,hx::Null< bool >  __o_capture){
bool capture = __o_capture.Default(false);
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_1171_removeEventListener)
HXLINE(1173)		::openfl::_legacy::Assets_obj::initialize();
HXLINE(1175)		::openfl::_legacy::Assets_obj::dispatcher->removeEventListener(type,listener,capture);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,removeEventListener,(void))

hx::Class Assets_obj::resolveClass(::String name){
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_1182_resolveClass)
HXDLIN(1182)		return ::Type_obj::resolveClass(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,resolveClass,return )

hx::Class Assets_obj::resolveEnum(::String name){
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_1187_resolveEnum)
HXLINE(1189)		hx::Class value = ::Type_obj::resolveEnum(name);
HXLINE(1201)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,resolveEnum,return )

void Assets_obj::unloadLibrary(::String name){
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_1206_unloadLibrary)
HXLINE(1208)		::openfl::_legacy::Assets_obj::initialize();
HXLINE(1212)		 ::openfl::_legacy::AssetLibrary library = ::openfl::_legacy::Assets_obj::libraries->get(name).StaticCast<  ::openfl::_legacy::AssetLibrary >();
HXLINE(1214)		if (hx::IsNotNull( library )) {
HXLINE(1216)			::Dynamic _hx_tmp = ::openfl::_legacy::Assets_obj::cache;
HXDLIN(1216)			::openfl::_legacy::IAssetCache_obj::clear(_hx_tmp,(name + HX_(":",3a,00,00,00)));
HXLINE(1217)			library->unload();
HXLINE(1218)			library->eventCallback = null();
            		}
HXLINE(1222)		::openfl::_legacy::Assets_obj::libraries->remove(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,unloadLibrary,(void))

void Assets_obj::library_onEvent( ::openfl::_legacy::AssetLibrary library,::String type){
            	HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_1238_library_onEvent)
HXDLIN(1238)		if ((type == HX_("change",70,91,72,b7))) {
HXLINE(1240)			::openfl::_legacy::IAssetCache_obj::clear(::openfl::_legacy::Assets_obj::cache,null());
HXLINE(1241)			::openfl::_legacy::Assets_obj::dispatchEvent( ::openfl::_legacy::events::Event_obj::__alloc( HX_CTX ,::openfl::_legacy::events::Event_obj::CHANGE,null(),null()));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,library_onEvent,(void))


Assets_obj::Assets_obj()
{
}

bool Assets_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { outValue = ( cache ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPath") ) { outValue = getPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getText") ) { outValue = getText_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isLocal") ) { outValue = isLocal_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getBytes") ) { outValue = getBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getMusic") ) { outValue = getMusic_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSound") ) { outValue = getSound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFont") ) { outValue = loadFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadText") ) { outValue = loadText_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"libraries") ) { outValue = ( libraries ); return true; }
		if (HX_FIELD_EQ(inName,"loadBytes") ) { outValue = loadBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadMusic") ) { outValue = loadMusic_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadSound") ) { outValue = loadSound_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dispatcher") ) { outValue = ( dispatcher ); return true; }
		if (HX_FIELD_EQ(inName,"getLibrary") ) { outValue = getLibrary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"initialize") ) { outValue = initialize_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { outValue = ( initialized ); return true; }
		if (HX_FIELD_EQ(inName,"loadLibrary") ) { outValue = loadLibrary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resolveEnum") ) { outValue = resolveEnum_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getMovieClip") ) { outValue = getMovieClip_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isValidSound") ) { outValue = isValidSound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resolveClass") ) { outValue = resolveClass_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"dispatchEvent") ) { outValue = dispatchEvent_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBitmapData") ) { outValue = getBitmapData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadMovieClip") ) { outValue = loadMovieClip_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unloadLibrary") ) { outValue = unloadLibrary_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"loadBitmapData") ) { outValue = loadBitmapData_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"registerLibrary") ) { outValue = registerLibrary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"library_onEvent") ) { outValue = library_onEvent_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"addEventListener") ) { outValue = addEventListener_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hasEventListener") ) { outValue = hasEventListener_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"isValidBitmapData") ) { outValue = isValidBitmapData_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"removeEventListener") ) { outValue = removeEventListener_dyn(); return true; }
	}
	return false;
}

bool Assets_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { cache=ioValue.Cast< ::Dynamic >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"libraries") ) { libraries=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dispatcher") ) { dispatcher=ioValue.Cast<  ::openfl::_legacy::events::EventDispatcher >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Assets_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Assets_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::_legacy::IAssetCache*/ ,(void *) &Assets_obj::cache,HX_HCSTRING("cache","\x42","\x9a","\x14","\x41")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Assets_obj::libraries,HX_HCSTRING("libraries","\x19","\x50","\xf8","\x18")},
	{hx::fsObject /*::openfl::_legacy::events::EventDispatcher*/ ,(void *) &Assets_obj::dispatcher,HX_HCSTRING("dispatcher","\xa7","\xc9","\x00","\x5a")},
	{hx::fsBool,(void *) &Assets_obj::initialized,HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Assets_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Assets_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Assets_obj::cache,"cache");
	HX_MARK_MEMBER_NAME(Assets_obj::libraries,"libraries");
	HX_MARK_MEMBER_NAME(Assets_obj::dispatcher,"dispatcher");
	HX_MARK_MEMBER_NAME(Assets_obj::initialized,"initialized");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Assets_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Assets_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Assets_obj::cache,"cache");
	HX_VISIT_MEMBER_NAME(Assets_obj::libraries,"libraries");
	HX_VISIT_MEMBER_NAME(Assets_obj::dispatcher,"dispatcher");
	HX_VISIT_MEMBER_NAME(Assets_obj::initialized,"initialized");
};

#endif

hx::Class Assets_obj::__mClass;

static ::String Assets_obj_sStaticFields[] = {
	HX_HCSTRING("cache","\x42","\x9a","\x14","\x41"),
	HX_HCSTRING("libraries","\x19","\x50","\xf8","\x18"),
	HX_HCSTRING("dispatcher","\xa7","\xc9","\x00","\x5a"),
	HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37"),
	HX_HCSTRING("addEventListener","\xcd","\x0b","\x64","\xf1"),
	HX_HCSTRING("dispatchEvent","\x00","\xc7","\x64","\xc6"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("getBitmapData","\xef","\x11","\x33","\x90"),
	HX_HCSTRING("getBytes","\xf5","\x17","\x6f","\x1d"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getLibrary","\x05","\xad","\xd1","\x8e"),
	HX_HCSTRING("getMovieClip","\x2a","\x9f","\x71","\x27"),
	HX_HCSTRING("getMusic","\x2f","\xe0","\x31","\x70"),
	HX_HCSTRING("getPath","\x5b","\x95","\xd4","\x1c"),
	HX_HCSTRING("getSound","\x59","\x9c","\xa3","\xe0"),
	HX_HCSTRING("getText","\x63","\x7c","\x7c","\x1f"),
	HX_HCSTRING("hasEventListener","\xf4","\x2e","\xea","\x0c"),
	HX_HCSTRING("initialize","\x50","\x31","\xbb","\xec"),
	HX_HCSTRING("isLocal","\x21","\x6d","\x76","\x15"),
	HX_HCSTRING("isValidBitmapData","\x0b","\x65","\xe4","\xe6"),
	HX_HCSTRING("isValidSound","\xbd","\x1e","\x2b","\xa1"),
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("loadBitmapData","\x7f","\xbf","\x71","\xca"),
	HX_HCSTRING("loadBytes","\x65","\x54","\xcf","\xd8"),
	HX_HCSTRING("loadFont","\x15","\x2f","\x60","\xb4"),
	HX_HCSTRING("loadLibrary","\x75","\xe5","\x0d","\x10"),
	HX_HCSTRING("loadMusic","\x9f","\x1c","\x92","\x2b"),
	HX_HCSTRING("loadMovieClip","\x9a","\xd3","\x80","\x9a"),
	HX_HCSTRING("loadSound","\xc9","\xd8","\x03","\x9c"),
	HX_HCSTRING("loadText","\xf3","\x9d","\x99","\xbd"),
	HX_HCSTRING("registerLibrary","\xd8","\x8a","\x84","\xf2"),
	HX_HCSTRING("removeEventListener","\xca","\x87","\x75","\x55"),
	HX_HCSTRING("resolveClass","\xac","\xbd","\xdd","\x80"),
	HX_HCSTRING("resolveEnum","\x0d","\x90","\x51","\xde"),
	HX_HCSTRING("unloadLibrary","\xbc","\x5b","\x48","\x31"),
	HX_HCSTRING("library_onEvent","\xf7","\xd9","\x72","\x1d"),
	::String(null())
};

void Assets_obj::__register()
{
	hx::Object *dummy = new Assets_obj;
	Assets_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._legacy.Assets","\x87","\x27","\x89","\x1c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Assets_obj::__GetStatic;
	__mClass->mSetStaticField = &Assets_obj::__SetStatic;
	__mClass->mMarkFunc = Assets_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Assets_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Assets_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Assets_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Assets_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Assets_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Assets_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_42_boot)
HXDLIN(  42)		cache =  ::openfl::_legacy::AssetCache_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_43_boot)
HXDLIN(  43)		libraries =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_18e7e486aab8d526_45_boot)
HXDLIN(  45)		dispatcher =  ::openfl::_legacy::events::EventDispatcher_obj::__alloc( HX_CTX ,null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_18e7e486aab8d526_46_boot)
HXDLIN(  46)		initialized = false;
            	}
}

} // end namespace openfl
} // end namespace _legacy
