// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_DefaultAssetLibrary
#include <DefaultAssetLibrary.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetLibrary
#include <openfl/_legacy/AssetLibrary.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Stage
#include <openfl/_legacy/display/Stage.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_StageAlign
#include <openfl/_legacy/display/StageAlign.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_StageDisplayState
#include <openfl/_legacy/display/StageDisplayState.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_StageQuality
#include <openfl/_legacy/display/StageQuality.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_StageScaleMode
#include <openfl/_legacy/display/StageScaleMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_TouchInfo
#include <openfl/_legacy/display/TouchInfo.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_JoystickEvent
#include <openfl/_legacy/events/JoystickEvent.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_KeyboardEvent
#include <openfl/_legacy/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_MouseEvent
#include <openfl/_legacy/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_SystemEvent
#include <openfl/_legacy/events/SystemEvent.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_TouchEvent
#include <openfl/_legacy/events/TouchEvent.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl__legacy_media_SoundChannel
#include <openfl/_legacy/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl__legacy_net_URLLoader
#include <openfl/_legacy/net/URLLoader.h>
#endif
#ifndef INCLUDED_openfl__legacy_system_ScreenMode
#include <openfl/_legacy/system/ScreenMode.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d4acca48e18394dd_158_new,"openfl._legacy.display.Stage","new",0x8f657500,"openfl._legacy.display.Stage.new","openfl/_legacy/display/Stage.hx",158,0x8b30a073)
HX_DEFINE_STACK_FRAME(_hx_pos_d4acca48e18394dd_119_new,"openfl._legacy.display.Stage","new",0x8f657500,"openfl._legacy.display.Stage.new","openfl/_legacy/display/Stage.hx",119,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_179_invalidate,"openfl._legacy.display.Stage","invalidate",0x7cdc48db,"openfl._legacy.display.Stage.invalidate","openfl/_legacy/display/Stage.hx",179,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_186_resize,"openfl._legacy.display.Stage","resize",0x4aca5954,"openfl._legacy.display.Stage.resize","openfl/_legacy/display/Stage.hx",186,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_192_setResolution,"openfl._legacy.display.Stage","setResolution",0x84cb200e,"openfl._legacy.display.Stage.setResolution","openfl/_legacy/display/Stage.hx",192,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_197_setScreenMode,"openfl._legacy.display.Stage","setScreenMode",0xd8194bd1,"openfl._legacy.display.Stage.setScreenMode","openfl/_legacy/display/Stage.hx",197,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_202_setFullscreen,"openfl._legacy.display.Stage","setFullscreen",0x1136251d,"openfl._legacy.display.Stage.setFullscreen","openfl/_legacy/display/Stage.hx",202,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_223_showCursor,"openfl._legacy.display.Stage","showCursor",0x9e0f6313,"openfl._legacy.display.Stage.showCursor","openfl/_legacy/display/Stage.hx",223,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_228___checkFocusInOuts,"openfl._legacy.display.Stage","__checkFocusInOuts",0x5e1ac73a,"openfl._legacy.display.Stage.__checkFocusInOuts","openfl/_legacy/display/Stage.hx",228,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_260___checkInOuts,"openfl._legacy.display.Stage","__checkInOuts",0x26b17b12,"openfl._legacy.display.Stage.__checkInOuts","openfl/_legacy/display/Stage.hx",260,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_332___checkRender,"openfl._legacy.display.Stage","__checkRender",0xa5bd2bbe,"openfl._legacy.display.Stage.__checkRender","openfl/_legacy/display/Stage.hx",332,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_377___doProcessStageEvent,"openfl._legacy.display.Stage","__doProcessStageEvent",0xc4416d40,"openfl._legacy.display.Stage.__doProcessStageEvent","openfl/_legacy/display/Stage.hx",377,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_569___processStageEvent,"openfl._legacy.display.Stage","__processStageEvent",0xd0ccd14b,"openfl._legacy.display.Stage.__processStageEvent","openfl/_legacy/display/Stage.hx",569,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_577___drag,"openfl._legacy.display.Stage","__drag",0x33b78e74,"openfl._legacy.display.Stage.__drag","openfl/_legacy/display/Stage.hx",577,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_619___nextFrameDue,"openfl._legacy.display.Stage","__nextFrameDue",0xba16f01a,"openfl._legacy.display.Stage.__nextFrameDue","openfl/_legacy/display/Stage.hx",619,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_643___onChange,"openfl._legacy.display.Stage","__onChange",0x300a2a6f,"openfl._legacy.display.Stage.__onChange","openfl/_legacy/display/Stage.hx",643,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_656___onFocus,"openfl._legacy.display.Stage","__onFocus",0x8b642bb9,"openfl._legacy.display.Stage.__onFocus","openfl/_legacy/display/Stage.hx",656,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_688___onJoystick,"openfl._legacy.display.Stage","__onJoystick",0x1c60f77b,"openfl._legacy.display.Stage.__onJoystick","openfl/_legacy/display/Stage.hx",688,0x8b30a073)
static const Float _hx_array_data_10cf350e_24[] = {
	0.0,0.0,0.0,0.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_824___onKey,"openfl._legacy.display.Stage","__onKey",0x5f97eb40,"openfl._legacy.display.Stage.__onKey","openfl/_legacy/display/Stage.hx",824,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_879___onMouse,"openfl._legacy.display.Stage","__onMouse",0x933fe206,"openfl._legacy.display.Stage.__onMouse","openfl/_legacy/display/Stage.hx",879,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_999___onRenderContext,"openfl._legacy.display.Stage","__onRenderContext",0xdab01e1a,"openfl._legacy.display.Stage.__onRenderContext","openfl/_legacy/display/Stage.hx",999,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1011___onResize,"openfl._legacy.display.Stage","__onResize",0x8112f2f3,"openfl._legacy.display.Stage.__onResize","openfl/_legacy/display/Stage.hx",1011,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1019___onSysWM,"openfl._legacy.display.Stage","__onSysWM",0x0e41e244,"openfl._legacy.display.Stage.__onSysWM","openfl/_legacy/display/Stage.hx",1019,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1027___onTouch,"openfl._legacy.display.Stage","__onTouch",0x9b0de3a0,"openfl._legacy.display.Stage.__onTouch","openfl/_legacy/display/Stage.hx",1027,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1062___pollTimers,"openfl._legacy.display.Stage","__pollTimers",0x39b5fb2d,"openfl._legacy.display.Stage.__pollTimers","openfl/_legacy/display/Stage.hx",1062,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1089___render,"openfl._legacy.display.Stage","__render",0x60ee6dd6,"openfl._legacy.display.Stage.__render","openfl/_legacy/display/Stage.hx",1089,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1131___setActive,"openfl._legacy.display.Stage","__setActive",0xaa514488,"openfl._legacy.display.Stage.__setActive","openfl/_legacy/display/Stage.hx",1131,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1179___startDrag,"openfl._legacy.display.Stage","__startDrag",0x2fc732f6,"openfl._legacy.display.Stage.__startDrag","openfl/_legacy/display/Stage.hx",1179,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1212___stopDrag,"openfl._legacy.display.Stage","__stopDrag",0x2e151396,"openfl._legacy.display.Stage.__stopDrag","openfl/_legacy/display/Stage.hx",1212,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1220___updateNextWake,"openfl._legacy.display.Stage","__updateNextWake",0xb4347860,"openfl._legacy.display.Stage.__updateNextWake","openfl/_legacy/display/Stage.hx",1220,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1258_get_align,"openfl._legacy.display.Stage","get_align",0xd4898fbc,"openfl._legacy.display.Stage.get_align","openfl/_legacy/display/Stage.hx",1258,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1266_set_align,"openfl._legacy.display.Stage","set_align",0xb7da7bc8,"openfl._legacy.display.Stage.set_align","openfl/_legacy/display/Stage.hx",1266,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1276_get_color,"openfl._legacy.display.Stage","get_color",0xfd54aa5a,"openfl._legacy.display.Stage.get_color","openfl/_legacy/display/Stage.hx",1276,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1283_set_color,"openfl._legacy.display.Stage","set_color",0xe0a59666,"openfl._legacy.display.Stage.set_color","openfl/_legacy/display/Stage.hx",1283,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1288_get_displayState,"openfl._legacy.display.Stage","get_displayState",0xe50f3058,"openfl._legacy.display.Stage.get_displayState","openfl/_legacy/display/Stage.hx",1288,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1296_set_displayState,"openfl._legacy.display.Stage","set_displayState",0x3b511dcc,"openfl._legacy.display.Stage.set_displayState","openfl/_legacy/display/Stage.hx",1296,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1306_get_dpiScale,"openfl._legacy.display.Stage","get_dpiScale",0xafcc2556,"openfl._legacy.display.Stage.get_dpiScale","openfl/_legacy/display/Stage.hx",1306,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1311_get_focus,"openfl._legacy.display.Stage","get_focus",0xb78198cf,"openfl._legacy.display.Stage.get_focus","openfl/_legacy/display/Stage.hx",1311,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1320_set_focus,"openfl._legacy.display.Stage","set_focus",0x9ad284db,"openfl._legacy.display.Stage.set_focus","openfl/_legacy/display/Stage.hx",1320,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1337_set_frameRate,"openfl._legacy.display.Stage","set_frameRate",0xb5987430,"openfl._legacy.display.Stage.set_frameRate","openfl/_legacy/display/Stage.hx",1337,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1349_get_isOpenGL,"openfl._legacy.display.Stage","get_isOpenGL",0x993c5f62,"openfl._legacy.display.Stage.get_isOpenGL","openfl/_legacy/display/Stage.hx",1349,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1354_get_quality,"openfl._legacy.display.Stage","get_quality",0xd07da976,"openfl._legacy.display.Stage.get_quality","openfl/_legacy/display/Stage.hx",1354,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1362_set_quality,"openfl._legacy.display.Stage","set_quality",0xdaeab082,"openfl._legacy.display.Stage.set_quality","openfl/_legacy/display/Stage.hx",1362,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1370_get_scaleMode,"openfl._legacy.display.Stage","get_scaleMode",0x63415b84,"openfl._legacy.display.Stage.get_scaleMode","openfl/_legacy/display/Stage.hx",1370,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1378_set_scaleMode,"openfl._legacy.display.Stage","set_scaleMode",0xa8473d90,"openfl._legacy.display.Stage.set_scaleMode","openfl/_legacy/display/Stage.hx",1378,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1386_get_softKeyboardRect,"openfl._legacy.display.Stage","get_softKeyboardRect",0xfbefc1de,"openfl._legacy.display.Stage.get_softKeyboardRect","openfl/_legacy/display/Stage.hx",1386,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1421_get_stage,"openfl._legacy.display.Stage","get_stage",0x3703a3b5,"openfl._legacy.display.Stage.get_stage","openfl/_legacy/display/Stage.hx",1421,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1426_get_stageFocusRect,"openfl._legacy.display.Stage","get_stageFocusRect",0x749c42a7,"openfl._legacy.display.Stage.get_stageFocusRect","openfl/_legacy/display/Stage.hx",1426,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1427_set_stageFocusRect,"openfl._legacy.display.Stage","set_stageFocusRect",0x514b751b,"openfl._legacy.display.Stage.set_stageFocusRect","openfl/_legacy/display/Stage.hx",1427,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1435_get_autos3d,"openfl._legacy.display.Stage","get_autos3d",0x29c644ac,"openfl._legacy.display.Stage.get_autos3d","openfl/_legacy/display/Stage.hx",1435,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1436_set_autos3d,"openfl._legacy.display.Stage","set_autos3d",0x34334bb8,"openfl._legacy.display.Stage.set_autos3d","openfl/_legacy/display/Stage.hx",1436,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1446_get_stageHeight,"openfl._legacy.display.Stage","get_stageHeight",0xa36d557c,"openfl._legacy.display.Stage.get_stageHeight","openfl/_legacy/display/Stage.hx",1446,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1453_get_stageWidth,"openfl._legacy.display.Stage","get_stageWidth",0x6615f211,"openfl._legacy.display.Stage.get_stageWidth","openfl/_legacy/display/Stage.hx",1453,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_165___default_getOrientation,"openfl._legacy.display.Stage","__default_getOrientation",0x0bedb558,"openfl._legacy.display.Stage.__default_getOrientation","openfl/_legacy/display/Stage.hx",165,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_172___default_getNormalOrientation,"openfl._legacy.display.Stage","__default_getNormalOrientation",0xd1116471,"openfl._legacy.display.Stage.__default_getNormalOrientation","openfl/_legacy/display/Stage.hx",172,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_209_setFixedOrientation,"openfl._legacy.display.Stage","setFixedOrientation",0x524e1a1e,"openfl._legacy.display.Stage.setFixedOrientation","openfl/_legacy/display/Stage.hx",209,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_216___default_shouldRotateInterface,"openfl._legacy.display.Stage","__default_shouldRotateInterface",0x0707512d,"openfl._legacy.display.Stage.__default_shouldRotateInterface","openfl/_legacy/display/Stage.hx",216,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_50_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",50,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_51_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",51,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_53_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",53,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_54_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",54,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_55_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",55,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_56_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",56,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_57_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",57,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_58_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",58,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_59_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",59,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_60_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",60,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_61_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",61,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_85_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",85,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_86_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",86,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_87_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",87,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_88_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",88,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_89_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",89,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_90_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",90,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_91_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",91,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_92_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",92,0x8b30a073)
static const ::String _hx_array_data_10cf350e_83[] = {
	HX_("click",48,7c,5e,48),HX_("middleClick",b3,e4,e5,43),HX_("rightClick",cc,62,23,4b),
};
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_93_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",93,0x8b30a073)
static const ::String _hx_array_data_10cf350e_85[] = {
	HX_("mouseDown",27,b1,c2,ee),HX_("middleMouseDown",12,2b,fe,01),HX_("rightMouseDown",ab,29,d7,cd),
};
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_94_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",94,0x8b30a073)
static const ::String _hx_array_data_10cf350e_87[] = {
	HX_("mouseUp",e0,f3,72,c0),HX_("middleMouseUp",0b,8d,f5,3a),HX_("rightMouseUp",64,83,21,ab),
};
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_96_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",96,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_97_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",97,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1465_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1465,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1466_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1466,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1467_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1467,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1468_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1468,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1469_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1469,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1470_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1470,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1471_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1471,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1472_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1472,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1473_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1473,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1477_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1477,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1478_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1478,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1479_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1479,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1480_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1480,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1481_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1481,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1482_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1482,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1483_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1483,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1484_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1484,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1485_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1485,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1486_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1486,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1487_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1487,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1488_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1488,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1489_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1489,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1490_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1490,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1491_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1491,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1492_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1492,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1493_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1493,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1494_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1494,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1495_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1495,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1496_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1496,0x8b30a073)
HX_LOCAL_STACK_FRAME(_hx_pos_d4acca48e18394dd_1497_boot,"openfl._legacy.display.Stage","boot",0xe179eb92,"openfl._legacy.display.Stage.boot","openfl/_legacy/display/Stage.hx",1497,0x8b30a073)
namespace openfl{
namespace _legacy{
namespace display{

void Stage_obj::__construct( ::Dynamic handle,int width,int height){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String message){
            			HX_GC_STACKFRAME(&_hx_pos_d4acca48e18394dd_158_new)
HXLINE( 158)			HX_STACK_DO_THROW(message);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_d4acca48e18394dd_119_new)
HXLINE( 125)		super::__construct(handle,HX_("Stage",9e,da,38,17));
HXLINE( 127)		this->_hx___mouseOverObjects = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 128)		this->_hx___focusOverObjects = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 129)		this->active = true;
HXLINE( 130)		this->allowsFullScreen = true;
HXLINE( 131)		this->pauseWhenDeactivated = true;
HXLINE( 137)		this->renderRequest = null();
HXLINE( 144)		::openfl::_legacy::display::Stage_obj::lime_set_stage_handler(this->_hx___handle,this->_hx___processStageEvent_dyn(),width,height);
HXLINE( 145)		this->_hx___invalid = false;
HXLINE( 146)		this->_hx___lastRender = (int)0;
HXLINE( 147)		this->_hx___lastDown = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 148)		this->_hx___lastClickTime = (int)0;
HXLINE( 149)		this->_hx___nextRender = (int)0;
HXLINE( 150)		this->set_frameRate((int)100);
HXLINE( 151)		this->_hx___touchInfo =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 152)		this->_hx___joyAxisData =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 154)		::Array< ::Dynamic> this1 = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 154)		this1->__SetSizeExact(null());
HXDLIN( 154)		this->stage3Ds = this1;
HXLINE( 155)		{
HXLINE( 155)			::Array< ::Dynamic> this2 = this->stage3Ds;
HXDLIN( 155)			this2->push( ::openfl::display::Stage3D_obj::__alloc( HX_CTX ));
            		}
HXLINE( 158)		::__hxcpp_set_critical_error_handler( ::Dynamic(new _hx_Closure_0()));
            	}

Dynamic Stage_obj::__CreateEmpty() { return new Stage_obj; }

void *Stage_obj::_hx_vtable = 0;

Dynamic Stage_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Stage_obj > _hx_result = new Stage_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Stage_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x306ae42a) {
		if (inClassId<=(int)0x25b00754) {
			if (inClassId<=(int)0x13f34034) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x13f34034;
			} else {
				return inClassId==(int)0x25b00754;
			}
		} else {
			return inClassId==(int)0x306ae42a;
		}
	} else {
		return inClassId==(int)0x3d2d7617 || inClassId==(int)0x5fcdb6d3;
	}
}

void Stage_obj::invalidate(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_179_invalidate)
HXDLIN( 179)		this->_hx___invalid = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,invalidate,(void))

void Stage_obj::resize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_186_resize)
HXDLIN( 186)		::openfl::_legacy::display::Stage_obj::lime_stage_resize_window(this->_hx___handle,width,height);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,resize,(void))

void Stage_obj::setResolution(int width,int height){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_192_setResolution)
HXDLIN( 192)		::openfl::_legacy::display::Stage_obj::lime_stage_set_resolution(this->_hx___handle,width,height);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,setResolution,(void))

void Stage_obj::setScreenMode( ::openfl::_legacy::_hx_system::ScreenMode mode){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_197_setScreenMode)
HXDLIN( 197)		::openfl::_legacy::display::Stage_obj::lime_stage_set_screenmode(this->_hx___handle,mode->width,mode->height,mode->refreshRate,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,setScreenMode,(void))

void Stage_obj::setFullscreen(bool full){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_202_setFullscreen)
HXDLIN( 202)		::openfl::_legacy::display::Stage_obj::lime_stage_set_fullscreen(this->_hx___handle,full);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,setFullscreen,(void))

void Stage_obj::showCursor(bool show){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_223_showCursor)
HXDLIN( 223)		::openfl::_legacy::display::Stage_obj::lime_stage_show_cursor(this->_hx___handle,show);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,showCursor,(void))

void Stage_obj::_hx___checkFocusInOuts( ::Dynamic event,::Array< ::Dynamic> stack){
            	HX_GC_STACKFRAME(&_hx_pos_d4acca48e18394dd_228___checkFocusInOuts)
HXLINE( 230)		int newLength = stack->length;
HXLINE( 231)		 ::openfl::_legacy::display::InteractiveObject newObject;
HXDLIN( 231)		if ((newLength > (int)0)) {
HXLINE( 231)			newObject = stack->__get((newLength - (int)1)).StaticCast<  ::openfl::_legacy::display::InteractiveObject >();
            		}
            		else {
HXLINE( 231)			newObject = null();
            		}
HXLINE( 232)		int oldLength = this->_hx___focusOverObjects->length;
HXLINE( 233)		 ::openfl::_legacy::display::InteractiveObject oldObject;
HXDLIN( 233)		if ((oldLength > (int)0)) {
HXLINE( 233)			::Array< ::Dynamic> oldObject1 = this->_hx___focusOverObjects;
HXDLIN( 233)			oldObject = oldObject1->__get((oldLength - (int)1)).StaticCast<  ::openfl::_legacy::display::InteractiveObject >();
            		}
            		else {
HXLINE( 233)			oldObject = null();
            		}
HXLINE( 235)		if (hx::IsNotEq( newObject,oldObject )) {
HXLINE( 237)			if (hx::IsNotNull( oldObject )) {
HXLINE( 239)				 ::openfl::events::FocusEvent focusOut =  ::openfl::events::FocusEvent_obj::__alloc( HX_CTX ,HX_("focusOut",96,6f,5e,11),true,false,newObject,hx::IsGreater(  ::Dynamic(event->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)),(int)0 ), ::Dynamic(event->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic)));
HXLINE( 240)				focusOut->set_target(oldObject);
HXLINE( 241)				oldObject->_hx___fireEvent(focusOut);
            			}
HXLINE( 245)			if (hx::IsNotNull( newObject )) {
HXLINE( 247)				 ::openfl::events::FocusEvent focusIn =  ::openfl::events::FocusEvent_obj::__alloc( HX_CTX ,HX_("focusIn",dd,45,83,41),true,false,oldObject,hx::IsGreater(  ::Dynamic(event->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)),(int)0 ), ::Dynamic(event->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic)));
HXLINE( 248)				focusIn->set_target(newObject);
HXLINE( 249)				newObject->_hx___fireEvent(focusIn);
            			}
HXLINE( 253)			this->_hx___focusOverObjects = stack;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___checkFocusInOuts,(void))

bool Stage_obj::_hx___checkInOuts( ::openfl::_legacy::events::MouseEvent event,::Array< ::Dynamic> stack, ::openfl::_legacy::display::TouchInfo touchInfo){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_260___checkInOuts)
HXLINE( 262)		::Array< ::Dynamic> prev;
HXDLIN( 262)		if (hx::IsNull( touchInfo )) {
HXLINE( 262)			prev = this->_hx___mouseOverObjects;
            		}
            		else {
HXLINE( 262)			prev = touchInfo->touchOverObjects;
            		}
HXLINE( 263)		::Array< ::String > events;
HXDLIN( 263)		if (hx::IsNull( touchInfo )) {
HXLINE( 263)			events = ::openfl::_legacy::display::Stage_obj::_hx___mouseChanges;
            		}
            		else {
HXLINE( 263)			events = ::openfl::_legacy::display::Stage_obj::_hx___touchChanges;
            		}
HXLINE( 265)		int newLength = stack->length;
HXLINE( 266)		 ::openfl::_legacy::display::InteractiveObject newObject;
HXDLIN( 266)		if ((newLength > (int)0)) {
HXLINE( 266)			newObject = stack->__get((newLength - (int)1)).StaticCast<  ::openfl::_legacy::display::InteractiveObject >();
            		}
            		else {
HXLINE( 266)			newObject = null();
            		}
HXLINE( 267)		int oldLength = prev->length;
HXLINE( 268)		 ::openfl::_legacy::display::InteractiveObject oldObject;
HXDLIN( 268)		if ((oldLength > (int)0)) {
HXLINE( 268)			oldObject = prev->__get((oldLength - (int)1)).StaticCast<  ::openfl::_legacy::display::InteractiveObject >();
            		}
            		else {
HXLINE( 268)			oldObject = null();
            		}
HXLINE( 270)		if (hx::IsNotEq( newObject,oldObject )) {
HXLINE( 272)			if (hx::IsNotNull( oldObject )) {
HXLINE( 274)				oldObject->_hx___fireEvent(event->_hx___createSimilar(events->__get((int)0),newObject,oldObject));
            			}
HXLINE( 278)			if (hx::IsNotNull( newObject )) {
HXLINE( 280)				newObject->_hx___fireEvent(event->_hx___createSimilar(events->__get((int)1),newObject,newObject));
            			}
HXLINE( 284)			int common = (int)0;
HXLINE( 285)			while(true){
HXLINE( 285)				bool _hx_tmp;
HXDLIN( 285)				bool _hx_tmp1;
HXDLIN( 285)				if ((common < newLength)) {
HXLINE( 285)					_hx_tmp1 = (common < oldLength);
            				}
            				else {
HXLINE( 285)					_hx_tmp1 = false;
            				}
HXDLIN( 285)				if (_hx_tmp1) {
HXLINE( 285)					_hx_tmp = hx::IsEq( stack->__get(common).StaticCast<  ::openfl::_legacy::display::InteractiveObject >(),prev->__get(common).StaticCast<  ::openfl::_legacy::display::InteractiveObject >() );
            				}
            				else {
HXLINE( 285)					_hx_tmp = false;
            				}
HXDLIN( 285)				if (!(_hx_tmp)) {
HXLINE( 285)					goto _hx_goto_9;
            				}
HXLINE( 287)				common = (common + (int)1);
            			}
            			_hx_goto_9:;
HXLINE( 291)			 ::openfl::_legacy::events::MouseEvent rollOut = event->_hx___createSimilar(events->__get((int)2),newObject,oldObject);
HXLINE( 293)			int i = (oldLength - (int)1);
HXLINE( 294)			while((i >= common)){
HXLINE( 296)				prev->__get(i).StaticCast<  ::openfl::_legacy::display::InteractiveObject >()->_hx___dispatchEvent(rollOut);
HXLINE( 297)				i = (i - (int)1);
            			}
HXLINE( 301)			 ::openfl::_legacy::events::MouseEvent rollOver = event->_hx___createSimilar(events->__get((int)3),oldObject,null());
HXLINE( 303)			int i1 = (newLength - (int)1);
HXLINE( 304)			while((i1 >= common)){
HXLINE( 306)				stack->__get(i1).StaticCast<  ::openfl::_legacy::display::InteractiveObject >()->_hx___dispatchEvent(rollOver);
HXLINE( 307)				i1 = (i1 - (int)1);
            			}
HXLINE( 311)			if (hx::IsNull( touchInfo )) {
HXLINE( 313)				this->_hx___mouseOverObjects = stack;
            			}
            			else {
HXLINE( 317)				touchInfo->touchOverObjects = stack;
            			}
HXLINE( 321)			return false;
            		}
HXLINE( 325)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___checkInOuts,return )

void Stage_obj::_hx___checkRender(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_332___checkRender)
HXDLIN( 332)		if ((this->frameRate > (int)0)) {
HXLINE( 334)			Float now = ::haxe::Timer_obj::stamp();
HXLINE( 335)			if ((now >= this->_hx___nextRender)) {
HXLINE( 337)				this->_hx___lastRender = now;
HXLINE( 339)				while((this->_hx___nextRender < this->_hx___lastRender)){
HXLINE( 341)					 ::openfl::_legacy::display::Stage _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 341)					_hx_tmp->_hx___nextRender = (_hx_tmp->_hx___nextRender + this->_hx___framePeriod);
            				}
HXLINE( 345)				if (hx::IsNotNull( this->renderRequest )) {
HXLINE( 347)					this->renderRequest();
            				}
            				else {
HXLINE( 351)					this->_hx___render(true);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,_hx___checkRender,(void))

Float Stage_obj::_hx___doProcessStageEvent( ::Dynamic event){
            	HX_GC_STACKFRAME(&_hx_pos_d4acca48e18394dd_377___doProcessStageEvent)
HXLINE( 383)		Float result = ((Float)0.0);
HXLINE( 384)		int type = ::Std_obj::_hx_int(( (Float)(::Reflect_obj::field(event,HX_("type",ba,f2,08,4d))) ));
HXLINE( 386)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 388)			switch((int)(type)){
            				case (int)1: {
HXLINE( 397)					this->_hx___onKey(event,::openfl::_legacy::events::KeyboardEvent_obj::KEY_DOWN);
            				}
            				break;
            				case (int)2: {
HXLINE( 392)					if (hx::IsNotNull( this->onKey )) {
HXLINE( 393)						this->onKey( ::Dynamic(event->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic)), ::Dynamic(event->__Field(HX_("down",62,f8,6d,42),hx::paccDynamic)), ::Dynamic(event->__Field(HX_("char",d6,5e,bf,41),hx::paccDynamic)), ::Dynamic(event->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)));
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 401)					this->_hx___onKey(event,::openfl::_legacy::events::KeyboardEvent_obj::KEY_UP);
            				}
            				break;
            				case (int)4: {
HXLINE( 405)					this->_hx___onMouse(event,::openfl::_legacy::events::MouseEvent_obj::MOUSE_MOVE,true);
            				}
            				break;
            				case (int)5: {
HXLINE( 409)					this->_hx___onMouse(event,::openfl::_legacy::events::MouseEvent_obj::MOUSE_DOWN,true);
            				}
            				break;
            				case (int)6: {
HXLINE( 413)					this->_hx___onMouse(event,::openfl::_legacy::events::MouseEvent_obj::CLICK,true);
            				}
            				break;
            				case (int)7: {
HXLINE( 417)					this->_hx___onMouse(event,::openfl::_legacy::events::MouseEvent_obj::MOUSE_UP,true);
            				}
            				break;
            				case (int)8: {
HXLINE( 421)					this->_hx___onResize(( (Float)(event->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ),( (Float)(event->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
HXLINE( 422)					if (hx::IsNull( this->renderRequest )) {
HXLINE( 424)						this->_hx___render(false);
            					}
            				}
            				break;
            				case (int)9: {
HXLINE( 430)					this->_hx___pollTimers();
            				}
            				break;
            				case (int)10: {
HXLINE( 434)					if (hx::IsNotNull( this->onQuit )) {
HXLINE( 435)						this->onQuit();
            					}
            				}
            				break;
            				case (int)11: {
HXLINE( 439)					this->_hx___onFocus(event);
            				}
            				break;
            				case (int)12: {
HXLINE( 443)					if (( (bool)(::openfl::_legacy::display::Stage_obj::shouldRotateInterface( ::Dynamic(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)))) )) {
HXLINE( 444)						event->__SetField(HX_("result",dd,68,84,08),(int)2,hx::paccDynamic);
            					}
            				}
            				break;
            				case (int)14: {
HXLINE( 448)					this->_hx___render(true);
            				}
            				break;
            				case (int)15: {
HXLINE( 452)					 ::openfl::_legacy::display::TouchInfo touchInfo =  ::openfl::_legacy::display::TouchInfo_obj::__alloc( HX_CTX );
HXLINE( 453)					::haxe::IMap_obj::set(this->_hx___touchInfo,( (int)(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) ),touchInfo);
HXLINE( 454)					this->_hx___onTouch(event,::openfl::_legacy::events::TouchEvent_obj::TOUCH_BEGIN,touchInfo);
HXLINE( 456)					if ((((int) ::Dynamic(event->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) & (int)(int)32768) > (int)0)) {
HXLINE( 458)						this->_hx___onMouse(event,::openfl::_legacy::events::MouseEvent_obj::MOUSE_DOWN,false);
            					}
            				}
            				break;
            				case (int)16: {
HXLINE( 464)					 ::openfl::_legacy::display::TouchInfo touchInfo1 = ( ( ::openfl::_legacy::display::TouchInfo)(::haxe::IMap_obj::get(this->_hx___touchInfo,( (int)(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) ))) );
HXLINE( 465)					this->_hx___onTouch(event,::openfl::_legacy::events::TouchEvent_obj::TOUCH_MOVE,touchInfo1);
HXLINE( 467)					if ((((int) ::Dynamic(event->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) & (int)(int)32768) > (int)0)) {
HXLINE( 469)						this->_hx___onMouse(event,::openfl::_legacy::events::MouseEvent_obj::MOUSE_MOVE,false);
            					}
            				}
            				break;
            				case (int)17: {
HXLINE( 475)					 ::openfl::_legacy::display::TouchInfo touchInfo2 = ( ( ::openfl::_legacy::display::TouchInfo)(::haxe::IMap_obj::get(this->_hx___touchInfo,( (int)(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) ))) );
HXLINE( 476)					this->_hx___onTouch(event,::openfl::_legacy::events::TouchEvent_obj::TOUCH_END,touchInfo2);
HXLINE( 477)					::haxe::IMap_obj::remove(this->_hx___touchInfo,( (int)(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) ));
HXLINE( 479)					if ((((int) ::Dynamic(event->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) & (int)(int)32768) > (int)0)) {
HXLINE( 481)						this->_hx___onMouse(event,::openfl::_legacy::events::MouseEvent_obj::MOUSE_UP,false);
            					}
            				}
            				break;
            				case (int)18: {
            				}
            				break;
            				case (int)19: {
HXLINE( 491)					this->_hx___onChange(event);
            				}
            				break;
            				case (int)20: {
HXLINE( 495)					this->_hx___setActive(true);
            				}
            				break;
            				case (int)21: {
HXLINE( 499)					this->_hx___setActive(false);
            				}
            				break;
            				case (int)22: {
HXLINE( 503)					this->_hx___dispatchEvent( ::openfl::_legacy::events::Event_obj::__alloc( HX_CTX ,HX_("focusIn",dd,45,83,41),null(),null()));
            				}
            				break;
            				case (int)23: {
HXLINE( 507)					this->_hx___dispatchEvent( ::openfl::_legacy::events::Event_obj::__alloc( HX_CTX ,HX_("focusOut",96,6f,5e,11),null(),null()));
            				}
            				break;
            				case (int)24: {
HXLINE( 511)					this->_hx___onJoystick(event,HX_("axisMove",52,90,f4,8f));
            				}
            				break;
            				case (int)25: {
HXLINE( 515)					this->_hx___onJoystick(event,HX_("ballMove",b0,5c,fd,37));
            				}
            				break;
            				case (int)26: {
HXLINE( 519)					this->_hx___onJoystick(event,HX_("hatMove",0c,98,0b,ab));
            				}
            				break;
            				case (int)27: {
HXLINE( 523)					this->_hx___onJoystick(event,HX_("buttonDown",74,67,64,ac));
            				}
            				break;
            				case (int)28: {
HXLINE( 527)					this->_hx___onJoystick(event,HX_("buttonUp",ed,8c,32,5c));
            				}
            				break;
            				case (int)29: {
HXLINE( 531)					this->_hx___onJoystick(event,HX_("deviceAdded",4a,08,84,0b));
            				}
            				break;
            				case (int)30: {
HXLINE( 535)					this->_hx___onJoystick(event,HX_("deviceRemoved",aa,c9,5b,59));
            				}
            				break;
            				case (int)31: {
HXLINE( 539)					this->_hx___onSysWM(event);
            				}
            				break;
            				case (int)32: {
HXLINE( 543)					this->_hx___onRenderContext(false);
            				}
            				break;
            				case (int)33: {
HXLINE( 547)					this->_hx___onRenderContext(true);
            				}
            				break;
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic error = _hx_e;
HXLINE( 555)				::openfl::_legacy::Lib_obj::rethrow(error);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 563)		result = this->_hx___updateNextWake();
HXLINE( 564)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___doProcessStageEvent,return )

 ::Dynamic Stage_obj::_hx___processStageEvent( ::Dynamic event){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_569___processStageEvent)
HXLINE( 571)		this->_hx___doProcessStageEvent(event);
HXLINE( 572)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___processStageEvent,return )

void Stage_obj::_hx___drag( ::openfl::_legacy::geom::Point mouse){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_577___drag)
HXLINE( 579)		 ::openfl::_legacy::display::DisplayObjectContainer parent = this->_hx___dragObject->get_parent();
HXLINE( 580)		if (hx::IsNotNull( parent )) {
HXLINE( 582)			mouse = parent->globalToLocal(mouse);
            		}
HXLINE( 586)		Float x = (mouse->x + this->_hx___dragOffsetX);
HXLINE( 587)		Float y = (mouse->y + this->_hx___dragOffsetY);
HXLINE( 589)		if (hx::IsNotNull( this->_hx___dragBounds )) {
HXLINE( 591)			if ((x < this->_hx___dragBounds->x)) {
HXLINE( 593)				x = this->_hx___dragBounds->x;
            			}
            			else {
HXLINE( 595)				if ((x > this->_hx___dragBounds->get_right())) {
HXLINE( 597)					x = this->_hx___dragBounds->get_right();
            				}
            			}
HXLINE( 601)			if ((y < this->_hx___dragBounds->y)) {
HXLINE( 603)				y = this->_hx___dragBounds->y;
            			}
            			else {
HXLINE( 605)				if ((y > this->_hx___dragBounds->get_bottom())) {
HXLINE( 607)					y = this->_hx___dragBounds->get_bottom();
            				}
            			}
            		}
HXLINE( 613)		this->_hx___dragObject->set_x(x);
HXLINE( 614)		this->_hx___dragObject->set_y(y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___drag,(void))

Float Stage_obj::_hx___nextFrameDue(Float otherTimers){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_619___nextFrameDue)
HXLINE( 621)		bool _hx_tmp;
HXDLIN( 621)		if (!(this->active)) {
HXLINE( 621)			_hx_tmp = this->pauseWhenDeactivated;
            		}
            		else {
HXLINE( 621)			_hx_tmp = false;
            		}
HXDLIN( 621)		if (_hx_tmp) {
HXLINE( 623)			return otherTimers;
            		}
HXLINE( 627)		if ((this->frameRate > (int)0)) {
HXLINE( 629)			Float next = this->_hx___nextRender;
HXDLIN( 629)			Float next1 = (next - ::haxe::Timer_obj::stamp());
HXDLIN( 629)			Float next2 = (next1 - ::openfl::_legacy::display::Stage_obj::_hx___earlyWakeup);
HXLINE( 630)			if ((next2 < otherTimers)) {
HXLINE( 632)				return next2;
            			}
            		}
HXLINE( 638)		return otherTimers;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___nextFrameDue,return )

void Stage_obj::_hx___onChange( ::Dynamic event){
            	HX_GC_STACKFRAME(&_hx_pos_d4acca48e18394dd_643___onChange)
HXLINE( 645)		 ::openfl::_legacy::display::DisplayObject object = this->_hx___findByID(( (int)(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) ));
HXLINE( 647)		if (hx::IsNotNull( object )) {
HXLINE( 649)			object->_hx___fireEvent( ::openfl::_legacy::events::Event_obj::__alloc( HX_CTX ,::openfl::_legacy::events::Event_obj::CHANGE,true,null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onChange,(void))

void Stage_obj::_hx___onFocus( ::Dynamic event){
            	HX_GC_STACKFRAME(&_hx_pos_d4acca48e18394dd_656___onFocus)
HXLINE( 658)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE( 659)		 ::openfl::_legacy::display::DisplayObject object = this->_hx___findByID(( (int)(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) ));
HXLINE( 661)		if (hx::IsNotNull( object )) {
HXLINE( 663)			object->_hx___getInteractiveObjectStack(stack);
            		}
HXLINE( 667)		bool _hx_tmp;
HXDLIN( 667)		if ((stack->length > (int)0)) {
HXLINE( 667)			if (hx::IsNotEq(  ::Dynamic(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)),(int)1 )) {
HXLINE( 667)				_hx_tmp = hx::IsEq(  ::Dynamic(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)),(int)2 );
            			}
            			else {
HXLINE( 667)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 667)			_hx_tmp = false;
            		}
HXDLIN( 667)		if (_hx_tmp) {
HXLINE( 669)			 ::openfl::_legacy::display::InteractiveObject object1 = stack->__get((int)0).StaticCast<  ::openfl::_legacy::display::InteractiveObject >();
HXLINE( 670)			::String focusEvent;
HXDLIN( 670)			if (hx::IsEq(  ::Dynamic(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)),(int)1 )) {
HXLINE( 670)				focusEvent = HX_("mouseFocusChange",43,f1,81,96);
            			}
            			else {
HXLINE( 670)				focusEvent = HX_("keyFocusChange",09,9c,8e,e5);
            			}
HXDLIN( 670)			 ::openfl::_legacy::display::InteractiveObject focusEvent1;
HXDLIN( 670)			if ((this->_hx___focusOverObjects->length == (int)0)) {
HXLINE( 670)				focusEvent1 = null();
            			}
            			else {
HXLINE( 670)				focusEvent1 = this->_hx___focusOverObjects->__get((int)0).StaticCast<  ::openfl::_legacy::display::InteractiveObject >();
            			}
HXDLIN( 670)			 ::openfl::events::FocusEvent focusEvent2 =  ::openfl::events::FocusEvent_obj::__alloc( HX_CTX ,focusEvent,true,true,focusEvent1,hx::IsGreater(  ::Dynamic(event->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)),(int)0 ), ::Dynamic(event->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic)));
HXLINE( 671)			object1->_hx___fireEvent(focusEvent2);
HXLINE( 673)			if (focusEvent2->_hx___getIsCancelled()) {
HXLINE( 675)				event->__SetField(HX_("result",dd,68,84,08),(int)1,hx::paccDynamic);
HXLINE( 676)				return;
            			}
            		}
HXLINE( 682)		stack->reverse();
HXLINE( 683)		this->_hx___checkFocusInOuts(event,stack);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onFocus,(void))

void Stage_obj::_hx___onJoystick( ::Dynamic event,::String type){
            	HX_GC_STACKFRAME(&_hx_pos_d4acca48e18394dd_688___onJoystick)
HXLINE( 690)		 ::openfl::_legacy::events::JoystickEvent joystickEvent = null();
HXLINE( 692)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("axisMove",52,90,f4,8f)) ){
HXLINE( 696)			::Array< Float > data = ( (::Array< Float >)(::haxe::IMap_obj::get(this->_hx___joyAxisData,( (int)(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) ))) );
HXLINE( 697)			if (hx::IsNull( data )) {
HXLINE( 699)				data = ::Array_obj< Float >::fromData( _hx_array_data_10cf350e_24,4);
            			}
HXLINE( 703)			Float value = ((Float) ::Dynamic(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) / (Float)(int)32767);
HXLINE( 704)			if ((value < (int)-1)) {
HXLINE( 704)				value = (int)-1;
            			}
HXLINE( 706)			while(hx::IsLess( data->length, ::Dynamic(event->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic)) )){
HXLINE( 708)				data->push((int)0);
            			}
HXLINE( 712)			::String cachedAxisData = HX_("",00,00,00,00);
HXLINE( 713)			if (::haxe::IMap_obj::exists(this->_hx___joyAxisData,( (int)(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) ))) {
HXLINE( 713)				cachedAxisData = ( (::Array< Float >)(::haxe::IMap_obj::get(this->_hx___joyAxisData,( (int)(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) ))) )->toString();
            			}
HXLINE( 714)			data[( (int)(event->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic)) )] = value;
HXLINE( 715)			if (::haxe::IMap_obj::exists(this->_hx___joyAxisData,( (int)(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) ))) {
HXLINE( 717)				::haxe::IMap_obj::set(this->_hx___joyAxisData,( (int)(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) ),data);
HXLINE( 719)				if ((( (::Array< Float >)(::haxe::IMap_obj::get(this->_hx___joyAxisData,( (int)(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) ))) )->toString() == cachedAxisData)) {
HXLINE( 721)					return;
            				}
            				else {
HXLINE( 725)					 ::Dynamic event1 =  ::Dynamic(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic));
HXDLIN( 725)					joystickEvent =  ::openfl::_legacy::events::JoystickEvent_obj::__alloc( HX_CTX ,type,false,false,event1,(int)0,data->__get((int)0),data->__get((int)1),data->__get((int)2));
HXLINE( 726)					joystickEvent->axis = data->copy();
            				}
            			}
            			else {
HXLINE( 731)				::haxe::IMap_obj::set(this->_hx___joyAxisData,( (int)(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) ),data);
HXLINE( 732)				 ::Dynamic event2 =  ::Dynamic(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic));
HXDLIN( 732)				joystickEvent =  ::openfl::_legacy::events::JoystickEvent_obj::__alloc( HX_CTX ,type,false,false,event2,(int)0,data->__get((int)0),data->__get((int)1),data->__get((int)2));
HXLINE( 733)				joystickEvent->axis = data->copy();
            			}
HXLINE( 694)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("ballMove",b0,5c,fd,37)) ){
HXLINE( 738)			joystickEvent =  ::openfl::_legacy::events::JoystickEvent_obj::__alloc( HX_CTX ,type,false,false, ::Dynamic(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)), ::Dynamic(event->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic)), ::Dynamic(event->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(event->__Field(HX_("y",79,00,00,00),hx::paccDynamic)),null());
HXDLIN( 738)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("deviceAdded",4a,08,84,0b)) ){
HXLINE( 742)			joystickEvent =  ::openfl::_legacy::events::JoystickEvent_obj::__alloc( HX_CTX ,type,false,false, ::Dynamic(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)),(int)0, ::Dynamic(event->__Field(HX_("x",78,00,00,00),hx::paccDynamic)),null(),null());
HXDLIN( 742)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("deviceRemoved",aa,c9,5b,59)) ){
HXLINE( 746)			joystickEvent =  ::openfl::_legacy::events::JoystickEvent_obj::__alloc( HX_CTX ,type,false,false, ::Dynamic(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)),null(),null(),null(),null());
HXDLIN( 746)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("hatMove",0c,98,0b,ab)) ){
HXLINE( 750)			int x = (int)0;
HXLINE( 751)			int y = (int)0;
HXLINE( 753)			if ((((int) ::Dynamic(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) & (int)(int)1) != (int)0)) {
HXLINE( 755)				y = (int)-1;
            			}
            			else {
HXLINE( 757)				if ((((int) ::Dynamic(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) & (int)(int)4) != (int)0)) {
HXLINE( 759)					y = (int)1;
            				}
            			}
HXLINE( 763)			if ((((int) ::Dynamic(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) & (int)(int)2) != (int)0)) {
HXLINE( 765)				x = (int)1;
            			}
            			else {
HXLINE( 767)				if ((((int) ::Dynamic(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) & (int)(int)8) != (int)0)) {
HXLINE( 769)					x = (int)-1;
            				}
            			}
HXLINE( 773)			joystickEvent =  ::openfl::_legacy::events::JoystickEvent_obj::__alloc( HX_CTX ,type,false,false, ::Dynamic(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)), ::Dynamic(event->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic)),x,y,null());
HXLINE( 748)			goto _hx_goto_21;
            		}
            		/* default */{
HXLINE( 815)			joystickEvent =  ::openfl::_legacy::events::JoystickEvent_obj::__alloc( HX_CTX ,type,false,false, ::Dynamic(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)), ::Dynamic(event->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic)),null(),null(),null());
            		}
            		_hx_goto_21:;
HXLINE( 819)		this->_hx___dispatchEvent(joystickEvent);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___onJoystick,(void))

void Stage_obj::_hx___onKey( ::Dynamic event,::String type){
            	HX_GC_STACKFRAME(&_hx_pos_d4acca48e18394dd_824___onKey)
HXLINE( 826)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE( 827)		 ::openfl::_legacy::display::DisplayObject object = this->_hx___findByID(( (int)(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) ));
HXLINE( 829)		if (hx::IsNotNull( object )) {
HXLINE( 831)			object->_hx___getInteractiveObjectStack(stack);
            		}
HXLINE( 835)		if ((stack->length > (int)0)) {
HXLINE( 837)			 ::Dynamic value =  ::Dynamic(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic));
HXLINE( 838)			bool _hx_tmp;
HXDLIN( 838)			if (hx::IsGreaterEq(  ::Dynamic(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)),(int)96 )) {
HXLINE( 838)				_hx_tmp = hx::IsLessEq(  ::Dynamic(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)),(int)122 );
            			}
            			else {
HXLINE( 838)				_hx_tmp = false;
            			}
HXDLIN( 838)			if (_hx_tmp) {
HXLINE( 838)				 ::Dynamic event1 = event;
HXDLIN( 838)				event1->__SetField(HX_("value",71,7f,b8,31),( ::Dynamic(event1->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) - (int)32),hx::paccDynamic);
            			}
HXLINE( 840)			 ::openfl::_legacy::display::InteractiveObject object1 = stack->__get((int)0).StaticCast<  ::openfl::_legacy::display::InteractiveObject >();
HXLINE( 841)			int flags = ( (int)(event->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXLINE( 843)			 ::Dynamic event2 =  ::Dynamic(event->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN( 843)			 ::Dynamic event3 =  ::Dynamic(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic));
HXDLIN( 843)			int keyboardEvent;
HXDLIN( 843)			if ((((int)flags & (int)::openfl::_legacy::display::Stage_obj::efLocationRight) == (int)0)) {
HXLINE( 843)				keyboardEvent = (int)1;
            			}
            			else {
HXLINE( 843)				keyboardEvent = (int)0;
            			}
HXDLIN( 843)			bool keyboardEvent1 = (((int)flags & (int)::openfl::_legacy::display::Stage_obj::efCtrlDown) != (int)0);
HXDLIN( 843)			bool keyboardEvent2 = (((int)flags & (int)::openfl::_legacy::display::Stage_obj::efAltDown) != (int)0);
HXDLIN( 843)			 ::openfl::_legacy::events::KeyboardEvent keyboardEvent3 =  ::openfl::_legacy::events::KeyboardEvent_obj::__alloc( HX_CTX ,type,true,true,event2,event3,keyboardEvent,keyboardEvent1,keyboardEvent2,(((int)flags & (int)::openfl::_legacy::display::Stage_obj::efShiftDown) != (int)0),null(),null());
HXLINE( 844)			object1->_hx___fireEvent(keyboardEvent3);
HXLINE( 846)			if (keyboardEvent3->_hx___getIsCancelled()) {
HXLINE( 848)				event->__SetField(HX_("result",dd,68,84,08),(int)1,hx::paccDynamic);
            			}
            			else {
HXLINE( 854)				bool _hx_tmp1;
HXDLIN( 854)				bool _hx_tmp2;
HXDLIN( 854)				if ((((int)flags & (int)::openfl::_legacy::display::Stage_obj::efAltDown) > (int)0)) {
HXLINE( 854)					_hx_tmp2 = (type == ::openfl::_legacy::events::KeyboardEvent_obj::KEY_DOWN);
            				}
            				else {
HXLINE( 854)					_hx_tmp2 = false;
            				}
HXDLIN( 854)				if (_hx_tmp2) {
HXLINE( 854)					_hx_tmp1 = hx::IsEq(  ::Dynamic(event->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic)),(int)13 );
            				}
            				else {
HXLINE( 854)					_hx_tmp1 = false;
            				}
HXDLIN( 854)				if (_hx_tmp1) {
HXLINE( 859)					if (hx::IsEq( this->get_displayState(),::openfl::_legacy::display::StageDisplayState_obj::NORMAL_dyn() )) {
HXLINE( 861)						this->set_displayState(::openfl::_legacy::display::StageDisplayState_obj::FULL_SCREEN_INTERACTIVE_dyn());
            					}
            					else {
HXLINE( 865)						this->set_displayState(::openfl::_legacy::display::StageDisplayState_obj::NORMAL_dyn());
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___onKey,(void))

void Stage_obj::_hx___onMouse( ::Dynamic event,::String type,bool fromMouse){
            	HX_GC_STACKFRAME(&_hx_pos_d4acca48e18394dd_879___onMouse)
HXLINE( 881)		int button = ( (int)(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) );
HXLINE( 883)		if (!(fromMouse)) {
HXLINE( 884)			button = (int)0;
            		}
HXLINE( 886)		int wheel = (int)0;
HXLINE( 888)		if ((type == ::openfl::_legacy::events::MouseEvent_obj::MOUSE_DOWN)) {
HXLINE( 890)			if ((button > (int)2)) {
HXLINE( 892)				return;
            			}
HXLINE( 896)			type = ::openfl::_legacy::display::Stage_obj::sDownEvents->__get(button);
            		}
            		else {
HXLINE( 898)			if ((type == ::openfl::_legacy::events::MouseEvent_obj::MOUSE_UP)) {
HXLINE( 900)				if ((button > (int)2)) {
HXLINE( 902)					type = ::openfl::_legacy::events::MouseEvent_obj::MOUSE_WHEEL;
HXLINE( 903)					if ((button == (int)3)) {
HXLINE( 903)						wheel = (int)1;
            					}
            					else {
HXLINE( 903)						wheel = (int)-1;
            					}
            				}
            				else {
HXLINE( 907)					type = ::openfl::_legacy::display::Stage_obj::sUpEvents->__get(button);
            				}
            			}
            		}
HXLINE( 913)		if (hx::IsNotNull( this->_hx___dragObject )) {
HXLINE( 915)			this->_hx___drag( ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX , ::Dynamic(event->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(event->__Field(HX_("y",79,00,00,00),hx::paccDynamic))));
            		}
HXLINE( 919)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE( 920)		 ::openfl::_legacy::display::DisplayObject object = this->_hx___findByID(( (int)(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) ));
HXLINE( 922)		if (hx::IsNotNull( object )) {
HXLINE( 924)			object->_hx___getInteractiveObjectStack(stack);
            		}
HXLINE( 928)		 ::openfl::_legacy::geom::Point local = null();
HXLINE( 930)		if ((stack->length > (int)0)) {
HXLINE( 932)			 ::openfl::_legacy::display::InteractiveObject object1 = stack->__get((int)0).StaticCast<  ::openfl::_legacy::display::InteractiveObject >();
HXLINE( 933)			stack->reverse();
HXLINE( 934)			local = object1->globalToLocal( ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX , ::Dynamic(event->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(event->__Field(HX_("y",79,00,00,00),hx::paccDynamic))));
HXLINE( 935)			 ::openfl::_legacy::events::MouseEvent mouseEvent = ::openfl::_legacy::events::MouseEvent_obj::_hx___create(type,event,local,object1);
HXLINE( 936)			mouseEvent->delta = wheel;
HXLINE( 938)			bool _hx_tmp;
HXDLIN( 938)			if (!(fromMouse)) {
HXLINE( 938)				_hx_tmp = (((int) ::Dynamic(event->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) & (int)(int)32768) > (int)0);
            			}
            			else {
HXLINE( 938)				_hx_tmp = true;
            			}
HXDLIN( 938)			if (_hx_tmp) {
HXLINE( 940)				this->_hx___checkInOuts(mouseEvent,stack,null());
            			}
HXLINE( 944)			object1->_hx___fireEvent(mouseEvent);
            		}
            		else {
HXLINE( 948)			local =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX , ::Dynamic(event->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(event->__Field(HX_("y",79,00,00,00),hx::paccDynamic)));
HXLINE( 949)			 ::openfl::_legacy::events::MouseEvent mouseEvent1 = ::openfl::_legacy::events::MouseEvent_obj::_hx___create(type,event,local,null());
HXLINE( 950)			mouseEvent1->delta = wheel;
HXLINE( 952)			bool _hx_tmp1;
HXDLIN( 952)			if (!(fromMouse)) {
HXLINE( 952)				_hx_tmp1 = (((int) ::Dynamic(event->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) & (int)(int)32768) > (int)0);
            			}
            			else {
HXLINE( 952)				_hx_tmp1 = true;
            			}
HXDLIN( 952)			if (_hx_tmp1) {
HXLINE( 954)				this->_hx___checkInOuts(mouseEvent1,stack,null());
            			}
            		}
HXLINE( 960)		 ::openfl::_legacy::display::InteractiveObject clickObject;
HXDLIN( 960)		if ((stack->length > (int)0)) {
HXLINE( 960)			clickObject = stack->__get((stack->length - (int)1)).StaticCast<  ::openfl::_legacy::display::InteractiveObject >();
            		}
            		else {
HXLINE( 960)			clickObject = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 962)		bool _hx_tmp2;
HXDLIN( 962)		bool _hx_tmp3;
HXDLIN( 962)		bool _hx_tmp4;
HXDLIN( 962)		if ((type != ::openfl::_legacy::events::MouseEvent_obj::MOUSE_DOWN)) {
HXLINE( 962)			_hx_tmp4 = (type == ::openfl::_legacy::events::MouseEvent_obj::MIDDLE_MOUSE_DOWN);
            		}
            		else {
HXLINE( 962)			_hx_tmp4 = true;
            		}
HXDLIN( 962)		if (!(_hx_tmp4)) {
HXLINE( 962)			_hx_tmp3 = (type == ::openfl::_legacy::events::MouseEvent_obj::RIGHT_MOUSE_DOWN);
            		}
            		else {
HXLINE( 962)			_hx_tmp3 = true;
            		}
HXDLIN( 962)		if (_hx_tmp3) {
HXLINE( 962)			_hx_tmp2 = (button < (int)3);
            		}
            		else {
HXLINE( 962)			_hx_tmp2 = false;
            		}
HXDLIN( 962)		if (_hx_tmp2) {
HXLINE( 964)			this->_hx___lastDown[button] = clickObject;
            		}
            		else {
HXLINE( 966)			bool _hx_tmp5;
HXDLIN( 966)			bool _hx_tmp6;
HXDLIN( 966)			bool _hx_tmp7;
HXDLIN( 966)			if ((type != ::openfl::_legacy::events::MouseEvent_obj::MOUSE_UP)) {
HXLINE( 966)				_hx_tmp7 = (type == ::openfl::_legacy::events::MouseEvent_obj::MIDDLE_MOUSE_UP);
            			}
            			else {
HXLINE( 966)				_hx_tmp7 = true;
            			}
HXDLIN( 966)			if (!(_hx_tmp7)) {
HXLINE( 966)				_hx_tmp6 = (type == ::openfl::_legacy::events::MouseEvent_obj::RIGHT_MOUSE_UP);
            			}
            			else {
HXLINE( 966)				_hx_tmp6 = true;
            			}
HXDLIN( 966)			if (_hx_tmp6) {
HXLINE( 966)				_hx_tmp5 = (button < (int)3);
            			}
            			else {
HXLINE( 966)				_hx_tmp5 = false;
            			}
HXDLIN( 966)			if (_hx_tmp5) {
HXLINE( 968)				if (hx::IsEq( clickObject,this->_hx___lastDown->__get(button).StaticCast<  ::openfl::_legacy::display::InteractiveObject >() )) {
HXLINE( 970)					 ::openfl::_legacy::events::MouseEvent mouseEvent2 = ::openfl::_legacy::events::MouseEvent_obj::_hx___create(::openfl::_legacy::display::Stage_obj::sClickEvents->__get(button),event,local,clickObject);
HXLINE( 971)					clickObject->_hx___fireEvent(mouseEvent2);
HXLINE( 973)					bool _hx_tmp8;
HXDLIN( 973)					if ((button == (int)0)) {
HXLINE( 973)						_hx_tmp8 = clickObject->doubleClickEnabled;
            					}
            					else {
HXLINE( 973)						_hx_tmp8 = false;
            					}
HXDLIN( 973)					if (_hx_tmp8) {
HXLINE( 975)						int now = ::openfl::_legacy::Lib_obj::getTimer();
HXLINE( 976)						if (((now - this->_hx___lastClickTime) < (int)500)) {
HXLINE( 978)							 ::openfl::_legacy::events::MouseEvent mouseEvent3 = ::openfl::_legacy::events::MouseEvent_obj::_hx___create(::openfl::_legacy::events::MouseEvent_obj::DOUBLE_CLICK,event,local,clickObject);
HXLINE( 979)							clickObject->_hx___fireEvent(mouseEvent3);
HXLINE( 980)							this->_hx___lastClickTime = (int)0;
            						}
            						else {
HXLINE( 984)							this->_hx___lastClickTime = now;
            						}
            					}
            				}
HXLINE( 992)				this->_hx___lastDown[button] = null();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___onMouse,(void))

void Stage_obj::_hx___onRenderContext(bool active){
            	HX_GC_STACKFRAME(&_hx_pos_d4acca48e18394dd_999___onRenderContext)
HXLINE(1005)		::String event;
HXDLIN(1005)		if (!(active)) {
HXLINE(1005)			event = HX_("glcontextlost",4e,21,17,07);
            		}
            		else {
HXLINE(1005)			event = HX_("glcontextrestored",c0,71,0a,02);
            		}
HXDLIN(1005)		 ::openfl::_legacy::events::Event event1 =  ::openfl::_legacy::events::Event_obj::__alloc( HX_CTX ,event,null(),null());
HXLINE(1006)		this->_hx___dispatchEvent(event1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onRenderContext,(void))

void Stage_obj::_hx___onResize(Float width,Float height){
            	HX_GC_STACKFRAME(&_hx_pos_d4acca48e18394dd_1011___onResize)
HXLINE(1013)		 ::openfl::_legacy::events::Event event =  ::openfl::_legacy::events::Event_obj::__alloc( HX_CTX ,::openfl::_legacy::events::Event_obj::RESIZE,null(),null());
HXLINE(1014)		this->_hx___dispatchEvent(event);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___onResize,(void))

void Stage_obj::_hx___onSysWM( ::Dynamic event){
            	HX_GC_STACKFRAME(&_hx_pos_d4acca48e18394dd_1019___onSysWM)
HXLINE(1021)		 ::openfl::_legacy::events::SystemEvent event1 =  ::openfl::_legacy::events::SystemEvent_obj::__alloc( HX_CTX ,::openfl::_legacy::events::SystemEvent_obj::SYSTEM,false,false, ::Dynamic(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
HXLINE(1022)		this->_hx___dispatchEvent(event1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onSysWM,(void))

void Stage_obj::_hx___onTouch( ::Dynamic event,::String type, ::openfl::_legacy::display::TouchInfo touchInfo){
            	HX_GC_STACKFRAME(&_hx_pos_d4acca48e18394dd_1027___onTouch)
HXLINE(1029)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE(1030)		 ::openfl::_legacy::display::DisplayObject object = this->_hx___findByID(( (int)(event->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) ));
HXLINE(1032)		if (hx::IsNotNull( object )) {
HXLINE(1034)			object->_hx___getInteractiveObjectStack(stack);
            		}
HXLINE(1038)		if ((stack->length > (int)0)) {
HXLINE(1040)			 ::openfl::_legacy::display::InteractiveObject object1 = stack->__get((int)0).StaticCast<  ::openfl::_legacy::display::InteractiveObject >();
HXLINE(1041)			stack->reverse();
HXLINE(1042)			 ::openfl::_legacy::geom::Point local = object1->globalToLocal( ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX , ::Dynamic(event->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(event->__Field(HX_("y",79,00,00,00),hx::paccDynamic))));
HXLINE(1043)			 ::openfl::_legacy::events::TouchEvent touchEvent = ::openfl::_legacy::events::TouchEvent_obj::_hx___create(type,event,local,object1,( (Float)(event->__Field(HX_("scaleX",8e,ea,25,3c),hx::paccDynamic)) ),( (Float)(event->__Field(HX_("scaleY",8f,ea,25,3c),hx::paccDynamic)) ));
HXLINE(1044)			touchEvent->touchPointID = ( (int)(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) );
HXLINE(1045)			touchEvent->isPrimaryTouchPoint = (((int) ::Dynamic(event->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) & (int)(int)32768) > (int)0);
HXLINE(1047)			this->_hx___checkInOuts(touchEvent,stack,touchInfo);
HXLINE(1048)			object1->_hx___fireEvent(touchEvent);
            		}
            		else {
HXLINE(1052)			 ::openfl::_legacy::events::TouchEvent touchEvent1 = ::openfl::_legacy::events::TouchEvent_obj::_hx___create(type,event, ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX , ::Dynamic(event->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(event->__Field(HX_("y",79,00,00,00),hx::paccDynamic))),null(),( (Float)(event->__Field(HX_("scaleX",8e,ea,25,3c),hx::paccDynamic)) ),( (Float)(event->__Field(HX_("scaleY",8f,ea,25,3c),hx::paccDynamic)) ));
HXLINE(1053)			touchEvent1->touchPointID = ( (int)(event->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) );
HXLINE(1054)			touchEvent1->isPrimaryTouchPoint = (((int) ::Dynamic(event->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) & (int)(int)32768) > (int)0);
HXLINE(1055)			this->_hx___checkInOuts(touchEvent1,stack,touchInfo);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___onTouch,(void))

void Stage_obj::_hx___pollTimers(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1062___pollTimers)
HXLINE(1064)		if (::openfl::_legacy::display::Stage_obj::_hx___exiting) {
HXLINE(1066)			return;
            		}
HXLINE(1071)		::haxe::Timer_obj::_hx___checkTimers();
HXLINE(1074)		::openfl::_legacy::media::SoundChannel_obj::_hx___pollComplete();
HXLINE(1077)		::openfl::_legacy::net::URLLoader_obj::_hx___pollData();
HXLINE(1081)		::DefaultAssetLibrary_obj::_hx___poll();
HXLINE(1084)		this->_hx___checkRender();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,_hx___pollTimers,(void))

void Stage_obj::_hx___render(bool sendEnterFrame){
            	HX_GC_STACKFRAME(&_hx_pos_d4acca48e18394dd_1089___render)
HXLINE(1091)		if (!(this->active)) {
HXLINE(1093)			return;
            		}
HXLINE(1097)		if (sendEnterFrame) {
HXLINE(1103)			this->_hx___broadcast( ::openfl::_legacy::events::Event_obj::__alloc( HX_CTX ,::openfl::_legacy::events::Event_obj::ENTER_FRAME,null(),null()));
            		}
HXLINE(1107)		if (this->_hx___invalid) {
HXLINE(1109)			this->_hx___invalid = false;
HXLINE(1110)			this->_hx___broadcast( ::openfl::_legacy::events::Event_obj::__alloc( HX_CTX ,::openfl::_legacy::events::Event_obj::RENDER,null(),null()));
            		}
HXLINE(1119)		::openfl::_legacy::display::Stage_obj::lime_render_stage(this->_hx___handle);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___render,(void))

void Stage_obj::_hx___setActive(bool value){
            	HX_GC_STACKFRAME(&_hx_pos_d4acca48e18394dd_1131___setActive)
HXDLIN(1131)		if ((this->active != value)) {
HXLINE(1133)			this->active = value;
HXLINE(1135)			if (!(this->active)) {
HXLINE(1137)				this->_hx___lastRender = ::haxe::Timer_obj::stamp();
HXLINE(1138)				this->_hx___nextRender = (this->_hx___lastRender + this->_hx___framePeriod);
            			}
HXLINE(1142)			::String event;
HXDLIN(1142)			if (this->active) {
HXLINE(1142)				event = ::openfl::_legacy::events::Event_obj::ACTIVATE;
            			}
            			else {
HXLINE(1142)				event = ::openfl::_legacy::events::Event_obj::DEACTIVATE;
            			}
HXDLIN(1142)			 ::openfl::_legacy::events::Event event1 =  ::openfl::_legacy::events::Event_obj::__alloc( HX_CTX ,event,null(),null());
HXLINE(1143)			this->_hx___broadcast(event1);
HXLINE(1145)			if (value) {
HXLINE(1147)				this->_hx___pollTimers();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___setActive,(void))

void Stage_obj::_hx___startDrag( ::openfl::_legacy::display::Sprite sprite,bool lockCenter, ::openfl::_legacy::geom::Rectangle bounds){
            	HX_GC_STACKFRAME(&_hx_pos_d4acca48e18394dd_1179___startDrag)
HXLINE(1181)		 ::openfl::_legacy::geom::Rectangle _hx_tmp;
HXDLIN(1181)		if (hx::IsNull( bounds )) {
HXLINE(1181)			_hx_tmp = null();
            		}
            		else {
HXLINE(1181)			_hx_tmp = bounds->clone();
            		}
HXDLIN(1181)		this->_hx___dragBounds = _hx_tmp;
HXLINE(1182)		this->_hx___dragObject = sprite;
HXLINE(1184)		if (hx::IsNotNull( this->_hx___dragObject )) {
HXLINE(1186)			if (lockCenter) {
HXLINE(1188)				this->_hx___dragOffsetX = ((Float)-(this->_hx___dragObject->get_width()) / (Float)(int)2);
HXLINE(1189)				this->_hx___dragOffsetY = ((Float)-(this->_hx___dragObject->get_height()) / (Float)(int)2);
            			}
            			else {
HXLINE(1193)				Float mouse = this->get_mouseX();
HXDLIN(1193)				 ::openfl::_legacy::geom::Point mouse1 =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,mouse,this->get_mouseY());
HXLINE(1194)				 ::openfl::_legacy::display::DisplayObjectContainer parent = this->_hx___dragObject->get_parent();
HXLINE(1196)				if (hx::IsNotNull( parent )) {
HXLINE(1198)					mouse1 = parent->globalToLocal(mouse1);
            				}
HXLINE(1202)				Float _hx_tmp1 = this->_hx___dragObject->get_x();
HXDLIN(1202)				this->_hx___dragOffsetX = (_hx_tmp1 - mouse1->x);
HXLINE(1203)				Float _hx_tmp2 = this->_hx___dragObject->get_y();
HXDLIN(1203)				this->_hx___dragOffsetY = (_hx_tmp2 - mouse1->y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___startDrag,(void))

void Stage_obj::_hx___stopDrag( ::openfl::_legacy::display::Sprite sprite){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1212___stopDrag)
HXLINE(1214)		this->_hx___dragBounds = null();
HXLINE(1215)		this->_hx___dragObject = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___stopDrag,(void))

Float Stage_obj::_hx___updateNextWake(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1220___updateNextWake)
HXLINE(1225)		Float nextWake = ::haxe::Timer_obj::_hx___nextWake(((Float)315000000.0));
HXLINE(1228)		bool _hx_tmp;
HXDLIN(1228)		if ((nextWake > ((Float)0.001))) {
HXLINE(1228)			_hx_tmp = (::openfl::_legacy::media::SoundChannel_obj::_hx___dynamicSoundCount > (int)0);
            		}
            		else {
HXLINE(1228)			_hx_tmp = false;
            		}
HXDLIN(1228)		if (_hx_tmp) {
HXLINE(1230)			nextWake = ((Float)0.001);
            		}
HXLINE(1236)		bool _hx_tmp1;
HXDLIN(1236)		if ((nextWake > ((Float)0.02))) {
HXLINE(1236)			if (!(::openfl::_legacy::media::SoundChannel_obj::_hx___completePending())) {
HXLINE(1236)				_hx_tmp1 = ::openfl::_legacy::net::URLLoader_obj::_hx___loadPending();
            			}
            			else {
HXLINE(1236)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE(1236)			_hx_tmp1 = false;
            		}
HXDLIN(1236)		if (_hx_tmp1) {
HXLINE(1238)			bool nextWake1;
HXDLIN(1238)			if (!(this->active)) {
HXLINE(1238)				nextWake1 = !(this->pauseWhenDeactivated);
            			}
            			else {
HXLINE(1238)				nextWake1 = true;
            			}
HXDLIN(1238)			if (nextWake1) {
HXLINE(1238)				nextWake = ((Float)0.020);
            			}
            			else {
HXLINE(1238)				nextWake = ((Float)0.500);
            			}
            		}
HXLINE(1243)		nextWake = this->_hx___nextFrameDue(nextWake);
HXLINE(1244)		::openfl::_legacy::display::Stage_obj::lime_stage_set_next_wake(this->_hx___handle,nextWake);
HXLINE(1245)		return nextWake;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,_hx___updateNextWake,return )

 ::openfl::_legacy::display::StageAlign Stage_obj::get_align(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1258_get_align)
HXLINE(1260)		int i = ( (int)(::openfl::_legacy::display::Stage_obj::lime_stage_get_align(this->_hx___handle)) );
HXLINE(1261)		return ::Type_obj::createEnumIndex(hx::ClassOf< ::openfl::_legacy::display::StageAlign >(),i,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_align,return )

 ::openfl::_legacy::display::StageAlign Stage_obj::set_align( ::openfl::_legacy::display::StageAlign value){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1266_set_align)
HXLINE(1268)		 ::Dynamic _hx_tmp = hx::ClassOf< ::openfl::_legacy::display::Stage >();
HXDLIN(1268)		 ::Dynamic _hx_tmp1 = this->_hx___handle;
HXDLIN(1268)		int _hx_tmp2 = _hx_getEnumValueIndex(value);
HXDLIN(1268)		::openfl::_legacy::display::Stage_obj::lime_stage_set_align(_hx_tmp1,_hx_tmp2);
HXLINE(1269)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_align,return )

int Stage_obj::get_color(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1276_get_color)
HXDLIN(1276)		return this->get_opaqueBackground();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_color,return )

int Stage_obj::set_color(int value){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1283_set_color)
HXDLIN(1283)		return this->set_opaqueBackground(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_color,return )

 ::openfl::_legacy::display::StageDisplayState Stage_obj::get_displayState(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1288_get_displayState)
HXLINE(1290)		int i = ( (int)(::openfl::_legacy::display::Stage_obj::lime_stage_get_display_state(this->_hx___handle)) );
HXLINE(1291)		return ::Type_obj::createEnumIndex(hx::ClassOf< ::openfl::_legacy::display::StageDisplayState >(),i,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_displayState,return )

 ::openfl::_legacy::display::StageDisplayState Stage_obj::set_displayState( ::openfl::_legacy::display::StageDisplayState value){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1296_set_displayState)
HXLINE(1298)		 ::Dynamic _hx_tmp = hx::ClassOf< ::openfl::_legacy::display::Stage >();
HXDLIN(1298)		 ::Dynamic _hx_tmp1 = this->_hx___handle;
HXDLIN(1298)		int _hx_tmp2 = _hx_getEnumValueIndex(value);
HXDLIN(1298)		::openfl::_legacy::display::Stage_obj::lime_stage_set_display_state(_hx_tmp1,_hx_tmp2);
HXLINE(1299)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_displayState,return )

Float Stage_obj::get_dpiScale(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1306_get_dpiScale)
HXDLIN(1306)		return ( (Float)(::openfl::_legacy::display::Stage_obj::lime_stage_get_dpi_scale(this->_hx___handle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_dpiScale,return )

 ::openfl::_legacy::display::InteractiveObject Stage_obj::get_focus(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1311_get_focus)
HXLINE(1313)		int id = ( (int)(::openfl::_legacy::display::Stage_obj::lime_stage_get_focus_id(this->_hx___handle)) );
HXLINE(1314)		 ::openfl::_legacy::display::DisplayObject object = this->_hx___findByID(id);
HXLINE(1315)		return ( ( ::openfl::_legacy::display::InteractiveObject)(object) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_focus,return )

 ::openfl::_legacy::display::InteractiveObject Stage_obj::set_focus( ::openfl::_legacy::display::InteractiveObject value){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1320_set_focus)
HXLINE(1322)		if (hx::IsNull( value )) {
HXLINE(1324)			::openfl::_legacy::display::Stage_obj::lime_stage_set_focus(this->_hx___handle,null(),(int)0);
            		}
            		else {
HXLINE(1328)			::openfl::_legacy::display::Stage_obj::lime_stage_set_focus(this->_hx___handle,value->_hx___handle,(int)0);
            		}
HXLINE(1332)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_focus,return )

Float Stage_obj::set_frameRate(Float value){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1337_set_frameRate)
HXLINE(1339)		this->frameRate = value;
HXLINE(1340)		Float _hx_tmp;
HXDLIN(1340)		if ((this->frameRate <= (int)0)) {
HXLINE(1340)			_hx_tmp = this->frameRate;
            		}
            		else {
HXLINE(1340)			_hx_tmp = ((Float)((Float)1.0) / (Float)this->frameRate);
            		}
HXDLIN(1340)		this->_hx___framePeriod = _hx_tmp;
HXLINE(1341)		this->_hx___nextRender = (this->_hx___lastRender + this->_hx___framePeriod);
HXLINE(1342)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_frameRate,return )

bool Stage_obj::get_isOpenGL(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1349_get_isOpenGL)
HXDLIN(1349)		return ( (bool)(::openfl::_legacy::display::Stage_obj::lime_stage_is_opengl(this->_hx___handle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_isOpenGL,return )

 ::openfl::_legacy::display::StageQuality Stage_obj::get_quality(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1354_get_quality)
HXLINE(1356)		int i = ( (int)(::openfl::_legacy::display::Stage_obj::lime_stage_get_quality(this->_hx___handle)) );
HXLINE(1357)		return ::Type_obj::createEnumIndex(hx::ClassOf< ::openfl::_legacy::display::StageQuality >(),i,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_quality,return )

 ::openfl::_legacy::display::StageQuality Stage_obj::set_quality( ::openfl::_legacy::display::StageQuality value){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1362_set_quality)
HXLINE(1364)		 ::Dynamic _hx_tmp = hx::ClassOf< ::openfl::_legacy::display::Stage >();
HXDLIN(1364)		 ::Dynamic _hx_tmp1 = this->_hx___handle;
HXDLIN(1364)		int _hx_tmp2 = _hx_getEnumValueIndex(value);
HXDLIN(1364)		::openfl::_legacy::display::Stage_obj::lime_stage_set_quality(_hx_tmp1,_hx_tmp2);
HXLINE(1365)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_quality,return )

 ::openfl::_legacy::display::StageScaleMode Stage_obj::get_scaleMode(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1370_get_scaleMode)
HXLINE(1372)		int i = ( (int)(::openfl::_legacy::display::Stage_obj::lime_stage_get_scale_mode(this->_hx___handle)) );
HXLINE(1373)		return ::Type_obj::createEnumIndex(hx::ClassOf< ::openfl::_legacy::display::StageScaleMode >(),i,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_scaleMode,return )

 ::openfl::_legacy::display::StageScaleMode Stage_obj::set_scaleMode( ::openfl::_legacy::display::StageScaleMode value){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1378_set_scaleMode)
HXLINE(1380)		 ::Dynamic _hx_tmp = hx::ClassOf< ::openfl::_legacy::display::Stage >();
HXDLIN(1380)		 ::Dynamic _hx_tmp1 = this->_hx___handle;
HXDLIN(1380)		int _hx_tmp2 = _hx_getEnumValueIndex(value);
HXDLIN(1380)		::openfl::_legacy::display::Stage_obj::lime_stage_set_scale_mode(_hx_tmp1,_hx_tmp2);
HXLINE(1381)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_scaleMode,return )

 ::openfl::_legacy::geom::Rectangle Stage_obj::get_softKeyboardRect(){
            	HX_GC_STACKFRAME(&_hx_pos_d4acca48e18394dd_1386_get_softKeyboardRect)
HXLINE(1388)		if (hx::IsNull( this->_hx___softKeyboardRect )) {
HXLINE(1390)			this->_hx___softKeyboardRect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE(1414)		return this->_hx___softKeyboardRect;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_softKeyboardRect,return )

 ::openfl::_legacy::display::Stage Stage_obj::get_stage(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1421_get_stage)
HXDLIN(1421)		return hx::ObjectPtr<OBJ_>(this);
            	}


bool Stage_obj::get_stageFocusRect(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1426_get_stageFocusRect)
HXDLIN(1426)		return ( (bool)(::openfl::_legacy::display::Stage_obj::lime_stage_get_focus_rect(this->_hx___handle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_stageFocusRect,return )

bool Stage_obj::set_stageFocusRect(bool value){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1427_set_stageFocusRect)
HXLINE(1429)		::openfl::_legacy::display::Stage_obj::lime_stage_set_focus_rect(this->_hx___handle,value);
HXLINE(1430)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_stageFocusRect,return )

bool Stage_obj::get_autos3d(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1435_get_autos3d)
HXDLIN(1435)		return ( (bool)(::openfl::_legacy::display::Stage_obj::lime_stage_get_autos3d(this->_hx___handle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_autos3d,return )

bool Stage_obj::set_autos3d(bool value){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1436_set_autos3d)
HXLINE(1438)		::openfl::_legacy::display::Stage_obj::lime_stage_set_autos3d(this->_hx___handle,value);
HXLINE(1439)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_autos3d,return )

int Stage_obj::get_stageHeight(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1446_get_stageHeight)
HXDLIN(1446)		return ::Std_obj::_hx_int(hx::TCast< Float >::cast(::openfl::_legacy::display::Stage_obj::lime_stage_get_stage_height(this->_hx___handle)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_stageHeight,return )

int Stage_obj::get_stageWidth(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1453_get_stageWidth)
HXDLIN(1453)		return ::Std_obj::_hx_int(hx::TCast< Float >::cast(::openfl::_legacy::display::Stage_obj::lime_stage_get_stage_width(this->_hx___handle)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_stageWidth,return )

Float Stage_obj::_hx___earlyWakeup;

bool Stage_obj::_hx___exiting;

int Stage_obj::OrientationPortrait;

int Stage_obj::OrientationPortraitUpsideDown;

int Stage_obj::OrientationLandscapeRight;

int Stage_obj::OrientationLandscapeLeft;

int Stage_obj::OrientationFaceUp;

int Stage_obj::OrientationFaceDown;

int Stage_obj::OrientationPortraitAny;

int Stage_obj::OrientationLandscapeAny;

int Stage_obj::OrientationAny;

int Stage_obj::efLeftDown;

int Stage_obj::efShiftDown;

int Stage_obj::efCtrlDown;

int Stage_obj::efAltDown;

int Stage_obj::efCommandDown;

int Stage_obj::efLocationRight;

int Stage_obj::efNoNativeClick;

::Array< ::String > Stage_obj::sClickEvents;

::Array< ::String > Stage_obj::sDownEvents;

::Array< ::String > Stage_obj::sUpEvents;

::Array< ::String > Stage_obj::_hx___mouseChanges;

::Array< ::String > Stage_obj::_hx___touchChanges;

HX_BEGIN_DEFAULT_FUNC(__default_getOrientation,Stage_obj)
int _hx_run(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_165___default_getOrientation)
HXDLIN( 165)		return ( (int)(::openfl::_legacy::display::Stage_obj::lime_stage_get_orientation()) );
            	}
HX_END_LOCAL_FUNC0(return )
HX_END_DEFAULT_FUNC

::Dynamic Stage_obj::getOrientation;

HX_BEGIN_DEFAULT_FUNC(__default_getNormalOrientation,Stage_obj)
int _hx_run(){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_172___default_getNormalOrientation)
HXDLIN( 172)		return ( (int)(::openfl::_legacy::display::Stage_obj::lime_stage_get_normal_orientation()) );
            	}
HX_END_LOCAL_FUNC0(return )
HX_END_DEFAULT_FUNC

::Dynamic Stage_obj::getNormalOrientation;

void Stage_obj::setFixedOrientation(int orientation){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_209_setFixedOrientation)
HXDLIN( 209)		::openfl::_legacy::display::Stage_obj::lime_stage_set_fixed_orientation(orientation);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,setFixedOrientation,(void))

HX_BEGIN_DEFAULT_FUNC(__default_shouldRotateInterface,Stage_obj)
bool _hx_run(int orientation){
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_216___default_shouldRotateInterface)
HXDLIN( 216)		return (orientation == ::openfl::_legacy::display::Stage_obj::OrientationPortrait);
            	}
HX_END_LOCAL_FUNC1(return )
HX_END_DEFAULT_FUNC

::Dynamic Stage_obj::shouldRotateInterface;

 ::Dynamic Stage_obj::lime_set_stage_handler;

 ::Dynamic Stage_obj::lime_render_stage;

 ::Dynamic Stage_obj::lime_stage_get_autos3d;

 ::Dynamic Stage_obj::lime_stage_set_autos3d;

 ::Dynamic Stage_obj::lime_stage_get_focus_id;

 ::Dynamic Stage_obj::lime_stage_set_focus;

 ::Dynamic Stage_obj::lime_stage_get_focus_rect;

 ::Dynamic Stage_obj::lime_stage_set_focus_rect;

 ::Dynamic Stage_obj::lime_stage_is_opengl;

 ::Dynamic Stage_obj::lime_stage_get_stage_width;

 ::Dynamic Stage_obj::lime_stage_get_stage_height;

 ::Dynamic Stage_obj::lime_stage_get_dpi_scale;

 ::Dynamic Stage_obj::lime_stage_get_scale_mode;

 ::Dynamic Stage_obj::lime_stage_set_scale_mode;

 ::Dynamic Stage_obj::lime_stage_get_align;

 ::Dynamic Stage_obj::lime_stage_set_align;

 ::Dynamic Stage_obj::lime_stage_get_quality;

 ::Dynamic Stage_obj::lime_stage_set_quality;

 ::Dynamic Stage_obj::lime_stage_get_display_state;

 ::Dynamic Stage_obj::lime_stage_set_display_state;

 ::Dynamic Stage_obj::lime_stage_set_next_wake;

 ::Dynamic Stage_obj::lime_stage_request_render;

 ::Dynamic Stage_obj::lime_stage_resize_window;

 ::Dynamic Stage_obj::lime_stage_set_resolution;

 ::Dynamic Stage_obj::lime_stage_set_screenmode;

 ::Dynamic Stage_obj::lime_stage_set_fullscreen;

 ::Dynamic Stage_obj::lime_stage_show_cursor;

 ::Dynamic Stage_obj::lime_stage_set_fixed_orientation;

 ::Dynamic Stage_obj::lime_stage_get_orientation;

 ::Dynamic Stage_obj::lime_stage_get_normal_orientation;


hx::ObjectPtr< Stage_obj > Stage_obj::__new( ::Dynamic handle,int width,int height) {
	hx::ObjectPtr< Stage_obj > __this = new Stage_obj();
	__this->__construct(handle,width,height);
	return __this;
}

hx::ObjectPtr< Stage_obj > Stage_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic handle,int width,int height) {
	Stage_obj *__this = (Stage_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Stage_obj), true, "openfl._legacy.display.Stage"));
	*(void **)__this = Stage_obj::_hx_vtable;
	__this->__construct(handle,width,height);
	return __this;
}

Stage_obj::Stage_obj()
{
}

void Stage_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Stage);
	HX_MARK_MEMBER_NAME(allowsFullScreen,"allowsFullScreen");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(dpiScale,"dpiScale");
	HX_MARK_MEMBER_NAME(frameRate,"frameRate");
	HX_MARK_MEMBER_NAME(isOpenGL,"isOpenGL");
	HX_MARK_MEMBER_NAME(onKey,"onKey");
	HX_MARK_MEMBER_NAME(onQuit,"onQuit");
	HX_MARK_MEMBER_NAME(pauseWhenDeactivated,"pauseWhenDeactivated");
	HX_MARK_MEMBER_NAME(renderRequest,"renderRequest");
	HX_MARK_MEMBER_NAME(softKeyboardRect,"softKeyboardRect");
	HX_MARK_MEMBER_NAME(stage3Ds,"stage3Ds");
	HX_MARK_MEMBER_NAME(stageHeight,"stageHeight");
	HX_MARK_MEMBER_NAME(stageWidth,"stageWidth");
	HX_MARK_MEMBER_NAME(_hx___joyAxisData,"__joyAxisData");
	HX_MARK_MEMBER_NAME(_hx___dragBounds,"__dragBounds");
	HX_MARK_MEMBER_NAME(_hx___dragObject,"__dragObject");
	HX_MARK_MEMBER_NAME(_hx___dragOffsetX,"__dragOffsetX");
	HX_MARK_MEMBER_NAME(_hx___dragOffsetY,"__dragOffsetY");
	HX_MARK_MEMBER_NAME(_hx___focusOverObjects,"__focusOverObjects");
	HX_MARK_MEMBER_NAME(_hx___framePeriod,"__framePeriod");
	HX_MARK_MEMBER_NAME(_hx___invalid,"__invalid");
	HX_MARK_MEMBER_NAME(_hx___lastClickTime,"__lastClickTime");
	HX_MARK_MEMBER_NAME(_hx___lastDown,"__lastDown");
	HX_MARK_MEMBER_NAME(_hx___lastRender,"__lastRender");
	HX_MARK_MEMBER_NAME(_hx___mouseOverObjects,"__mouseOverObjects");
	HX_MARK_MEMBER_NAME(_hx___nextRender,"__nextRender");
	HX_MARK_MEMBER_NAME(_hx___softKeyboardRect,"__softKeyboardRect");
	HX_MARK_MEMBER_NAME(_hx___touchInfo,"__touchInfo");
	 ::openfl::_legacy::display::DisplayObjectContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Stage_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(allowsFullScreen,"allowsFullScreen");
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(dpiScale,"dpiScale");
	HX_VISIT_MEMBER_NAME(frameRate,"frameRate");
	HX_VISIT_MEMBER_NAME(isOpenGL,"isOpenGL");
	HX_VISIT_MEMBER_NAME(onKey,"onKey");
	HX_VISIT_MEMBER_NAME(onQuit,"onQuit");
	HX_VISIT_MEMBER_NAME(pauseWhenDeactivated,"pauseWhenDeactivated");
	HX_VISIT_MEMBER_NAME(renderRequest,"renderRequest");
	HX_VISIT_MEMBER_NAME(softKeyboardRect,"softKeyboardRect");
	HX_VISIT_MEMBER_NAME(stage3Ds,"stage3Ds");
	HX_VISIT_MEMBER_NAME(stageHeight,"stageHeight");
	HX_VISIT_MEMBER_NAME(stageWidth,"stageWidth");
	HX_VISIT_MEMBER_NAME(_hx___joyAxisData,"__joyAxisData");
	HX_VISIT_MEMBER_NAME(_hx___dragBounds,"__dragBounds");
	HX_VISIT_MEMBER_NAME(_hx___dragObject,"__dragObject");
	HX_VISIT_MEMBER_NAME(_hx___dragOffsetX,"__dragOffsetX");
	HX_VISIT_MEMBER_NAME(_hx___dragOffsetY,"__dragOffsetY");
	HX_VISIT_MEMBER_NAME(_hx___focusOverObjects,"__focusOverObjects");
	HX_VISIT_MEMBER_NAME(_hx___framePeriod,"__framePeriod");
	HX_VISIT_MEMBER_NAME(_hx___invalid,"__invalid");
	HX_VISIT_MEMBER_NAME(_hx___lastClickTime,"__lastClickTime");
	HX_VISIT_MEMBER_NAME(_hx___lastDown,"__lastDown");
	HX_VISIT_MEMBER_NAME(_hx___lastRender,"__lastRender");
	HX_VISIT_MEMBER_NAME(_hx___mouseOverObjects,"__mouseOverObjects");
	HX_VISIT_MEMBER_NAME(_hx___nextRender,"__nextRender");
	HX_VISIT_MEMBER_NAME(_hx___softKeyboardRect,"__softKeyboardRect");
	HX_VISIT_MEMBER_NAME(_hx___touchInfo,"__touchInfo");
	 ::openfl::_legacy::display::DisplayObjectContainer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Stage_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_align() ); }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_color() ); }
		if (HX_FIELD_EQ(inName,"focus") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_focus() ); }
		if (HX_FIELD_EQ(inName,"onKey") ) { return hx::Val( onKey ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { return hx::Val( active ); }
		if (HX_FIELD_EQ(inName,"onQuit") ) { return hx::Val( onQuit ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn() ); }
		if (HX_FIELD_EQ(inName,"__drag") ) { return hx::Val( _hx___drag_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"autos3d") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_autos3d() ); }
		if (HX_FIELD_EQ(inName,"quality") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_quality() ); }
		if (HX_FIELD_EQ(inName,"__onKey") ) { return hx::Val( _hx___onKey_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dpiScale") ) { return hx::Val( inCallProp == hx::paccAlways ? get_dpiScale() : dpiScale ); }
		if (HX_FIELD_EQ(inName,"isOpenGL") ) { return hx::Val( inCallProp == hx::paccAlways ? get_isOpenGL() : isOpenGL ); }
		if (HX_FIELD_EQ(inName,"stage3Ds") ) { return hx::Val( stage3Ds ); }
		if (HX_FIELD_EQ(inName,"__render") ) { return hx::Val( _hx___render_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { return hx::Val( frameRate ); }
		if (HX_FIELD_EQ(inName,"scaleMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scaleMode() ); }
		if (HX_FIELD_EQ(inName,"__invalid") ) { return hx::Val( _hx___invalid ); }
		if (HX_FIELD_EQ(inName,"__onFocus") ) { return hx::Val( _hx___onFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onMouse") ) { return hx::Val( _hx___onMouse_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onSysWM") ) { return hx::Val( _hx___onSysWM_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onTouch") ) { return hx::Val( _hx___onTouch_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_align") ) { return hx::Val( get_align_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_align") ) { return hx::Val( set_align_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_color") ) { return hx::Val( get_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_focus") ) { return hx::Val( get_focus_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_focus") ) { return hx::Val( set_focus_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_stage") ) { return hx::Val( get_stage_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stageWidth") ) { return hx::Val( inCallProp == hx::paccAlways ? get_stageWidth() : stageWidth ); }
		if (HX_FIELD_EQ(inName,"__lastDown") ) { return hx::Val( _hx___lastDown ); }
		if (HX_FIELD_EQ(inName,"invalidate") ) { return hx::Val( invalidate_dyn() ); }
		if (HX_FIELD_EQ(inName,"showCursor") ) { return hx::Val( showCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onChange") ) { return hx::Val( _hx___onChange_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onResize") ) { return hx::Val( _hx___onResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopDrag") ) { return hx::Val( _hx___stopDrag_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stageHeight") ) { return hx::Val( inCallProp == hx::paccAlways ? get_stageHeight() : stageHeight ); }
		if (HX_FIELD_EQ(inName,"__touchInfo") ) { return hx::Val( _hx___touchInfo ); }
		if (HX_FIELD_EQ(inName,"__setActive") ) { return hx::Val( _hx___setActive_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startDrag") ) { return hx::Val( _hx___startDrag_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_quality") ) { return hx::Val( get_quality_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_quality") ) { return hx::Val( set_quality_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_autos3d") ) { return hx::Val( get_autos3d_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autos3d") ) { return hx::Val( set_autos3d_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"displayState") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_displayState() ); }
		if (HX_FIELD_EQ(inName,"__dragBounds") ) { return hx::Val( _hx___dragBounds ); }
		if (HX_FIELD_EQ(inName,"__dragObject") ) { return hx::Val( _hx___dragObject ); }
		if (HX_FIELD_EQ(inName,"__lastRender") ) { return hx::Val( _hx___lastRender ); }
		if (HX_FIELD_EQ(inName,"__nextRender") ) { return hx::Val( _hx___nextRender ); }
		if (HX_FIELD_EQ(inName,"__onJoystick") ) { return hx::Val( _hx___onJoystick_dyn() ); }
		if (HX_FIELD_EQ(inName,"__pollTimers") ) { return hx::Val( _hx___pollTimers_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_dpiScale") ) { return hx::Val( get_dpiScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_isOpenGL") ) { return hx::Val( get_isOpenGL_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"renderRequest") ) { return hx::Val( renderRequest ); }
		if (HX_FIELD_EQ(inName,"__joyAxisData") ) { return hx::Val( _hx___joyAxisData ); }
		if (HX_FIELD_EQ(inName,"__dragOffsetX") ) { return hx::Val( _hx___dragOffsetX ); }
		if (HX_FIELD_EQ(inName,"__dragOffsetY") ) { return hx::Val( _hx___dragOffsetY ); }
		if (HX_FIELD_EQ(inName,"__framePeriod") ) { return hx::Val( _hx___framePeriod ); }
		if (HX_FIELD_EQ(inName,"setResolution") ) { return hx::Val( setResolution_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScreenMode") ) { return hx::Val( setScreenMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFullscreen") ) { return hx::Val( setFullscreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"__checkInOuts") ) { return hx::Val( _hx___checkInOuts_dyn() ); }
		if (HX_FIELD_EQ(inName,"__checkRender") ) { return hx::Val( _hx___checkRender_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_frameRate") ) { return hx::Val( set_frameRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleMode") ) { return hx::Val( get_scaleMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleMode") ) { return hx::Val( set_scaleMode_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"stageFocusRect") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_stageFocusRect() ); }
		if (HX_FIELD_EQ(inName,"__nextFrameDue") ) { return hx::Val( _hx___nextFrameDue_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_stageWidth") ) { return hx::Val( get_stageWidth_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__lastClickTime") ) { return hx::Val( _hx___lastClickTime ); }
		if (HX_FIELD_EQ(inName,"get_stageHeight") ) { return hx::Val( get_stageHeight_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"allowsFullScreen") ) { return hx::Val( allowsFullScreen ); }
		if (HX_FIELD_EQ(inName,"softKeyboardRect") ) { return hx::Val( inCallProp == hx::paccAlways ? get_softKeyboardRect() : softKeyboardRect ); }
		if (HX_FIELD_EQ(inName,"__updateNextWake") ) { return hx::Val( _hx___updateNextWake_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_displayState") ) { return hx::Val( get_displayState_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_displayState") ) { return hx::Val( set_displayState_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__onRenderContext") ) { return hx::Val( _hx___onRenderContext_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__focusOverObjects") ) { return hx::Val( _hx___focusOverObjects ); }
		if (HX_FIELD_EQ(inName,"__mouseOverObjects") ) { return hx::Val( _hx___mouseOverObjects ); }
		if (HX_FIELD_EQ(inName,"__softKeyboardRect") ) { return hx::Val( _hx___softKeyboardRect ); }
		if (HX_FIELD_EQ(inName,"__checkFocusInOuts") ) { return hx::Val( _hx___checkFocusInOuts_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_stageFocusRect") ) { return hx::Val( get_stageFocusRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_stageFocusRect") ) { return hx::Val( set_stageFocusRect_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__processStageEvent") ) { return hx::Val( _hx___processStageEvent_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"pauseWhenDeactivated") ) { return hx::Val( pauseWhenDeactivated ); }
		if (HX_FIELD_EQ(inName,"get_softKeyboardRect") ) { return hx::Val( get_softKeyboardRect_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__doProcessStageEvent") ) { return hx::Val( _hx___doProcessStageEvent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Stage_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__exiting") ) { outValue = ( _hx___exiting ); return true; }
		if (HX_FIELD_EQ(inName,"efAltDown") ) { outValue = ( efAltDown ); return true; }
		if (HX_FIELD_EQ(inName,"sUpEvents") ) { outValue = ( sUpEvents ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"efLeftDown") ) { outValue = ( efLeftDown ); return true; }
		if (HX_FIELD_EQ(inName,"efCtrlDown") ) { outValue = ( efCtrlDown ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"efShiftDown") ) { outValue = ( efShiftDown ); return true; }
		if (HX_FIELD_EQ(inName,"sDownEvents") ) { outValue = ( sDownEvents ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sClickEvents") ) { outValue = ( sClickEvents ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__earlyWakeup") ) { outValue = ( _hx___earlyWakeup ); return true; }
		if (HX_FIELD_EQ(inName,"efCommandDown") ) { outValue = ( efCommandDown ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"OrientationAny") ) { outValue = ( OrientationAny ); return true; }
		if (HX_FIELD_EQ(inName,"__mouseChanges") ) { outValue = ( _hx___mouseChanges ); return true; }
		if (HX_FIELD_EQ(inName,"__touchChanges") ) { outValue = ( _hx___touchChanges ); return true; }
		if (HX_FIELD_EQ(inName,"getOrientation") ) { outValue = ( getOrientation ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"efLocationRight") ) { outValue = ( efLocationRight ); return true; }
		if (HX_FIELD_EQ(inName,"efNoNativeClick") ) { outValue = ( efNoNativeClick ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"OrientationFaceUp") ) { outValue = ( OrientationFaceUp ); return true; }
		if (HX_FIELD_EQ(inName,"lime_render_stage") ) { outValue = ( lime_render_stage ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"OrientationPortrait") ) { outValue = ( OrientationPortrait ); return true; }
		if (HX_FIELD_EQ(inName,"OrientationFaceDown") ) { outValue = ( OrientationFaceDown ); return true; }
		if (HX_FIELD_EQ(inName,"setFixedOrientation") ) { outValue = setFixedOrientation_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getNormalOrientation") ) { outValue = ( getNormalOrientation ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_focus") ) { outValue = ( lime_stage_set_focus ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_is_opengl") ) { outValue = ( lime_stage_is_opengl ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_get_align") ) { outValue = ( lime_stage_get_align ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_align") ) { outValue = ( lime_stage_set_align ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"shouldRotateInterface") ) { outValue = ( shouldRotateInterface ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"OrientationPortraitAny") ) { outValue = ( OrientationPortraitAny ); return true; }
		if (HX_FIELD_EQ(inName,"lime_set_stage_handler") ) { outValue = ( lime_set_stage_handler ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_get_autos3d") ) { outValue = ( lime_stage_get_autos3d ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_autos3d") ) { outValue = ( lime_stage_set_autos3d ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_get_quality") ) { outValue = ( lime_stage_get_quality ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_quality") ) { outValue = ( lime_stage_set_quality ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_show_cursor") ) { outValue = ( lime_stage_show_cursor ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"OrientationLandscapeAny") ) { outValue = ( OrientationLandscapeAny ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_get_focus_id") ) { outValue = ( lime_stage_get_focus_id ); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"OrientationLandscapeLeft") ) { outValue = ( OrientationLandscapeLeft ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_get_dpi_scale") ) { outValue = ( lime_stage_get_dpi_scale ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_next_wake") ) { outValue = ( lime_stage_set_next_wake ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_resize_window") ) { outValue = ( lime_stage_resize_window ); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"OrientationLandscapeRight") ) { outValue = ( OrientationLandscapeRight ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_get_focus_rect") ) { outValue = ( lime_stage_get_focus_rect ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_focus_rect") ) { outValue = ( lime_stage_set_focus_rect ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_get_scale_mode") ) { outValue = ( lime_stage_get_scale_mode ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_scale_mode") ) { outValue = ( lime_stage_set_scale_mode ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_request_render") ) { outValue = ( lime_stage_request_render ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_resolution") ) { outValue = ( lime_stage_set_resolution ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_screenmode") ) { outValue = ( lime_stage_set_screenmode ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_fullscreen") ) { outValue = ( lime_stage_set_fullscreen ); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"lime_stage_get_stage_width") ) { outValue = ( lime_stage_get_stage_width ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_get_orientation") ) { outValue = ( lime_stage_get_orientation ); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"lime_stage_get_stage_height") ) { outValue = ( lime_stage_get_stage_height ); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lime_stage_get_display_state") ) { outValue = ( lime_stage_get_display_state ); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_display_state") ) { outValue = ( lime_stage_set_display_state ); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"OrientationPortraitUpsideDown") ) { outValue = ( OrientationPortraitUpsideDown ); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"lime_stage_set_fixed_orientation") ) { outValue = ( lime_stage_set_fixed_orientation ); return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"lime_stage_get_normal_orientation") ) { outValue = ( lime_stage_get_normal_orientation ); return true; }
	}
	return false;
}

hx::Val Stage_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_align(inValue.Cast<  ::openfl::_legacy::display::StageAlign >()) ); }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"focus") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_focus(inValue.Cast<  ::openfl::_legacy::display::InteractiveObject >()) ); }
		if (HX_FIELD_EQ(inName,"onKey") ) { onKey=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onQuit") ) { onQuit=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"autos3d") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_autos3d(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"quality") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_quality(inValue.Cast<  ::openfl::_legacy::display::StageQuality >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dpiScale") ) { dpiScale=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isOpenGL") ) { isOpenGL=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stage3Ds") ) { stage3Ds=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frameRate(inValue.Cast< Float >()) );frameRate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleMode(inValue.Cast<  ::openfl::_legacy::display::StageScaleMode >()) ); }
		if (HX_FIELD_EQ(inName,"__invalid") ) { _hx___invalid=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stageWidth") ) { stageWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__lastDown") ) { _hx___lastDown=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stageHeight") ) { stageHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__touchInfo") ) { _hx___touchInfo=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"displayState") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_displayState(inValue.Cast<  ::openfl::_legacy::display::StageDisplayState >()) ); }
		if (HX_FIELD_EQ(inName,"__dragBounds") ) { _hx___dragBounds=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragObject") ) { _hx___dragObject=inValue.Cast<  ::openfl::_legacy::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__lastRender") ) { _hx___lastRender=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__nextRender") ) { _hx___nextRender=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"renderRequest") ) { renderRequest=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__joyAxisData") ) { _hx___joyAxisData=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragOffsetX") ) { _hx___dragOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragOffsetY") ) { _hx___dragOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__framePeriod") ) { _hx___framePeriod=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"stageFocusRect") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_stageFocusRect(inValue.Cast< bool >()) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__lastClickTime") ) { _hx___lastClickTime=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"allowsFullScreen") ) { allowsFullScreen=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"softKeyboardRect") ) { softKeyboardRect=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__focusOverObjects") ) { _hx___focusOverObjects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseOverObjects") ) { _hx___mouseOverObjects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__softKeyboardRect") ) { _hx___softKeyboardRect=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"pauseWhenDeactivated") ) { pauseWhenDeactivated=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Stage_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__exiting") ) { _hx___exiting=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"efAltDown") ) { efAltDown=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"sUpEvents") ) { sUpEvents=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"efLeftDown") ) { efLeftDown=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"efCtrlDown") ) { efCtrlDown=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"efShiftDown") ) { efShiftDown=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"sDownEvents") ) { sDownEvents=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sClickEvents") ) { sClickEvents=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__earlyWakeup") ) { _hx___earlyWakeup=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"efCommandDown") ) { efCommandDown=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"OrientationAny") ) { OrientationAny=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"__mouseChanges") ) { _hx___mouseChanges=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"__touchChanges") ) { _hx___touchChanges=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"getOrientation") ) { getOrientation=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"efLocationRight") ) { efLocationRight=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"efNoNativeClick") ) { efNoNativeClick=ioValue.Cast< int >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"OrientationFaceUp") ) { OrientationFaceUp=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_render_stage") ) { lime_render_stage=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"OrientationPortrait") ) { OrientationPortrait=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"OrientationFaceDown") ) { OrientationFaceDown=ioValue.Cast< int >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getNormalOrientation") ) { getNormalOrientation=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_focus") ) { lime_stage_set_focus=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_is_opengl") ) { lime_stage_is_opengl=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_get_align") ) { lime_stage_get_align=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_align") ) { lime_stage_set_align=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"shouldRotateInterface") ) { shouldRotateInterface=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"OrientationPortraitAny") ) { OrientationPortraitAny=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_set_stage_handler") ) { lime_set_stage_handler=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_get_autos3d") ) { lime_stage_get_autos3d=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_autos3d") ) { lime_stage_set_autos3d=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_get_quality") ) { lime_stage_get_quality=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_quality") ) { lime_stage_set_quality=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_show_cursor") ) { lime_stage_show_cursor=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"OrientationLandscapeAny") ) { OrientationLandscapeAny=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_get_focus_id") ) { lime_stage_get_focus_id=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"OrientationLandscapeLeft") ) { OrientationLandscapeLeft=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_get_dpi_scale") ) { lime_stage_get_dpi_scale=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_next_wake") ) { lime_stage_set_next_wake=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_resize_window") ) { lime_stage_resize_window=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"OrientationLandscapeRight") ) { OrientationLandscapeRight=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_get_focus_rect") ) { lime_stage_get_focus_rect=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_focus_rect") ) { lime_stage_set_focus_rect=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_get_scale_mode") ) { lime_stage_get_scale_mode=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_scale_mode") ) { lime_stage_set_scale_mode=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_request_render") ) { lime_stage_request_render=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_resolution") ) { lime_stage_set_resolution=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_screenmode") ) { lime_stage_set_screenmode=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_fullscreen") ) { lime_stage_set_fullscreen=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"lime_stage_get_stage_width") ) { lime_stage_get_stage_width=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_get_orientation") ) { lime_stage_get_orientation=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"lime_stage_get_stage_height") ) { lime_stage_get_stage_height=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lime_stage_get_display_state") ) { lime_stage_get_display_state=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_stage_set_display_state") ) { lime_stage_set_display_state=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"OrientationPortraitUpsideDown") ) { OrientationPortraitUpsideDown=ioValue.Cast< int >(); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"lime_stage_set_fixed_orientation") ) { lime_stage_set_fixed_orientation=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"lime_stage_get_normal_orientation") ) { lime_stage_get_normal_orientation=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void Stage_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("allowsFullScreen","\xc5","\x66","\xdc","\x4b"));
	outFields->push(HX_HCSTRING("autos3d","\xf5","\x9f","\x94","\x9d"));
	outFields->push(HX_HCSTRING("active","\xc6","\x41","\x46","\x16"));
	outFields->push(HX_HCSTRING("align","\xc5","\x56","\x91","\x21"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("displayState","\x6f","\x4c","\x64","\x90"));
	outFields->push(HX_HCSTRING("dpiScale","\xed","\xa9","\x8d","\x90"));
	outFields->push(HX_HCSTRING("focus","\xd8","\x5f","\x89","\x04"));
	outFields->push(HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"));
	outFields->push(HX_HCSTRING("isOpenGL","\xf9","\xe3","\xfd","\x79"));
	outFields->push(HX_HCSTRING("pauseWhenDeactivated","\xc0","\x1e","\xb2","\x2d"));
	outFields->push(HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44"));
	outFields->push(HX_HCSTRING("scaleMode","\x0d","\xdb","\xd3","\x2b"));
	outFields->push(HX_HCSTRING("softKeyboardRect","\x75","\x35","\x3a","\xec"));
	outFields->push(HX_HCSTRING("stage3Ds","\xa4","\x4e","\x30","\xe3"));
	outFields->push(HX_HCSTRING("stageFocusRect","\x7e","\xd2","\x81","\x74"));
	outFields->push(HX_HCSTRING("stageHeight","\x45","\x89","\x45","\x95"));
	outFields->push(HX_HCSTRING("stageWidth","\x68","\x0a","\xb3","\x1d"));
	outFields->push(HX_HCSTRING("__joyAxisData","\x7f","\x04","\x9e","\x1c"));
	outFields->push(HX_HCSTRING("__dragBounds","\xa9","\x10","\x1d","\x47"));
	outFields->push(HX_HCSTRING("__dragObject","\xf3","\x08","\x3f","\xf6"));
	outFields->push(HX_HCSTRING("__dragOffsetX","\xb1","\x6c","\xfe","\xd5"));
	outFields->push(HX_HCSTRING("__dragOffsetY","\xb2","\x6c","\xfe","\xd5"));
	outFields->push(HX_HCSTRING("__focusOverObjects","\x08","\x3c","\x26","\x7d"));
	outFields->push(HX_HCSTRING("__framePeriod","\xee","\x6d","\xdb","\x61"));
	outFields->push(HX_HCSTRING("__invalid","\xd7","\x2b","\x96","\xbc"));
	outFields->push(HX_HCSTRING("__lastClickTime","\x1f","\x4c","\xe7","\xb1"));
	outFields->push(HX_HCSTRING("__lastDown","\xf8","\x84","\xef","\x78"));
	outFields->push(HX_HCSTRING("__lastRender","\x6c","\xc9","\x97","\x08"));
	outFields->push(HX_HCSTRING("__mouseOverObjects","\xdb","\x3e","\xae","\x7b"));
	outFields->push(HX_HCSTRING("__nextRender","\xc9","\x97","\xee","\xf2"));
	outFields->push(HX_HCSTRING("__softKeyboardRect","\x95","\xc8","\xca","\x57"));
	outFields->push(HX_HCSTRING("__touchInfo","\xad","\x10","\x54","\x39"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Stage_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Stage_obj,allowsFullScreen),HX_HCSTRING("allowsFullScreen","\xc5","\x66","\xdc","\x4b")},
	{hx::fsBool,(int)offsetof(Stage_obj,active),HX_HCSTRING("active","\xc6","\x41","\x46","\x16")},
	{hx::fsFloat,(int)offsetof(Stage_obj,dpiScale),HX_HCSTRING("dpiScale","\xed","\xa9","\x8d","\x90")},
	{hx::fsFloat,(int)offsetof(Stage_obj,frameRate),HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39")},
	{hx::fsBool,(int)offsetof(Stage_obj,isOpenGL),HX_HCSTRING("isOpenGL","\xf9","\xe3","\xfd","\x79")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Stage_obj,onKey),HX_HCSTRING("onKey","\xc0","\x1d","\x69","\x32")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Stage_obj,onQuit),HX_HCSTRING("onQuit","\x8e","\x48","\x94","\xed")},
	{hx::fsBool,(int)offsetof(Stage_obj,pauseWhenDeactivated),HX_HCSTRING("pauseWhenDeactivated","\xc0","\x1e","\xb2","\x2d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Stage_obj,renderRequest),HX_HCSTRING("renderRequest","\x99","\x52","\x72","\x40")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(Stage_obj,softKeyboardRect),HX_HCSTRING("softKeyboardRect","\x75","\x35","\x3a","\xec")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Stage_obj,stage3Ds),HX_HCSTRING("stage3Ds","\xa4","\x4e","\x30","\xe3")},
	{hx::fsInt,(int)offsetof(Stage_obj,stageHeight),HX_HCSTRING("stageHeight","\x45","\x89","\x45","\x95")},
	{hx::fsInt,(int)offsetof(Stage_obj,stageWidth),HX_HCSTRING("stageWidth","\x68","\x0a","\xb3","\x1d")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Stage_obj,_hx___joyAxisData),HX_HCSTRING("__joyAxisData","\x7f","\x04","\x9e","\x1c")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(Stage_obj,_hx___dragBounds),HX_HCSTRING("__dragBounds","\xa9","\x10","\x1d","\x47")},
	{hx::fsObject /*::openfl::_legacy::display::Sprite*/ ,(int)offsetof(Stage_obj,_hx___dragObject),HX_HCSTRING("__dragObject","\xf3","\x08","\x3f","\xf6")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___dragOffsetX),HX_HCSTRING("__dragOffsetX","\xb1","\x6c","\xfe","\xd5")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___dragOffsetY),HX_HCSTRING("__dragOffsetY","\xb2","\x6c","\xfe","\xd5")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Stage_obj,_hx___focusOverObjects),HX_HCSTRING("__focusOverObjects","\x08","\x3c","\x26","\x7d")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___framePeriod),HX_HCSTRING("__framePeriod","\xee","\x6d","\xdb","\x61")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___invalid),HX_HCSTRING("__invalid","\xd7","\x2b","\x96","\xbc")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___lastClickTime),HX_HCSTRING("__lastClickTime","\x1f","\x4c","\xe7","\xb1")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Stage_obj,_hx___lastDown),HX_HCSTRING("__lastDown","\xf8","\x84","\xef","\x78")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___lastRender),HX_HCSTRING("__lastRender","\x6c","\xc9","\x97","\x08")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Stage_obj,_hx___mouseOverObjects),HX_HCSTRING("__mouseOverObjects","\xdb","\x3e","\xae","\x7b")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___nextRender),HX_HCSTRING("__nextRender","\xc9","\x97","\xee","\xf2")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(Stage_obj,_hx___softKeyboardRect),HX_HCSTRING("__softKeyboardRect","\x95","\xc8","\xca","\x57")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Stage_obj,_hx___touchInfo),HX_HCSTRING("__touchInfo","\xad","\x10","\x54","\x39")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Stage_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &Stage_obj::_hx___earlyWakeup,HX_HCSTRING("__earlyWakeup","\x62","\x8d","\xcf","\x9e")},
	{hx::fsBool,(void *) &Stage_obj::_hx___exiting,HX_HCSTRING("__exiting","\x64","\x2d","\x29","\xa6")},
	{hx::fsInt,(void *) &Stage_obj::OrientationPortrait,HX_HCSTRING("OrientationPortrait","\x2b","\x94","\x80","\xf0")},
	{hx::fsInt,(void *) &Stage_obj::OrientationPortraitUpsideDown,HX_HCSTRING("OrientationPortraitUpsideDown","\xff","\x1e","\x9c","\xfe")},
	{hx::fsInt,(void *) &Stage_obj::OrientationLandscapeRight,HX_HCSTRING("OrientationLandscapeRight","\x71","\xbc","\x02","\x9a")},
	{hx::fsInt,(void *) &Stage_obj::OrientationLandscapeLeft,HX_HCSTRING("OrientationLandscapeLeft","\x12","\x41","\xe3","\x43")},
	{hx::fsInt,(void *) &Stage_obj::OrientationFaceUp,HX_HCSTRING("OrientationFaceUp","\x28","\x3f","\x72","\x08")},
	{hx::fsInt,(void *) &Stage_obj::OrientationFaceDown,HX_HCSTRING("OrientationFaceDown","\x6f","\x5e","\xa1","\xad")},
	{hx::fsInt,(void *) &Stage_obj::OrientationPortraitAny,HX_HCSTRING("OrientationPortraitAny","\x81","\xcb","\xb1","\x4f")},
	{hx::fsInt,(void *) &Stage_obj::OrientationLandscapeAny,HX_HCSTRING("OrientationLandscapeAny","\x41","\xec","\x09","\x4c")},
	{hx::fsInt,(void *) &Stage_obj::OrientationAny,HX_HCSTRING("OrientationAny","\x1c","\x7a","\x8d","\xd9")},
	{hx::fsInt,(void *) &Stage_obj::efLeftDown,HX_HCSTRING("efLeftDown","\x8a","\x19","\xac","\x0c")},
	{hx::fsInt,(void *) &Stage_obj::efShiftDown,HX_HCSTRING("efShiftDown","\x63","\x6d","\xa6","\xe4")},
	{hx::fsInt,(void *) &Stage_obj::efCtrlDown,HX_HCSTRING("efCtrlDown","\x2e","\xbc","\xbb","\xaa")},
	{hx::fsInt,(void *) &Stage_obj::efAltDown,HX_HCSTRING("efAltDown","\xca","\x73","\x98","\xb8")},
	{hx::fsInt,(void *) &Stage_obj::efCommandDown,HX_HCSTRING("efCommandDown","\x6c","\x60","\x38","\x7b")},
	{hx::fsInt,(void *) &Stage_obj::efLocationRight,HX_HCSTRING("efLocationRight","\x46","\xfc","\x6b","\xcc")},
	{hx::fsInt,(void *) &Stage_obj::efNoNativeClick,HX_HCSTRING("efNoNativeClick","\x4f","\x9b","\x88","\xae")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Stage_obj::sClickEvents,HX_HCSTRING("sClickEvents","\xce","\x7b","\x9c","\x32")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Stage_obj::sDownEvents,HX_HCSTRING("sDownEvents","\x6e","\x63","\x09","\xae")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Stage_obj::sUpEvents,HX_HCSTRING("sUpEvents","\x67","\xc7","\x94","\xbc")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Stage_obj::_hx___mouseChanges,HX_HCSTRING("__mouseChanges","\x7e","\x84","\x32","\xcf")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Stage_obj::_hx___touchChanges,HX_HCSTRING("__touchChanges","\x24","\x4a","\xef","\x17")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::getOrientation,HX_HCSTRING("getOrientation","\xda","\x41","\x9d","\x85")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::getNormalOrientation,HX_HCSTRING("getNormalOrientation","\x73","\x3e","\xd8","\x12")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::shouldRotateInterface,HX_HCSTRING("shouldRotateInterface","\xeb","\x38","\x3f","\x53")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_set_stage_handler,HX_HCSTRING("lime_set_stage_handler","\x82","\x6a","\x8a","\xcf")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_render_stage,HX_HCSTRING("lime_render_stage","\x7f","\x34","\x45","\xcc")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_get_autos3d,HX_HCSTRING("lime_stage_get_autos3d","\xe1","\x62","\x65","\x85")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_set_autos3d,HX_HCSTRING("lime_stage_set_autos3d","\xed","\x69","\xd2","\x8f")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_get_focus_id,HX_HCSTRING("lime_stage_get_focus_id","\xb6","\x54","\x44","\x00")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_set_focus,HX_HCSTRING("lime_stage_set_focus","\xd0","\x3b","\xde","\x12")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_get_focus_rect,HX_HCSTRING("lime_stage_get_focus_rect","\xbf","\x72","\x7f","\xdf")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_set_focus_rect,HX_HCSTRING("lime_stage_set_focus_rect","\x33","\x5b","\x9f","\xff")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_is_opengl,HX_HCSTRING("lime_stage_is_opengl","\xf9","\x5e","\x13","\xae")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_get_stage_width,HX_HCSTRING("lime_stage_get_stage_width","\x71","\xb3","\x99","\xd3")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_get_stage_height,HX_HCSTRING("lime_stage_get_stage_height","\x1c","\xc8","\x32","\x09")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_get_dpi_scale,HX_HCSTRING("lime_stage_get_dpi_scale","\xd4","\x12","\x1b","\xff")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_get_scale_mode,HX_HCSTRING("lime_stage_get_scale_mode","\x0c","\x05","\x0b","\x3b")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_set_scale_mode,HX_HCSTRING("lime_stage_set_scale_mode","\x80","\xed","\x2a","\x5b")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_get_align,HX_HCSTRING("lime_stage_get_align","\xb1","\x46","\x95","\x4c")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_set_align,HX_HCSTRING("lime_stage_set_align","\xbd","\x32","\xe6","\x2f")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_get_quality,HX_HCSTRING("lime_stage_get_quality","\xab","\xc7","\x1c","\x2c")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_set_quality,HX_HCSTRING("lime_stage_set_quality","\xb7","\xce","\x89","\x36")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_get_display_state,HX_HCSTRING("lime_stage_get_display_state","\x00","\xc1","\x58","\x4a")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_set_display_state,HX_HCSTRING("lime_stage_set_display_state","\x0c","\x99","\xc6","\x6d")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_set_next_wake,HX_HCSTRING("lime_stage_set_next_wake","\x28","\x5a","\xd9","\x6a")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_request_render,HX_HCSTRING("lime_stage_request_render","\xd1","\x05","\x34","\x5b")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_resize_window,HX_HCSTRING("lime_stage_resize_window","\x30","\xb4","\xfe","\xe9")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_set_resolution,HX_HCSTRING("lime_stage_set_resolution","\x34","\xf6","\xfb","\x3e")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_set_screenmode,HX_HCSTRING("lime_stage_set_screenmode","\xd7","\xf5","\x70","\xa7")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_set_fullscreen,HX_HCSTRING("lime_stage_set_fullscreen","\x43","\xfb","\x66","\xcb")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_show_cursor,HX_HCSTRING("lime_stage_show_cursor","\xed","\x77","\x80","\x1e")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_set_fixed_orientation,HX_HCSTRING("lime_stage_set_fixed_orientation","\x3d","\xe4","\x9f","\xa1")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_get_orientation,HX_HCSTRING("lime_stage_get_orientation","\xbc","\x97","\xe9","\xac")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Stage_obj::lime_stage_get_normal_orientation,HX_HCSTRING("lime_stage_get_normal_orientation","\x0c","\xba","\xe3","\x9d")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Stage_obj_sMemberFields[] = {
	HX_HCSTRING("allowsFullScreen","\xc5","\x66","\xdc","\x4b"),
	HX_HCSTRING("active","\xc6","\x41","\x46","\x16"),
	HX_HCSTRING("dpiScale","\xed","\xa9","\x8d","\x90"),
	HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"),
	HX_HCSTRING("isOpenGL","\xf9","\xe3","\xfd","\x79"),
	HX_HCSTRING("onKey","\xc0","\x1d","\x69","\x32"),
	HX_HCSTRING("onQuit","\x8e","\x48","\x94","\xed"),
	HX_HCSTRING("pauseWhenDeactivated","\xc0","\x1e","\xb2","\x2d"),
	HX_HCSTRING("renderRequest","\x99","\x52","\x72","\x40"),
	HX_HCSTRING("softKeyboardRect","\x75","\x35","\x3a","\xec"),
	HX_HCSTRING("stage3Ds","\xa4","\x4e","\x30","\xe3"),
	HX_HCSTRING("stageHeight","\x45","\x89","\x45","\x95"),
	HX_HCSTRING("stageWidth","\x68","\x0a","\xb3","\x1d"),
	HX_HCSTRING("__joyAxisData","\x7f","\x04","\x9e","\x1c"),
	HX_HCSTRING("__dragBounds","\xa9","\x10","\x1d","\x47"),
	HX_HCSTRING("__dragObject","\xf3","\x08","\x3f","\xf6"),
	HX_HCSTRING("__dragOffsetX","\xb1","\x6c","\xfe","\xd5"),
	HX_HCSTRING("__dragOffsetY","\xb2","\x6c","\xfe","\xd5"),
	HX_HCSTRING("__focusOverObjects","\x08","\x3c","\x26","\x7d"),
	HX_HCSTRING("__framePeriod","\xee","\x6d","\xdb","\x61"),
	HX_HCSTRING("__invalid","\xd7","\x2b","\x96","\xbc"),
	HX_HCSTRING("__lastClickTime","\x1f","\x4c","\xe7","\xb1"),
	HX_HCSTRING("__lastDown","\xf8","\x84","\xef","\x78"),
	HX_HCSTRING("__lastRender","\x6c","\xc9","\x97","\x08"),
	HX_HCSTRING("__mouseOverObjects","\xdb","\x3e","\xae","\x7b"),
	HX_HCSTRING("__nextRender","\xc9","\x97","\xee","\xf2"),
	HX_HCSTRING("__softKeyboardRect","\x95","\xc8","\xca","\x57"),
	HX_HCSTRING("__touchInfo","\xad","\x10","\x54","\x39"),
	HX_HCSTRING("invalidate","\x7b","\x19","\x2a","\x87"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("setResolution","\x6e","\x73","\xc1","\x0e"),
	HX_HCSTRING("setScreenMode","\x31","\x9f","\x0f","\x62"),
	HX_HCSTRING("setFullscreen","\x7d","\x78","\x2c","\x9b"),
	HX_HCSTRING("showCursor","\xb3","\x33","\x5d","\xa8"),
	HX_HCSTRING("__checkFocusInOuts","\xda","\x37","\x9a","\xf9"),
	HX_HCSTRING("__checkInOuts","\x72","\xce","\xa7","\xb0"),
	HX_HCSTRING("__checkRender","\x1e","\x7f","\xb3","\x2f"),
	HX_HCSTRING("__doProcessStageEvent","\xa0","\x20","\xca","\x93"),
	HX_HCSTRING("__processStageEvent","\xab","\xec","\xcf","\x44"),
	HX_HCSTRING("__drag","\x14","\x8f","\x68","\xf1"),
	HX_HCSTRING("__nextFrameDue","\xba","\x90","\xa9","\xe7"),
	HX_HCSTRING("__onChange","\x0f","\xfb","\x57","\x3a"),
	HX_HCSTRING("__onFocus","\x19","\x4f","\x15","\x1c"),
	HX_HCSTRING("__onJoystick","\x1b","\x30","\x3c","\xb2"),
	HX_HCSTRING("__onKey","\xa0","\x76","\xc7","\x9c"),
	HX_HCSTRING("__onMouse","\x66","\x05","\xf1","\x23"),
	HX_HCSTRING("__onRenderContext","\x7a","\xa1","\x43","\x20"),
	HX_HCSTRING("__onResize","\x93","\xc3","\x60","\x8b"),
	HX_HCSTRING("__onSysWM","\xa4","\x05","\xf3","\x9e"),
	HX_HCSTRING("__onTouch","\x00","\x07","\xbf","\x2b"),
	HX_HCSTRING("__pollTimers","\xcd","\x33","\x91","\xcf"),
	HX_HCSTRING("__render","\x76","\xd6","\x58","\xad"),
	HX_HCSTRING("__setActive","\xe8","\xff","\x19","\xa4"),
	HX_HCSTRING("__startDrag","\x56","\xee","\x8f","\x29"),
	HX_HCSTRING("__stopDrag","\x36","\xe4","\x62","\x38"),
	HX_HCSTRING("__updateNextWake","\x00","\x81","\x28","\x64"),
	HX_HCSTRING("get_align","\x1c","\xb3","\x3a","\x65"),
	HX_HCSTRING("set_align","\x28","\x9f","\x8b","\x48"),
	HX_HCSTRING("get_color","\xba","\xcd","\x05","\x8e"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("get_displayState","\xf8","\x38","\x03","\x95"),
	HX_HCSTRING("set_displayState","\x6c","\x26","\x45","\xeb"),
	HX_HCSTRING("get_dpiScale","\xf6","\x5d","\xa7","\x45"),
	HX_HCSTRING("get_focus","\x2f","\xbc","\x32","\x48"),
	HX_HCSTRING("set_focus","\x3b","\xa8","\x83","\x2b"),
	HX_HCSTRING("set_frameRate","\x90","\xc7","\x8e","\x3f"),
	HX_HCSTRING("get_isOpenGL","\x02","\x98","\x17","\x2f"),
	HX_HCSTRING("get_quality","\xd6","\x64","\x46","\xca"),
	HX_HCSTRING("set_quality","\xe2","\x6b","\xb3","\xd4"),
	HX_HCSTRING("get_scaleMode","\xe4","\xae","\x37","\xed"),
	HX_HCSTRING("set_scaleMode","\xf0","\x90","\x3d","\x32"),
	HX_HCSTRING("get_softKeyboardRect","\x7e","\x9a","\xa4","\x0a"),
	HX_HCSTRING("get_stage","\x15","\xc7","\xb4","\xc7"),
	HX_HCSTRING("get_stageFocusRect","\x47","\xb3","\x1b","\x10"),
	HX_HCSTRING("set_stageFocusRect","\xbb","\xe5","\xca","\xec"),
	HX_HCSTRING("get_autos3d","\x0c","\x00","\x8f","\x23"),
	HX_HCSTRING("set_autos3d","\x18","\x07","\xfc","\x2d"),
	HX_HCSTRING("get_stageHeight","\xdc","\x40","\x27","\x56"),
	HX_HCSTRING("get_stageWidth","\xb1","\x92","\xa8","\x93"),
	::String(null()) };

static void Stage_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Stage_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Stage_obj::_hx___earlyWakeup,"__earlyWakeup");
	HX_MARK_MEMBER_NAME(Stage_obj::_hx___exiting,"__exiting");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationPortrait,"OrientationPortrait");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationPortraitUpsideDown,"OrientationPortraitUpsideDown");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationLandscapeRight,"OrientationLandscapeRight");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationLandscapeLeft,"OrientationLandscapeLeft");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationFaceUp,"OrientationFaceUp");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationFaceDown,"OrientationFaceDown");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationPortraitAny,"OrientationPortraitAny");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationLandscapeAny,"OrientationLandscapeAny");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationAny,"OrientationAny");
	HX_MARK_MEMBER_NAME(Stage_obj::efLeftDown,"efLeftDown");
	HX_MARK_MEMBER_NAME(Stage_obj::efShiftDown,"efShiftDown");
	HX_MARK_MEMBER_NAME(Stage_obj::efCtrlDown,"efCtrlDown");
	HX_MARK_MEMBER_NAME(Stage_obj::efAltDown,"efAltDown");
	HX_MARK_MEMBER_NAME(Stage_obj::efCommandDown,"efCommandDown");
	HX_MARK_MEMBER_NAME(Stage_obj::efLocationRight,"efLocationRight");
	HX_MARK_MEMBER_NAME(Stage_obj::efNoNativeClick,"efNoNativeClick");
	HX_MARK_MEMBER_NAME(Stage_obj::sClickEvents,"sClickEvents");
	HX_MARK_MEMBER_NAME(Stage_obj::sDownEvents,"sDownEvents");
	HX_MARK_MEMBER_NAME(Stage_obj::sUpEvents,"sUpEvents");
	HX_MARK_MEMBER_NAME(Stage_obj::_hx___mouseChanges,"__mouseChanges");
	HX_MARK_MEMBER_NAME(Stage_obj::_hx___touchChanges,"__touchChanges");
	HX_MARK_MEMBER_NAME(Stage_obj::getOrientation,"getOrientation");
	HX_MARK_MEMBER_NAME(Stage_obj::getNormalOrientation,"getNormalOrientation");
	HX_MARK_MEMBER_NAME(Stage_obj::shouldRotateInterface,"shouldRotateInterface");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_set_stage_handler,"lime_set_stage_handler");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_render_stage,"lime_render_stage");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_get_autos3d,"lime_stage_get_autos3d");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_set_autos3d,"lime_stage_set_autos3d");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_get_focus_id,"lime_stage_get_focus_id");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_set_focus,"lime_stage_set_focus");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_get_focus_rect,"lime_stage_get_focus_rect");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_set_focus_rect,"lime_stage_set_focus_rect");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_is_opengl,"lime_stage_is_opengl");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_get_stage_width,"lime_stage_get_stage_width");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_get_stage_height,"lime_stage_get_stage_height");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_get_dpi_scale,"lime_stage_get_dpi_scale");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_get_scale_mode,"lime_stage_get_scale_mode");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_set_scale_mode,"lime_stage_set_scale_mode");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_get_align,"lime_stage_get_align");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_set_align,"lime_stage_set_align");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_get_quality,"lime_stage_get_quality");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_set_quality,"lime_stage_set_quality");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_get_display_state,"lime_stage_get_display_state");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_set_display_state,"lime_stage_set_display_state");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_set_next_wake,"lime_stage_set_next_wake");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_request_render,"lime_stage_request_render");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_resize_window,"lime_stage_resize_window");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_set_resolution,"lime_stage_set_resolution");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_set_screenmode,"lime_stage_set_screenmode");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_set_fullscreen,"lime_stage_set_fullscreen");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_show_cursor,"lime_stage_show_cursor");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_set_fixed_orientation,"lime_stage_set_fixed_orientation");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_get_orientation,"lime_stage_get_orientation");
	HX_MARK_MEMBER_NAME(Stage_obj::lime_stage_get_normal_orientation,"lime_stage_get_normal_orientation");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Stage_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Stage_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Stage_obj::_hx___earlyWakeup,"__earlyWakeup");
	HX_VISIT_MEMBER_NAME(Stage_obj::_hx___exiting,"__exiting");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationPortrait,"OrientationPortrait");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationPortraitUpsideDown,"OrientationPortraitUpsideDown");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationLandscapeRight,"OrientationLandscapeRight");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationLandscapeLeft,"OrientationLandscapeLeft");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationFaceUp,"OrientationFaceUp");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationFaceDown,"OrientationFaceDown");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationPortraitAny,"OrientationPortraitAny");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationLandscapeAny,"OrientationLandscapeAny");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationAny,"OrientationAny");
	HX_VISIT_MEMBER_NAME(Stage_obj::efLeftDown,"efLeftDown");
	HX_VISIT_MEMBER_NAME(Stage_obj::efShiftDown,"efShiftDown");
	HX_VISIT_MEMBER_NAME(Stage_obj::efCtrlDown,"efCtrlDown");
	HX_VISIT_MEMBER_NAME(Stage_obj::efAltDown,"efAltDown");
	HX_VISIT_MEMBER_NAME(Stage_obj::efCommandDown,"efCommandDown");
	HX_VISIT_MEMBER_NAME(Stage_obj::efLocationRight,"efLocationRight");
	HX_VISIT_MEMBER_NAME(Stage_obj::efNoNativeClick,"efNoNativeClick");
	HX_VISIT_MEMBER_NAME(Stage_obj::sClickEvents,"sClickEvents");
	HX_VISIT_MEMBER_NAME(Stage_obj::sDownEvents,"sDownEvents");
	HX_VISIT_MEMBER_NAME(Stage_obj::sUpEvents,"sUpEvents");
	HX_VISIT_MEMBER_NAME(Stage_obj::_hx___mouseChanges,"__mouseChanges");
	HX_VISIT_MEMBER_NAME(Stage_obj::_hx___touchChanges,"__touchChanges");
	HX_VISIT_MEMBER_NAME(Stage_obj::getOrientation,"getOrientation");
	HX_VISIT_MEMBER_NAME(Stage_obj::getNormalOrientation,"getNormalOrientation");
	HX_VISIT_MEMBER_NAME(Stage_obj::shouldRotateInterface,"shouldRotateInterface");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_set_stage_handler,"lime_set_stage_handler");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_render_stage,"lime_render_stage");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_get_autos3d,"lime_stage_get_autos3d");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_set_autos3d,"lime_stage_set_autos3d");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_get_focus_id,"lime_stage_get_focus_id");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_set_focus,"lime_stage_set_focus");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_get_focus_rect,"lime_stage_get_focus_rect");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_set_focus_rect,"lime_stage_set_focus_rect");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_is_opengl,"lime_stage_is_opengl");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_get_stage_width,"lime_stage_get_stage_width");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_get_stage_height,"lime_stage_get_stage_height");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_get_dpi_scale,"lime_stage_get_dpi_scale");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_get_scale_mode,"lime_stage_get_scale_mode");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_set_scale_mode,"lime_stage_set_scale_mode");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_get_align,"lime_stage_get_align");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_set_align,"lime_stage_set_align");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_get_quality,"lime_stage_get_quality");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_set_quality,"lime_stage_set_quality");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_get_display_state,"lime_stage_get_display_state");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_set_display_state,"lime_stage_set_display_state");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_set_next_wake,"lime_stage_set_next_wake");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_request_render,"lime_stage_request_render");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_resize_window,"lime_stage_resize_window");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_set_resolution,"lime_stage_set_resolution");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_set_screenmode,"lime_stage_set_screenmode");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_set_fullscreen,"lime_stage_set_fullscreen");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_show_cursor,"lime_stage_show_cursor");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_set_fixed_orientation,"lime_stage_set_fixed_orientation");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_get_orientation,"lime_stage_get_orientation");
	HX_VISIT_MEMBER_NAME(Stage_obj::lime_stage_get_normal_orientation,"lime_stage_get_normal_orientation");
};

#endif

hx::Class Stage_obj::__mClass;

static ::String Stage_obj_sStaticFields[] = {
	HX_HCSTRING("__earlyWakeup","\x62","\x8d","\xcf","\x9e"),
	HX_HCSTRING("__exiting","\x64","\x2d","\x29","\xa6"),
	HX_HCSTRING("OrientationPortrait","\x2b","\x94","\x80","\xf0"),
	HX_HCSTRING("OrientationPortraitUpsideDown","\xff","\x1e","\x9c","\xfe"),
	HX_HCSTRING("OrientationLandscapeRight","\x71","\xbc","\x02","\x9a"),
	HX_HCSTRING("OrientationLandscapeLeft","\x12","\x41","\xe3","\x43"),
	HX_HCSTRING("OrientationFaceUp","\x28","\x3f","\x72","\x08"),
	HX_HCSTRING("OrientationFaceDown","\x6f","\x5e","\xa1","\xad"),
	HX_HCSTRING("OrientationPortraitAny","\x81","\xcb","\xb1","\x4f"),
	HX_HCSTRING("OrientationLandscapeAny","\x41","\xec","\x09","\x4c"),
	HX_HCSTRING("OrientationAny","\x1c","\x7a","\x8d","\xd9"),
	HX_HCSTRING("efLeftDown","\x8a","\x19","\xac","\x0c"),
	HX_HCSTRING("efShiftDown","\x63","\x6d","\xa6","\xe4"),
	HX_HCSTRING("efCtrlDown","\x2e","\xbc","\xbb","\xaa"),
	HX_HCSTRING("efAltDown","\xca","\x73","\x98","\xb8"),
	HX_HCSTRING("efCommandDown","\x6c","\x60","\x38","\x7b"),
	HX_HCSTRING("efLocationRight","\x46","\xfc","\x6b","\xcc"),
	HX_HCSTRING("efNoNativeClick","\x4f","\x9b","\x88","\xae"),
	HX_HCSTRING("sClickEvents","\xce","\x7b","\x9c","\x32"),
	HX_HCSTRING("sDownEvents","\x6e","\x63","\x09","\xae"),
	HX_HCSTRING("sUpEvents","\x67","\xc7","\x94","\xbc"),
	HX_HCSTRING("__mouseChanges","\x7e","\x84","\x32","\xcf"),
	HX_HCSTRING("__touchChanges","\x24","\x4a","\xef","\x17"),
	HX_HCSTRING("getOrientation","\xda","\x41","\x9d","\x85"),
	HX_HCSTRING("getNormalOrientation","\x73","\x3e","\xd8","\x12"),
	HX_HCSTRING("setFixedOrientation","\x7e","\x35","\x51","\xc6"),
	HX_HCSTRING("shouldRotateInterface","\xeb","\x38","\x3f","\x53"),
	HX_HCSTRING("lime_set_stage_handler","\x82","\x6a","\x8a","\xcf"),
	HX_HCSTRING("lime_render_stage","\x7f","\x34","\x45","\xcc"),
	HX_HCSTRING("lime_stage_get_autos3d","\xe1","\x62","\x65","\x85"),
	HX_HCSTRING("lime_stage_set_autos3d","\xed","\x69","\xd2","\x8f"),
	HX_HCSTRING("lime_stage_get_focus_id","\xb6","\x54","\x44","\x00"),
	HX_HCSTRING("lime_stage_set_focus","\xd0","\x3b","\xde","\x12"),
	HX_HCSTRING("lime_stage_get_focus_rect","\xbf","\x72","\x7f","\xdf"),
	HX_HCSTRING("lime_stage_set_focus_rect","\x33","\x5b","\x9f","\xff"),
	HX_HCSTRING("lime_stage_is_opengl","\xf9","\x5e","\x13","\xae"),
	HX_HCSTRING("lime_stage_get_stage_width","\x71","\xb3","\x99","\xd3"),
	HX_HCSTRING("lime_stage_get_stage_height","\x1c","\xc8","\x32","\x09"),
	HX_HCSTRING("lime_stage_get_dpi_scale","\xd4","\x12","\x1b","\xff"),
	HX_HCSTRING("lime_stage_get_scale_mode","\x0c","\x05","\x0b","\x3b"),
	HX_HCSTRING("lime_stage_set_scale_mode","\x80","\xed","\x2a","\x5b"),
	HX_HCSTRING("lime_stage_get_align","\xb1","\x46","\x95","\x4c"),
	HX_HCSTRING("lime_stage_set_align","\xbd","\x32","\xe6","\x2f"),
	HX_HCSTRING("lime_stage_get_quality","\xab","\xc7","\x1c","\x2c"),
	HX_HCSTRING("lime_stage_set_quality","\xb7","\xce","\x89","\x36"),
	HX_HCSTRING("lime_stage_get_display_state","\x00","\xc1","\x58","\x4a"),
	HX_HCSTRING("lime_stage_set_display_state","\x0c","\x99","\xc6","\x6d"),
	HX_HCSTRING("lime_stage_set_next_wake","\x28","\x5a","\xd9","\x6a"),
	HX_HCSTRING("lime_stage_request_render","\xd1","\x05","\x34","\x5b"),
	HX_HCSTRING("lime_stage_resize_window","\x30","\xb4","\xfe","\xe9"),
	HX_HCSTRING("lime_stage_set_resolution","\x34","\xf6","\xfb","\x3e"),
	HX_HCSTRING("lime_stage_set_screenmode","\xd7","\xf5","\x70","\xa7"),
	HX_HCSTRING("lime_stage_set_fullscreen","\x43","\xfb","\x66","\xcb"),
	HX_HCSTRING("lime_stage_show_cursor","\xed","\x77","\x80","\x1e"),
	HX_HCSTRING("lime_stage_set_fixed_orientation","\x3d","\xe4","\x9f","\xa1"),
	HX_HCSTRING("lime_stage_get_orientation","\xbc","\x97","\xe9","\xac"),
	HX_HCSTRING("lime_stage_get_normal_orientation","\x0c","\xba","\xe3","\x9d"),
	::String(null())
};

void Stage_obj::__register()
{
	hx::Object *dummy = new Stage_obj;
	Stage_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._legacy.display.Stage","\x0e","\x35","\xcf","\x10");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Stage_obj::__GetStatic;
	__mClass->mSetStaticField = &Stage_obj::__SetStatic;
	__mClass->mMarkFunc = Stage_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Stage_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Stage_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Stage_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Stage_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Stage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Stage_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Stage_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_50_boot)
HXDLIN(  50)		_hx___earlyWakeup = ((Float)0.005);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_51_boot)
HXDLIN(  51)		_hx___exiting = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_53_boot)
HXDLIN(  53)		OrientationPortrait = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_54_boot)
HXDLIN(  54)		OrientationPortraitUpsideDown = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_55_boot)
HXDLIN(  55)		OrientationLandscapeRight = (int)3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_56_boot)
HXDLIN(  56)		OrientationLandscapeLeft = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_57_boot)
HXDLIN(  57)		OrientationFaceUp = (int)5;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_58_boot)
HXDLIN(  58)		OrientationFaceDown = (int)6;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_59_boot)
HXDLIN(  59)		OrientationPortraitAny = (int)7;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_60_boot)
HXDLIN(  60)		OrientationLandscapeAny = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_61_boot)
HXDLIN(  61)		OrientationAny = (int)9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_85_boot)
HXDLIN(  85)		efLeftDown = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_86_boot)
HXDLIN(  86)		efShiftDown = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_87_boot)
HXDLIN(  87)		efCtrlDown = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_88_boot)
HXDLIN(  88)		efAltDown = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_89_boot)
HXDLIN(  89)		efCommandDown = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_90_boot)
HXDLIN(  90)		efLocationRight = (int)16384;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_91_boot)
HXDLIN(  91)		efNoNativeClick = (int)65536;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_92_boot)
HXDLIN(  92)		sClickEvents = ::Array_obj< ::String >::fromData( _hx_array_data_10cf350e_83,3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_93_boot)
HXDLIN(  93)		sDownEvents = ::Array_obj< ::String >::fromData( _hx_array_data_10cf350e_85,3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_94_boot)
HXDLIN(  94)		sUpEvents = ::Array_obj< ::String >::fromData( _hx_array_data_10cf350e_87,3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_96_boot)
HXDLIN(  96)		_hx___mouseChanges = ::Array_obj< ::String >::__new(4)->init(0,::openfl::_legacy::events::MouseEvent_obj::MOUSE_OUT)->init(1,::openfl::_legacy::events::MouseEvent_obj::MOUSE_OVER)->init(2,::openfl::_legacy::events::MouseEvent_obj::ROLL_OUT)->init(3,::openfl::_legacy::events::MouseEvent_obj::ROLL_OVER);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_97_boot)
HXDLIN(  97)		_hx___touchChanges = ::Array_obj< ::String >::__new(4)->init(0,::openfl::_legacy::events::TouchEvent_obj::TOUCH_OUT)->init(1,::openfl::_legacy::events::TouchEvent_obj::TOUCH_OVER)->init(2,::openfl::_legacy::events::TouchEvent_obj::TOUCH_ROLL_OUT)->init(3,::openfl::_legacy::events::TouchEvent_obj::TOUCH_ROLL_OVER);
            	}
	getOrientation = new __default_getOrientation;

	getNormalOrientation = new __default_getNormalOrientation;

	shouldRotateInterface = new __default_shouldRotateInterface;

{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1465_boot)
HXDLIN(1465)		lime_set_stage_handler = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_set_stage_handler",60,f4,7d,01),(int)4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1466_boot)
HXDLIN(1466)		lime_render_stage = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_render_stage",61,f7,79,b6),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1467_boot)
HXDLIN(1467)		lime_stage_get_autos3d = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_get_autos3d",bf,ec,58,b7),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1468_boot)
HXDLIN(1468)		lime_stage_set_autos3d = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_set_autos3d",cb,f3,c5,c1),(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1469_boot)
HXDLIN(1469)		lime_stage_get_focus_id = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_get_focus_id",18,6d,69,83),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1470_boot)
HXDLIN(1470)		lime_stage_set_focus = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_set_focus",2e,f2,f0,51),(int)3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1471_boot)
HXDLIN(1471)		lime_stage_get_focus_rect = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_get_focus_rect",a1,e7,64,48),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1472_boot)
HXDLIN(1472)		lime_stage_set_focus_rect = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_set_focus_rect",15,d0,84,68),(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1473_boot)
HXDLIN(1473)		lime_stage_is_opengl = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_is_opengl",57,15,26,ed),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1477_boot)
HXDLIN(1477)		lime_stage_get_stage_width = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_get_stage_width",4f,84,7a,33),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1478_boot)
HXDLIN(1478)		lime_stage_get_stage_height = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_get_stage_height",7e,b9,08,8e),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1479_boot)
HXDLIN(1479)		lime_stage_get_dpi_scale = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_get_dpi_scale",32,50,6b,3c),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1480_boot)
HXDLIN(1480)		lime_stage_get_scale_mode = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_get_scale_mode",ee,79,f0,a3),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1481_boot)
HXDLIN(1481)		lime_stage_set_scale_mode = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_set_scale_mode",62,62,10,c4),(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1482_boot)
HXDLIN(1482)		lime_stage_get_align = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_get_align",0f,fd,a7,8b),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1483_boot)
HXDLIN(1483)		lime_stage_set_align = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_set_align",1b,e9,f8,6e),(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1484_boot)
HXDLIN(1484)		lime_stage_get_quality = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_get_quality",89,51,10,5e),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1485_boot)
HXDLIN(1485)		lime_stage_set_quality = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_set_quality",95,58,7d,68),(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1486_boot)
HXDLIN(1486)		lime_stage_get_display_state = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_get_display_state",5e,05,b6,00),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1487_boot)
HXDLIN(1487)		lime_stage_set_display_state = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_set_display_state",6a,dd,23,24),(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1488_boot)
HXDLIN(1488)		lime_stage_set_next_wake = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_set_next_wake",86,97,29,a8),(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1489_boot)
HXDLIN(1489)		lime_stage_request_render = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_request_render",b3,7a,19,c4),(int)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1490_boot)
HXDLIN(1490)		lime_stage_resize_window = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_resize_window",8e,f1,4e,27),(int)3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1491_boot)
HXDLIN(1491)		lime_stage_set_resolution = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_set_resolution",16,6b,e1,a7),(int)3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1492_boot)
HXDLIN(1492)		lime_stage_set_screenmode = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_set_screenmode",b9,6a,56,10),(int)5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1493_boot)
HXDLIN(1493)		lime_stage_set_fullscreen = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_set_fullscreen",25,70,4c,34),(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1494_boot)
HXDLIN(1494)		lime_stage_show_cursor = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_show_cursor",cb,01,74,50),(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1495_boot)
HXDLIN(1495)		lime_stage_set_fixed_orientation = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_set_fixed_orientation",9b,af,99,a9),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1496_boot)
HXDLIN(1496)		lime_stage_get_orientation = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_get_orientation",9a,68,ca,0c),(int)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d4acca48e18394dd_1497_boot)
HXDLIN(1497)		lime_stage_get_normal_orientation = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_stage_get_normal_orientation",ee,e0,7b,90),(int)0);
            	}
}

} // end namespace openfl
} // end namespace _legacy
} // end namespace display
