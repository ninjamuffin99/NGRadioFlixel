// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Shape
#include <openfl/_legacy/display/Shape.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1e84407627af0bcd_9_new,"openfl._legacy.display.Shape","new",0x7a3e5ae3,"openfl._legacy.display.Shape.new","openfl/_legacy/display/Shape.hx",9,0xc6ca47f0)
namespace openfl{
namespace _legacy{
namespace display{

void Shape_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_1e84407627af0bcd_9_new)
HXDLIN(   9)		super::__construct(::openfl::_legacy::display::DisplayObject_obj::lime_create_display_object(),HX_("Shape",01,53,4a,0f));
            	}

Dynamic Shape_obj::__CreateEmpty() { return new Shape_obj; }

void *Shape_obj::_hx_vtable = 0;

Dynamic Shape_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Shape_obj > _hx_result = new Shape_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Shape_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25b00754) {
		if (inClassId<=(int)0x0c04b897) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0c04b897;
		} else {
			return inClassId==(int)0x25b00754;
		}
	} else {
		return inClassId==(int)0x3d2d7617;
	}
}


hx::ObjectPtr< Shape_obj > Shape_obj::__new() {
	hx::ObjectPtr< Shape_obj > __this = new Shape_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Shape_obj > Shape_obj::__alloc(hx::Ctx *_hx_ctx) {
	Shape_obj *__this = (Shape_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Shape_obj), true, "openfl._legacy.display.Shape"));
	*(void **)__this = Shape_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Shape_obj::Shape_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Shape_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Shape_obj_sStaticStorageInfo = 0;
#endif

static void Shape_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Shape_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Shape_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Shape_obj::__mClass,"__mClass");
};

#endif

hx::Class Shape_obj::__mClass;

void Shape_obj::__register()
{
	hx::Object *dummy = new Shape_obj;
	Shape_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._legacy.display.Shape","\x71","\xad","\xe0","\x08");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Shape_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Shape_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Shape_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Shape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Shape_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _legacy
} // end namespace display
