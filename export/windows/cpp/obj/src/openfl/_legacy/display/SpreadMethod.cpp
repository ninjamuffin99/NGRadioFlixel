// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_openfl__legacy_display_SpreadMethod
#include <openfl/_legacy/display/SpreadMethod.h>
#endif
namespace openfl{
namespace _legacy{
namespace display{

::openfl::_legacy::display::SpreadMethod SpreadMethod_obj::PAD;

::openfl::_legacy::display::SpreadMethod SpreadMethod_obj::REFLECT;

::openfl::_legacy::display::SpreadMethod SpreadMethod_obj::REPEAT;

bool SpreadMethod_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("PAD",33,ed,3c,00)) { outValue = SpreadMethod_obj::PAD; return true; }
	if (inName==HX_("REFLECT",1d,58,fd,68)) { outValue = SpreadMethod_obj::REFLECT; return true; }
	if (inName==HX_("REPEAT",5b,43,ff,b8)) { outValue = SpreadMethod_obj::REPEAT; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(SpreadMethod_obj)

int SpreadMethod_obj::__FindIndex(::String inName)
{
	if (inName==HX_("PAD",33,ed,3c,00)) return 0;
	if (inName==HX_("REFLECT",1d,58,fd,68)) return 2;
	if (inName==HX_("REPEAT",5b,43,ff,b8)) return 1;
	return super::__FindIndex(inName);
}

int SpreadMethod_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("PAD",33,ed,3c,00)) return 0;
	if (inName==HX_("REFLECT",1d,58,fd,68)) return 0;
	if (inName==HX_("REPEAT",5b,43,ff,b8)) return 0;
	return super::__FindArgCount(inName);
}

hx::Val SpreadMethod_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("PAD",33,ed,3c,00)) return PAD;
	if (inName==HX_("REFLECT",1d,58,fd,68)) return REFLECT;
	if (inName==HX_("REPEAT",5b,43,ff,b8)) return REPEAT;
	return super::__Field(inName,inCallProp);
}

static ::String SpreadMethod_obj_sStaticFields[] = {
	HX_("PAD",33,ed,3c,00),
	HX_("REPEAT",5b,43,ff,b8),
	HX_("REFLECT",1d,58,fd,68),
	::String(null())
};

static void SpreadMethod_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SpreadMethod_obj::PAD,"PAD");
	HX_MARK_MEMBER_NAME(SpreadMethod_obj::REFLECT,"REFLECT");
	HX_MARK_MEMBER_NAME(SpreadMethod_obj::REPEAT,"REPEAT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SpreadMethod_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SpreadMethod_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(SpreadMethod_obj::PAD,"PAD");
	HX_VISIT_MEMBER_NAME(SpreadMethod_obj::REFLECT,"REFLECT");
	HX_VISIT_MEMBER_NAME(SpreadMethod_obj::REPEAT,"REPEAT");
};
#endif

hx::Class SpreadMethod_obj::__mClass;

Dynamic __Create_SpreadMethod_obj() { return new SpreadMethod_obj; }

void SpreadMethod_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("openfl._legacy.display.SpreadMethod","\x64","\x25","\x91","\x7c"), hx::TCanCast< SpreadMethod_obj >,SpreadMethod_obj_sStaticFields,0,
	&__Create_SpreadMethod_obj, &__Create,
	&super::__SGetClass(), &CreateSpreadMethod_obj, SpreadMethod_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , SpreadMethod_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &SpreadMethod_obj::__GetStatic;
}

void SpreadMethod_obj::__boot()
{
PAD = hx::CreateEnum< SpreadMethod_obj >(HX_HCSTRING("PAD","\x33","\xed","\x3c","\x00"),0,0);
REFLECT = hx::CreateEnum< SpreadMethod_obj >(HX_HCSTRING("REFLECT","\x1d","\x58","\xfd","\x68"),2,0);
REPEAT = hx::CreateEnum< SpreadMethod_obj >(HX_HCSTRING("REPEAT","\x5b","\x43","\xff","\xb8"),1,0);
}


} // end namespace openfl
} // end namespace _legacy
} // end namespace display
