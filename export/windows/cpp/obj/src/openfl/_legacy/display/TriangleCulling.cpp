// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_openfl__legacy_display_TriangleCulling
#include <openfl/_legacy/display/TriangleCulling.h>
#endif
namespace openfl{
namespace _legacy{
namespace display{

::openfl::_legacy::display::TriangleCulling TriangleCulling_obj::NEGATIVE;

::openfl::_legacy::display::TriangleCulling TriangleCulling_obj::NONE;

::openfl::_legacy::display::TriangleCulling TriangleCulling_obj::POSITIVE;

bool TriangleCulling_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("NEGATIVE",75,b6,c7,aa)) { outValue = TriangleCulling_obj::NEGATIVE; return true; }
	if (inName==HX_("NONE",b8,da,ca,33)) { outValue = TriangleCulling_obj::NONE; return true; }
	if (inName==HX_("POSITIVE",b9,36,80,24)) { outValue = TriangleCulling_obj::POSITIVE; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(TriangleCulling_obj)

int TriangleCulling_obj::__FindIndex(::String inName)
{
	if (inName==HX_("NEGATIVE",75,b6,c7,aa)) return 2;
	if (inName==HX_("NONE",b8,da,ca,33)) return 1;
	if (inName==HX_("POSITIVE",b9,36,80,24)) return 0;
	return super::__FindIndex(inName);
}

int TriangleCulling_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("NEGATIVE",75,b6,c7,aa)) return 0;
	if (inName==HX_("NONE",b8,da,ca,33)) return 0;
	if (inName==HX_("POSITIVE",b9,36,80,24)) return 0;
	return super::__FindArgCount(inName);
}

hx::Val TriangleCulling_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("NEGATIVE",75,b6,c7,aa)) return NEGATIVE;
	if (inName==HX_("NONE",b8,da,ca,33)) return NONE;
	if (inName==HX_("POSITIVE",b9,36,80,24)) return POSITIVE;
	return super::__Field(inName,inCallProp);
}

static ::String TriangleCulling_obj_sStaticFields[] = {
	HX_("POSITIVE",b9,36,80,24),
	HX_("NONE",b8,da,ca,33),
	HX_("NEGATIVE",75,b6,c7,aa),
	::String(null())
};

static void TriangleCulling_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TriangleCulling_obj::NEGATIVE,"NEGATIVE");
	HX_MARK_MEMBER_NAME(TriangleCulling_obj::NONE,"NONE");
	HX_MARK_MEMBER_NAME(TriangleCulling_obj::POSITIVE,"POSITIVE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TriangleCulling_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TriangleCulling_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TriangleCulling_obj::NEGATIVE,"NEGATIVE");
	HX_VISIT_MEMBER_NAME(TriangleCulling_obj::NONE,"NONE");
	HX_VISIT_MEMBER_NAME(TriangleCulling_obj::POSITIVE,"POSITIVE");
};
#endif

hx::Class TriangleCulling_obj::__mClass;

Dynamic __Create_TriangleCulling_obj() { return new TriangleCulling_obj; }

void TriangleCulling_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("openfl._legacy.display.TriangleCulling","\xd8","\x02","\x76","\x2a"), hx::TCanCast< TriangleCulling_obj >,TriangleCulling_obj_sStaticFields,0,
	&__Create_TriangleCulling_obj, &__Create,
	&super::__SGetClass(), &CreateTriangleCulling_obj, TriangleCulling_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , TriangleCulling_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &TriangleCulling_obj::__GetStatic;
}

void TriangleCulling_obj::__boot()
{
NEGATIVE = hx::CreateEnum< TriangleCulling_obj >(HX_HCSTRING("NEGATIVE","\x75","\xb6","\xc7","\xaa"),2,0);
NONE = hx::CreateEnum< TriangleCulling_obj >(HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33"),1,0);
POSITIVE = hx::CreateEnum< TriangleCulling_obj >(HX_HCSTRING("POSITIVE","\xb9","\x36","\x80","\x24"),0,0);
}


} // end namespace openfl
} // end namespace _legacy
} // end namespace display
