// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_Memory
#include <openfl/_legacy/Memory.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BlendMode
#include <openfl/_legacy/display/BlendMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_OptimizedPerlin
#include <openfl/_legacy/display/OptimizedPerlin.h>
#endif
#ifndef INCLUDED_openfl__legacy_filters_BitmapFilter
#include <openfl/_legacy/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_ColorTransform
#include <openfl/_legacy/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_ByteArray
#include <openfl/_legacy/utils/ByteArray.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataInput
#include <openfl/_legacy/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataOutput
#include <openfl/_legacy/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IMemoryRange
#include <openfl/_legacy/utils/IMemoryRange.h>
#endif
#ifndef INCLUDED_openfl_display_JPEGEncoderOptions
#include <openfl/display/JPEGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display_PNGEncoderOptions
#include <openfl/display/PNGEncoderOptions.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8946ee628e93d59a_52_new,"openfl._legacy.display.BitmapData","new",0x5b5492db,"openfl._legacy.display.BitmapData.new","openfl/_legacy/display/BitmapData.hx",52,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_81_applyFilter,"openfl._legacy.display.BitmapData","applyFilter",0x67c01541,"openfl._legacy.display.BitmapData.applyFilter","openfl/_legacy/display/BitmapData.hx",81,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_88_clear,"openfl._legacy.display.BitmapData","clear",0xf6ee08c8,"openfl._legacy.display.BitmapData.clear","openfl/_legacy/display/BitmapData.hx",88,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_93_clone,"openfl._legacy.display.BitmapData","clone",0xf6f5aa98,"openfl._legacy.display.BitmapData.clone","openfl/_legacy/display/BitmapData.hx",93,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_104_colorTransform,"openfl._legacy.display.BitmapData","colorTransform",0xda4c00ee,"openfl._legacy.display.BitmapData.colorTransform","openfl/_legacy/display/BitmapData.hx",104,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_111_copyChannel,"openfl._legacy.display.BitmapData","copyChannel",0xc976b309,"openfl._legacy.display.BitmapData.copyChannel","openfl/_legacy/display/BitmapData.hx",111,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_118_copyPixels,"openfl._legacy.display.BitmapData","copyPixels",0xfd26a7a7,"openfl._legacy.display.BitmapData.copyPixels","openfl/_legacy/display/BitmapData.hx",118,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_133_createHardwareSurface,"openfl._legacy.display.BitmapData","createHardwareSurface",0xf9cbaa04,"openfl._legacy.display.BitmapData.createHardwareSurface","openfl/_legacy/display/BitmapData.hx",133,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_140_destroyHardwareSurface,"openfl._legacy.display.BitmapData","destroyHardwareSurface",0x81fceaf0,"openfl._legacy.display.BitmapData.destroyHardwareSurface","openfl/_legacy/display/BitmapData.hx",140,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_146_dispose,"openfl._legacy.display.BitmapData","dispose",0x251f9c9a,"openfl._legacy.display.BitmapData.dispose","openfl/_legacy/display/BitmapData.hx",146,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_161_draw,"openfl._legacy.display.BitmapData","draw",0x88199529,"openfl._legacy.display.BitmapData.draw","openfl/_legacy/display/BitmapData.hx",161,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_168_dumpBits,"openfl._legacy.display.BitmapData","dumpBits",0xc5a0adff,"openfl._legacy.display.BitmapData.dumpBits","openfl/_legacy/display/BitmapData.hx",168,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_178_encode,"openfl._legacy.display.BitmapData","encode",0x0b95ae7b,"openfl._legacy.display.BitmapData.encode","openfl/_legacy/display/BitmapData.hx",178,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_222_fillRect,"openfl._legacy.display.BitmapData","fillRect",0x9b9ea4ec,"openfl._legacy.display.BitmapData.fillRect","openfl/_legacy/display/BitmapData.hx",222,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_229_fillRectEx,"openfl._legacy.display.BitmapData","fillRectEx",0xbc42f47f,"openfl._legacy.display.BitmapData.fillRectEx","openfl/_legacy/display/BitmapData.hx",229,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_236_floodFill,"openfl._legacy.display.BitmapData","floodFill",0x3358d41c,"openfl._legacy.display.BitmapData.floodFill","openfl/_legacy/display/BitmapData.hx",236,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_275_generateFilterRect,"openfl._legacy.display.BitmapData","generateFilterRect",0xb6e56c76,"openfl._legacy.display.BitmapData.generateFilterRect","openfl/_legacy/display/BitmapData.hx",275,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_284_getColorBoundsRect,"openfl._legacy.display.BitmapData","getColorBoundsRect",0xb935ed6b,"openfl._legacy.display.BitmapData.getColorBoundsRect","openfl/_legacy/display/BitmapData.hx",284,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_295_getPixel,"openfl._legacy.display.BitmapData","getPixel",0x516035b5,"openfl._legacy.display.BitmapData.getPixel","openfl/_legacy/display/BitmapData.hx",295,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_312_getPixel32,"openfl._legacy.display.BitmapData","getPixel32",0x9220f994,"openfl._legacy.display.BitmapData.getPixel32","openfl/_legacy/display/BitmapData.hx",312,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_317_getPixels,"openfl._legacy.display.BitmapData","getPixels",0xe2cec91e,"openfl._legacy.display.BitmapData.getPixels","openfl/_legacy/display/BitmapData.hx",317,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_343_getVector,"openfl._legacy.display.BitmapData","getVector",0xed828ab4,"openfl._legacy.display.BitmapData.getVector","openfl/_legacy/display/BitmapData.hx",343,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_389_lock,"openfl._legacy.display.BitmapData","lock",0x8d610510,"openfl._legacy.display.BitmapData.lock","openfl/_legacy/display/BitmapData.hx",389,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_396_merge,"openfl._legacy.display.BitmapData","merge",0xb45939f3,"openfl._legacy.display.BitmapData.merge","openfl/_legacy/display/BitmapData.hx",396,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_445_multiplyAlpha,"openfl._legacy.display.BitmapData","multiplyAlpha",0xfe41bcd5,"openfl._legacy.display.BitmapData.multiplyAlpha","openfl/_legacy/display/BitmapData.hx",445,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_452_noise,"openfl._legacy.display.BitmapData","noise",0x4e5526d5,"openfl._legacy.display.BitmapData.noise","openfl/_legacy/display/BitmapData.hx",452,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_457_paletteMap,"openfl._legacy.display.BitmapData","paletteMap",0xc0e401c6,"openfl._legacy.display.BitmapData.paletteMap","openfl/_legacy/display/BitmapData.hx",457,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_502_perlinNoise,"openfl._legacy.display.BitmapData","perlinNoise",0x3288b9e1,"openfl._legacy.display.BitmapData.perlinNoise","openfl/_legacy/display/BitmapData.hx",502,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_519_scroll,"openfl._legacy.display.BitmapData","scroll",0x59169472,"openfl._legacy.display.BitmapData.scroll","openfl/_legacy/display/BitmapData.hx",519,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_527_setFlags,"openfl._legacy.display.BitmapData","setFlags",0x3fa5f3ea,"openfl._legacy.display.BitmapData.setFlags","openfl/_legacy/display/BitmapData.hx",527,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_534_setFormat,"openfl._legacy.display.BitmapData","setFormat",0x37045534,"openfl._legacy.display.BitmapData.setFormat","openfl/_legacy/display/BitmapData.hx",534,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_541_setPixel,"openfl._legacy.display.BitmapData","setPixel",0xffbd8f29,"openfl._legacy.display.BitmapData.setPixel","openfl/_legacy/display/BitmapData.hx",541,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_548_setPixel32,"openfl._legacy.display.BitmapData","setPixel32",0x959e9808,"openfl._legacy.display.BitmapData.setPixel32","openfl/_legacy/display/BitmapData.hx",548,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_553_setPixels,"openfl._legacy.display.BitmapData","setPixels",0xc61fb52a,"openfl._legacy.display.BitmapData.setPixels","openfl/_legacy/display/BitmapData.hx",553,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_563_setVector,"openfl._legacy.display.BitmapData","setVector",0xd0d376c0,"openfl._legacy.display.BitmapData.setVector","openfl/_legacy/display/BitmapData.hx",563,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_587_threshold,"openfl._legacy.display.BitmapData","threshold",0x0e721466,"openfl._legacy.display.BitmapData.threshold","openfl/_legacy/display/BitmapData.hx",587,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_736_unlock,"openfl._legacy.display.BitmapData","unlock",0x773e5f29,"openfl._legacy.display.BitmapData.unlock","openfl/_legacy/display/BitmapData.hx",736,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_745_unmultiplyAlpha,"openfl._legacy.display.BitmapData","unmultiplyAlpha",0x662ed79c,"openfl._legacy.display.BitmapData.unmultiplyAlpha","openfl/_legacy/display/BitmapData.hx",745,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_752___drawToSurface,"openfl._legacy.display.BitmapData","__drawToSurface",0xb14ef929,"openfl._legacy.display.BitmapData.__drawToSurface","openfl/_legacy/display/BitmapData.hx",752,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_766___loadFromBytes,"openfl._legacy.display.BitmapData","__loadFromBytes",0xb9d10b76,"openfl._legacy.display.BitmapData.__loadFromBytes","openfl/_legacy/display/BitmapData.hx",766,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_832_get_premultipliedAlpha,"openfl._legacy.display.BitmapData","get_premultipliedAlpha",0x700c9dd6,"openfl._legacy.display.BitmapData.get_premultipliedAlpha","openfl/_legacy/display/BitmapData.hx",832,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_833_set_premultipliedAlpha,"openfl._legacy.display.BitmapData","set_premultipliedAlpha",0xa3b81a4a,"openfl._legacy.display.BitmapData.set_premultipliedAlpha","openfl/_legacy/display/BitmapData.hx",833,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_834_get_rect,"openfl._legacy.display.BitmapData","get_rect",0xfa476852,"openfl._legacy.display.BitmapData.get_rect","openfl/_legacy/display/BitmapData.hx",834,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_835_get_width,"openfl._legacy.display.BitmapData","get_width",0xe7da6318,"openfl._legacy.display.BitmapData.get_width","openfl/_legacy/display/BitmapData.hx",835,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_836_get_height,"openfl._legacy.display.BitmapData","get_height",0xad8bca95,"openfl._legacy.display.BitmapData.get_height","openfl/_legacy/display/BitmapData.hx",836,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_837_get_transparent,"openfl._legacy.display.BitmapData","get_transparent",0x2133f1e4,"openfl._legacy.display.BitmapData.get_transparent","openfl/_legacy/display/BitmapData.hx",837,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_125_createColor,"openfl._legacy.display.BitmapData","createColor",0x1a67de42,"openfl._legacy.display.BitmapData.createColor","openfl/_legacy/display/BitmapData.hx",125,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_208_extractAlpha,"openfl._legacy.display.BitmapData","extractAlpha",0x58ba4c82,"openfl._legacy.display.BitmapData.extractAlpha","openfl/_legacy/display/BitmapData.hx",208,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_215_extractColor,"openfl._legacy.display.BitmapData","extractColor",0x81801687,"openfl._legacy.display.BitmapData.extractColor","openfl/_legacy/display/BitmapData.hx",215,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_326_getRGBAPixels,"openfl._legacy.display.BitmapData","getRGBAPixels",0x20e79d52,"openfl._legacy.display.BitmapData.getRGBAPixels","openfl/_legacy/display/BitmapData.hx",326,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_364_load,"openfl._legacy.display.BitmapData","load",0x8d61034b,"openfl._legacy.display.BitmapData.load","openfl/_legacy/display/BitmapData.hx",364,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_373_loadFromBytes,"openfl._legacy.display.BitmapData","loadFromBytes",0x87ab8dd6,"openfl._legacy.display.BitmapData.loadFromBytes","openfl/_legacy/display/BitmapData.hx",373,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_384_loadFromHaxeBytes,"openfl._legacy.display.BitmapData","loadFromHaxeBytes",0x45aa9150,"openfl._legacy.display.BitmapData.loadFromHaxeBytes","openfl/_legacy/display/BitmapData.hx",384,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_512_sameValue,"openfl._legacy.display.BitmapData","sameValue",0x23f2aae6,"openfl._legacy.display.BitmapData.sameValue","openfl/_legacy/display/BitmapData.hx",512,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_759___flipPixel,"openfl._legacy.display.BitmapData","__flipPixel",0x2e4bcef4,"openfl._legacy.display.BitmapData.__flipPixel","openfl/_legacy/display/BitmapData.hx",759,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_771___ucompare,"openfl._legacy.display.BitmapData","__ucompare",0x056806d5,"openfl._legacy.display.BitmapData.__ucompare","openfl/_legacy/display/BitmapData.hx",771,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_28_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",28,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_29_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",29,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_30_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",30,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_31_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",31,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_32_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",32,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_33_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",33,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_34_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",34,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_35_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",35,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_36_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",36,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_37_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",37,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_38_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",38,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_39_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",39,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_40_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",40,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_847_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",847,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_848_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",848,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_849_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",849,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_850_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",850,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_851_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",851,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_852_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",852,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_853_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",853,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_854_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",854,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_855_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",855,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_856_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",856,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_857_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",857,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_858_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",858,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_859_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",859,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_860_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",860,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_862_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",862,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_864_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",864,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_865_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",865,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_866_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",866,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_867_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",867,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_868_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",868,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_869_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",869,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_870_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",870,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_872_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",872,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_873_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",873,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_874_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",874,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_876_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",876,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_877_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",877,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_878_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",878,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_879_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",879,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_880_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",880,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_881_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",881,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_882_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",882,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_883_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",883,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_884_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",884,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_885_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",885,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_886_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",886,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_887_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",887,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_888_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",888,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_889_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",889,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_8946ee628e93d59a_890_boot,"openfl._legacy.display.BitmapData","boot",0x86c4ed57,"openfl._legacy.display.BitmapData.boot","openfl/_legacy/display/BitmapData.hx",890,0x0b92a012)
namespace openfl{
namespace _legacy{
namespace display{

void BitmapData_obj::__construct(int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor, ::Dynamic gpuMode){
bool transparent = __o_transparent.Default(true);
int fillColor = __o_fillColor.Default(-1);
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_52_new)
HXLINE(  54)		this->_hx___transparent = transparent;
HXLINE(  56)		bool _hx_tmp;
HXDLIN(  56)		if ((width >= (int)1)) {
HXLINE(  56)			_hx_tmp = (height < (int)1);
            		}
            		else {
HXLINE(  56)			_hx_tmp = true;
            		}
HXDLIN(  56)		if (_hx_tmp) {
HXLINE(  58)			this->_hx___handle = null();
            		}
            		else {
HXLINE(  62)			int flags = (int)2;
HXLINE(  63)			if (transparent) {
HXLINE(  63)				flags = ((int)flags | (int)(int)1);
            			}
HXLINE(  64)			int alpha = hx::UShr(fillColor,(int)24);
HXLINE(  66)			bool _hx_tmp1;
HXDLIN(  66)			if (transparent) {
HXLINE(  66)				_hx_tmp1 = (alpha == (int)0);
            			}
            			else {
HXLINE(  66)				_hx_tmp1 = false;
            			}
HXDLIN(  66)			if (_hx_tmp1) {
HXLINE(  68)				fillColor = (int)0;
            			}
HXLINE(  72)			 ::Dynamic _hx_tmp2 = hx::ClassOf< ::openfl::_legacy::display::BitmapData >();
HXDLIN(  72)			this->_hx___handle = ::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_create(width,height,flags,((int)fillColor & (int)(int)16777215),alpha,gpuMode);
            		}
            	}

Dynamic BitmapData_obj::__CreateEmpty() { return new BitmapData_obj; }

void *BitmapData_obj::_hx_vtable = 0;

Dynamic BitmapData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapData_obj > _hx_result = new BitmapData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool BitmapData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0cd766e7;
}

static ::openfl::_legacy::display::IBitmapDrawable_obj _hx_openfl__legacy_display_BitmapData__hx_openfl__legacy_display_IBitmapDrawable= {
	( void (hx::Object::*)( ::Dynamic, ::openfl::_legacy::geom::Matrix, ::openfl::_legacy::geom::ColorTransform,::String, ::openfl::_legacy::geom::Rectangle,bool))&::openfl::_legacy::display::BitmapData_obj::_hx___drawToSurface,
};

void *BitmapData_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x87325dec: return &_hx_openfl__legacy_display_BitmapData__hx_openfl__legacy_display_IBitmapDrawable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void BitmapData_obj::applyFilter( ::openfl::_legacy::display::BitmapData sourceBitmapData, ::openfl::_legacy::geom::Rectangle sourceRect, ::openfl::_legacy::geom::Point destPoint, ::openfl::_legacy::filters::BitmapFilter filter){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_81_applyFilter)
HXDLIN(  81)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_apply_filter(this->_hx___handle,sourceBitmapData->_hx___handle,sourceRect,destPoint,filter);
            	}


HX_DEFINE_DYNAMIC_FUNC4(BitmapData_obj,applyFilter,(void))

void BitmapData_obj::clear(int color){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_88_clear)
HXDLIN(  88)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_clear(this->_hx___handle,color);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,clear,(void))

 ::openfl::_legacy::display::BitmapData BitmapData_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_8946ee628e93d59a_93_clone)
HXLINE(  95)		 ::openfl::_legacy::display::BitmapData bitmapData =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,(int)0,(int)0,this->get_transparent(),null(),null());
HXLINE(  96)		bitmapData->_hx___handle = ::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_clone(this->_hx___handle);
HXLINE(  97)		return bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,clone,return )

void BitmapData_obj::colorTransform( ::openfl::_legacy::geom::Rectangle rect, ::openfl::_legacy::geom::ColorTransform colorTransform){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_104_colorTransform)
HXDLIN( 104)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_color_transform(this->_hx___handle,rect,colorTransform);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,colorTransform,(void))

void BitmapData_obj::copyChannel( ::openfl::_legacy::display::BitmapData sourceBitmapData, ::openfl::_legacy::geom::Rectangle sourceRect, ::openfl::_legacy::geom::Point destPoint,int sourceChannel,int destChannel){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_111_copyChannel)
HXDLIN( 111)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_copy_channel(sourceBitmapData->_hx___handle,sourceRect,this->_hx___handle,destPoint,sourceChannel,destChannel);
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,copyChannel,(void))

void BitmapData_obj::copyPixels( ::openfl::_legacy::display::BitmapData sourceBitmapData, ::openfl::_legacy::geom::Rectangle sourceRect, ::openfl::_legacy::geom::Point destPoint, ::openfl::_legacy::display::BitmapData alphaBitmapData, ::openfl::_legacy::geom::Point alphaPoint,hx::Null< bool >  __o_mergeAlpha){
bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_118_copyPixels)
HXDLIN( 118)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_copy(sourceBitmapData->_hx___handle,sourceRect,this->_hx___handle,destPoint,mergeAlpha);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,copyPixels,(void))

void BitmapData_obj::createHardwareSurface(){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_133_createHardwareSurface)
HXDLIN( 133)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_create_hardware_surface(this->_hx___handle);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,createHardwareSurface,(void))

void BitmapData_obj::destroyHardwareSurface(){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_140_destroyHardwareSurface)
HXDLIN( 140)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_destroy_hardware_surface(this->_hx___handle);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,destroyHardwareSurface,(void))

void BitmapData_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_146_dispose)
HXLINE( 148)		if (hx::IsNotNull( this->_hx___handle )) {
HXLINE( 150)			::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_dispose(this->_hx___handle);
            		}
HXLINE( 154)		this->_hx___handle = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,dispose,(void))

void BitmapData_obj::draw(::Dynamic source, ::openfl::_legacy::geom::Matrix matrix, ::openfl::_legacy::geom::ColorTransform colorTransform, ::openfl::_legacy::display::BlendMode blendMode, ::openfl::_legacy::geom::Rectangle clipRect,hx::Null< bool >  __o_smoothing){
bool smoothing = __o_smoothing.Default(false);
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_161_draw)
HXDLIN( 161)		 ::Dynamic _hx_tmp = this->_hx___handle;
HXDLIN( 161)		::openfl::_legacy::display::IBitmapDrawable_obj::_hx___drawToSurface(source,_hx_tmp,matrix,colorTransform,::Std_obj::string(blendMode),clipRect,smoothing);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,draw,(void))

void BitmapData_obj::dumpBits(){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_168_dumpBits)
HXDLIN( 168)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_dump_bits(this->_hx___handle);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,dumpBits,(void))

 ::openfl::_legacy::utils::ByteArray BitmapData_obj::encode( ::Dynamic rectOrFormat, ::Dynamic __o_compressorOrQuality, ::openfl::_legacy::utils::ByteArray byteArray){
 ::Dynamic compressorOrQuality = __o_compressorOrQuality.Default(((Float)0.9));
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_178_encode)
HXDLIN( 178)		if (::Std_obj::is(rectOrFormat,hx::ClassOf< ::String >())) {
HXLINE( 180)			::String format = ( (::String)(rectOrFormat) );
HXLINE( 181)			Float quality = hx::TCast< Float >::cast(compressorOrQuality);
HXLINE( 183)			return ( ( ::openfl::_legacy::utils::ByteArray)(::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_encode(this->_hx___handle,format,quality)) );
            		}
            		else {
HXLINE( 187)			if (hx::IsNull( rectOrFormat )) {
HXLINE( 187)				byteArray = null();
HXDLIN( 187)				return byteArray;
            			}
HXLINE( 189)			if (::Std_obj::is(compressorOrQuality,hx::ClassOf< ::openfl::display::PNGEncoderOptions >())) {
HXLINE( 191)				byteArray = ( ( ::openfl::_legacy::utils::ByteArray)(::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_encode(this->_hx___handle,HX_("png",a9,5c,55,00),(int)0)) );
HXDLIN( 191)				return byteArray;
            			}
            			else {
HXLINE( 193)				if (::Std_obj::is(compressorOrQuality,hx::ClassOf< ::openfl::display::JPEGEncoderOptions >())) {
HXLINE( 195)					 ::Dynamic byteArray1 = hx::ClassOf< ::openfl::_legacy::display::BitmapData >();
HXDLIN( 195)					 ::Dynamic byteArray2 = this->_hx___handle;
HXDLIN( 195)					byteArray = ( ( ::openfl::_legacy::utils::ByteArray)(::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_encode(byteArray2,HX_("jpg",e1,d0,50,00),((Float)hx::TCast<  ::openfl::display::JPEGEncoderOptions >::cast(compressorOrQuality)->quality / (Float)(int)100))) );
HXDLIN( 195)					return byteArray;
            				}
            			}
HXLINE( 199)			byteArray = null();
HXDLIN( 199)			return byteArray;
            		}
HXLINE( 178)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,encode,return )

void BitmapData_obj::fillRect( ::openfl::_legacy::geom::Rectangle rect,int color){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_222_fillRect)
HXDLIN( 222)		 ::Dynamic _hx_tmp = hx::ClassOf< ::openfl::_legacy::display::BitmapData >();
HXDLIN( 222)		 ::Dynamic _hx_tmp1 = this->_hx___handle;
HXDLIN( 222)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_fill(_hx_tmp1,rect,((int)color & (int)(int)16777215),hx::UShr(color,(int)24));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fillRect,(void))

void BitmapData_obj::fillRectEx( ::openfl::_legacy::geom::Rectangle rect,int color,hx::Null< int >  __o_alpha){
int alpha = __o_alpha.Default(255);
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_229_fillRectEx)
HXDLIN( 229)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_fill(this->_hx___handle,rect,color,alpha);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,fillRectEx,(void))

void BitmapData_obj::floodFill(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_236_floodFill)
HXDLIN( 236)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_flood_fill(this->_hx___handle,x,y,color);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,floodFill,(void))

 ::openfl::_legacy::geom::Rectangle BitmapData_obj::generateFilterRect( ::openfl::_legacy::geom::Rectangle sourceRect, ::openfl::_legacy::filters::BitmapFilter filter){
            	HX_GC_STACKFRAME(&_hx_pos_8946ee628e93d59a_275_generateFilterRect)
HXLINE( 277)		 ::openfl::_legacy::geom::Rectangle result =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 278)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_generate_filter_rect(sourceRect,filter,result);
HXLINE( 279)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,generateFilterRect,return )

 ::openfl::_legacy::geom::Rectangle BitmapData_obj::getColorBoundsRect(int mask,int color,hx::Null< bool >  __o_findColor){
bool findColor = __o_findColor.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_8946ee628e93d59a_284_getColorBoundsRect)
HXLINE( 286)		 ::openfl::_legacy::geom::Rectangle result =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 287)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_get_color_bounds_rect(this->_hx___handle,mask,color,findColor,result);
HXLINE( 288)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,getColorBoundsRect,return )

int BitmapData_obj::getPixel(int x,int y){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_295_getPixel)
HXDLIN( 295)		return ( (int)(::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_get_pixel(this->_hx___handle,x,y)) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel,return )

int BitmapData_obj::getPixel32(int x,int y){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_312_getPixel32)
HXDLIN( 312)		return ( (int)(::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_get_pixel32(this->_hx___handle,x,y)) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel32,return )

 ::openfl::_legacy::utils::ByteArray BitmapData_obj::getPixels( ::openfl::_legacy::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_317_getPixels)
HXLINE( 319)		 ::openfl::_legacy::utils::ByteArray result = ( ( ::openfl::_legacy::utils::ByteArray)(::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_get_pixels(this->_hx___handle,rect)) );
HXLINE( 320)		if (hx::IsNotNull( result )) {
HXLINE( 320)			result->position = result->length;
            		}
HXLINE( 321)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getPixels,return )

::Array< int > BitmapData_obj::getVector( ::openfl::_legacy::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_343_getVector)
HXLINE( 345)		int pixels = ::Std_obj::_hx_int((rect->width * rect->height));
HXLINE( 346)		if ((pixels < (int)1)) {
HXLINE( 346)			return ::Array_obj< int >::__new(0);
            		}
HXLINE( 348)		::Array< int > result = ::Array_obj< int >::__new();
HXLINE( 349)		result[(pixels - (int)1)] = (int)0;
HXLINE( 352)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_get_array(this->_hx___handle,rect,result);
HXLINE( 359)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getVector,return )

void BitmapData_obj::lock(){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_389_lock)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,lock,(void))

void BitmapData_obj::merge( ::openfl::_legacy::display::BitmapData sourceBitmapData, ::openfl::_legacy::geom::Rectangle sourceRect, ::openfl::_legacy::geom::Point destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_GC_STACKFRAME(&_hx_pos_8946ee628e93d59a_396_merge)
HXLINE( 398)		if (hx::IsNull( sourceBitmapData )) {
HXLINE( 398)			return;
            		}
HXLINE( 400)		int sw = ::Std_obj::_hx_int(sourceRect->width);
HXLINE( 401)		int sh = ::Std_obj::_hx_int(sourceRect->height);
HXLINE( 403)		 ::openfl::_legacy::utils::ByteArray sourcePixels = sourceBitmapData->getPixels(sourceRect);
HXLINE( 404)		if (hx::IsNull( sourcePixels )) {
HXLINE( 404)			return;
            		}
HXLINE( 405)		sourcePixels->position = (int)0;
HXLINE( 407)		 ::openfl::_legacy::geom::Rectangle destRect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,sw,sh);
HXLINE( 408)		 ::openfl::_legacy::utils::ByteArray destPixels = this->getPixels(destRect);
HXLINE( 409)		if (hx::IsNull( destPixels )) {
HXLINE( 409)			return;
            		}
HXLINE( 410)		destPixels->position = (int)0;
HXLINE( 412)		int sourcePixel;
HXDLIN( 412)		int destPixel;
HXDLIN( 412)		int r;
HXDLIN( 412)		int g;
HXDLIN( 412)		int b;
HXDLIN( 412)		int a;
HXDLIN( 412)		int color;
HXDLIN( 412)		int c1;
HXDLIN( 412)		int c2;
HXDLIN( 412)		int c3;
HXDLIN( 412)		int c4;
HXLINE( 414)		{
HXLINE( 414)			int _g1 = (int)0;
HXDLIN( 414)			int _g = (sh * sw);
HXDLIN( 414)			while((_g1 < _g)){
HXLINE( 414)				_g1 = (_g1 + (int)1);
HXDLIN( 414)				int i = (_g1 - (int)1);
HXLINE( 416)				sourcePixel = sourcePixels->readUnsignedInt();
HXLINE( 417)				destPixel = destPixels->readUnsignedInt();
HXLINE( 419)				int _hx_int = ((((int)((int)sourcePixel >> (int)(int)24) & (int)(int)255) * redMultiplier) + (((int)((int)destPixel >> (int)(int)24) & (int)(int)255) * ((int)256 - redMultiplier)));
HXDLIN( 419)				Float a1;
HXDLIN( 419)				if ((_hx_int < (int)0)) {
HXLINE( 419)					a1 = (((Float)4294967296.0) + _hx_int);
            				}
            				else {
HXLINE( 419)					a1 = (_hx_int + ((Float)0.0));
            				}
HXDLIN( 419)				int int1 = (int)256;
HXDLIN( 419)				Float a2;
HXDLIN( 419)				if ((int1 < (int)0)) {
HXLINE( 419)					a2 = (((Float)4294967296.0) + int1);
            				}
            				else {
HXLINE( 419)					a2 = (int1 + ((Float)0.0));
            				}
HXDLIN( 419)				a = ::Std_obj::_hx_int(((Float)a1 / (Float)a2));
HXLINE( 420)				int int2 = ((((int)((int)sourcePixel >> (int)(int)16) & (int)(int)255) * redMultiplier) + (((int)((int)destPixel >> (int)(int)16) & (int)(int)255) * ((int)256 - redMultiplier)));
HXDLIN( 420)				Float r1;
HXDLIN( 420)				if ((int2 < (int)0)) {
HXLINE( 420)					r1 = (((Float)4294967296.0) + int2);
            				}
            				else {
HXLINE( 420)					r1 = (int2 + ((Float)0.0));
            				}
HXDLIN( 420)				int int3 = (int)256;
HXDLIN( 420)				Float r2;
HXDLIN( 420)				if ((int3 < (int)0)) {
HXLINE( 420)					r2 = (((Float)4294967296.0) + int3);
            				}
            				else {
HXLINE( 420)					r2 = (int3 + ((Float)0.0));
            				}
HXDLIN( 420)				r = ::Std_obj::_hx_int(((Float)r1 / (Float)r2));
HXLINE( 421)				int int4 = ((((int)((int)sourcePixel >> (int)(int)8) & (int)(int)255) * redMultiplier) + (((int)((int)destPixel >> (int)(int)8) & (int)(int)255) * ((int)256 - redMultiplier)));
HXDLIN( 421)				Float g1;
HXDLIN( 421)				if ((int4 < (int)0)) {
HXLINE( 421)					g1 = (((Float)4294967296.0) + int4);
            				}
            				else {
HXLINE( 421)					g1 = (int4 + ((Float)0.0));
            				}
HXDLIN( 421)				int int5 = (int)256;
HXDLIN( 421)				Float g2;
HXDLIN( 421)				if ((int5 < (int)0)) {
HXLINE( 421)					g2 = (((Float)4294967296.0) + int5);
            				}
            				else {
HXLINE( 421)					g2 = (int5 + ((Float)0.0));
            				}
HXDLIN( 421)				g = ::Std_obj::_hx_int(((Float)g1 / (Float)g2));
HXLINE( 422)				int int6 = ((((int)sourcePixel & (int)(int)255) * redMultiplier) + (((int)destPixel & (int)(int)255) * ((int)256 - redMultiplier)));
HXDLIN( 422)				Float b1;
HXDLIN( 422)				if ((int6 < (int)0)) {
HXLINE( 422)					b1 = (((Float)4294967296.0) + int6);
            				}
            				else {
HXLINE( 422)					b1 = (int6 + ((Float)0.0));
            				}
HXDLIN( 422)				int int7 = (int)256;
HXDLIN( 422)				Float b2;
HXDLIN( 422)				if ((int7 < (int)0)) {
HXLINE( 422)					b2 = (((Float)4294967296.0) + int7);
            				}
            				else {
HXLINE( 422)					b2 = (int7 + ((Float)0.0));
            				}
HXDLIN( 422)				b = ::Std_obj::_hx_int(((Float)b1 / (Float)b2));
HXLINE( 424)				bool _hx_tmp;
HXDLIN( 424)				bool _hx_tmp1;
HXDLIN( 424)				bool _hx_tmp2;
HXDLIN( 424)				if ((a <= (int)255)) {
HXLINE( 424)					_hx_tmp2 = (r > (int)255);
            				}
            				else {
HXLINE( 424)					_hx_tmp2 = true;
            				}
HXDLIN( 424)				if (!(_hx_tmp2)) {
HXLINE( 424)					_hx_tmp1 = (g > (int)255);
            				}
            				else {
HXLINE( 424)					_hx_tmp1 = true;
            				}
HXDLIN( 424)				if (!(_hx_tmp1)) {
HXLINE( 424)					_hx_tmp = (b > (int)255);
            				}
            				else {
HXLINE( 424)					_hx_tmp = true;
            				}
HXDLIN( 424)				if (_hx_tmp) {
HXLINE( 426)					 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 426)					_hx_tmp3(((((((a + HX_(", ",74,26,00,00)) + r) + HX_(", ",74,26,00,00)) + g) + HX_(", ",74,26,00,00)) + b),hx::SourceInfo(HX_("BitmapData.hx",85,76,3a,0a),426,HX_("openfl._legacy.display.BitmapData",69,89,8d,97),HX_("merge",b8,a2,c6,05)));
            				}
HXLINE( 430)				color = ((int)((int)((int)((int)a << (int)(int)24) | (int)((int)r << (int)(int)16)) | (int)((int)g << (int)(int)8)) | (int)b);
HXLINE( 432)				destPixels->position = (i * (int)4);
HXLINE( 433)				destPixels->writeUnsignedInt(color);
            			}
            		}
HXLINE( 437)		destPixels->position = (int)0;
HXLINE( 438)		this->setPixels(destRect,destPixels);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,merge,(void))

void BitmapData_obj::multiplyAlpha(){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_445_multiplyAlpha)
HXDLIN( 445)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_multiply_alpha(this->_hx___handle);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,multiplyAlpha,(void))

void BitmapData_obj::noise(int randomSeed,hx::Null< int >  __o_low,hx::Null< int >  __o_high,hx::Null< int >  __o_channelOptions,hx::Null< bool >  __o_grayScale){
int low = __o_low.Default(0);
int high = __o_high.Default(255);
int channelOptions = __o_channelOptions.Default(7);
bool grayScale = __o_grayScale.Default(false);
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_452_noise)
HXDLIN( 452)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_noise(this->_hx___handle,randomSeed,low,high,channelOptions,grayScale);
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,noise,(void))

void BitmapData_obj::paletteMap( ::openfl::_legacy::display::BitmapData sourceBitmapData, ::openfl::_legacy::geom::Rectangle sourceRect, ::openfl::_legacy::geom::Point destPoint,::Array< int > redArray,::Array< int > greenArray,::Array< int > blueArray,::Array< int > alphaArray){
            	HX_GC_STACKFRAME(&_hx_pos_8946ee628e93d59a_457_paletteMap)
HXLINE( 459)		int sw = ::Std_obj::_hx_int(sourceRect->width);
HXLINE( 460)		int sh = ::Std_obj::_hx_int(sourceRect->height);
HXLINE( 462)		 ::openfl::_legacy::utils::ByteArray pixels = sourceBitmapData->getPixels(sourceRect);
HXLINE( 463)		pixels->position = (int)0;
HXLINE( 465)		int pixelValue;
HXDLIN( 465)		int r;
HXDLIN( 465)		int g;
HXDLIN( 465)		int b;
HXDLIN( 465)		int a;
HXDLIN( 465)		int color;
HXDLIN( 465)		int c1;
HXDLIN( 465)		int c2;
HXDLIN( 465)		int c3;
HXDLIN( 465)		int c4;
HXLINE( 467)		{
HXLINE( 467)			int _g1 = (int)0;
HXDLIN( 467)			int _g = (sh * sw);
HXDLIN( 467)			while((_g1 < _g)){
HXLINE( 467)				_g1 = (_g1 + (int)1);
HXDLIN( 467)				int i = (_g1 - (int)1);
HXLINE( 469)				pixelValue = pixels->readUnsignedInt();
HXLINE( 471)				if (hx::IsNull( alphaArray )) {
HXLINE( 471)					c1 = ((int)pixelValue & (int)(int)-16777216);
            				}
            				else {
HXLINE( 471)					c1 = alphaArray->__get(((int)((int)pixelValue >> (int)(int)24) & (int)(int)255));
            				}
HXLINE( 472)				if (hx::IsNull( redArray )) {
HXLINE( 472)					c2 = ((int)pixelValue & (int)(int)16711680);
            				}
            				else {
HXLINE( 472)					c2 = redArray->__get(((int)((int)pixelValue >> (int)(int)16) & (int)(int)255));
            				}
HXLINE( 473)				if (hx::IsNull( greenArray )) {
HXLINE( 473)					c3 = ((int)pixelValue & (int)(int)65280);
            				}
            				else {
HXLINE( 473)					c3 = greenArray->__get(((int)((int)pixelValue >> (int)(int)8) & (int)(int)255));
            				}
HXLINE( 474)				if (hx::IsNull( blueArray )) {
HXLINE( 474)					c4 = ((int)pixelValue & (int)(int)255);
            				}
            				else {
HXLINE( 474)					c4 = blueArray->__get(((int)pixelValue & (int)(int)255));
            				}
HXLINE( 476)				a = (((((int)((int)c1 >> (int)(int)24) & (int)(int)255) + ((int)((int)c2 >> (int)(int)24) & (int)(int)255)) + ((int)((int)c3 >> (int)(int)24) & (int)(int)255)) + ((int)((int)c4 >> (int)(int)24) & (int)(int)255));
HXLINE( 477)				bool _hx_tmp = (a > (int)255);
HXLINE( 479)				r = (((((int)((int)c1 >> (int)(int)16) & (int)(int)255) + ((int)((int)c2 >> (int)(int)16) & (int)(int)255)) + ((int)((int)c3 >> (int)(int)16) & (int)(int)255)) + ((int)((int)c4 >> (int)(int)16) & (int)(int)255));
HXLINE( 480)				bool _hx_tmp1 = (r > (int)255);
HXLINE( 482)				g = (((((int)((int)c1 >> (int)(int)8) & (int)(int)255) + ((int)((int)c2 >> (int)(int)8) & (int)(int)255)) + ((int)((int)c3 >> (int)(int)8) & (int)(int)255)) + ((int)((int)c4 >> (int)(int)8) & (int)(int)255));
HXLINE( 483)				bool _hx_tmp2 = (g > (int)255);
HXLINE( 485)				b = (((((int)c1 & (int)(int)255) + ((int)c2 & (int)(int)255)) + ((int)c3 & (int)(int)255)) + ((int)c4 & (int)(int)255));
HXLINE( 486)				bool _hx_tmp3 = (b > (int)255);
HXLINE( 488)				color = ((int)((int)((int)((int)a << (int)(int)24) | (int)((int)r << (int)(int)16)) | (int)((int)g << (int)(int)8)) | (int)b);
HXLINE( 490)				pixels->position = (i * (int)4);
HXLINE( 491)				pixels->writeUnsignedInt(color);
            			}
            		}
HXLINE( 495)		pixels->position = (int)0;
HXLINE( 496)		 ::openfl::_legacy::geom::Rectangle destRect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,sw,sh);
HXLINE( 497)		this->setPixels(destRect,pixels);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,paletteMap,(void))

void BitmapData_obj::perlinNoise(Float baseX,Float baseY,int numOctaves,int randomSeed,bool stitch,bool fractalNoise,hx::Null< int >  __o_channelOptions,hx::Null< bool >  __o_grayScale,::Array< ::Dynamic> offsets){
int channelOptions = __o_channelOptions.Default(7);
bool grayScale = __o_grayScale.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_8946ee628e93d59a_502_perlinNoise)
HXLINE( 504)		 ::openfl::_legacy::display::OptimizedPerlin perlin =  ::openfl::_legacy::display::OptimizedPerlin_obj::__alloc( HX_CTX ,randomSeed,numOctaves,null());
HXLINE( 505)		perlin->fill(hx::ObjectPtr<OBJ_>(this),baseX,baseY,(int)0,null());
            	}


HX_DEFINE_DYNAMIC_FUNC9(BitmapData_obj,perlinNoise,(void))

void BitmapData_obj::scroll(int x,int y){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_519_scroll)
HXDLIN( 519)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_scroll(this->_hx___handle,x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,scroll,(void))

void BitmapData_obj::setFlags(int flags){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_527_setFlags)
HXDLIN( 527)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_set_flags(this->_hx___handle,flags);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,setFlags,(void))

void BitmapData_obj::setFormat(int format){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_534_setFormat)
HXDLIN( 534)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_set_format(this->_hx___handle,format);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,setFormat,(void))

void BitmapData_obj::setPixel(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_541_setPixel)
HXDLIN( 541)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_set_pixel(this->_hx___handle,x,y,color);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel,(void))

void BitmapData_obj::setPixel32(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_548_setPixel32)
HXDLIN( 548)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_set_pixel32(this->_hx___handle,x,y,color);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel32,(void))

void BitmapData_obj::setPixels( ::openfl::_legacy::geom::Rectangle rect, ::openfl::_legacy::utils::ByteArray pixels){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_553_setPixels)
HXLINE( 555)		int size = ::Std_obj::_hx_int(((rect->width * rect->height) * (int)4));
HXLINE( 556)		pixels->checkData(::Std_obj::_hx_int(size));
HXLINE( 557)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_set_bytes(this->_hx___handle,rect,pixels,pixels->position);
HXLINE( 558)		 ::openfl::_legacy::utils::ByteArray pixels1 = pixels;
HXDLIN( 558)		pixels1->position = (pixels1->position + size);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setPixels,(void))

void BitmapData_obj::setVector( ::openfl::_legacy::geom::Rectangle rect,::Array< int > pixels){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_563_setVector)
HXLINE( 565)		int count = ::Std_obj::_hx_int((rect->width * rect->height));
HXLINE( 566)		if ((pixels->length < count)) {
HXLINE( 566)			return;
            		}
HXLINE( 569)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_set_array(this->_hx___handle,rect,pixels);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setVector,(void))

int BitmapData_obj::threshold( ::openfl::_legacy::display::BitmapData sourceBitmapData, ::openfl::_legacy::geom::Rectangle sourceRect, ::openfl::_legacy::geom::Point destPoint,::String operation,int threshold,hx::Null< int >  __o_color,hx::Null< int >  __o_mask,hx::Null< bool >  __o_copySource){
int color = __o_color.Default(0);
int mask = __o_mask.Default(-1);
bool copySource = __o_copySource.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_8946ee628e93d59a_587_threshold)
HXDLIN( 587)		bool _hx_tmp;
HXDLIN( 587)		bool _hx_tmp1;
HXDLIN( 587)		bool _hx_tmp2;
HXDLIN( 587)		if (hx::IsEq( sourceBitmapData,hx::ObjectPtr<OBJ_>(this) )) {
HXDLIN( 587)			_hx_tmp2 = sourceRect->equals(this->get_rect());
            		}
            		else {
HXDLIN( 587)			_hx_tmp2 = false;
            		}
HXDLIN( 587)		if (_hx_tmp2) {
HXDLIN( 587)			_hx_tmp1 = (destPoint->x == (int)0);
            		}
            		else {
HXDLIN( 587)			_hx_tmp1 = false;
            		}
HXDLIN( 587)		if (_hx_tmp1) {
HXDLIN( 587)			_hx_tmp = (destPoint->y == (int)0);
            		}
            		else {
HXDLIN( 587)			_hx_tmp = false;
            		}
HXDLIN( 587)		if (_hx_tmp) {
HXLINE( 589)			int hits = (int)0;
HXLINE( 591)			threshold = ((int)((int)((int)((int)((int)threshold & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)threshold >> (int)(int)8) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)threshold >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)threshold >> (int)(int)24) & (int)(int)255));
HXLINE( 592)			color = ((int)((int)((int)((int)((int)color & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)color >> (int)(int)8) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)color >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)color >> (int)(int)24) & (int)(int)255));
HXLINE( 594)			 ::openfl::_legacy::utils::ByteArray memory =  ::openfl::_legacy::utils::ByteArray_obj::__alloc( HX_CTX ,null());
HXLINE( 595)			int _hx_tmp3 = this->get_width();
HXDLIN( 595)			memory->setLength(((_hx_tmp3 * this->get_height()) * (int)4));
HXLINE( 596)			memory = this->getPixels(this->get_rect());
HXLINE( 597)			memory->position = (int)0;
HXLINE( 598)			::openfl::_legacy::Memory_obj::select(memory);
HXLINE( 600)			int thresholdMask = ((int)threshold & (int)mask);
HXLINE( 602)			int width_yy;
HXDLIN( 602)			int position;
HXDLIN( 602)			int pixelMask;
HXDLIN( 602)			int pixelValue;
HXDLIN( 602)			int i;
HXDLIN( 602)			bool test;
HXLINE( 604)			{
HXLINE( 604)				int _g1 = (int)0;
HXDLIN( 604)				int _g = this->get_height();
HXDLIN( 604)				while((_g1 < _g)){
HXLINE( 604)					_g1 = (_g1 + (int)1);
HXDLIN( 604)					int yy = (_g1 - (int)1);
HXLINE( 606)					width_yy = (this->get_width() * yy);
HXLINE( 608)					{
HXLINE( 608)						int _g3 = (int)0;
HXDLIN( 608)						int _g2 = this->get_width();
HXDLIN( 608)						while((_g3 < _g2)){
HXLINE( 608)							_g3 = (_g3 + (int)1);
HXDLIN( 608)							int xx = (_g3 - (int)1);
HXLINE( 610)							position = ((width_yy + xx) * (int)4);
HXLINE( 611)							pixelValue = ::openfl::_legacy::Memory_obj::getI32(position);
HXLINE( 612)							pixelMask = ((int)pixelValue & (int)mask);
HXLINE( 614)							i = ::openfl::_legacy::display::BitmapData_obj::_hx___ucompare(pixelMask,thresholdMask);
HXLINE( 615)							test = false;
HXLINE( 617)							if ((operation == HX_("==",60,35,00,00))) {
HXLINE( 617)								test = (i == (int)0);
            							}
            							else {
HXLINE( 618)								if ((operation == HX_("<",3c,00,00,00))) {
HXLINE( 618)									test = (i == (int)-1);
            								}
            								else {
HXLINE( 619)									if ((operation == HX_(">",3e,00,00,00))) {
HXLINE( 619)										test = (i == (int)1);
            									}
            									else {
HXLINE( 620)										if ((operation == HX_("!=",fc,1c,00,00))) {
HXLINE( 620)											test = (i != (int)0);
            										}
            										else {
HXLINE( 621)											if ((operation == HX_("<=",81,34,00,00))) {
HXLINE( 621)												if ((i != (int)0)) {
HXLINE( 621)													test = (i == (int)-1);
            												}
            												else {
HXLINE( 621)													test = true;
            												}
            											}
            											else {
HXLINE( 622)												if ((operation == HX_(">=",3f,36,00,00))) {
HXLINE( 622)													if ((i != (int)0)) {
HXLINE( 622)														test = (i == (int)1);
            													}
            													else {
HXLINE( 622)														test = true;
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXLINE( 624)							if (test) {
HXLINE( 626)								::openfl::_legacy::Memory_obj::setI32(position,color);
HXLINE( 627)								hits = (hits + (int)1);
            							}
            						}
            					}
            				}
            			}
HXLINE( 635)			memory->position = (int)0;
HXLINE( 636)			this->setPixels(this->get_rect(),memory);
HXLINE( 637)			::openfl::_legacy::Memory_obj::select(null());
HXLINE( 638)			return hits;
            		}
            		else {
HXLINE( 642)			int sx = ::Std_obj::_hx_int(sourceRect->x);
HXLINE( 643)			int sy = ::Std_obj::_hx_int(sourceRect->y);
HXLINE( 644)			int sw = ::Std_obj::_hx_int(sourceBitmapData->get_width());
HXLINE( 645)			int sh = ::Std_obj::_hx_int(sourceBitmapData->get_height());
HXLINE( 647)			int dx = ::Std_obj::_hx_int(destPoint->x);
HXLINE( 648)			int dy = ::Std_obj::_hx_int(destPoint->y);
HXLINE( 650)			int bw = ((this->get_width() - sw) - dx);
HXLINE( 651)			int bh = ((this->get_height() - sh) - dy);
HXLINE( 653)			int dw;
HXDLIN( 653)			if ((bw < (int)0)) {
HXLINE( 653)				dw = (sw + ((this->get_width() - sw) - dx));
            			}
            			else {
HXLINE( 653)				dw = sw;
            			}
HXLINE( 654)			int dh;
HXDLIN( 654)			if ((bw < (int)0)) {
HXLINE( 654)				dh = (sh + ((this->get_height() - sh) - dy));
            			}
            			else {
HXLINE( 654)				dh = sh;
            			}
HXLINE( 656)			int hits1 = (int)0;
HXLINE( 658)			threshold = ((int)((int)((int)((int)((int)threshold & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)threshold >> (int)(int)8) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)threshold >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)threshold >> (int)(int)24) & (int)(int)255));
HXLINE( 659)			color = ((int)((int)((int)((int)((int)color & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)color >> (int)(int)8) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)color >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)color >> (int)(int)24) & (int)(int)255));
HXLINE( 661)			int canvasMemory = ((sw * sh) * (int)4);
HXLINE( 662)			int sourceMemory = (int)0;
HXLINE( 664)			if (copySource) {
HXLINE( 666)				sourceMemory = ((sw * sh) * (int)4);
            			}
HXLINE( 670)			int totalMemory = (canvasMemory + sourceMemory);
HXLINE( 671)			 ::openfl::_legacy::utils::ByteArray memory1 =  ::openfl::_legacy::utils::ByteArray_obj::__alloc( HX_CTX ,null());
HXLINE( 672)			memory1->setLength(totalMemory);
HXLINE( 673)			memory1->position = (int)0;
HXLINE( 674)			 ::openfl::_legacy::display::BitmapData bitmapData = sourceBitmapData->clone();
HXLINE( 675)			 ::openfl::_legacy::utils::ByteArray pixels = bitmapData->getPixels(sourceRect);
HXLINE( 676)			memory1->writeBytes(pixels,null(),null());
HXLINE( 677)			memory1->position = canvasMemory;
HXLINE( 679)			if (copySource) {
HXLINE( 681)				memory1->writeBytes(pixels,null(),null());
            			}
HXLINE( 685)			memory1->position = (int)0;
HXLINE( 686)			::openfl::_legacy::Memory_obj::select(memory1);
HXLINE( 688)			int thresholdMask1 = ((int)threshold & (int)mask);
HXLINE( 690)			int position1;
HXDLIN( 690)			int pixelMask1;
HXDLIN( 690)			int pixelValue1;
HXDLIN( 690)			int i1;
HXDLIN( 690)			bool test1;
HXLINE( 692)			{
HXLINE( 692)				int _g11 = (int)0;
HXDLIN( 692)				int _g4 = dh;
HXDLIN( 692)				while((_g11 < _g4)){
HXLINE( 692)					_g11 = (_g11 + (int)1);
HXDLIN( 692)					int yy1 = (_g11 - (int)1);
HXLINE( 694)					{
HXLINE( 694)						int _g31 = (int)0;
HXDLIN( 694)						int _g21 = dw;
HXDLIN( 694)						while((_g31 < _g21)){
HXLINE( 694)							_g31 = (_g31 + (int)1);
HXDLIN( 694)							int xx1 = (_g31 - (int)1);
HXLINE( 696)							position1 = (((xx1 + sx) + ((yy1 + sy) * sw)) * (int)4);
HXLINE( 697)							pixelValue1 = ::openfl::_legacy::Memory_obj::getI32(position1);
HXLINE( 698)							pixelMask1 = ((int)pixelValue1 & (int)mask);
HXLINE( 700)							i1 = ::openfl::_legacy::display::BitmapData_obj::_hx___ucompare(pixelMask1,thresholdMask1);
HXLINE( 701)							test1 = false;
HXLINE( 703)							if ((operation == HX_("==",60,35,00,00))) {
HXLINE( 703)								test1 = (i1 == (int)0);
            							}
            							else {
HXLINE( 704)								if ((operation == HX_("<",3c,00,00,00))) {
HXLINE( 704)									test1 = (i1 == (int)-1);
            								}
            								else {
HXLINE( 705)									if ((operation == HX_(">",3e,00,00,00))) {
HXLINE( 705)										test1 = (i1 == (int)1);
            									}
            									else {
HXLINE( 706)										if ((operation == HX_("!=",fc,1c,00,00))) {
HXLINE( 706)											test1 = (i1 != (int)0);
            										}
            										else {
HXLINE( 707)											if ((operation == HX_("<=",81,34,00,00))) {
HXLINE( 707)												if ((i1 != (int)0)) {
HXLINE( 707)													test1 = (i1 == (int)-1);
            												}
            												else {
HXLINE( 707)													test1 = true;
            												}
            											}
            											else {
HXLINE( 708)												if ((operation == HX_(">=",3f,36,00,00))) {
HXLINE( 708)													if ((i1 != (int)0)) {
HXLINE( 708)														test1 = (i1 == (int)1);
            													}
            													else {
HXLINE( 708)														test1 = true;
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXLINE( 710)							if (test1) {
HXLINE( 712)								::openfl::_legacy::Memory_obj::setI32(position1,color);
HXLINE( 713)								hits1 = (hits1 + (int)1);
            							}
            							else {
HXLINE( 715)								if (copySource) {
HXLINE( 717)									::openfl::_legacy::Memory_obj::setI32(position1,::openfl::_legacy::Memory_obj::getI32((canvasMemory + position1)));
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 725)			memory1->position = (int)0;
HXLINE( 726)			bitmapData->setPixels(sourceRect,memory1);
HXLINE( 727)			this->copyPixels(bitmapData,bitmapData->get_rect(),destPoint,null(),null(),null());
HXLINE( 728)			::openfl::_legacy::Memory_obj::select(null());
HXLINE( 729)			return hits1;
            		}
HXLINE( 587)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC8(BitmapData_obj,threshold,return )

void BitmapData_obj::unlock( ::openfl::_legacy::geom::Rectangle changeRect){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_736_unlock)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,unlock,(void))

void BitmapData_obj::unmultiplyAlpha(){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_745_unmultiplyAlpha)
HXDLIN( 745)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_unmultiply_alpha(this->_hx___handle);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,unmultiplyAlpha,(void))

void BitmapData_obj::_hx___drawToSurface( ::Dynamic surface, ::openfl::_legacy::geom::Matrix matrix, ::openfl::_legacy::geom::ColorTransform colorTransform,::String blendMode, ::openfl::_legacy::geom::Rectangle clipRect,bool smoothing){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_752___drawToSurface)
HXDLIN( 752)		::openfl::_legacy::display::BitmapData_obj::lime_render_surface_to_surface(surface,this->_hx___handle,matrix,colorTransform,blendMode,clipRect,smoothing);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,_hx___drawToSurface,(void))

void BitmapData_obj::_hx___loadFromBytes( ::openfl::_legacy::utils::ByteArray bytes, ::openfl::_legacy::utils::ByteArray rawAlpha){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_766___loadFromBytes)
HXDLIN( 766)		this->_hx___handle = ::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_from_bytes(bytes,rawAlpha);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___loadFromBytes,(void))

bool BitmapData_obj::get_premultipliedAlpha(){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_832_get_premultipliedAlpha)
HXDLIN( 832)		return ( (bool)(::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_get_prem_alpha(this->_hx___handle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,get_premultipliedAlpha,return )

bool BitmapData_obj::set_premultipliedAlpha(bool value){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_833_set_premultipliedAlpha)
HXDLIN( 833)		::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_set_prem_alpha(this->_hx___handle,value);
HXDLIN( 833)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,set_premultipliedAlpha,return )

 ::openfl::_legacy::geom::Rectangle BitmapData_obj::get_rect(){
            	HX_GC_STACKFRAME(&_hx_pos_8946ee628e93d59a_834_get_rect)
HXDLIN( 834)		int _hx_tmp = this->get_width();
HXDLIN( 834)		return  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,_hx_tmp,this->get_height());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,get_rect,return )

int BitmapData_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_835_get_width)
HXDLIN( 835)		return ( (int)(::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_width(this->_hx___handle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,get_width,return )

int BitmapData_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_836_get_height)
HXDLIN( 836)		return ( (int)(::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_height(this->_hx___handle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,get_height,return )

bool BitmapData_obj::get_transparent(){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_837_get_transparent)
HXDLIN( 837)		return this->_hx___transparent;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,get_transparent,return )

int BitmapData_obj::CLEAR;

int BitmapData_obj::BLACK;

int BitmapData_obj::WHITE;

int BitmapData_obj::RED;

int BitmapData_obj::GREEN;

int BitmapData_obj::BLUE;

::String BitmapData_obj::PNG;

::String BitmapData_obj::JPG;

int BitmapData_obj::TRANSPARENT;

int BitmapData_obj::HARDWARE;

int BitmapData_obj::FORMAT_8888;

int BitmapData_obj::FORMAT_4444;

int BitmapData_obj::FORMAT_565;

int BitmapData_obj::createColor(int rgb,hx::Null< int >  __o_alpha){
int alpha = __o_alpha.Default(255);
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_125_createColor)
HXDLIN( 125)		return ((int)rgb | (int)((int)alpha << (int)(int)24));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,createColor,return )

int BitmapData_obj::extractAlpha(int argb){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_208_extractAlpha)
HXDLIN( 208)		return hx::UShr(argb,(int)24);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,extractAlpha,return )

int BitmapData_obj::extractColor(int argb){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_215_extractColor)
HXDLIN( 215)		return ((int)argb & (int)(int)16777215);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,extractColor,return )

 ::openfl::_legacy::utils::ByteArray BitmapData_obj::getRGBAPixels( ::openfl::_legacy::display::BitmapData bitmapData){
            	HX_GC_STACKFRAME(&_hx_pos_8946ee628e93d59a_326_getRGBAPixels)
HXLINE( 328)		int rgbaData = bitmapData->get_width();
HXDLIN( 328)		int rgbaData1 = bitmapData->get_height();
HXDLIN( 328)		 ::openfl::_legacy::display::BitmapData rgbaData2 =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,rgbaData,rgbaData1,bitmapData->get_transparent(),null(),null());
HXLINE( 330)		 ::openfl::_legacy::geom::Rectangle rect = bitmapData->get_rect();
HXLINE( 331)		 ::openfl::_legacy::geom::Point point =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE( 333)		rgbaData2->copyChannel(bitmapData,rect,point,(int)2,(int)1);
HXLINE( 334)		rgbaData2->copyChannel(bitmapData,rect,point,(int)4,(int)2);
HXLINE( 335)		rgbaData2->copyChannel(bitmapData,rect,point,(int)8,(int)4);
HXLINE( 336)		rgbaData2->copyChannel(bitmapData,rect,point,(int)1,(int)8);
HXLINE( 338)		return rgbaData2->getPixels(rect);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getRGBAPixels,return )

 ::openfl::_legacy::display::BitmapData BitmapData_obj::load(::String filename,hx::Null< int >  __o_format){
int format = __o_format.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_8946ee628e93d59a_364_load)
HXLINE( 366)		 ::openfl::_legacy::display::BitmapData result =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null(),null());
HXLINE( 367)		result->_hx___handle = ::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_load(filename,format);
HXLINE( 368)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,load,return )

 ::openfl::_legacy::display::BitmapData BitmapData_obj::loadFromBytes( ::openfl::_legacy::utils::ByteArray bytes, ::openfl::_legacy::utils::ByteArray rawAlpha){
            	HX_GC_STACKFRAME(&_hx_pos_8946ee628e93d59a_373_loadFromBytes)
HXLINE( 375)		 ::openfl::_legacy::display::BitmapData result =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,(int)0,(int)0,true,null(),null());
HXLINE( 376)		result->_hx___handle = ::openfl::_legacy::display::BitmapData_obj::lime_bitmap_data_from_bytes(bytes,rawAlpha);
HXLINE( 377)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,loadFromBytes,return )

 ::openfl::_legacy::display::BitmapData BitmapData_obj::loadFromHaxeBytes( ::haxe::io::Bytes bytes, ::haxe::io::Bytes rawAlpha){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_384_loadFromHaxeBytes)
HXDLIN( 384)		 ::openfl::_legacy::utils::ByteArray _hx_tmp = ::openfl::_legacy::utils::ByteArray_obj::fromBytes(bytes);
HXDLIN( 384)		 ::openfl::_legacy::utils::ByteArray _hx_tmp1;
HXDLIN( 384)		if (hx::IsNull( rawAlpha )) {
HXDLIN( 384)			_hx_tmp1 = null();
            		}
            		else {
HXDLIN( 384)			_hx_tmp1 = ::openfl::_legacy::utils::ByteArray_obj::fromBytes(rawAlpha);
            		}
HXDLIN( 384)		return ::openfl::_legacy::display::BitmapData_obj::loadFromBytes(_hx_tmp,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,loadFromHaxeBytes,return )

bool BitmapData_obj::sameValue(int a,int b){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_512_sameValue)
HXDLIN( 512)		return (a == b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,sameValue,return )

int BitmapData_obj::_hx___flipPixel(int pixel){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_759___flipPixel)
HXDLIN( 759)		return ((int)((int)((int)((int)((int)pixel & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)pixel >> (int)(int)8) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)pixel >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel >> (int)(int)24) & (int)(int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___flipPixel,return )

int BitmapData_obj::_hx___ucompare(int n1,int n2){
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_771___ucompare)
HXLINE( 773)		int tmp1;
HXLINE( 774)		int tmp2;
HXLINE( 776)		tmp1 = ((int)((int)n1 >> (int)(int)24) & (int)(int)255);
HXLINE( 777)		tmp2 = ((int)((int)n2 >> (int)(int)24) & (int)(int)255);
HXLINE( 779)		if ((tmp1 != tmp2)) {
HXLINE( 781)			if ((tmp1 > tmp2)) {
HXLINE( 781)				return (int)1;
            			}
            			else {
HXLINE( 781)				return (int)-1;
            			}
            		}
            		else {
HXLINE( 785)			tmp1 = ((int)((int)n1 >> (int)(int)16) & (int)(int)255);
HXLINE( 786)			tmp2 = ((int)((int)n2 >> (int)(int)16) & (int)(int)255);
HXLINE( 788)			if ((tmp1 != tmp2)) {
HXLINE( 790)				if ((tmp1 > tmp2)) {
HXLINE( 790)					return (int)1;
            				}
            				else {
HXLINE( 790)					return (int)-1;
            				}
            			}
            			else {
HXLINE( 794)				tmp1 = ((int)((int)n1 >> (int)(int)8) & (int)(int)255);
HXLINE( 795)				tmp2 = ((int)((int)n2 >> (int)(int)8) & (int)(int)255);
HXLINE( 797)				if ((tmp1 != tmp2)) {
HXLINE( 799)					if ((tmp1 > tmp2)) {
HXLINE( 799)						return (int)1;
            					}
            					else {
HXLINE( 799)						return (int)-1;
            					}
            				}
            				else {
HXLINE( 803)					tmp1 = ((int)n1 & (int)(int)255);
HXLINE( 804)					tmp2 = ((int)n2 & (int)(int)255);
HXLINE( 806)					if ((tmp1 != tmp2)) {
HXLINE( 808)						if ((tmp1 > tmp2)) {
HXLINE( 808)							return (int)1;
            						}
            						else {
HXLINE( 808)							return (int)-1;
            						}
            					}
            					else {
HXLINE( 812)						return (int)0;
            					}
            				}
            			}
            		}
HXLINE( 779)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___ucompare,return )

 ::Dynamic BitmapData_obj::lime_bitmap_data_create;

 ::Dynamic BitmapData_obj::lime_bitmap_data_load;

 ::Dynamic BitmapData_obj::lime_bitmap_data_from_bytes;

 ::Dynamic BitmapData_obj::lime_bitmap_data_clear;

 ::Dynamic BitmapData_obj::lime_bitmap_data_clone;

 ::Dynamic BitmapData_obj::lime_bitmap_data_apply_filter;

 ::Dynamic BitmapData_obj::lime_bitmap_data_color_transform;

 ::Dynamic BitmapData_obj::lime_bitmap_data_copy;

 ::Dynamic BitmapData_obj::lime_bitmap_data_copy_channel;

 ::Dynamic BitmapData_obj::lime_bitmap_data_fill;

 ::Dynamic BitmapData_obj::lime_bitmap_data_get_pixels;

 ::Dynamic BitmapData_obj::lime_bitmap_data_get_pixel;

 ::Dynamic BitmapData_obj::lime_bitmap_data_get_pixel32;

 ::Dynamic BitmapData_obj::lime_bitmap_data_get_pixel_rgba;

 ::Dynamic BitmapData_obj::lime_bitmap_data_get_array;

 ::Dynamic BitmapData_obj::lime_bitmap_data_get_color_bounds_rect;

 ::Dynamic BitmapData_obj::lime_bitmap_data_scroll;

 ::Dynamic BitmapData_obj::lime_bitmap_data_set_pixel;

 ::Dynamic BitmapData_obj::lime_bitmap_data_set_pixel32;

 ::Dynamic BitmapData_obj::lime_bitmap_data_set_pixel_rgba;

 ::Dynamic BitmapData_obj::lime_bitmap_data_set_bytes;

 ::Dynamic BitmapData_obj::lime_bitmap_data_set_format;

 ::Dynamic BitmapData_obj::lime_bitmap_data_set_array;

 ::Dynamic BitmapData_obj::lime_bitmap_data_create_hardware_surface;

 ::Dynamic BitmapData_obj::lime_bitmap_data_destroy_hardware_surface;

 ::Dynamic BitmapData_obj::lime_bitmap_data_dispose;

 ::Dynamic BitmapData_obj::lime_bitmap_data_generate_filter_rect;

 ::Dynamic BitmapData_obj::lime_render_surface_to_surface;

 ::Dynamic BitmapData_obj::lime_bitmap_data_height;

 ::Dynamic BitmapData_obj::lime_bitmap_data_width;

 ::Dynamic BitmapData_obj::lime_bitmap_data_get_transparent;

 ::Dynamic BitmapData_obj::lime_bitmap_data_set_flags;

 ::Dynamic BitmapData_obj::lime_bitmap_data_encode;

 ::Dynamic BitmapData_obj::lime_bitmap_data_dump_bits;

 ::Dynamic BitmapData_obj::lime_bitmap_data_flood_fill;

 ::Dynamic BitmapData_obj::lime_bitmap_data_noise;

 ::Dynamic BitmapData_obj::lime_bitmap_data_unmultiply_alpha;

 ::Dynamic BitmapData_obj::lime_bitmap_data_multiply_alpha;

 ::Dynamic BitmapData_obj::lime_bitmap_data_get_prem_alpha;

 ::Dynamic BitmapData_obj::lime_bitmap_data_set_prem_alpha;


hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__new(int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor, ::Dynamic gpuMode) {
	hx::ObjectPtr< BitmapData_obj > __this = new BitmapData_obj();
	__this->__construct(width,height,__o_transparent,__o_fillColor,gpuMode);
	return __this;
}

hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor, ::Dynamic gpuMode) {
	BitmapData_obj *__this = (BitmapData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BitmapData_obj), true, "openfl._legacy.display.BitmapData"));
	*(void **)__this = BitmapData_obj::_hx_vtable;
	__this->__construct(width,height,__o_transparent,__o_fillColor,gpuMode);
	return __this;
}

BitmapData_obj::BitmapData_obj()
{
}

void BitmapData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapData);
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(transparent,"transparent");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(_hx___handle,"__handle");
	HX_MARK_MEMBER_NAME(_hx___transparent,"__transparent");
	HX_MARK_END_CLASS();
}

void BitmapData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(transparent,"transparent");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(_hx___handle,"__handle");
	HX_VISIT_MEMBER_NAME(_hx___transparent,"__transparent");
}

hx::Val BitmapData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( inCallProp == hx::paccAlways ? get_rect() : rect ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		if (HX_FIELD_EQ(inName,"lock") ) { return hx::Val( lock_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( inCallProp == hx::paccAlways ? get_width() : width ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn() ); }
		if (HX_FIELD_EQ(inName,"noise") ) { return hx::Val( noise_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( inCallProp == hx::paccAlways ? get_height() : height ); }
		if (HX_FIELD_EQ(inName,"encode") ) { return hx::Val( encode_dyn() ); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return hx::Val( scroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return hx::Val( unlock_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__handle") ) { return hx::Val( _hx___handle ); }
		if (HX_FIELD_EQ(inName,"dumpBits") ) { return hx::Val( dumpBits_dyn() ); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixel") ) { return hx::Val( getPixel_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFlags") ) { return hx::Val( setFlags_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixel") ) { return hx::Val( setPixel_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rect") ) { return hx::Val( get_rect_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"floodFill") ) { return hx::Val( floodFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixels") ) { return hx::Val( getPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVector") ) { return hx::Val( getVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFormat") ) { return hx::Val( setFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixels") ) { return hx::Val( setPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVector") ) { return hx::Val( setVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"threshold") ) { return hx::Val( threshold_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return hx::Val( copyPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"fillRectEx") ) { return hx::Val( fillRectEx_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { return hx::Val( getPixel32_dyn() ); }
		if (HX_FIELD_EQ(inName,"paletteMap") ) { return hx::Val( paletteMap_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { return hx::Val( setPixel32_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { return hx::Val( inCallProp == hx::paccAlways ? get_transparent() : transparent ); }
		if (HX_FIELD_EQ(inName,"applyFilter") ) { return hx::Val( applyFilter_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { return hx::Val( copyChannel_dyn() ); }
		if (HX_FIELD_EQ(inName,"perlinNoise") ) { return hx::Val( perlinNoise_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__transparent") ) { return hx::Val( _hx___transparent ); }
		if (HX_FIELD_EQ(inName,"multiplyAlpha") ) { return hx::Val( multiplyAlpha_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unmultiplyAlpha") ) { return hx::Val( unmultiplyAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"__drawToSurface") ) { return hx::Val( _hx___drawToSurface_dyn() ); }
		if (HX_FIELD_EQ(inName,"__loadFromBytes") ) { return hx::Val( _hx___loadFromBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_transparent") ) { return hx::Val( get_transparent_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"premultipliedAlpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_premultipliedAlpha() ); }
		if (HX_FIELD_EQ(inName,"generateFilterRect") ) { return hx::Val( generateFilterRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { return hx::Val( getColorBoundsRect_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createHardwareSurface") ) { return hx::Val( createHardwareSurface_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"destroyHardwareSurface") ) { return hx::Val( destroyHardwareSurface_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_premultipliedAlpha") ) { return hx::Val( get_premultipliedAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_premultipliedAlpha") ) { return hx::Val( set_premultipliedAlpha_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BitmapData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { outValue = load_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sameValue") ) { outValue = sameValue_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__ucompare") ) { outValue = _hx___ucompare_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"createColor") ) { outValue = createColor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__flipPixel") ) { outValue = _hx___flipPixel_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"extractAlpha") ) { outValue = extractAlpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"extractColor") ) { outValue = extractColor_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getRGBAPixels") ) { outValue = getRGBAPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFromBytes") ) { outValue = loadFromBytes_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"loadFromHaxeBytes") ) { outValue = loadFromHaxeBytes_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_load") ) { outValue = ( lime_bitmap_data_load ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_copy") ) { outValue = ( lime_bitmap_data_copy ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_fill") ) { outValue = ( lime_bitmap_data_fill ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_clear") ) { outValue = ( lime_bitmap_data_clear ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_clone") ) { outValue = ( lime_bitmap_data_clone ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_width") ) { outValue = ( lime_bitmap_data_width ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_noise") ) { outValue = ( lime_bitmap_data_noise ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_create") ) { outValue = ( lime_bitmap_data_create ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_scroll") ) { outValue = ( lime_bitmap_data_scroll ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_height") ) { outValue = ( lime_bitmap_data_height ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_encode") ) { outValue = ( lime_bitmap_data_encode ); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_dispose") ) { outValue = ( lime_bitmap_data_dispose ); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_get_pixel") ) { outValue = ( lime_bitmap_data_get_pixel ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_get_array") ) { outValue = ( lime_bitmap_data_get_array ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_set_pixel") ) { outValue = ( lime_bitmap_data_set_pixel ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_set_bytes") ) { outValue = ( lime_bitmap_data_set_bytes ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_set_array") ) { outValue = ( lime_bitmap_data_set_array ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_set_flags") ) { outValue = ( lime_bitmap_data_set_flags ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_dump_bits") ) { outValue = ( lime_bitmap_data_dump_bits ); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_from_bytes") ) { outValue = ( lime_bitmap_data_from_bytes ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_get_pixels") ) { outValue = ( lime_bitmap_data_get_pixels ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_set_format") ) { outValue = ( lime_bitmap_data_set_format ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_flood_fill") ) { outValue = ( lime_bitmap_data_flood_fill ); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_get_pixel32") ) { outValue = ( lime_bitmap_data_get_pixel32 ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_set_pixel32") ) { outValue = ( lime_bitmap_data_set_pixel32 ); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_apply_filter") ) { outValue = ( lime_bitmap_data_apply_filter ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_copy_channel") ) { outValue = ( lime_bitmap_data_copy_channel ); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"lime_render_surface_to_surface") ) { outValue = ( lime_render_surface_to_surface ); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_get_pixel_rgba") ) { outValue = ( lime_bitmap_data_get_pixel_rgba ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_set_pixel_rgba") ) { outValue = ( lime_bitmap_data_set_pixel_rgba ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_multiply_alpha") ) { outValue = ( lime_bitmap_data_multiply_alpha ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_get_prem_alpha") ) { outValue = ( lime_bitmap_data_get_prem_alpha ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_set_prem_alpha") ) { outValue = ( lime_bitmap_data_set_prem_alpha ); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_color_transform") ) { outValue = ( lime_bitmap_data_color_transform ); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_get_transparent") ) { outValue = ( lime_bitmap_data_get_transparent ); return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_unmultiply_alpha") ) { outValue = ( lime_bitmap_data_unmultiply_alpha ); return true; }
		break;
	case 37:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_generate_filter_rect") ) { outValue = ( lime_bitmap_data_generate_filter_rect ); return true; }
		break;
	case 38:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_get_color_bounds_rect") ) { outValue = ( lime_bitmap_data_get_color_bounds_rect ); return true; }
		break;
	case 40:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_create_hardware_surface") ) { outValue = ( lime_bitmap_data_create_hardware_surface ); return true; }
		break;
	case 41:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_destroy_hardware_surface") ) { outValue = ( lime_bitmap_data_destroy_hardware_surface ); return true; }
	}
	return false;
}

hx::Val BitmapData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__handle") ) { _hx___handle=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { transparent=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__transparent") ) { _hx___transparent=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"premultipliedAlpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_premultipliedAlpha(inValue.Cast< bool >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BitmapData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 21:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_load") ) { lime_bitmap_data_load=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_copy") ) { lime_bitmap_data_copy=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_fill") ) { lime_bitmap_data_fill=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_clear") ) { lime_bitmap_data_clear=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_clone") ) { lime_bitmap_data_clone=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_width") ) { lime_bitmap_data_width=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_noise") ) { lime_bitmap_data_noise=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_create") ) { lime_bitmap_data_create=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_scroll") ) { lime_bitmap_data_scroll=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_height") ) { lime_bitmap_data_height=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_encode") ) { lime_bitmap_data_encode=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_dispose") ) { lime_bitmap_data_dispose=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_get_pixel") ) { lime_bitmap_data_get_pixel=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_get_array") ) { lime_bitmap_data_get_array=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_set_pixel") ) { lime_bitmap_data_set_pixel=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_set_bytes") ) { lime_bitmap_data_set_bytes=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_set_array") ) { lime_bitmap_data_set_array=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_set_flags") ) { lime_bitmap_data_set_flags=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_dump_bits") ) { lime_bitmap_data_dump_bits=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_from_bytes") ) { lime_bitmap_data_from_bytes=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_get_pixels") ) { lime_bitmap_data_get_pixels=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_set_format") ) { lime_bitmap_data_set_format=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_flood_fill") ) { lime_bitmap_data_flood_fill=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_get_pixel32") ) { lime_bitmap_data_get_pixel32=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_set_pixel32") ) { lime_bitmap_data_set_pixel32=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_apply_filter") ) { lime_bitmap_data_apply_filter=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_copy_channel") ) { lime_bitmap_data_copy_channel=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"lime_render_surface_to_surface") ) { lime_render_surface_to_surface=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_get_pixel_rgba") ) { lime_bitmap_data_get_pixel_rgba=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_set_pixel_rgba") ) { lime_bitmap_data_set_pixel_rgba=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_multiply_alpha") ) { lime_bitmap_data_multiply_alpha=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_get_prem_alpha") ) { lime_bitmap_data_get_prem_alpha=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_set_prem_alpha") ) { lime_bitmap_data_set_prem_alpha=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_color_transform") ) { lime_bitmap_data_color_transform=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_get_transparent") ) { lime_bitmap_data_get_transparent=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_unmultiply_alpha") ) { lime_bitmap_data_unmultiply_alpha=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 37:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_generate_filter_rect") ) { lime_bitmap_data_generate_filter_rect=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 38:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_get_color_bounds_rect") ) { lime_bitmap_data_get_color_bounds_rect=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 40:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_create_hardware_surface") ) { lime_bitmap_data_create_hardware_surface=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 41:
		if (HX_FIELD_EQ(inName,"lime_bitmap_data_destroy_hardware_surface") ) { lime_bitmap_data_destroy_hardware_surface=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void BitmapData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("premultipliedAlpha","\x28","\x8e","\x5c","\x1a"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("__handle","\xc8","\xee","\x2c","\x60"));
	outFields->push(HX_HCSTRING("__transparent","\x32","\x6c","\x32","\x6b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapData_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(BitmapData_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(BitmapData_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,transparent),HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22")},
	{hx::fsInt,(int)offsetof(BitmapData_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BitmapData_obj,_hx___handle),HX_HCSTRING("__handle","\xc8","\xee","\x2c","\x60")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___transparent),HX_HCSTRING("__transparent","\x32","\x6c","\x32","\x6b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BitmapData_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &BitmapData_obj::CLEAR,HX_HCSTRING("CLEAR","\x6d","\xa9","\x49","\xc6")},
	{hx::fsInt,(void *) &BitmapData_obj::BLACK,HX_HCSTRING("BLACK","\x9f","\x0d","\xe0","\x32")},
	{hx::fsInt,(void *) &BitmapData_obj::WHITE,HX_HCSTRING("WHITE","\x89","\x82","\xab","\x47")},
	{hx::fsInt,(void *) &BitmapData_obj::RED,HX_HCSTRING("RED","\x31","\x75","\x3e","\x00")},
	{hx::fsInt,(void *) &BitmapData_obj::GREEN,HX_HCSTRING("GREEN","\xa3","\x46","\xdb","\x17")},
	{hx::fsInt,(void *) &BitmapData_obj::BLUE,HX_HCSTRING("BLUE","\x9a","\x0a","\xda","\x2b")},
	{hx::fsString,(void *) &BitmapData_obj::PNG,HX_HCSTRING("PNG","\x89","\xf8","\x3c","\x00")},
	{hx::fsString,(void *) &BitmapData_obj::JPG,HX_HCSTRING("JPG","\xc1","\x6c","\x38","\x00")},
	{hx::fsInt,(void *) &BitmapData_obj::TRANSPARENT,HX_HCSTRING("TRANSPARENT","\x32","\x37","\xf6","\xf8")},
	{hx::fsInt,(void *) &BitmapData_obj::HARDWARE,HX_HCSTRING("HARDWARE","\xa8","\x72","\x59","\xcf")},
	{hx::fsInt,(void *) &BitmapData_obj::FORMAT_8888,HX_HCSTRING("FORMAT_8888","\x48","\x7b","\x79","\x56")},
	{hx::fsInt,(void *) &BitmapData_obj::FORMAT_4444,HX_HCSTRING("FORMAT_4444","\x48","\x94","\xd1","\x53")},
	{hx::fsInt,(void *) &BitmapData_obj::FORMAT_565,HX_HCSTRING("FORMAT_565","\x6c","\x4e","\xc8","\x1a")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_create,HX_HCSTRING("lime_bitmap_data_create","\x4b","\x52","\x59","\x03")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_load,HX_HCSTRING("lime_bitmap_data_load","\xb5","\xc3","\x38","\x8d")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_from_bytes,HX_HCSTRING("lime_bitmap_data_from_bytes","\x65","\x1f","\xf2","\xce")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_clear,HX_HCSTRING("lime_bitmap_data_clear","\x1e","\xa5","\xde","\xd3")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_clone,HX_HCSTRING("lime_bitmap_data_clone","\xee","\x46","\xe6","\xd3")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_apply_filter,HX_HCSTRING("lime_bitmap_data_apply_filter","\x38","\x26","\xf4","\x12")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_color_transform,HX_HCSTRING("lime_bitmap_data_color_transform","\x21","\x87","\x88","\x74")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_copy,HX_HCSTRING("lime_bitmap_data_copy","\x44","\xe5","\x45","\x87")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_copy_channel,HX_HCSTRING("lime_bitmap_data_copy_channel","\x88","\x23","\xdd","\xd5")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_fill,HX_HCSTRING("lime_bitmap_data_fill","\x12","\xf8","\x3c","\x89")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_get_pixels,HX_HCSTRING("lime_bitmap_data_get_pixels","\xc5","\x9d","\xf4","\x83")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_get_pixel,HX_HCSTRING("lime_bitmap_data_get_pixel","\xee","\xf2","\xff","\xfb")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_get_pixel32,HX_HCSTRING("lime_bitmap_data_get_pixel32","\x0d","\x37","\x15","\xf2")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_get_pixel_rgba,HX_HCSTRING("lime_bitmap_data_get_pixel_rgba","\xe5","\x9a","\x9c","\xac")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_get_array,HX_HCSTRING("lime_bitmap_data_get_array","\x01","\x9a","\xeb","\x5e")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_get_color_bounds_rect,HX_HCSTRING("lime_bitmap_data_get_color_bounds_rect","\xba","\xaa","\xf3","\xe3")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_scroll,HX_HCSTRING("lime_bitmap_data_scroll","\x5c","\xc3","\xae","\xce")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_set_pixel,HX_HCSTRING("lime_bitmap_data_set_pixel","\xfa","\xde","\x50","\xdf")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_set_pixel32,HX_HCSTRING("lime_bitmap_data_set_pixel32","\x19","\x3e","\x82","\xfc")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_set_pixel_rgba,HX_HCSTRING("lime_bitmap_data_set_pixel_rgba","\x59","\x83","\xbc","\xcc")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_set_bytes,HX_HCSTRING("lime_bitmap_data_set_bytes","\xdf","\x20","\x45","\xda")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_set_format,HX_HCSTRING("lime_bitmap_data_set_format","\x43","\xdc","\x56","\xf8")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_set_array,HX_HCSTRING("lime_bitmap_data_set_array","\x0d","\x86","\x3c","\x42")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_create_hardware_surface,HX_HCSTRING("lime_bitmap_data_create_hardware_surface","\x0a","\xe2","\xc0","\xcb")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_destroy_hardware_surface,HX_HCSTRING("lime_bitmap_data_destroy_hardware_surface","\x8a","\xfd","\xf8","\xe2")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_dispose,HX_HCSTRING("lime_bitmap_data_dispose","\x70","\x7a","\xb0","\x94")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_generate_filter_rect,HX_HCSTRING("lime_bitmap_data_generate_filter_rect","\x90","\x4e","\xab","\x6f")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_render_surface_to_surface,HX_HCSTRING("lime_render_surface_to_surface","\xda","\x75","\xe9","\xfe")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_height,HX_HCSTRING("lime_bitmap_data_height","\x36","\xf3","\x95","\x89")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_width,HX_HCSTRING("lime_bitmap_data_width","\x97","\xe9","\xe5","\x55")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_get_transparent,HX_HCSTRING("lime_bitmap_data_get_transparent","\xba","\x95","\x37","\x5e")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_set_flags,HX_HCSTRING("lime_bitmap_data_set_flags","\xbb","\x43","\x39","\x1f")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_encode,HX_HCSTRING("lime_bitmap_data_encode","\x65","\xdd","\x2d","\x81")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_dump_bits,HX_HCSTRING("lime_bitmap_data_dump_bits","\x42","\x0d","\xd2","\xf0")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_flood_fill,HX_HCSTRING("lime_bitmap_data_flood_fill","\xb3","\x46","\x72","\x69")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_noise,HX_HCSTRING("lime_bitmap_data_noise","\x2b","\xc3","\x45","\x2b")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_unmultiply_alpha,HX_HCSTRING("lime_bitmap_data_unmultiply_alpha","\xeb","\x37","\xa7","\xcf")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_multiply_alpha,HX_HCSTRING("lime_bitmap_data_multiply_alpha","\x12","\x56","\x11","\x21")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_get_prem_alpha,HX_HCSTRING("lime_bitmap_data_get_prem_alpha","\xa1","\x93","\x3f","\x15")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::lime_bitmap_data_set_prem_alpha,HX_HCSTRING("lime_bitmap_data_set_prem_alpha","\x15","\x7c","\x5f","\x35")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BitmapData_obj_sMemberFields[] = {
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("__handle","\xc8","\xee","\x2c","\x60"),
	HX_HCSTRING("__transparent","\x32","\x6c","\x32","\x6b"),
	HX_HCSTRING("applyFilter","\xc6","\xdf","\x2f","\xc1"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("createHardwareSurface","\xc9","\xac","\x29","\x88"),
	HX_HCSTRING("destroyHardwareSurface","\x8b","\x54","\xe1","\x85"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("dumpBits","\x5a","\x4e","\xbb","\x96"),
	HX_HCSTRING("encode","\x16","\xf2","\xe3","\xf9"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("fillRectEx","\x9a","\xa1","\x8a","\x01"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("generateFilterRect","\x91","\x2c","\x98","\x7e"),
	HX_HCSTRING("getColorBoundsRect","\x86","\xad","\xe8","\x80"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("getVector","\xf9","\x39","\xb4","\x13"),
	HX_HCSTRING("lock","\xeb","\x9b","\xb7","\x47"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("multiplyAlpha","\x9a","\xf2","\x1c","\x6b"),
	HX_HCSTRING("noise","\x9a","\x8f","\xc2","\x9f"),
	HX_HCSTRING("paletteMap","\xe1","\xae","\x2b","\x06"),
	HX_HCSTRING("perlinNoise","\x66","\x84","\xf8","\x8b"),
	HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47"),
	HX_HCSTRING("setFlags","\x45","\x94","\xc0","\x10"),
	HX_HCSTRING("setFormat","\x79","\x04","\x36","\x5d"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("setVector","\x05","\x26","\x05","\xf7"),
	HX_HCSTRING("threshold","\xab","\xc3","\xa3","\x34"),
	HX_HCSTRING("unlock","\xc4","\xa2","\x8c","\x65"),
	HX_HCSTRING("unmultiplyAlpha","\xa1","\xc8","\x96","\x28"),
	HX_HCSTRING("__drawToSurface","\x2e","\xea","\xb6","\x73"),
	HX_HCSTRING("__loadFromBytes","\x7b","\xfc","\x38","\x7c"),
	HX_HCSTRING("get_premultipliedAlpha","\x71","\x07","\xf1","\x73"),
	HX_HCSTRING("set_premultipliedAlpha","\xe5","\x83","\x9c","\xa7"),
	HX_HCSTRING("get_rect","\xad","\x08","\x62","\xcb"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("get_transparent","\xe9","\xe2","\x9b","\xe3"),
	::String(null()) };

static void BitmapData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapData_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BitmapData_obj::CLEAR,"CLEAR");
	HX_MARK_MEMBER_NAME(BitmapData_obj::BLACK,"BLACK");
	HX_MARK_MEMBER_NAME(BitmapData_obj::WHITE,"WHITE");
	HX_MARK_MEMBER_NAME(BitmapData_obj::RED,"RED");
	HX_MARK_MEMBER_NAME(BitmapData_obj::GREEN,"GREEN");
	HX_MARK_MEMBER_NAME(BitmapData_obj::BLUE,"BLUE");
	HX_MARK_MEMBER_NAME(BitmapData_obj::PNG,"PNG");
	HX_MARK_MEMBER_NAME(BitmapData_obj::JPG,"JPG");
	HX_MARK_MEMBER_NAME(BitmapData_obj::TRANSPARENT,"TRANSPARENT");
	HX_MARK_MEMBER_NAME(BitmapData_obj::HARDWARE,"HARDWARE");
	HX_MARK_MEMBER_NAME(BitmapData_obj::FORMAT_8888,"FORMAT_8888");
	HX_MARK_MEMBER_NAME(BitmapData_obj::FORMAT_4444,"FORMAT_4444");
	HX_MARK_MEMBER_NAME(BitmapData_obj::FORMAT_565,"FORMAT_565");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_create,"lime_bitmap_data_create");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_load,"lime_bitmap_data_load");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_from_bytes,"lime_bitmap_data_from_bytes");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_clear,"lime_bitmap_data_clear");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_clone,"lime_bitmap_data_clone");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_apply_filter,"lime_bitmap_data_apply_filter");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_color_transform,"lime_bitmap_data_color_transform");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_copy,"lime_bitmap_data_copy");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_copy_channel,"lime_bitmap_data_copy_channel");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_fill,"lime_bitmap_data_fill");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_get_pixels,"lime_bitmap_data_get_pixels");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_get_pixel,"lime_bitmap_data_get_pixel");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_get_pixel32,"lime_bitmap_data_get_pixel32");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_get_pixel_rgba,"lime_bitmap_data_get_pixel_rgba");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_get_array,"lime_bitmap_data_get_array");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_get_color_bounds_rect,"lime_bitmap_data_get_color_bounds_rect");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_scroll,"lime_bitmap_data_scroll");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_set_pixel,"lime_bitmap_data_set_pixel");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_set_pixel32,"lime_bitmap_data_set_pixel32");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_set_pixel_rgba,"lime_bitmap_data_set_pixel_rgba");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_set_bytes,"lime_bitmap_data_set_bytes");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_set_format,"lime_bitmap_data_set_format");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_set_array,"lime_bitmap_data_set_array");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_create_hardware_surface,"lime_bitmap_data_create_hardware_surface");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_destroy_hardware_surface,"lime_bitmap_data_destroy_hardware_surface");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_dispose,"lime_bitmap_data_dispose");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_generate_filter_rect,"lime_bitmap_data_generate_filter_rect");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_render_surface_to_surface,"lime_render_surface_to_surface");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_height,"lime_bitmap_data_height");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_width,"lime_bitmap_data_width");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_get_transparent,"lime_bitmap_data_get_transparent");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_set_flags,"lime_bitmap_data_set_flags");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_encode,"lime_bitmap_data_encode");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_dump_bits,"lime_bitmap_data_dump_bits");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_flood_fill,"lime_bitmap_data_flood_fill");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_noise,"lime_bitmap_data_noise");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_unmultiply_alpha,"lime_bitmap_data_unmultiply_alpha");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_multiply_alpha,"lime_bitmap_data_multiply_alpha");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_get_prem_alpha,"lime_bitmap_data_get_prem_alpha");
	HX_MARK_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_set_prem_alpha,"lime_bitmap_data_set_prem_alpha");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapData_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::CLEAR,"CLEAR");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::BLACK,"BLACK");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::WHITE,"WHITE");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::RED,"RED");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::GREEN,"GREEN");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::BLUE,"BLUE");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::PNG,"PNG");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::JPG,"JPG");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::TRANSPARENT,"TRANSPARENT");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::HARDWARE,"HARDWARE");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::FORMAT_8888,"FORMAT_8888");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::FORMAT_4444,"FORMAT_4444");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::FORMAT_565,"FORMAT_565");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_create,"lime_bitmap_data_create");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_load,"lime_bitmap_data_load");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_from_bytes,"lime_bitmap_data_from_bytes");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_clear,"lime_bitmap_data_clear");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_clone,"lime_bitmap_data_clone");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_apply_filter,"lime_bitmap_data_apply_filter");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_color_transform,"lime_bitmap_data_color_transform");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_copy,"lime_bitmap_data_copy");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_copy_channel,"lime_bitmap_data_copy_channel");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_fill,"lime_bitmap_data_fill");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_get_pixels,"lime_bitmap_data_get_pixels");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_get_pixel,"lime_bitmap_data_get_pixel");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_get_pixel32,"lime_bitmap_data_get_pixel32");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_get_pixel_rgba,"lime_bitmap_data_get_pixel_rgba");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_get_array,"lime_bitmap_data_get_array");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_get_color_bounds_rect,"lime_bitmap_data_get_color_bounds_rect");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_scroll,"lime_bitmap_data_scroll");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_set_pixel,"lime_bitmap_data_set_pixel");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_set_pixel32,"lime_bitmap_data_set_pixel32");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_set_pixel_rgba,"lime_bitmap_data_set_pixel_rgba");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_set_bytes,"lime_bitmap_data_set_bytes");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_set_format,"lime_bitmap_data_set_format");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_set_array,"lime_bitmap_data_set_array");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_create_hardware_surface,"lime_bitmap_data_create_hardware_surface");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_destroy_hardware_surface,"lime_bitmap_data_destroy_hardware_surface");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_dispose,"lime_bitmap_data_dispose");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_generate_filter_rect,"lime_bitmap_data_generate_filter_rect");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_render_surface_to_surface,"lime_render_surface_to_surface");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_height,"lime_bitmap_data_height");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_width,"lime_bitmap_data_width");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_get_transparent,"lime_bitmap_data_get_transparent");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_set_flags,"lime_bitmap_data_set_flags");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_encode,"lime_bitmap_data_encode");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_dump_bits,"lime_bitmap_data_dump_bits");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_flood_fill,"lime_bitmap_data_flood_fill");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_noise,"lime_bitmap_data_noise");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_unmultiply_alpha,"lime_bitmap_data_unmultiply_alpha");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_multiply_alpha,"lime_bitmap_data_multiply_alpha");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_get_prem_alpha,"lime_bitmap_data_get_prem_alpha");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::lime_bitmap_data_set_prem_alpha,"lime_bitmap_data_set_prem_alpha");
};

#endif

hx::Class BitmapData_obj::__mClass;

static ::String BitmapData_obj_sStaticFields[] = {
	HX_HCSTRING("CLEAR","\x6d","\xa9","\x49","\xc6"),
	HX_HCSTRING("BLACK","\x9f","\x0d","\xe0","\x32"),
	HX_HCSTRING("WHITE","\x89","\x82","\xab","\x47"),
	HX_HCSTRING("RED","\x31","\x75","\x3e","\x00"),
	HX_HCSTRING("GREEN","\xa3","\x46","\xdb","\x17"),
	HX_HCSTRING("BLUE","\x9a","\x0a","\xda","\x2b"),
	HX_HCSTRING("PNG","\x89","\xf8","\x3c","\x00"),
	HX_HCSTRING("JPG","\xc1","\x6c","\x38","\x00"),
	HX_HCSTRING("TRANSPARENT","\x32","\x37","\xf6","\xf8"),
	HX_HCSTRING("HARDWARE","\xa8","\x72","\x59","\xcf"),
	HX_HCSTRING("FORMAT_8888","\x48","\x7b","\x79","\x56"),
	HX_HCSTRING("FORMAT_4444","\x48","\x94","\xd1","\x53"),
	HX_HCSTRING("FORMAT_565","\x6c","\x4e","\xc8","\x1a"),
	HX_HCSTRING("createColor","\xc7","\xa8","\xd7","\x73"),
	HX_HCSTRING("extractAlpha","\x5d","\xb6","\x1b","\x41"),
	HX_HCSTRING("extractColor","\x62","\x80","\xe1","\x69"),
	HX_HCSTRING("getRGBAPixels","\x17","\xd3","\xc2","\x8d"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("loadFromBytes","\x9b","\xc3","\x86","\xf4"),
	HX_HCSTRING("loadFromHaxeBytes","\x95","\x8d","\xb4","\x66"),
	HX_HCSTRING("sameValue","\x2b","\x5a","\x24","\x4a"),
	HX_HCSTRING("__flipPixel","\x79","\x99","\xbb","\x87"),
	HX_HCSTRING("__ucompare","\xf0","\xb3","\xaf","\x4a"),
	HX_HCSTRING("lime_bitmap_data_create","\x4b","\x52","\x59","\x03"),
	HX_HCSTRING("lime_bitmap_data_load","\xb5","\xc3","\x38","\x8d"),
	HX_HCSTRING("lime_bitmap_data_from_bytes","\x65","\x1f","\xf2","\xce"),
	HX_HCSTRING("lime_bitmap_data_clear","\x1e","\xa5","\xde","\xd3"),
	HX_HCSTRING("lime_bitmap_data_clone","\xee","\x46","\xe6","\xd3"),
	HX_HCSTRING("lime_bitmap_data_apply_filter","\x38","\x26","\xf4","\x12"),
	HX_HCSTRING("lime_bitmap_data_color_transform","\x21","\x87","\x88","\x74"),
	HX_HCSTRING("lime_bitmap_data_copy","\x44","\xe5","\x45","\x87"),
	HX_HCSTRING("lime_bitmap_data_copy_channel","\x88","\x23","\xdd","\xd5"),
	HX_HCSTRING("lime_bitmap_data_fill","\x12","\xf8","\x3c","\x89"),
	HX_HCSTRING("lime_bitmap_data_get_pixels","\xc5","\x9d","\xf4","\x83"),
	HX_HCSTRING("lime_bitmap_data_get_pixel","\xee","\xf2","\xff","\xfb"),
	HX_HCSTRING("lime_bitmap_data_get_pixel32","\x0d","\x37","\x15","\xf2"),
	HX_HCSTRING("lime_bitmap_data_get_pixel_rgba","\xe5","\x9a","\x9c","\xac"),
	HX_HCSTRING("lime_bitmap_data_get_array","\x01","\x9a","\xeb","\x5e"),
	HX_HCSTRING("lime_bitmap_data_get_color_bounds_rect","\xba","\xaa","\xf3","\xe3"),
	HX_HCSTRING("lime_bitmap_data_scroll","\x5c","\xc3","\xae","\xce"),
	HX_HCSTRING("lime_bitmap_data_set_pixel","\xfa","\xde","\x50","\xdf"),
	HX_HCSTRING("lime_bitmap_data_set_pixel32","\x19","\x3e","\x82","\xfc"),
	HX_HCSTRING("lime_bitmap_data_set_pixel_rgba","\x59","\x83","\xbc","\xcc"),
	HX_HCSTRING("lime_bitmap_data_set_bytes","\xdf","\x20","\x45","\xda"),
	HX_HCSTRING("lime_bitmap_data_set_format","\x43","\xdc","\x56","\xf8"),
	HX_HCSTRING("lime_bitmap_data_set_array","\x0d","\x86","\x3c","\x42"),
	HX_HCSTRING("lime_bitmap_data_create_hardware_surface","\x0a","\xe2","\xc0","\xcb"),
	HX_HCSTRING("lime_bitmap_data_destroy_hardware_surface","\x8a","\xfd","\xf8","\xe2"),
	HX_HCSTRING("lime_bitmap_data_dispose","\x70","\x7a","\xb0","\x94"),
	HX_HCSTRING("lime_bitmap_data_generate_filter_rect","\x90","\x4e","\xab","\x6f"),
	HX_HCSTRING("lime_render_surface_to_surface","\xda","\x75","\xe9","\xfe"),
	HX_HCSTRING("lime_bitmap_data_height","\x36","\xf3","\x95","\x89"),
	HX_HCSTRING("lime_bitmap_data_width","\x97","\xe9","\xe5","\x55"),
	HX_HCSTRING("lime_bitmap_data_get_transparent","\xba","\x95","\x37","\x5e"),
	HX_HCSTRING("lime_bitmap_data_set_flags","\xbb","\x43","\x39","\x1f"),
	HX_HCSTRING("lime_bitmap_data_encode","\x65","\xdd","\x2d","\x81"),
	HX_HCSTRING("lime_bitmap_data_dump_bits","\x42","\x0d","\xd2","\xf0"),
	HX_HCSTRING("lime_bitmap_data_flood_fill","\xb3","\x46","\x72","\x69"),
	HX_HCSTRING("lime_bitmap_data_noise","\x2b","\xc3","\x45","\x2b"),
	HX_HCSTRING("lime_bitmap_data_unmultiply_alpha","\xeb","\x37","\xa7","\xcf"),
	HX_HCSTRING("lime_bitmap_data_multiply_alpha","\x12","\x56","\x11","\x21"),
	HX_HCSTRING("lime_bitmap_data_get_prem_alpha","\xa1","\x93","\x3f","\x15"),
	HX_HCSTRING("lime_bitmap_data_set_prem_alpha","\x15","\x7c","\x5f","\x35"),
	::String(null())
};

void BitmapData_obj::__register()
{
	hx::Object *dummy = new BitmapData_obj;
	BitmapData_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._legacy.display.BitmapData","\x69","\x89","\x8d","\x97");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BitmapData_obj::__GetStatic;
	__mClass->mSetStaticField = &BitmapData_obj::__SetStatic;
	__mClass->mMarkFunc = BitmapData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BitmapData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BitmapData_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_28_boot)
HXDLIN(  28)		CLEAR = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_29_boot)
HXDLIN(  29)		BLACK = (int)-16777216;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_30_boot)
HXDLIN(  30)		WHITE = (int)-16777216;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_31_boot)
HXDLIN(  31)		RED = (int)-65536;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_32_boot)
HXDLIN(  32)		GREEN = (int)-16711936;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_33_boot)
HXDLIN(  33)		BLUE = (int)-16776961;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_34_boot)
HXDLIN(  34)		PNG = HX_("png",a9,5c,55,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_35_boot)
HXDLIN(  35)		JPG = HX_("jpg",e1,d0,50,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_36_boot)
HXDLIN(  36)		TRANSPARENT = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_37_boot)
HXDLIN(  37)		HARDWARE = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_38_boot)
HXDLIN(  38)		FORMAT_8888 = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_39_boot)
HXDLIN(  39)		FORMAT_4444 = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_40_boot)
HXDLIN(  40)		FORMAT_565 = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_847_boot)
HXDLIN( 847)		lime_bitmap_data_create = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_create",ad,6a,7e,86),(int)-1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_848_boot)
HXDLIN( 848)		lime_bitmap_data_load = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_load",97,9f,85,7e),(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_849_boot)
HXDLIN( 849)		lime_bitmap_data_from_bytes = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_from_bytes",c7,10,c8,53),(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_850_boot)
HXDLIN( 850)		lime_bitmap_data_clear = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_clear",fc,2e,d2,05),(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_851_boot)
HXDLIN( 851)		lime_bitmap_data_clone = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_clone",cc,d0,d9,05),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_852_boot)
HXDLIN( 852)		lime_bitmap_data_apply_filter = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_apply_filter",1a,b4,32,ee),(int)5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_853_boot)
HXDLIN( 853)		lime_bitmap_data_color_transform = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_color_transform",7f,52,82,7c),(int)3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_854_boot)
HXDLIN( 854)		lime_bitmap_data_copy = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_copy",26,c1,92,78),(int)5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_855_boot)
HXDLIN( 855)		lime_bitmap_data_copy_channel = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_copy_channel",6a,b1,1b,b1),(int)-1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_856_boot)
HXDLIN( 856)		lime_bitmap_data_fill = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_fill",f4,d3,89,7a),(int)4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_857_boot)
HXDLIN( 857)		lime_bitmap_data_get_pixels = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_get_pixels",27,8f,ca,08),(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_858_boot)
HXDLIN( 858)		lime_bitmap_data_get_pixel = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_get_pixel",cc,c3,e0,5b),(int)3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_859_boot)
HXDLIN( 859)		lime_bitmap_data_get_pixel32 = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_get_pixel32",6b,7b,72,a8),(int)3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_860_boot)
HXDLIN( 860)		lime_bitmap_data_get_pixel_rgba = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_get_pixel_rgba",47,e5,03,bf),(int)3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_862_boot)
HXDLIN( 862)		lime_bitmap_data_get_array = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_get_array",df,6a,cc,be),(int)3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_864_boot)
HXDLIN( 864)		lime_bitmap_data_get_color_bounds_rect = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_get_color_bounds_rect",98,50,b9,76),(int)5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_865_boot)
HXDLIN( 865)		lime_bitmap_data_scroll = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_scroll",be,db,d3,51),(int)3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_866_boot)
HXDLIN( 866)		lime_bitmap_data_set_pixel = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_set_pixel",d8,af,31,3f),(int)4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_867_boot)
HXDLIN( 867)		lime_bitmap_data_set_pixel32 = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_set_pixel32",77,82,df,b2),(int)4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_868_boot)
HXDLIN( 868)		lime_bitmap_data_set_pixel_rgba = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_set_pixel_rgba",bb,cd,23,df),(int)4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_869_boot)
HXDLIN( 869)		lime_bitmap_data_set_bytes = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_set_bytes",bd,f1,25,3a),(int)4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_870_boot)
HXDLIN( 870)		lime_bitmap_data_set_format = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_set_format",a5,cd,2c,7d),(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_872_boot)
HXDLIN( 872)		lime_bitmap_data_set_array = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_set_array",eb,56,1d,a2),(int)3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_873_boot)
HXDLIN( 873)		lime_bitmap_data_create_hardware_surface = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_create_hardware_surface",68,3b,a2,d7),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_874_boot)
HXDLIN( 874)		lime_bitmap_data_destroy_hardware_surface = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_destroy_hardware_surface",6c,d6,45,3c),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_876_boot)
HXDLIN( 876)		lime_bitmap_data_dispose = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_dispose",ce,b7,00,d2),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_877_boot)
HXDLIN( 877)		lime_bitmap_data_generate_filter_rect = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_generate_filter_rect",72,8e,dd,e8),(int)3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_878_boot)
HXDLIN( 878)		lime_render_surface_to_surface = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_render_surface_to_surface",b8,0d,67,fa),(int)-1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_879_boot)
HXDLIN( 879)		lime_bitmap_data_height = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_height",98,0b,bb,0c),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_880_boot)
HXDLIN( 880)		lime_bitmap_data_width = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_width",75,73,d9,87),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_881_boot)
HXDLIN( 881)		lime_bitmap_data_get_transparent = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_get_transparent",18,61,31,66),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_882_boot)
HXDLIN( 882)		lime_bitmap_data_set_flags = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_set_flags",99,14,1a,7f),(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_883_boot)
HXDLIN( 883)		lime_bitmap_data_encode = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_encode",c7,f5,52,04),(int)3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_884_boot)
HXDLIN( 884)		lime_bitmap_data_dump_bits = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_dump_bits",20,de,b2,50),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_885_boot)
HXDLIN( 885)		lime_bitmap_data_flood_fill = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_flood_fill",15,38,48,ee),(int)4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_886_boot)
HXDLIN( 886)		lime_bitmap_data_noise = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_noise",09,4d,39,5d),(int)-1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_887_boot)
HXDLIN( 887)		lime_bitmap_data_unmultiply_alpha = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_unmultiply_alpha",cd,5e,3f,c2),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_888_boot)
HXDLIN( 888)		lime_bitmap_data_multiply_alpha = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_multiply_alpha",74,a0,78,33),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_889_boot)
HXDLIN( 889)		lime_bitmap_data_get_prem_alpha = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_get_prem_alpha",03,de,a6,27),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8946ee628e93d59a_890_boot)
HXDLIN( 890)		lime_bitmap_data_set_prem_alpha = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_bitmap_data_set_prem_alpha",77,c6,c6,47),(int)2);
            	}
}

} // end namespace openfl
} // end namespace _legacy
} // end namespace display
