// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_OptimizedPerlin
#include <openfl/_legacy/display/OptimizedPerlin.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_438b7ff25af67245_967_new,"openfl._legacy.display.OptimizedPerlin","new",0x2e02d39d,"openfl._legacy.display.OptimizedPerlin.new","openfl/_legacy/display/BitmapData.hx",967,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_438b7ff25af67245_977_fill,"openfl._legacy.display.OptimizedPerlin","fill",0x0f2fa0a6,"openfl._legacy.display.OptimizedPerlin.fill","openfl/_legacy/display/BitmapData.hx",977,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_438b7ff25af67245_1091_octFreqPers,"openfl._legacy.display.OptimizedPerlin","octFreqPers",0xaeeba70b,"openfl._legacy.display.OptimizedPerlin.octFreqPers","openfl/_legacy/display/BitmapData.hx",1091,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_438b7ff25af67245_1114_seedOffset,"openfl._legacy.display.OptimizedPerlin","seedOffset",0xad5c4a47,"openfl._legacy.display.OptimizedPerlin.seedOffset","openfl/_legacy/display/BitmapData.hx",1114,0x0b92a012)
HX_LOCAL_STACK_FRAME(_hx_pos_438b7ff25af67245_898_boot,"openfl._legacy.display.OptimizedPerlin","boot",0x0c8f5655,"openfl._legacy.display.OptimizedPerlin.boot","openfl/_legacy/display/BitmapData.hx",898,0x0b92a012)
static const int _hx_array_data_df97c12b_9[] = {
	(int)151,(int)160,(int)137,(int)91,(int)90,(int)15,(int)131,(int)13,(int)201,(int)95,(int)96,(int)53,(int)194,(int)233,(int)7,(int)225,(int)140,(int)36,(int)103,(int)30,(int)69,(int)142,(int)8,(int)99,(int)37,(int)240,(int)21,(int)10,(int)23,(int)190,(int)6,(int)148,(int)247,(int)120,(int)234,(int)75,(int)0,(int)26,(int)197,(int)62,(int)94,(int)252,(int)219,(int)203,(int)117,(int)35,(int)11,(int)32,(int)57,(int)177,(int)33,(int)88,(int)237,(int)149,(int)56,(int)87,(int)174,(int)20,(int)125,(int)136,(int)171,(int)168,(int)68,(int)175,(int)74,(int)165,(int)71,(int)134,(int)139,(int)48,(int)27,(int)166,(int)77,(int)146,(int)158,(int)231,(int)83,(int)111,(int)229,(int)122,(int)60,(int)211,(int)133,(int)230,(int)220,(int)105,(int)92,(int)41,(int)55,(int)46,(int)245,(int)40,(int)244,(int)102,(int)143,(int)54,(int)65,(int)25,(int)63,(int)161,(int)1,(int)216,(int)80,(int)73,(int)209,(int)76,(int)132,(int)187,(int)208,(int)89,(int)18,(int)169,(int)200,(int)196,(int)135,(int)130,(int)116,(int)188,(int)159,(int)86,(int)164,(int)100,(int)109,(int)198,(int)173,(int)186,(int)3,(int)64,(int)52,(int)217,(int)226,(int)250,(int)124,(int)123,(int)5,(int)202,(int)38,(int)147,(int)118,(int)126,(int)255,(int)82,(int)85,(int)212,(int)207,(int)206,(int)59,(int)227,(int)47,(int)16,(int)58,(int)17,(int)182,(int)189,(int)28,(int)42,(int)223,(int)183,(int)170,(int)213,(int)119,(int)248,(int)152,(int)2,(int)44,(int)154,(int)163,(int)70,(int)221,(int)153,(int)101,(int)155,(int)167,(int)43,(int)172,(int)9,(int)129,(int)22,(int)39,(int)253,(int)19,(int)98,(int)108,(int)110,(int)79,(int)113,(int)224,(int)232,(int)178,(int)185,(int)112,(int)104,(int)218,(int)246,(int)97,(int)228,(int)251,(int)34,(int)242,(int)193,(int)238,(int)210,(int)144,(int)12,(int)191,(int)179,(int)162,(int)241,(int)81,(int)51,(int)145,(int)235,(int)249,(int)14,(int)239,(int)107,(int)49,(int)192,(int)214,(int)31,(int)181,(int)199,(int)106,(int)157,(int)184,(int)84,(int)204,(int)176,(int)115,(int)121,(int)50,(int)45,(int)127,(int)4,(int)150,(int)254,(int)138,(int)236,(int)205,(int)93,(int)222,(int)114,(int)67,(int)29,(int)24,(int)72,(int)243,(int)141,(int)128,(int)195,(int)78,(int)66,(int)215,(int)61,(int)156,(int)180,(int)151,(int)160,(int)137,(int)91,(int)90,(int)15,(int)131,(int)13,(int)201,(int)95,(int)96,(int)53,(int)194,(int)233,(int)7,(int)225,(int)140,(int)36,(int)103,(int)30,(int)69,(int)142,(int)8,(int)99,(int)37,(int)240,(int)21,(int)10,(int)23,(int)190,(int)6,(int)148,(int)247,(int)120,(int)234,(int)75,(int)0,(int)26,(int)197,(int)62,(int)94,(int)252,(int)219,(int)203,(int)117,(int)35,(int)11,(int)32,(int)57,(int)177,(int)33,(int)88,(int)237,(int)149,(int)56,(int)87,(int)174,(int)20,(int)125,(int)136,(int)171,(int)168,(int)68,(int)175,(int)74,(int)165,(int)71,(int)134,(int)139,(int)48,(int)27,(int)166,(int)77,(int)146,(int)158,(int)231,(int)83,(int)111,(int)229,(int)122,(int)60,(int)211,(int)133,(int)230,(int)220,(int)105,(int)92,(int)41,(int)55,(int)46,(int)245,(int)40,(int)244,(int)102,(int)143,(int)54,(int)65,(int)25,(int)63,(int)161,(int)1,(int)216,(int)80,(int)73,(int)209,(int)76,(int)132,(int)187,(int)208,(int)89,(int)18,(int)169,(int)200,(int)196,(int)135,(int)130,(int)116,(int)188,(int)159,(int)86,(int)164,(int)100,(int)109,(int)198,(int)173,(int)186,(int)3,(int)64,(int)52,(int)217,(int)226,(int)250,(int)124,(int)123,(int)5,(int)202,(int)38,(int)147,(int)118,(int)126,(int)255,(int)82,(int)85,(int)212,(int)207,(int)206,(int)59,(int)227,(int)47,(int)16,(int)58,(int)17,(int)182,(int)189,(int)28,(int)42,(int)223,(int)183,(int)170,(int)213,(int)119,(int)248,(int)152,(int)2,(int)44,(int)154,(int)163,(int)70,(int)221,(int)153,(int)101,(int)155,(int)167,(int)43,(int)172,(int)9,(int)129,(int)22,(int)39,(int)253,(int)19,(int)98,(int)108,(int)110,(int)79,(int)113,(int)224,(int)232,(int)178,(int)185,(int)112,(int)104,(int)218,(int)246,(int)97,(int)228,(int)251,(int)34,(int)242,(int)193,(int)238,(int)210,(int)144,(int)12,(int)191,(int)179,(int)162,(int)241,(int)81,(int)51,(int)145,(int)235,(int)249,(int)14,(int)239,(int)107,(int)49,(int)192,(int)214,(int)31,(int)181,(int)199,(int)106,(int)157,(int)184,(int)84,(int)204,(int)176,(int)115,(int)121,(int)50,(int)45,(int)127,(int)4,(int)150,(int)254,(int)138,(int)236,(int)205,(int)93,(int)222,(int)114,(int)67,(int)29,(int)24,(int)72,(int)243,(int)141,(int)128,(int)195,(int)78,(int)66,(int)215,(int)61,(int)156,(int)180,
};
namespace openfl{
namespace _legacy{
namespace display{

void OptimizedPerlin_obj::__construct(hx::Null< int >  __o_seed,hx::Null< int >  __o_numOctaves,hx::Null< Float >  __o_falloff){
int seed = __o_seed.Default(123);
int numOctaves = __o_numOctaves.Default(4);
Float falloff = __o_falloff.Default(((Float)0.5));
            	HX_STACKFRAME(&_hx_pos_438b7ff25af67245_967_new)
HXLINE( 969)		this->baseFactor = ((Float)0.015625);
HXLINE( 970)		this->octaves = numOctaves;
HXLINE( 971)		this->seedOffset(seed);
HXLINE( 972)		this->octFreqPers(falloff);
            	}

Dynamic OptimizedPerlin_obj::__CreateEmpty() { return new OptimizedPerlin_obj; }

void *OptimizedPerlin_obj::_hx_vtable = 0;

Dynamic OptimizedPerlin_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< OptimizedPerlin_obj > _hx_result = new OptimizedPerlin_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool OptimizedPerlin_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x675b77d1;
}

void OptimizedPerlin_obj::fill( ::openfl::_legacy::display::BitmapData bitmap,Float _x,Float _y,Float _z, ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_438b7ff25af67245_977_fill)
HXLINE( 979)		Float baseX = ((_x * this->baseFactor) + this->iXoffset);
HXLINE( 982)		_y = ((_y * this->baseFactor) + this->iYoffset);
HXLINE( 983)		_z = ((_z * this->baseFactor) + this->iZoffset);
HXLINE( 985)		int width = bitmap->get_width();
HXLINE( 986)		int height = bitmap->get_height();
HXLINE( 988)		::Array< int > p = ::openfl::_legacy::display::OptimizedPerlin_obj::P;
HXLINE( 989)		int octaves = this->octaves;
HXLINE( 990)		::Array< Float > aOctFreq = this->aOctFreq;
HXLINE( 991)		::Array< Float > aOctPers = this->aOctPers;
HXLINE( 993)		Float s;
HXDLIN( 993)		Float fFreq;
HXDLIN( 993)		Float fPers;
HXDLIN( 993)		Float x;
HXDLIN( 993)		Float y;
HXDLIN( 993)		Float z;
HXDLIN( 993)		Float xf;
HXDLIN( 993)		Float yf;
HXDLIN( 993)		Float zf;
HXDLIN( 993)		int X;
HXDLIN( 993)		int Y;
HXDLIN( 993)		int Z;
HXDLIN( 993)		Float u;
HXDLIN( 993)		Float v;
HXDLIN( 993)		Float w;
HXDLIN( 993)		int A;
HXDLIN( 993)		int AA;
HXDLIN( 993)		int AB;
HXDLIN( 993)		int B;
HXDLIN( 993)		int BA;
HXDLIN( 993)		int BB;
HXDLIN( 993)		Float x1;
HXDLIN( 993)		Float y1;
HXDLIN( 993)		Float z1;
HXDLIN( 993)		int hash;
HXDLIN( 993)		Float g1;
HXDLIN( 993)		Float g2;
HXDLIN( 993)		Float g3;
HXDLIN( 993)		Float g4;
HXDLIN( 993)		Float g5;
HXDLIN( 993)		Float g6;
HXDLIN( 993)		Float g7;
HXDLIN( 993)		Float g8;
HXDLIN( 993)		int color;
HXDLIN( 993)		int pixel;
HXLINE( 995)		{
HXLINE( 995)			int _g1 = (int)0;
HXDLIN( 995)			int _g = height;
HXDLIN( 995)			while((_g1 < _g)){
HXLINE( 995)				_g1 = (_g1 + (int)1);
HXDLIN( 995)				int py = (_g1 - (int)1);
HXLINE( 997)				_x = baseX;
HXLINE( 999)				{
HXLINE( 999)					int _g3 = (int)0;
HXDLIN( 999)					int _g2 = width;
HXDLIN( 999)					while((_g3 < _g2)){
HXLINE( 999)						_g3 = (_g3 + (int)1);
HXDLIN( 999)						int px = (_g3 - (int)1);
HXLINE(1001)						s = ((Float)0.);
HXLINE(1003)						{
HXLINE(1003)							int _g5 = (int)0;
HXDLIN(1003)							int _g4 = octaves;
HXDLIN(1003)							while((_g5 < _g4)){
HXLINE(1003)								_g5 = (_g5 + (int)1);
HXDLIN(1003)								int i = (_g5 - (int)1);
HXLINE(1005)								fFreq = aOctFreq->__get(i);
HXLINE(1006)								fPers = aOctPers->__get(i);
HXLINE(1008)								x = (_x * fFreq);
HXLINE(1009)								y = (_y * fFreq);
HXLINE(1010)								z = (_z * fFreq);
HXLINE(1012)								xf = (x - hx::Mod(x,(int)1));
HXLINE(1013)								yf = (y - hx::Mod(y,(int)1));
HXLINE(1014)								zf = (z - hx::Mod(z,(int)1));
HXLINE(1016)								X = ((int)::Std_obj::_hx_int(xf) & (int)(int)255);
HXLINE(1017)								Y = ((int)::Std_obj::_hx_int(yf) & (int)(int)255);
HXLINE(1018)								Z = ((int)::Std_obj::_hx_int(zf) & (int)(int)255);
HXLINE(1020)								x = (x - xf);
HXLINE(1021)								y = (y - yf);
HXLINE(1022)								z = (z - zf);
HXLINE(1024)								u = (((x * x) * x) * ((x * ((x * (int)6) - (int)15)) + (int)10));
HXLINE(1025)								v = (((y * y) * y) * ((y * ((y * (int)6) - (int)15)) + (int)10));
HXLINE(1026)								w = (((z * z) * z) * ((z * ((z * (int)6) - (int)15)) + (int)10));
HXLINE(1028)								A = (p->__get(X) + Y);
HXLINE(1029)								AA = (p->__get(A) + Z);
HXLINE(1030)								AB = (p->__get((A + (int)1)) + Z);
HXLINE(1031)								B = (p->__get((X + (int)1)) + Y);
HXLINE(1032)								BA = (p->__get(B) + Z);
HXLINE(1033)								BB = (p->__get((B + (int)1)) + Z);
HXLINE(1035)								x1 = (x - (int)1);
HXLINE(1036)								y1 = (y - (int)1);
HXLINE(1037)								z1 = (z - (int)1);
HXLINE(1039)								hash = ((int)p->__get((BB + (int)1)) & (int)(int)15);
HXLINE(1040)								Float g11;
HXDLIN(1040)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE(1040)									if ((hash < (int)8)) {
HXLINE(1040)										g11 = x1;
            									}
            									else {
HXLINE(1040)										g11 = y1;
            									}
            								}
            								else {
HXLINE(1040)									if ((hash < (int)8)) {
HXLINE(1040)										g11 = -(x1);
            									}
            									else {
HXLINE(1040)										g11 = -(y1);
            									}
            								}
HXDLIN(1040)								Float g12;
HXDLIN(1040)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE(1040)									if ((hash < (int)4)) {
HXLINE(1040)										g12 = y1;
            									}
            									else {
HXLINE(1040)										if ((hash == (int)12)) {
HXLINE(1040)											g12 = x1;
            										}
            										else {
HXLINE(1040)											g12 = z1;
            										}
            									}
            								}
            								else {
HXLINE(1040)									if ((hash < (int)4)) {
HXLINE(1040)										g12 = -(y1);
            									}
            									else {
HXLINE(1040)										if ((hash == (int)14)) {
HXLINE(1040)											g12 = -(x1);
            										}
            										else {
HXLINE(1040)											g12 = -(z1);
            										}
            									}
            								}
HXDLIN(1040)								g1 = (g11 + g12);
HXLINE(1042)								hash = ((int)p->__get((AB + (int)1)) & (int)(int)15);
HXLINE(1043)								Float g21;
HXDLIN(1043)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE(1043)									if ((hash < (int)8)) {
HXLINE(1043)										g21 = x;
            									}
            									else {
HXLINE(1043)										g21 = y1;
            									}
            								}
            								else {
HXLINE(1043)									if ((hash < (int)8)) {
HXLINE(1043)										g21 = -(x);
            									}
            									else {
HXLINE(1043)										g21 = -(y1);
            									}
            								}
HXDLIN(1043)								Float g22;
HXDLIN(1043)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE(1043)									if ((hash < (int)4)) {
HXLINE(1043)										g22 = y1;
            									}
            									else {
HXLINE(1043)										if ((hash == (int)12)) {
HXLINE(1043)											g22 = x;
            										}
            										else {
HXLINE(1043)											g22 = z1;
            										}
            									}
            								}
            								else {
HXLINE(1043)									if ((hash < (int)4)) {
HXLINE(1043)										g22 = -(y1);
            									}
            									else {
HXLINE(1043)										if ((hash == (int)14)) {
HXLINE(1043)											g22 = -(x);
            										}
            										else {
HXLINE(1043)											g22 = -(z1);
            										}
            									}
            								}
HXDLIN(1043)								g2 = (g21 + g22);
HXLINE(1045)								hash = ((int)p->__get((BA + (int)1)) & (int)(int)15);
HXLINE(1046)								Float g31;
HXDLIN(1046)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE(1046)									if ((hash < (int)8)) {
HXLINE(1046)										g31 = x1;
            									}
            									else {
HXLINE(1046)										g31 = y;
            									}
            								}
            								else {
HXLINE(1046)									if ((hash < (int)8)) {
HXLINE(1046)										g31 = -(x1);
            									}
            									else {
HXLINE(1046)										g31 = -(y);
            									}
            								}
HXDLIN(1046)								Float g32;
HXDLIN(1046)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE(1046)									if ((hash < (int)4)) {
HXLINE(1046)										g32 = y;
            									}
            									else {
HXLINE(1046)										if ((hash == (int)12)) {
HXLINE(1046)											g32 = x1;
            										}
            										else {
HXLINE(1046)											g32 = z1;
            										}
            									}
            								}
            								else {
HXLINE(1046)									if ((hash < (int)4)) {
HXLINE(1046)										g32 = -(y);
            									}
            									else {
HXLINE(1046)										if ((hash == (int)14)) {
HXLINE(1046)											g32 = -(x1);
            										}
            										else {
HXLINE(1046)											g32 = -(z1);
            										}
            									}
            								}
HXDLIN(1046)								g3 = (g31 + g32);
HXLINE(1048)								hash = ((int)p->__get((AA + (int)1)) & (int)(int)15);
HXLINE(1049)								Float g41;
HXDLIN(1049)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE(1049)									if ((hash < (int)8)) {
HXLINE(1049)										g41 = x;
            									}
            									else {
HXLINE(1049)										g41 = y;
            									}
            								}
            								else {
HXLINE(1049)									if ((hash < (int)8)) {
HXLINE(1049)										g41 = -(x);
            									}
            									else {
HXLINE(1049)										g41 = -(y);
            									}
            								}
HXDLIN(1049)								Float g42;
HXDLIN(1049)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE(1049)									if ((hash < (int)4)) {
HXLINE(1049)										g42 = y;
            									}
            									else {
HXLINE(1049)										if ((hash == (int)12)) {
HXLINE(1049)											g42 = x;
            										}
            										else {
HXLINE(1049)											g42 = z1;
            										}
            									}
            								}
            								else {
HXLINE(1049)									if ((hash < (int)4)) {
HXLINE(1049)										g42 = -(y);
            									}
            									else {
HXLINE(1049)										if ((hash == (int)14)) {
HXLINE(1049)											g42 = -(x);
            										}
            										else {
HXLINE(1049)											g42 = -(z1);
            										}
            									}
            								}
HXDLIN(1049)								g4 = (g41 + g42);
HXLINE(1051)								hash = ((int)p->__get(BB) & (int)(int)15);
HXLINE(1052)								Float g51;
HXDLIN(1052)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE(1052)									if ((hash < (int)8)) {
HXLINE(1052)										g51 = x1;
            									}
            									else {
HXLINE(1052)										g51 = y1;
            									}
            								}
            								else {
HXLINE(1052)									if ((hash < (int)8)) {
HXLINE(1052)										g51 = -(x1);
            									}
            									else {
HXLINE(1052)										g51 = -(y1);
            									}
            								}
HXDLIN(1052)								Float g52;
HXDLIN(1052)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE(1052)									if ((hash < (int)4)) {
HXLINE(1052)										g52 = y1;
            									}
            									else {
HXLINE(1052)										if ((hash == (int)12)) {
HXLINE(1052)											g52 = x1;
            										}
            										else {
HXLINE(1052)											g52 = z;
            										}
            									}
            								}
            								else {
HXLINE(1052)									if ((hash < (int)4)) {
HXLINE(1052)										g52 = -(y1);
            									}
            									else {
HXLINE(1052)										if ((hash == (int)14)) {
HXLINE(1052)											g52 = -(x1);
            										}
            										else {
HXLINE(1052)											g52 = -(z);
            										}
            									}
            								}
HXDLIN(1052)								g5 = (g51 + g52);
HXLINE(1054)								hash = ((int)p->__get(AB) & (int)(int)15);
HXLINE(1055)								Float g61;
HXDLIN(1055)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE(1055)									if ((hash < (int)8)) {
HXLINE(1055)										g61 = x;
            									}
            									else {
HXLINE(1055)										g61 = y1;
            									}
            								}
            								else {
HXLINE(1055)									if ((hash < (int)8)) {
HXLINE(1055)										g61 = -(x);
            									}
            									else {
HXLINE(1055)										g61 = -(y1);
            									}
            								}
HXDLIN(1055)								Float g62;
HXDLIN(1055)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE(1055)									if ((hash < (int)4)) {
HXLINE(1055)										g62 = y1;
            									}
            									else {
HXLINE(1055)										if ((hash == (int)12)) {
HXLINE(1055)											g62 = x;
            										}
            										else {
HXLINE(1055)											g62 = z;
            										}
            									}
            								}
            								else {
HXLINE(1055)									if ((hash < (int)4)) {
HXLINE(1055)										g62 = -(y1);
            									}
            									else {
HXLINE(1055)										if ((hash == (int)14)) {
HXLINE(1055)											g62 = -(x);
            										}
            										else {
HXLINE(1055)											g62 = -(z);
            										}
            									}
            								}
HXDLIN(1055)								g6 = (g61 + g62);
HXLINE(1057)								hash = ((int)p->__get(BA) & (int)(int)15);
HXLINE(1058)								Float g71;
HXDLIN(1058)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE(1058)									if ((hash < (int)8)) {
HXLINE(1058)										g71 = x1;
            									}
            									else {
HXLINE(1058)										g71 = y;
            									}
            								}
            								else {
HXLINE(1058)									if ((hash < (int)8)) {
HXLINE(1058)										g71 = -(x1);
            									}
            									else {
HXLINE(1058)										g71 = -(y);
            									}
            								}
HXDLIN(1058)								Float g72;
HXDLIN(1058)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE(1058)									if ((hash < (int)4)) {
HXLINE(1058)										g72 = y;
            									}
            									else {
HXLINE(1058)										if ((hash == (int)12)) {
HXLINE(1058)											g72 = x1;
            										}
            										else {
HXLINE(1058)											g72 = z;
            										}
            									}
            								}
            								else {
HXLINE(1058)									if ((hash < (int)4)) {
HXLINE(1058)										g72 = -(y);
            									}
            									else {
HXLINE(1058)										if ((hash == (int)14)) {
HXLINE(1058)											g72 = -(x1);
            										}
            										else {
HXLINE(1058)											g72 = -(z);
            										}
            									}
            								}
HXDLIN(1058)								g7 = (g71 + g72);
HXLINE(1060)								hash = ((int)p->__get(AA) & (int)(int)15);
HXLINE(1061)								Float g81;
HXDLIN(1061)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE(1061)									if ((hash < (int)8)) {
HXLINE(1061)										g81 = x;
            									}
            									else {
HXLINE(1061)										g81 = y;
            									}
            								}
            								else {
HXLINE(1061)									if ((hash < (int)8)) {
HXLINE(1061)										g81 = -(x);
            									}
            									else {
HXLINE(1061)										g81 = -(y);
            									}
            								}
HXDLIN(1061)								Float g82;
HXDLIN(1061)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE(1061)									if ((hash < (int)4)) {
HXLINE(1061)										g82 = y;
            									}
            									else {
HXLINE(1061)										if ((hash == (int)12)) {
HXLINE(1061)											g82 = x;
            										}
            										else {
HXLINE(1061)											g82 = z;
            										}
            									}
            								}
            								else {
HXLINE(1061)									if ((hash < (int)4)) {
HXLINE(1061)										g82 = -(y);
            									}
            									else {
HXLINE(1061)										if ((hash == (int)14)) {
HXLINE(1061)											g82 = -(x);
            										}
            										else {
HXLINE(1061)											g82 = -(z);
            										}
            									}
            								}
HXDLIN(1061)								g8 = (g81 + g82);
HXLINE(1063)								g2 = (g2 + (u * (g1 - g2)));
HXLINE(1064)								g4 = (g4 + (u * (g3 - g4)));
HXLINE(1065)								g6 = (g6 + (u * (g5 - g6)));
HXLINE(1066)								g8 = (g8 + (u * (g7 - g8)));
HXLINE(1068)								g4 = (g4 + (v * (g2 - g4)));
HXLINE(1069)								g8 = (g8 + (v * (g6 - g8)));
HXLINE(1071)								s = (s + ((g8 + (w * (g4 - g8))) * fPers));
            							}
            						}
HXLINE(1075)						color = ::Std_obj::_hx_int((((s * this->fPersMax) + (int)1) * (int)128));
HXLINE(1076)						pixel = ((int)((int)((int)(int)-16777216 | (int)((int)color << (int)(int)16)) | (int)((int)color << (int)(int)8)) | (int)color);
HXLINE(1078)						bitmap->setPixel32(px,py,pixel);
HXLINE(1080)						_x = (_x + this->baseFactor);
            					}
            				}
HXLINE(1084)				_y = (_y + this->baseFactor);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(OptimizedPerlin_obj,fill,(void))

void OptimizedPerlin_obj::octFreqPers(Float fPersistence){
            	HX_STACKFRAME(&_hx_pos_438b7ff25af67245_1091_octFreqPers)
HXLINE(1093)		Float fFreq;
HXDLIN(1093)		Float fPers;
HXLINE(1095)		this->aOctFreq = ::Array_obj< Float >::__new(0);
HXLINE(1096)		this->aOctPers = ::Array_obj< Float >::__new(0);
HXLINE(1097)		this->fPersMax = (int)0;
HXLINE(1099)		{
HXLINE(1099)			int _g1 = (int)0;
HXDLIN(1099)			int _g = this->octaves;
HXDLIN(1099)			while((_g1 < _g)){
HXLINE(1099)				_g1 = (_g1 + (int)1);
HXDLIN(1099)				int i = (_g1 - (int)1);
HXLINE(1101)				fFreq = ::Math_obj::pow((int)2,i);
HXLINE(1102)				fPers = ::Math_obj::pow(fPersistence,i);
HXLINE(1103)				 ::openfl::_legacy::display::OptimizedPerlin _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1103)				_hx_tmp->fPersMax = (_hx_tmp->fPersMax + fPers);
HXLINE(1104)				this->aOctFreq->push(fFreq);
HXLINE(1105)				this->aOctPers->push(fPers);
            			}
            		}
HXLINE(1109)		this->fPersMax = ((Float)(int)1 / (Float)this->fPersMax);
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptimizedPerlin_obj,octFreqPers,(void))

void OptimizedPerlin_obj::seedOffset(int iSeed){
            	HX_STACKFRAME(&_hx_pos_438b7ff25af67245_1114_seedOffset)
HXLINE(1116)		iSeed = ::Std_obj::_hx_int(hx::Mod((iSeed * ((Float)16807.)),(int)2147483647));
HXDLIN(1116)		this->iXoffset = iSeed;
HXLINE(1117)		iSeed = ::Std_obj::_hx_int(hx::Mod((iSeed * ((Float)16807.)),(int)2147483647));
HXDLIN(1117)		this->iYoffset = iSeed;
HXLINE(1118)		iSeed = ::Std_obj::_hx_int(hx::Mod((iSeed * ((Float)16807.)),(int)2147483647));
HXDLIN(1118)		this->iZoffset = iSeed;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptimizedPerlin_obj,seedOffset,(void))

::Array< int > OptimizedPerlin_obj::P;


hx::ObjectPtr< OptimizedPerlin_obj > OptimizedPerlin_obj::__new(hx::Null< int >  __o_seed,hx::Null< int >  __o_numOctaves,hx::Null< Float >  __o_falloff) {
	hx::ObjectPtr< OptimizedPerlin_obj > __this = new OptimizedPerlin_obj();
	__this->__construct(__o_seed,__o_numOctaves,__o_falloff);
	return __this;
}

hx::ObjectPtr< OptimizedPerlin_obj > OptimizedPerlin_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_seed,hx::Null< int >  __o_numOctaves,hx::Null< Float >  __o_falloff) {
	OptimizedPerlin_obj *__this = (OptimizedPerlin_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(OptimizedPerlin_obj), true, "openfl._legacy.display.OptimizedPerlin"));
	*(void **)__this = OptimizedPerlin_obj::_hx_vtable;
	__this->__construct(__o_seed,__o_numOctaves,__o_falloff);
	return __this;
}

OptimizedPerlin_obj::OptimizedPerlin_obj()
{
}

void OptimizedPerlin_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OptimizedPerlin);
	HX_MARK_MEMBER_NAME(octaves,"octaves");
	HX_MARK_MEMBER_NAME(aOctFreq,"aOctFreq");
	HX_MARK_MEMBER_NAME(aOctPers,"aOctPers");
	HX_MARK_MEMBER_NAME(fPersMax,"fPersMax");
	HX_MARK_MEMBER_NAME(iXoffset,"iXoffset");
	HX_MARK_MEMBER_NAME(iYoffset,"iYoffset");
	HX_MARK_MEMBER_NAME(iZoffset,"iZoffset");
	HX_MARK_MEMBER_NAME(baseFactor,"baseFactor");
	HX_MARK_END_CLASS();
}

void OptimizedPerlin_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(octaves,"octaves");
	HX_VISIT_MEMBER_NAME(aOctFreq,"aOctFreq");
	HX_VISIT_MEMBER_NAME(aOctPers,"aOctPers");
	HX_VISIT_MEMBER_NAME(fPersMax,"fPersMax");
	HX_VISIT_MEMBER_NAME(iXoffset,"iXoffset");
	HX_VISIT_MEMBER_NAME(iYoffset,"iYoffset");
	HX_VISIT_MEMBER_NAME(iZoffset,"iZoffset");
	HX_VISIT_MEMBER_NAME(baseFactor,"baseFactor");
}

hx::Val OptimizedPerlin_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"fill") ) { return hx::Val( fill_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"octaves") ) { return hx::Val( octaves ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"aOctFreq") ) { return hx::Val( aOctFreq ); }
		if (HX_FIELD_EQ(inName,"aOctPers") ) { return hx::Val( aOctPers ); }
		if (HX_FIELD_EQ(inName,"fPersMax") ) { return hx::Val( fPersMax ); }
		if (HX_FIELD_EQ(inName,"iXoffset") ) { return hx::Val( iXoffset ); }
		if (HX_FIELD_EQ(inName,"iYoffset") ) { return hx::Val( iYoffset ); }
		if (HX_FIELD_EQ(inName,"iZoffset") ) { return hx::Val( iZoffset ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"baseFactor") ) { return hx::Val( baseFactor ); }
		if (HX_FIELD_EQ(inName,"seedOffset") ) { return hx::Val( seedOffset_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"octFreqPers") ) { return hx::Val( octFreqPers_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool OptimizedPerlin_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"P") ) { outValue = ( P ); return true; }
	}
	return false;
}

hx::Val OptimizedPerlin_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"octaves") ) { octaves=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"aOctFreq") ) { aOctFreq=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aOctPers") ) { aOctPers=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fPersMax") ) { fPersMax=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iXoffset") ) { iXoffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iYoffset") ) { iYoffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iZoffset") ) { iZoffset=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"baseFactor") ) { baseFactor=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool OptimizedPerlin_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"P") ) { P=ioValue.Cast< ::Array< int > >(); return true; }
	}
	return false;
}

void OptimizedPerlin_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("octaves","\x83","\x15","\x16","\xa8"));
	outFields->push(HX_HCSTRING("aOctFreq","\x57","\xaf","\xa8","\x0f"));
	outFields->push(HX_HCSTRING("aOctPers","\x95","\xff","\x3a","\x16"));
	outFields->push(HX_HCSTRING("fPersMax","\x88","\x73","\xc6","\x1a"));
	outFields->push(HX_HCSTRING("iXoffset","\xa2","\x38","\x51","\x21"));
	outFields->push(HX_HCSTRING("iYoffset","\x63","\xaf","\xe6","\x4a"));
	outFields->push(HX_HCSTRING("iZoffset","\x24","\x26","\x7c","\x74"));
	outFields->push(HX_HCSTRING("baseFactor","\xc0","\xd7","\x3d","\xbc"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo OptimizedPerlin_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(OptimizedPerlin_obj,octaves),HX_HCSTRING("octaves","\x83","\x15","\x16","\xa8")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(OptimizedPerlin_obj,aOctFreq),HX_HCSTRING("aOctFreq","\x57","\xaf","\xa8","\x0f")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(OptimizedPerlin_obj,aOctPers),HX_HCSTRING("aOctPers","\x95","\xff","\x3a","\x16")},
	{hx::fsFloat,(int)offsetof(OptimizedPerlin_obj,fPersMax),HX_HCSTRING("fPersMax","\x88","\x73","\xc6","\x1a")},
	{hx::fsFloat,(int)offsetof(OptimizedPerlin_obj,iXoffset),HX_HCSTRING("iXoffset","\xa2","\x38","\x51","\x21")},
	{hx::fsFloat,(int)offsetof(OptimizedPerlin_obj,iYoffset),HX_HCSTRING("iYoffset","\x63","\xaf","\xe6","\x4a")},
	{hx::fsFloat,(int)offsetof(OptimizedPerlin_obj,iZoffset),HX_HCSTRING("iZoffset","\x24","\x26","\x7c","\x74")},
	{hx::fsFloat,(int)offsetof(OptimizedPerlin_obj,baseFactor),HX_HCSTRING("baseFactor","\xc0","\xd7","\x3d","\xbc")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo OptimizedPerlin_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< int >*/ ,(void *) &OptimizedPerlin_obj::P,HX_HCSTRING("P","\x50","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String OptimizedPerlin_obj_sMemberFields[] = {
	HX_HCSTRING("octaves","\x83","\x15","\x16","\xa8"),
	HX_HCSTRING("aOctFreq","\x57","\xaf","\xa8","\x0f"),
	HX_HCSTRING("aOctPers","\x95","\xff","\x3a","\x16"),
	HX_HCSTRING("fPersMax","\x88","\x73","\xc6","\x1a"),
	HX_HCSTRING("iXoffset","\xa2","\x38","\x51","\x21"),
	HX_HCSTRING("iYoffset","\x63","\xaf","\xe6","\x4a"),
	HX_HCSTRING("iZoffset","\x24","\x26","\x7c","\x74"),
	HX_HCSTRING("baseFactor","\xc0","\xd7","\x3d","\xbc"),
	HX_HCSTRING("fill","\x83","\xce","\xbb","\x43"),
	HX_HCSTRING("octFreqPers","\xce","\x9e","\x7b","\xa2"),
	HX_HCSTRING("seedOffset","\xe4","\xbb","\xcf","\xfe"),
	::String(null()) };

static void OptimizedPerlin_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(OptimizedPerlin_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(OptimizedPerlin_obj::P,"P");
};

#ifdef HXCPP_VISIT_ALLOCS
static void OptimizedPerlin_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(OptimizedPerlin_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(OptimizedPerlin_obj::P,"P");
};

#endif

hx::Class OptimizedPerlin_obj::__mClass;

static ::String OptimizedPerlin_obj_sStaticFields[] = {
	HX_HCSTRING("P","\x50","\x00","\x00","\x00"),
	::String(null())
};

void OptimizedPerlin_obj::__register()
{
	hx::Object *dummy = new OptimizedPerlin_obj;
	OptimizedPerlin_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._legacy.display.OptimizedPerlin","\x2b","\xc1","\x97","\xdf");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &OptimizedPerlin_obj::__GetStatic;
	__mClass->mSetStaticField = &OptimizedPerlin_obj::__SetStatic;
	__mClass->mMarkFunc = OptimizedPerlin_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(OptimizedPerlin_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(OptimizedPerlin_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< OptimizedPerlin_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = OptimizedPerlin_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OptimizedPerlin_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OptimizedPerlin_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void OptimizedPerlin_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_438b7ff25af67245_898_boot)
HXDLIN( 898)		P = ::Array_obj< int >::fromData( _hx_array_data_df97c12b_9,512);
            	}
}

} // end namespace openfl
} // end namespace _legacy
} // end namespace display
