// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_cpp_vm_Thread
#include <cpp/vm/Thread.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_media_AudioThreadState
#include <openfl/_legacy/media/AudioThreadState.h>
#endif
#ifndef INCLUDED_openfl__legacy_media_InternalAudioType
#include <openfl/_legacy/media/InternalAudioType.h>
#endif
#ifndef INCLUDED_openfl__legacy_media_Sound
#include <openfl/_legacy/media/Sound.h>
#endif
#ifndef INCLUDED_openfl__legacy_media_SoundChannel
#include <openfl/_legacy/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_ByteArray
#include <openfl/_legacy/utils/ByteArray.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataInput
#include <openfl/_legacy/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataOutput
#include <openfl/_legacy/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IMemoryRange
#include <openfl/_legacy/utils/IMemoryRange.h>
#endif
#ifndef INCLUDED_openfl_events_SampleDataEvent
#include <openfl/events/SampleDataEvent.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b84420d7aba19464_26_new,"openfl._legacy.media.SoundChannel","new",0xd9ab3474,"openfl._legacy.media.SoundChannel.new","openfl/_legacy/media/SoundChannel.hx",26,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_106_stop,"openfl._legacy.media.SoundChannel","stop",0x9f7c1d6e,"openfl._legacy.media.SoundChannel.stop","openfl/_legacy/media/SoundChannel.hx",106,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_128___checkComplete,"openfl._legacy.media.SoundChannel","__checkComplete",0x93bbc895,"openfl._legacy.media.SoundChannel.__checkComplete","openfl/_legacy/media/SoundChannel.hx",128,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_244___runCheckComplete,"openfl._legacy.media.SoundChannel","__runCheckComplete",0x2cebb8e2,"openfl._legacy.media.SoundChannel.__runCheckComplete","openfl/_legacy/media/SoundChannel.hx",244,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_276_get_leftPeak,"openfl._legacy.media.SoundChannel","get_leftPeak",0xe6d74f3b,"openfl._legacy.media.SoundChannel.get_leftPeak","openfl/_legacy/media/SoundChannel.hx",276,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_277_get_rightPeak,"openfl._legacy.media.SoundChannel","get_rightPeak",0xf5dbcd06,"openfl._legacy.media.SoundChannel.get_rightPeak","openfl/_legacy/media/SoundChannel.hx",277,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_278_get_pitch,"openfl._legacy.media.SoundChannel","get_pitch",0x9cf1c32b,"openfl._legacy.media.SoundChannel.get_pitch","openfl/_legacy/media/SoundChannel.hx",278,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_279_set_pitch,"openfl._legacy.media.SoundChannel","set_pitch",0x8042af37,"openfl._legacy.media.SoundChannel.set_pitch","openfl/_legacy/media/SoundChannel.hx",279,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_280_get_position,"openfl._legacy.media.SoundChannel","get_position",0x6081ce1e,"openfl._legacy.media.SoundChannel.get_position","openfl/_legacy/media/SoundChannel.hx",280,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_281_set_position,"openfl._legacy.media.SoundChannel","set_position",0x757af192,"openfl._legacy.media.SoundChannel.set_position","openfl/_legacy/media/SoundChannel.hx",281,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_284_get_soundTransform,"openfl._legacy.media.SoundChannel","get_soundTransform",0x5ed521d2,"openfl._legacy.media.SoundChannel.get_soundTransform","openfl/_legacy/media/SoundChannel.hx",284,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_297_set_soundTransform,"openfl._legacy.media.SoundChannel","set_soundTransform",0x3b845446,"openfl._legacy.media.SoundChannel.set_soundTransform","openfl/_legacy/media/SoundChannel.hx",297,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_85_createDynamic,"openfl._legacy.media.SoundChannel","createDynamic",0x9db53cf7,"openfl._legacy.media.SoundChannel.createDynamic","openfl/_legacy/media/SoundChannel.hx",85,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_194___checkCompleteBackgroundThread,"openfl._legacy.media.SoundChannel","__checkCompleteBackgroundThread",0x2100080d,"openfl._legacy.media.SoundChannel.__checkCompleteBackgroundThread","openfl/_legacy/media/SoundChannel.hx",194,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_222___completePending,"openfl._legacy.media.SoundChannel","__completePending",0x2ceb4892,"openfl._legacy.media.SoundChannel.__completePending","openfl/_legacy/media/SoundChannel.hx",222,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_227___pollComplete,"openfl._legacy.media.SoundChannel","__pollComplete",0x2d7d41a4,"openfl._legacy.media.SoundChannel.__pollComplete","openfl/_legacy/media/SoundChannel.hx",227,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_35_boot,"openfl._legacy.media.SoundChannel","boot",0x943bb19e,"openfl._legacy.media.SoundChannel.boot","openfl/_legacy/media/SoundChannel.hx",35,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_36_boot,"openfl._legacy.media.SoundChannel","boot",0x943bb19e,"openfl._legacy.media.SoundChannel.boot","openfl/_legacy/media/SoundChannel.hx",36,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_50_boot,"openfl._legacy.media.SoundChannel","boot",0x943bb19e,"openfl._legacy.media.SoundChannel.boot","openfl/_legacy/media/SoundChannel.hx",50,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_51_boot,"openfl._legacy.media.SoundChannel","boot",0x943bb19e,"openfl._legacy.media.SoundChannel.boot","openfl/_legacy/media/SoundChannel.hx",51,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_324_boot,"openfl._legacy.media.SoundChannel","boot",0x943bb19e,"openfl._legacy.media.SoundChannel.boot","openfl/_legacy/media/SoundChannel.hx",324,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_325_boot,"openfl._legacy.media.SoundChannel","boot",0x943bb19e,"openfl._legacy.media.SoundChannel.boot","openfl/_legacy/media/SoundChannel.hx",325,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_326_boot,"openfl._legacy.media.SoundChannel","boot",0x943bb19e,"openfl._legacy.media.SoundChannel.boot","openfl/_legacy/media/SoundChannel.hx",326,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_327_boot,"openfl._legacy.media.SoundChannel","boot",0x943bb19e,"openfl._legacy.media.SoundChannel.boot","openfl/_legacy/media/SoundChannel.hx",327,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_328_boot,"openfl._legacy.media.SoundChannel","boot",0x943bb19e,"openfl._legacy.media.SoundChannel.boot","openfl/_legacy/media/SoundChannel.hx",328,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_329_boot,"openfl._legacy.media.SoundChannel","boot",0x943bb19e,"openfl._legacy.media.SoundChannel.boot","openfl/_legacy/media/SoundChannel.hx",329,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_330_boot,"openfl._legacy.media.SoundChannel","boot",0x943bb19e,"openfl._legacy.media.SoundChannel.boot","openfl/_legacy/media/SoundChannel.hx",330,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_331_boot,"openfl._legacy.media.SoundChannel","boot",0x943bb19e,"openfl._legacy.media.SoundChannel.boot","openfl/_legacy/media/SoundChannel.hx",331,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_332_boot,"openfl._legacy.media.SoundChannel","boot",0x943bb19e,"openfl._legacy.media.SoundChannel.boot","openfl/_legacy/media/SoundChannel.hx",332,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_333_boot,"openfl._legacy.media.SoundChannel","boot",0x943bb19e,"openfl._legacy.media.SoundChannel.boot","openfl/_legacy/media/SoundChannel.hx",333,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_334_boot,"openfl._legacy.media.SoundChannel","boot",0x943bb19e,"openfl._legacy.media.SoundChannel.boot","openfl/_legacy/media/SoundChannel.hx",334,0xd2a8ca59)
HX_LOCAL_STACK_FRAME(_hx_pos_b84420d7aba19464_335_boot,"openfl._legacy.media.SoundChannel","boot",0x943bb19e,"openfl._legacy.media.SoundChannel.boot","openfl/_legacy/media/SoundChannel.hx",335,0xd2a8ca59)
namespace openfl{
namespace _legacy{
namespace media{

void SoundChannel_obj::__construct( ::Dynamic handle,hx::Null< Float >  __o_startTime,hx::Null< int >  __o_loops, ::openfl::media::SoundTransform soundTransform){
Float startTime = __o_startTime.Default(0);
int loops = __o_loops.Default(0);
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_26_new)
HXLINE(  55)		this->_hx___addedToThread = false;
HXLINE(  54)		this->_hx___thread_completed = false;
HXLINE(  44)		this->_hx___dynamicBytes = null();
HXLINE(  40)		this->_hx___pitch = ((Float)1);
HXLINE(  62)		super::__construct(null());
HXLINE(  64)		if (hx::IsNotNull( soundTransform )) {
HXLINE(  66)			this->_hx___transform = soundTransform->clone();
            		}
HXLINE(  70)		if (hx::IsNotNull( handle )) {
HXLINE(  72)			this->_hx___handle = ::openfl::_legacy::media::SoundChannel_obj::lime_sound_channel_create(handle,startTime,loops,this->_hx___transform);
            		}
HXLINE(  76)		if (hx::IsNotNull( this->_hx___handle )) {
HXLINE(  78)			::openfl::_legacy::media::SoundChannel_obj::_hx___incompleteList->push(hx::ObjectPtr<OBJ_>(this));
            		}
            	}

Dynamic SoundChannel_obj::__CreateEmpty() { return new SoundChannel_obj; }

void *SoundChannel_obj::_hx_vtable = 0;

Dynamic SoundChannel_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SoundChannel_obj > _hx_result = new SoundChannel_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool SoundChannel_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25b00754) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25b00754;
	} else {
		return inClassId==(int)0x3bda65e8;
	}
}

void SoundChannel_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_106_stop)
HXLINE( 110)		bool _hx_tmp;
HXDLIN( 110)		if (hx::IsNotNull( this->_hx___soundInstance )) {
HXLINE( 110)			_hx_tmp = hx::IsEq( this->_hx___soundInstance->_hx___audioType,::openfl::_legacy::media::InternalAudioType_obj::MUSIC_dyn() );
            		}
            		else {
HXLINE( 110)			_hx_tmp = false;
            		}
HXDLIN( 110)		if (_hx_tmp) {
HXLINE( 112)			if (hx::IsNotNull( ::openfl::_legacy::media::SoundChannel_obj::_hx___audioState )) {
HXLINE( 113)				::openfl::_legacy::media::SoundChannel_obj::_hx___audioState->remove(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE( 120)		::openfl::_legacy::media::SoundChannel_obj::lime_sound_channel_stop(this->_hx___handle);
HXLINE( 121)		this->_hx___handle = null();
HXLINE( 122)		this->_hx___soundInstance = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,stop,(void))

bool SoundChannel_obj::_hx___checkComplete(){
            	HX_GC_STACKFRAME(&_hx_pos_b84420d7aba19464_128___checkComplete)
HXDLIN( 128)		if (hx::IsNotNull( this->_hx___handle )) {
HXLINE( 130)			bool _hx_tmp;
HXDLIN( 130)			if (hx::IsNotNull( this->_hx___dataProvider )) {
HXLINE( 130)				_hx_tmp = ( (bool)(::openfl::_legacy::media::SoundChannel_obj::lime_sound_channel_needs_data(this->_hx___handle)) );
            			}
            			else {
HXLINE( 130)				_hx_tmp = false;
            			}
HXDLIN( 130)			if (_hx_tmp) {
HXLINE( 132)				 ::openfl::events::SampleDataEvent request =  ::openfl::events::SampleDataEvent_obj::__alloc( HX_CTX ,HX_("sampleData",74,3f,0b,5e),null(),null());
HXLINE( 133)				request->position = ( (Float)(::openfl::_legacy::media::SoundChannel_obj::lime_sound_channel_get_data_position(this->_hx___handle)) );
HXLINE( 135)				if ((this->_hx___dynamicBytes->length > (int)0)) {
HXLINE( 137)					::openfl::_legacy::media::SoundChannel_obj::lime_sound_channel_add_data(this->_hx___handle,this->_hx___dynamicBytes);
            				}
HXLINE( 141)				this->_hx___dataProvider->dispatchEvent(request);
HXLINE( 142)				this->_hx___dynamicBytes = request->data;
            			}
HXLINE( 148)			bool _hx_tmp1;
HXDLIN( 148)			if (!(this->_hx___addedToThread)) {
HXLINE( 148)				if (hx::IsNotNull( this->_hx___soundInstance )) {
HXLINE( 148)					_hx_tmp1 = hx::IsEq( this->_hx___soundInstance->_hx___audioType,::openfl::_legacy::media::InternalAudioType_obj::MUSIC_dyn() );
            				}
            				else {
HXLINE( 148)					_hx_tmp1 = false;
            				}
            			}
            			else {
HXLINE( 148)				_hx_tmp1 = true;
            			}
HXDLIN( 148)			if (_hx_tmp1) {
HXLINE( 150)				if (hx::IsNull( ::openfl::_legacy::media::SoundChannel_obj::_hx___audioState )) {
HXLINE( 152)					::openfl::_legacy::media::SoundChannel_obj::_hx___audioState =  ::openfl::_legacy::media::AudioThreadState_obj::__alloc( HX_CTX );
HXLINE( 154)					::openfl::_legacy::media::SoundChannel_obj::_hx___audioThreadRunning = true;
HXLINE( 155)					::openfl::_legacy::media::SoundChannel_obj::_hx___audioThreadIsIdle = false;
HXLINE( 157)					::openfl::_legacy::media::SoundChannel_obj::_hx___audioState->mainThread = ::cpp::vm::Thread_obj::current();
HXLINE( 158)					::openfl::_legacy::media::SoundChannel_obj::_hx___audioState->audioThread = ::cpp::vm::Thread_obj::create(::openfl::_legacy::media::SoundChannel_obj::_hx___checkCompleteBackgroundThread_dyn());
            				}
HXLINE( 162)				if (!(this->_hx___addedToThread)) {
HXLINE( 164)					::openfl::_legacy::media::SoundChannel_obj::_hx___audioState->add(hx::ObjectPtr<OBJ_>(this));
HXLINE( 165)					this->_hx___addedToThread = true;
            				}
HXLINE( 169)				return this->_hx___thread_completed;
            			}
            			else {
HXLINE( 175)				if (this->_hx___runCheckComplete()) {
HXLINE( 177)					return true;
            				}
            			}
HXLINE( 181)			return false;
            		}
            		else {
HXLINE( 185)			return true;
            		}
HXLINE( 128)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,_hx___checkComplete,return )

bool SoundChannel_obj::_hx___runCheckComplete(){
            	HX_GC_STACKFRAME(&_hx_pos_b84420d7aba19464_244___runCheckComplete)
HXLINE( 246)		if (( (bool)(::openfl::_legacy::media::SoundChannel_obj::lime_sound_channel_is_complete(this->_hx___handle)) )) {
HXLINE( 248)			this->_hx___soundInstance = null();
HXLINE( 249)			this->_hx___handle = null();
HXLINE( 251)			if (hx::IsNotNull( this->_hx___dataProvider )) {
HXLINE( 253)				::openfl::_legacy::media::SoundChannel_obj::_hx___dynamicSoundCount--;
            			}
HXLINE( 257)			 ::openfl::_legacy::events::Event completeEvent =  ::openfl::_legacy::events::Event_obj::__alloc( HX_CTX ,::openfl::_legacy::events::Event_obj::SOUND_COMPLETE,null(),null());
HXLINE( 258)			this->dispatchEvent(completeEvent);
HXLINE( 260)			return true;
            		}
HXLINE( 264)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,_hx___runCheckComplete,return )

Float SoundChannel_obj::get_leftPeak(){
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_276_get_leftPeak)
HXDLIN( 276)		return ( (Float)(::openfl::_legacy::media::SoundChannel_obj::lime_sound_channel_get_left(this->_hx___handle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,get_leftPeak,return )

Float SoundChannel_obj::get_rightPeak(){
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_277_get_rightPeak)
HXDLIN( 277)		return ( (Float)(::openfl::_legacy::media::SoundChannel_obj::lime_sound_channel_get_right(this->_hx___handle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,get_rightPeak,return )

Float SoundChannel_obj::get_pitch(){
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_278_get_pitch)
HXDLIN( 278)		return this->_hx___pitch;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,get_pitch,return )

Float SoundChannel_obj::set_pitch(Float value){
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_279_set_pitch)
HXDLIN( 279)		::openfl::_legacy::media::SoundChannel_obj::lime_sound_channel_set_pitch(this->_hx___handle,value);
HXDLIN( 279)		return (this->_hx___pitch = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundChannel_obj,set_pitch,return )

Float SoundChannel_obj::get_position(){
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_280_get_position)
HXDLIN( 280)		return ( (Float)(::openfl::_legacy::media::SoundChannel_obj::lime_sound_channel_get_position(this->_hx___handle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,get_position,return )

Float SoundChannel_obj::set_position(Float value){
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_281_set_position)
HXDLIN( 281)		 ::Dynamic _hx_tmp = hx::ClassOf< ::openfl::_legacy::media::SoundChannel >();
HXDLIN( 281)		 ::Dynamic _hx_tmp1 = this->_hx___handle;
HXDLIN( 281)		Float _hx_tmp2 = this->get_position();
HXDLIN( 281)		return ( (Float)(::openfl::_legacy::media::SoundChannel_obj::lime_sound_channel_set_position(_hx_tmp1,_hx_tmp2)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundChannel_obj,set_position,return )

 ::openfl::media::SoundTransform SoundChannel_obj::get_soundTransform(){
            	HX_GC_STACKFRAME(&_hx_pos_b84420d7aba19464_284_get_soundTransform)
HXLINE( 286)		if (hx::IsNull( this->_hx___transform )) {
HXLINE( 288)			this->_hx___transform =  ::openfl::media::SoundTransform_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE( 292)		return this->_hx___transform->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,get_soundTransform,return )

 ::openfl::media::SoundTransform SoundChannel_obj::set_soundTransform( ::openfl::media::SoundTransform value){
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_297_set_soundTransform)
HXLINE( 298)		if (hx::IsNull( this->_hx___transform )) {
HXLINE( 299)			this->_hx___transform = value->clone();
            		}
            		else {
HXLINE( 302)			this->_hx___transform->leftToLeft = value->leftToLeft;
HXLINE( 303)			this->_hx___transform->leftToRight = value->leftToRight;
HXLINE( 304)			this->_hx___transform->pan = value->pan;
HXLINE( 305)			this->_hx___transform->rightToLeft = value->rightToLeft;
HXLINE( 306)			this->_hx___transform->rightToRight = value->rightToRight;
HXLINE( 307)			this->_hx___transform->volume = value->volume;
            		}
HXLINE( 311)		::openfl::_legacy::media::SoundChannel_obj::lime_sound_channel_set_transform(this->_hx___handle,this->_hx___transform);
HXLINE( 313)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundChannel_obj,set_soundTransform,return )

int SoundChannel_obj::_hx___dynamicSoundCount;

::Array< ::Dynamic> SoundChannel_obj::_hx___incompleteList;

 ::openfl::_legacy::media::AudioThreadState SoundChannel_obj::_hx___audioState;

bool SoundChannel_obj::_hx___audioThreadIsIdle;

bool SoundChannel_obj::_hx___audioThreadRunning;

 ::openfl::_legacy::media::SoundChannel SoundChannel_obj::createDynamic( ::Dynamic handle, ::openfl::media::SoundTransform soundTransform, ::openfl::_legacy::events::EventDispatcher dataProvider){
            	HX_GC_STACKFRAME(&_hx_pos_b84420d7aba19464_85_createDynamic)
HXLINE(  87)		 ::openfl::_legacy::media::SoundChannel result =  ::openfl::_legacy::media::SoundChannel_obj::__alloc( HX_CTX ,null(),(int)0,(int)0,soundTransform);
HXLINE(  89)		result->_hx___dataProvider = dataProvider;
HXLINE(  90)		result->_hx___handle = handle;
HXLINE(  91)		::openfl::_legacy::media::SoundChannel_obj::_hx___incompleteList->push(result);
HXLINE(  93)		::openfl::_legacy::media::SoundChannel_obj::_hx___dynamicSoundCount++;
HXLINE(  96)		 ::openfl::events::SampleDataEvent request =  ::openfl::events::SampleDataEvent_obj::__alloc( HX_CTX ,HX_("sampleData",74,3f,0b,5e),null(),null());
HXLINE(  97)		request->position = ( (Float)(::openfl::_legacy::media::SoundChannel_obj::lime_sound_channel_get_data_position(handle)) );
HXLINE(  98)		dataProvider->dispatchEvent(request);
HXLINE(  99)		result->_hx___dynamicBytes = request->data;
HXLINE( 101)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SoundChannel_obj,createDynamic,return )

void SoundChannel_obj::_hx___checkCompleteBackgroundThread(){
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_194___checkCompleteBackgroundThread)
HXLINE( 196)		while(::openfl::_legacy::media::SoundChannel_obj::_hx___audioThreadRunning){
HXLINE( 198)			if (!(::openfl::_legacy::media::SoundChannel_obj::_hx___audioThreadIsIdle)) {
HXLINE( 200)				::openfl::_legacy::media::SoundChannel_obj::_hx___audioState->updateComplete();
HXLINE( 202)				::Sys_obj::sleep(((Float)0.01));
            			}
            			else {
HXLINE( 206)				::Sys_obj::sleep(((Float)0.2));
            			}
            		}
HXLINE( 212)		::openfl::_legacy::media::SoundChannel_obj::_hx___audioThreadRunning = false;
HXLINE( 213)		::openfl::_legacy::media::SoundChannel_obj::_hx___audioThreadIsIdle = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,_hx___checkCompleteBackgroundThread,(void))

bool SoundChannel_obj::_hx___completePending(){
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_222___completePending)
HXDLIN( 222)		return (::openfl::_legacy::media::SoundChannel_obj::_hx___incompleteList->length > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,_hx___completePending,return )

void SoundChannel_obj::_hx___pollComplete(){
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_227___pollComplete)
HXLINE( 229)		int i = ::openfl::_legacy::media::SoundChannel_obj::_hx___incompleteList->length;
HXLINE( 231)		while(true){
HXLINE( 231)			i = (i - (int)1);
HXDLIN( 231)			if (!((i >= (int)0))) {
HXLINE( 231)				goto _hx_goto_16;
            			}
HXLINE( 233)			if (::openfl::_legacy::media::SoundChannel_obj::_hx___incompleteList->__get(i).StaticCast<  ::openfl::_legacy::media::SoundChannel >()->_hx___checkComplete()) {
HXLINE( 235)				::openfl::_legacy::media::SoundChannel_obj::_hx___incompleteList->removeRange(i,(int)1);
            			}
            		}
            		_hx_goto_16:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,_hx___pollComplete,(void))

 ::Dynamic SoundChannel_obj::lime_sound_channel_is_complete;

 ::Dynamic SoundChannel_obj::lime_sound_channel_get_left;

 ::Dynamic SoundChannel_obj::lime_sound_channel_get_right;

 ::Dynamic SoundChannel_obj::lime_sound_channel_get_position;

 ::Dynamic SoundChannel_obj::lime_sound_channel_set_position;

 ::Dynamic SoundChannel_obj::lime_sound_channel_get_data_position;

 ::Dynamic SoundChannel_obj::lime_sound_channel_stop;

 ::Dynamic SoundChannel_obj::lime_sound_channel_create;

 ::Dynamic SoundChannel_obj::lime_sound_channel_set_transform;

 ::Dynamic SoundChannel_obj::lime_sound_channel_set_pitch;

 ::Dynamic SoundChannel_obj::lime_sound_channel_needs_data;

 ::Dynamic SoundChannel_obj::lime_sound_channel_add_data;


hx::ObjectPtr< SoundChannel_obj > SoundChannel_obj::__new( ::Dynamic handle,hx::Null< Float >  __o_startTime,hx::Null< int >  __o_loops, ::openfl::media::SoundTransform soundTransform) {
	hx::ObjectPtr< SoundChannel_obj > __this = new SoundChannel_obj();
	__this->__construct(handle,__o_startTime,__o_loops,soundTransform);
	return __this;
}

hx::ObjectPtr< SoundChannel_obj > SoundChannel_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic handle,hx::Null< Float >  __o_startTime,hx::Null< int >  __o_loops, ::openfl::media::SoundTransform soundTransform) {
	SoundChannel_obj *__this = (SoundChannel_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SoundChannel_obj), true, "openfl._legacy.media.SoundChannel"));
	*(void **)__this = SoundChannel_obj::_hx_vtable;
	__this->__construct(handle,__o_startTime,__o_loops,soundTransform);
	return __this;
}

SoundChannel_obj::SoundChannel_obj()
{
}

void SoundChannel_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SoundChannel);
	HX_MARK_MEMBER_NAME(leftPeak,"leftPeak");
	HX_MARK_MEMBER_NAME(rightPeak,"rightPeak");
	HX_MARK_MEMBER_NAME(_hx___dataProvider,"__dataProvider");
	HX_MARK_MEMBER_NAME(_hx___handle,"__handle");
	HX_MARK_MEMBER_NAME(_hx___pitch,"__pitch");
	HX_MARK_MEMBER_NAME(_hx___soundInstance,"__soundInstance");
	HX_MARK_MEMBER_NAME(_hx___transform,"__transform");
	HX_MARK_MEMBER_NAME(_hx___dynamicBytes,"__dynamicBytes");
	HX_MARK_MEMBER_NAME(_hx___thread_completed,"__thread_completed");
	HX_MARK_MEMBER_NAME(_hx___addedToThread,"__addedToThread");
	 ::openfl::_legacy::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SoundChannel_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(leftPeak,"leftPeak");
	HX_VISIT_MEMBER_NAME(rightPeak,"rightPeak");
	HX_VISIT_MEMBER_NAME(_hx___dataProvider,"__dataProvider");
	HX_VISIT_MEMBER_NAME(_hx___handle,"__handle");
	HX_VISIT_MEMBER_NAME(_hx___pitch,"__pitch");
	HX_VISIT_MEMBER_NAME(_hx___soundInstance,"__soundInstance");
	HX_VISIT_MEMBER_NAME(_hx___transform,"__transform");
	HX_VISIT_MEMBER_NAME(_hx___dynamicBytes,"__dynamicBytes");
	HX_VISIT_MEMBER_NAME(_hx___thread_completed,"__thread_completed");
	HX_VISIT_MEMBER_NAME(_hx___addedToThread,"__addedToThread");
	 ::openfl::_legacy::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SoundChannel_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pitch") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pitch() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__pitch") ) { return hx::Val( _hx___pitch ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"leftPeak") ) { return hx::Val( inCallProp == hx::paccAlways ? get_leftPeak() : leftPeak ); }
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_position() ); }
		if (HX_FIELD_EQ(inName,"__handle") ) { return hx::Val( _hx___handle ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rightPeak") ) { return hx::Val( inCallProp == hx::paccAlways ? get_rightPeak() : rightPeak ); }
		if (HX_FIELD_EQ(inName,"get_pitch") ) { return hx::Val( get_pitch_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pitch") ) { return hx::Val( set_pitch_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__transform") ) { return hx::Val( _hx___transform ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_leftPeak") ) { return hx::Val( get_leftPeak_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_position") ) { return hx::Val( get_position_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_position") ) { return hx::Val( set_position_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_rightPeak") ) { return hx::Val( get_rightPeak_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"soundTransform") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_soundTransform() ); }
		if (HX_FIELD_EQ(inName,"__dataProvider") ) { return hx::Val( _hx___dataProvider ); }
		if (HX_FIELD_EQ(inName,"__dynamicBytes") ) { return hx::Val( _hx___dynamicBytes ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__soundInstance") ) { return hx::Val( _hx___soundInstance ); }
		if (HX_FIELD_EQ(inName,"__addedToThread") ) { return hx::Val( _hx___addedToThread ); }
		if (HX_FIELD_EQ(inName,"__checkComplete") ) { return hx::Val( _hx___checkComplete_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__thread_completed") ) { return hx::Val( _hx___thread_completed ); }
		if (HX_FIELD_EQ(inName,"__runCheckComplete") ) { return hx::Val( _hx___runCheckComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_soundTransform") ) { return hx::Val( get_soundTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_soundTransform") ) { return hx::Val( set_soundTransform_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SoundChannel_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__audioState") ) { outValue = ( _hx___audioState ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createDynamic") ) { outValue = createDynamic_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__pollComplete") ) { outValue = _hx___pollComplete_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__incompleteList") ) { outValue = ( _hx___incompleteList ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__completePending") ) { outValue = _hx___completePending_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__dynamicSoundCount") ) { outValue = ( _hx___dynamicSoundCount ); return true; }
		if (HX_FIELD_EQ(inName,"__audioThreadIsIdle") ) { outValue = ( _hx___audioThreadIsIdle ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__audioThreadRunning") ) { outValue = ( _hx___audioThreadRunning ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"lime_sound_channel_stop") ) { outValue = ( lime_sound_channel_stop ); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"lime_sound_channel_create") ) { outValue = ( lime_sound_channel_create ); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"lime_sound_channel_get_left") ) { outValue = ( lime_sound_channel_get_left ); return true; }
		if (HX_FIELD_EQ(inName,"lime_sound_channel_add_data") ) { outValue = ( lime_sound_channel_add_data ); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lime_sound_channel_get_right") ) { outValue = ( lime_sound_channel_get_right ); return true; }
		if (HX_FIELD_EQ(inName,"lime_sound_channel_set_pitch") ) { outValue = ( lime_sound_channel_set_pitch ); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"lime_sound_channel_needs_data") ) { outValue = ( lime_sound_channel_needs_data ); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"lime_sound_channel_is_complete") ) { outValue = ( lime_sound_channel_is_complete ); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"__checkCompleteBackgroundThread") ) { outValue = _hx___checkCompleteBackgroundThread_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_sound_channel_get_position") ) { outValue = ( lime_sound_channel_get_position ); return true; }
		if (HX_FIELD_EQ(inName,"lime_sound_channel_set_position") ) { outValue = ( lime_sound_channel_set_position ); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"lime_sound_channel_set_transform") ) { outValue = ( lime_sound_channel_set_transform ); return true; }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"lime_sound_channel_get_data_position") ) { outValue = ( lime_sound_channel_get_data_position ); return true; }
	}
	return false;
}

hx::Val SoundChannel_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"pitch") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pitch(inValue.Cast< Float >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__pitch") ) { _hx___pitch=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"leftPeak") ) { leftPeak=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_position(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"__handle") ) { _hx___handle=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rightPeak") ) { rightPeak=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__transform") ) { _hx___transform=inValue.Cast<  ::openfl::media::SoundTransform >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"soundTransform") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_soundTransform(inValue.Cast<  ::openfl::media::SoundTransform >()) ); }
		if (HX_FIELD_EQ(inName,"__dataProvider") ) { _hx___dataProvider=inValue.Cast<  ::openfl::_legacy::events::EventDispatcher >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dynamicBytes") ) { _hx___dynamicBytes=inValue.Cast<  ::openfl::_legacy::utils::ByteArray >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__soundInstance") ) { _hx___soundInstance=inValue.Cast<  ::openfl::_legacy::media::Sound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__addedToThread") ) { _hx___addedToThread=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__thread_completed") ) { _hx___thread_completed=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SoundChannel_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__audioState") ) { _hx___audioState=ioValue.Cast<  ::openfl::_legacy::media::AudioThreadState >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__incompleteList") ) { _hx___incompleteList=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__dynamicSoundCount") ) { _hx___dynamicSoundCount=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"__audioThreadIsIdle") ) { _hx___audioThreadIsIdle=ioValue.Cast< bool >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__audioThreadRunning") ) { _hx___audioThreadRunning=ioValue.Cast< bool >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"lime_sound_channel_stop") ) { lime_sound_channel_stop=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"lime_sound_channel_create") ) { lime_sound_channel_create=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"lime_sound_channel_get_left") ) { lime_sound_channel_get_left=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_sound_channel_add_data") ) { lime_sound_channel_add_data=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lime_sound_channel_get_right") ) { lime_sound_channel_get_right=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_sound_channel_set_pitch") ) { lime_sound_channel_set_pitch=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"lime_sound_channel_needs_data") ) { lime_sound_channel_needs_data=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"lime_sound_channel_is_complete") ) { lime_sound_channel_is_complete=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"lime_sound_channel_get_position") ) { lime_sound_channel_get_position=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_sound_channel_set_position") ) { lime_sound_channel_set_position=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"lime_sound_channel_set_transform") ) { lime_sound_channel_set_transform=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"lime_sound_channel_get_data_position") ) { lime_sound_channel_get_data_position=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void SoundChannel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("leftPeak","\xc6","\x21","\x50","\x51"));
	outFields->push(HX_HCSTRING("rightPeak","\x1b","\x34","\x1b","\xb5"));
	outFields->push(HX_HCSTRING("pitch","\xc0","\xbb","\xa0","\xc2"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("soundTransform","\x9d","\xee","\xde","\x22"));
	outFields->push(HX_HCSTRING("__dataProvider","\x9b","\xc0","\xf0","\xaf"));
	outFields->push(HX_HCSTRING("__handle","\xc8","\xee","\x2c","\x60"));
	outFields->push(HX_HCSTRING("__pitch","\xa0","\x14","\xff","\x2c"));
	outFields->push(HX_HCSTRING("__soundInstance","\x64","\x88","\xb1","\x7e"));
	outFields->push(HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"));
	outFields->push(HX_HCSTRING("__dynamicBytes","\x8c","\xcf","\x02","\x95"));
	outFields->push(HX_HCSTRING("__thread_completed","\xb6","\x4b","\x02","\x55"));
	outFields->push(HX_HCSTRING("__addedToThread","\x65","\xac","\xa2","\xce"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SoundChannel_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(SoundChannel_obj,leftPeak),HX_HCSTRING("leftPeak","\xc6","\x21","\x50","\x51")},
	{hx::fsFloat,(int)offsetof(SoundChannel_obj,rightPeak),HX_HCSTRING("rightPeak","\x1b","\x34","\x1b","\xb5")},
	{hx::fsObject /*::openfl::_legacy::events::EventDispatcher*/ ,(int)offsetof(SoundChannel_obj,_hx___dataProvider),HX_HCSTRING("__dataProvider","\x9b","\xc0","\xf0","\xaf")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(SoundChannel_obj,_hx___handle),HX_HCSTRING("__handle","\xc8","\xee","\x2c","\x60")},
	{hx::fsFloat,(int)offsetof(SoundChannel_obj,_hx___pitch),HX_HCSTRING("__pitch","\xa0","\x14","\xff","\x2c")},
	{hx::fsObject /*::openfl::_legacy::media::Sound*/ ,(int)offsetof(SoundChannel_obj,_hx___soundInstance),HX_HCSTRING("__soundInstance","\x64","\x88","\xb1","\x7e")},
	{hx::fsObject /*::openfl::media::SoundTransform*/ ,(int)offsetof(SoundChannel_obj,_hx___transform),HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73")},
	{hx::fsObject /*::openfl::_legacy::utils::ByteArray*/ ,(int)offsetof(SoundChannel_obj,_hx___dynamicBytes),HX_HCSTRING("__dynamicBytes","\x8c","\xcf","\x02","\x95")},
	{hx::fsBool,(int)offsetof(SoundChannel_obj,_hx___thread_completed),HX_HCSTRING("__thread_completed","\xb6","\x4b","\x02","\x55")},
	{hx::fsBool,(int)offsetof(SoundChannel_obj,_hx___addedToThread),HX_HCSTRING("__addedToThread","\x65","\xac","\xa2","\xce")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo SoundChannel_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &SoundChannel_obj::_hx___dynamicSoundCount,HX_HCSTRING("__dynamicSoundCount","\xbf","\x1a","\x93","\xf2")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &SoundChannel_obj::_hx___incompleteList,HX_HCSTRING("__incompleteList","\x3c","\x44","\x82","\xc1")},
	{hx::fsObject /*::openfl::_legacy::media::AudioThreadState*/ ,(void *) &SoundChannel_obj::_hx___audioState,HX_HCSTRING("__audioState","\x7b","\x20","\xf8","\x5b")},
	{hx::fsBool,(void *) &SoundChannel_obj::_hx___audioThreadIsIdle,HX_HCSTRING("__audioThreadIsIdle","\x5e","\x65","\xef","\xed")},
	{hx::fsBool,(void *) &SoundChannel_obj::_hx___audioThreadRunning,HX_HCSTRING("__audioThreadRunning","\xbf","\x8c","\xee","\xda")},
	{hx::fsObject /*Dynamic*/ ,(void *) &SoundChannel_obj::lime_sound_channel_is_complete,HX_HCSTRING("lime_sound_channel_is_complete","\x98","\xc6","\xab","\xb3")},
	{hx::fsObject /*Dynamic*/ ,(void *) &SoundChannel_obj::lime_sound_channel_get_left,HX_HCSTRING("lime_sound_channel_get_left","\xa6","\xbd","\xed","\x02")},
	{hx::fsObject /*Dynamic*/ ,(void *) &SoundChannel_obj::lime_sound_channel_get_right,HX_HCSTRING("lime_sound_channel_get_right","\x5d","\x41","\x25","\x04")},
	{hx::fsObject /*Dynamic*/ ,(void *) &SoundChannel_obj::lime_sound_channel_get_position,HX_HCSTRING("lime_sound_channel_get_position","\xc8","\x11","\x6d","\x7c")},
	{hx::fsObject /*Dynamic*/ ,(void *) &SoundChannel_obj::lime_sound_channel_set_position,HX_HCSTRING("lime_sound_channel_set_position","\x3c","\x35","\x66","\x91")},
	{hx::fsObject /*Dynamic*/ ,(void *) &SoundChannel_obj::lime_sound_channel_get_data_position,HX_HCSTRING("lime_sound_channel_get_data_position","\x1f","\x4b","\x6e","\x06")},
	{hx::fsObject /*Dynamic*/ ,(void *) &SoundChannel_obj::lime_sound_channel_stop,HX_HCSTRING("lime_sound_channel_stop","\x18","\xa7","\xe6","\xfb")},
	{hx::fsObject /*Dynamic*/ ,(void *) &SoundChannel_obj::lime_sound_channel_create,HX_HCSTRING("lime_sound_channel_create","\x92","\x8f","\x06","\x2d")},
	{hx::fsObject /*Dynamic*/ ,(void *) &SoundChannel_obj::lime_sound_channel_set_transform,HX_HCSTRING("lime_sound_channel_set_transform","\x79","\x99","\x49","\x1d")},
	{hx::fsObject /*Dynamic*/ ,(void *) &SoundChannel_obj::lime_sound_channel_set_pitch,HX_HCSTRING("lime_sound_channel_set_pitch","\x4d","\xdd","\xb2","\xc0")},
	{hx::fsObject /*Dynamic*/ ,(void *) &SoundChannel_obj::lime_sound_channel_needs_data,HX_HCSTRING("lime_sound_channel_needs_data","\x22","\x75","\xcc","\xf6")},
	{hx::fsObject /*Dynamic*/ ,(void *) &SoundChannel_obj::lime_sound_channel_add_data,HX_HCSTRING("lime_sound_channel_add_data","\x5e","\x22","\x27","\x17")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String SoundChannel_obj_sMemberFields[] = {
	HX_HCSTRING("leftPeak","\xc6","\x21","\x50","\x51"),
	HX_HCSTRING("rightPeak","\x1b","\x34","\x1b","\xb5"),
	HX_HCSTRING("__dataProvider","\x9b","\xc0","\xf0","\xaf"),
	HX_HCSTRING("__handle","\xc8","\xee","\x2c","\x60"),
	HX_HCSTRING("__pitch","\xa0","\x14","\xff","\x2c"),
	HX_HCSTRING("__soundInstance","\x64","\x88","\xb1","\x7e"),
	HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"),
	HX_HCSTRING("__dynamicBytes","\x8c","\xcf","\x02","\x95"),
	HX_HCSTRING("__thread_completed","\xb6","\x4b","\x02","\x55"),
	HX_HCSTRING("__addedToThread","\x65","\xac","\xa2","\xce"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("__checkComplete","\x81","\x96","\xd4","\xef"),
	HX_HCSTRING("__runCheckComplete","\x76","\x66","\x8f","\x8c"),
	HX_HCSTRING("get_leftPeak","\xcf","\xd5","\x69","\x06"),
	HX_HCSTRING("get_rightPeak","\xf2","\x07","\x7f","\x76"),
	HX_HCSTRING("get_pitch","\x17","\x18","\x4a","\x06"),
	HX_HCSTRING("set_pitch","\x23","\x04","\x9b","\xe9"),
	HX_HCSTRING("get_position","\xb2","\x54","\x14","\x80"),
	HX_HCSTRING("set_position","\x26","\x78","\x0d","\x95"),
	HX_HCSTRING("get_soundTransform","\x66","\xcf","\x78","\xbe"),
	HX_HCSTRING("set_soundTransform","\xda","\x01","\x28","\x9b"),
	::String(null()) };

static void SoundChannel_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SoundChannel_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::_hx___dynamicSoundCount,"__dynamicSoundCount");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::_hx___incompleteList,"__incompleteList");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::_hx___audioState,"__audioState");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::_hx___audioThreadIsIdle,"__audioThreadIsIdle");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::_hx___audioThreadRunning,"__audioThreadRunning");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_is_complete,"lime_sound_channel_is_complete");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_get_left,"lime_sound_channel_get_left");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_get_right,"lime_sound_channel_get_right");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_get_position,"lime_sound_channel_get_position");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_set_position,"lime_sound_channel_set_position");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_get_data_position,"lime_sound_channel_get_data_position");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_stop,"lime_sound_channel_stop");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_create,"lime_sound_channel_create");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_set_transform,"lime_sound_channel_set_transform");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_set_pitch,"lime_sound_channel_set_pitch");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_needs_data,"lime_sound_channel_needs_data");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_add_data,"lime_sound_channel_add_data");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SoundChannel_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::_hx___dynamicSoundCount,"__dynamicSoundCount");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::_hx___incompleteList,"__incompleteList");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::_hx___audioState,"__audioState");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::_hx___audioThreadIsIdle,"__audioThreadIsIdle");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::_hx___audioThreadRunning,"__audioThreadRunning");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_is_complete,"lime_sound_channel_is_complete");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_get_left,"lime_sound_channel_get_left");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_get_right,"lime_sound_channel_get_right");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_get_position,"lime_sound_channel_get_position");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_set_position,"lime_sound_channel_set_position");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_get_data_position,"lime_sound_channel_get_data_position");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_stop,"lime_sound_channel_stop");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_create,"lime_sound_channel_create");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_set_transform,"lime_sound_channel_set_transform");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_set_pitch,"lime_sound_channel_set_pitch");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_needs_data,"lime_sound_channel_needs_data");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::lime_sound_channel_add_data,"lime_sound_channel_add_data");
};

#endif

hx::Class SoundChannel_obj::__mClass;

static ::String SoundChannel_obj_sStaticFields[] = {
	HX_HCSTRING("__dynamicSoundCount","\xbf","\x1a","\x93","\xf2"),
	HX_HCSTRING("__incompleteList","\x3c","\x44","\x82","\xc1"),
	HX_HCSTRING("__audioState","\x7b","\x20","\xf8","\x5b"),
	HX_HCSTRING("__audioThreadIsIdle","\x5e","\x65","\xef","\xed"),
	HX_HCSTRING("__audioThreadRunning","\xbf","\x8c","\xee","\xda"),
	HX_HCSTRING("createDynamic","\xe3","\x77","\x58","\x1e"),
	HX_HCSTRING("__checkCompleteBackgroundThread","\xf9","\x6d","\x08","\x25"),
	HX_HCSTRING("__completePending","\x7e","\x69","\x44","\x5b"),
	HX_HCSTRING("__pollComplete","\x38","\x95","\xad","\x3b"),
	HX_HCSTRING("lime_sound_channel_is_complete","\x98","\xc6","\xab","\xb3"),
	HX_HCSTRING("lime_sound_channel_get_left","\xa6","\xbd","\xed","\x02"),
	HX_HCSTRING("lime_sound_channel_get_right","\x5d","\x41","\x25","\x04"),
	HX_HCSTRING("lime_sound_channel_get_position","\xc8","\x11","\x6d","\x7c"),
	HX_HCSTRING("lime_sound_channel_set_position","\x3c","\x35","\x66","\x91"),
	HX_HCSTRING("lime_sound_channel_get_data_position","\x1f","\x4b","\x6e","\x06"),
	HX_HCSTRING("lime_sound_channel_stop","\x18","\xa7","\xe6","\xfb"),
	HX_HCSTRING("lime_sound_channel_create","\x92","\x8f","\x06","\x2d"),
	HX_HCSTRING("lime_sound_channel_set_transform","\x79","\x99","\x49","\x1d"),
	HX_HCSTRING("lime_sound_channel_set_pitch","\x4d","\xdd","\xb2","\xc0"),
	HX_HCSTRING("lime_sound_channel_needs_data","\x22","\x75","\xcc","\xf6"),
	HX_HCSTRING("lime_sound_channel_add_data","\x5e","\x22","\x27","\x17"),
	::String(null())
};

void SoundChannel_obj::__register()
{
	hx::Object *dummy = new SoundChannel_obj;
	SoundChannel_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._legacy.media.SoundChannel","\x82","\x2a","\xfb","\x72");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SoundChannel_obj::__GetStatic;
	__mClass->mSetStaticField = &SoundChannel_obj::__SetStatic;
	__mClass->mMarkFunc = SoundChannel_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SoundChannel_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SoundChannel_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SoundChannel_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SoundChannel_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SoundChannel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SoundChannel_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SoundChannel_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_35_boot)
HXDLIN(  35)		_hx___dynamicSoundCount = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_36_boot)
HXDLIN(  36)		_hx___incompleteList = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_50_boot)
HXDLIN(  50)		_hx___audioThreadIsIdle = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_51_boot)
HXDLIN(  51)		_hx___audioThreadRunning = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_324_boot)
HXDLIN( 324)		lime_sound_channel_is_complete = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_sound_channel_is_complete",76,5e,29,af),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_325_boot)
HXDLIN( 325)		lime_sound_channel_get_left = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_sound_channel_get_left",08,af,c3,87),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_326_boot)
HXDLIN( 326)		lime_sound_channel_get_right = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_sound_channel_get_right",bb,85,82,ba),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_327_boot)
HXDLIN( 327)		lime_sound_channel_get_position = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_sound_channel_get_position",2a,5c,d4,8e),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_328_boot)
HXDLIN( 328)		lime_sound_channel_set_position = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_sound_channel_set_position",9e,7f,cd,a3),(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_329_boot)
HXDLIN( 329)		lime_sound_channel_get_data_position = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_sound_channel_get_data_position",7d,1d,54,76),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_330_boot)
HXDLIN( 330)		lime_sound_channel_stop = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_sound_channel_stop",7a,bf,0b,7f),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_331_boot)
HXDLIN( 331)		lime_sound_channel_create = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_sound_channel_create",74,04,ec,95),(int)4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_332_boot)
HXDLIN( 332)		lime_sound_channel_set_transform = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_sound_channel_set_transform",d7,64,43,25),(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_333_boot)
HXDLIN( 333)		lime_sound_channel_set_pitch = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_sound_channel_set_pitch",ab,21,10,77),(int)2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_334_boot)
HXDLIN( 334)		lime_sound_channel_needs_data = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_sound_channel_needs_data",04,03,0b,d2),(int)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b84420d7aba19464_335_boot)
HXDLIN( 335)		lime_sound_channel_add_data = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_sound_channel_add_data",c0,13,fd,9b),(int)2);
            	}
}

} // end namespace openfl
} // end namespace _legacy
} // end namespace media
