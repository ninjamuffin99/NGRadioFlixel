// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a60a08489e20943f_18_new,"openfl._legacy.geom.Matrix","new",0x800630e1,"openfl._legacy.geom.Matrix.new","openfl/_legacy/geom/Matrix.hx",18,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_32_clone,"openfl._legacy.geom.Matrix","clone",0xe1cf561e,"openfl._legacy.geom.Matrix.clone","openfl/_legacy/geom/Matrix.hx",32,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_37_concat,"openfl._legacy.geom.Matrix","concat",0x6d1e2f33,"openfl._legacy.geom.Matrix.concat","openfl/_legacy/geom/Matrix.hx",37,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_57_copyColumnFrom,"openfl._legacy.geom.Matrix","copyColumnFrom",0x3ed57494,"openfl._legacy.geom.Matrix.copyColumnFrom","openfl/_legacy/geom/Matrix.hx",57,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_83_copyColumnTo,"openfl._legacy.geom.Matrix","copyColumnTo",0xc37e3625,"openfl._legacy.geom.Matrix.copyColumnTo","openfl/_legacy/geom/Matrix.hx",83,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_110_copyFrom,"openfl._legacy.geom.Matrix","copyFrom",0xfa1c379e,"openfl._legacy.geom.Matrix.copyFrom","openfl/_legacy/geom/Matrix.hx",110,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_124_copyRowFrom,"openfl._legacy.geom.Matrix","copyRowFrom",0x44438ef0,"openfl._legacy.geom.Matrix.copyRowFrom","openfl/_legacy/geom/Matrix.hx",124,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_150_copyRowTo,"openfl._legacy.geom.Matrix","copyRowTo",0xc56dc181,"openfl._legacy.geom.Matrix.copyRowTo","openfl/_legacy/geom/Matrix.hx",150,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_175_createBox,"openfl._legacy.geom.Matrix","createBox",0x9be3cbb0,"openfl._legacy.geom.Matrix.createBox","openfl/_legacy/geom/Matrix.hx",175,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_207_createGradientBox,"openfl._legacy.geom.Matrix","createGradientBox",0x67a6cca0,"openfl._legacy.geom.Matrix.createGradientBox","openfl/_legacy/geom/Matrix.hx",207,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_235_deltaTransformPoint,"openfl._legacy.geom.Matrix","deltaTransformPoint",0x05467fdd,"openfl._legacy.geom.Matrix.deltaTransformPoint","openfl/_legacy/geom/Matrix.hx",235,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_242_equals,"openfl._legacy.geom.Matrix","equals",0x6541145e,"openfl._legacy.geom.Matrix.equals","openfl/_legacy/geom/Matrix.hx",242,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_247_identity,"openfl._legacy.geom.Matrix","identity",0xeaea711d,"openfl._legacy.geom.Matrix.identity","openfl/_legacy/geom/Matrix.hx",247,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_259_invert,"openfl._legacy.geom.Matrix","invert",0x45270d35,"openfl._legacy.geom.Matrix.invert","openfl/_legacy/geom/Matrix.hx",259,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_289_mult,"openfl._legacy.geom.Matrix","mult",0x84c7784f,"openfl._legacy.geom.Matrix.mult","openfl/_legacy/geom/Matrix.hx",289,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_306_rotate,"openfl._legacy.geom.Matrix","rotate",0x706e6c7a,"openfl._legacy.geom.Matrix.rotate","openfl/_legacy/geom/Matrix.hx",306,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_326_scale,"openfl._legacy.geom.Matrix","scale",0x123b114b,"openfl._legacy.geom.Matrix.scale","openfl/_legacy/geom/Matrix.hx",326,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_340_setRotation,"openfl._legacy.geom.Matrix","setRotation",0x8d9f5081,"openfl._legacy.geom.Matrix.setRotation","openfl/_legacy/geom/Matrix.hx",340,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_350_setTo,"openfl._legacy.geom.Matrix","setTo",0x139bd47e,"openfl._legacy.geom.Matrix.setTo","openfl/_legacy/geom/Matrix.hx",350,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_364_toString,"openfl._legacy.geom.Matrix","toString",0x6a29fc8b,"openfl._legacy.geom.Matrix.toString","openfl/_legacy/geom/Matrix.hx",364,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_371_transformPoint,"openfl._legacy.geom.Matrix","transformPoint",0x4131ac63,"openfl._legacy.geom.Matrix.transformPoint","openfl/_legacy/geom/Matrix.hx",371,0x35542610)
HX_LOCAL_STACK_FRAME(_hx_pos_a60a08489e20943f_376_translate,"openfl._legacy.geom.Matrix","translate",0x9b8b0e8f,"openfl._legacy.geom.Matrix.translate","openfl/_legacy/geom/Matrix.hx",376,0x35542610)
namespace openfl{
namespace _legacy{
namespace geom{

void Matrix_obj::__construct(hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty){
Float a = __o_a.Default(1);
Float b = __o_b.Default(0);
Float c = __o_c.Default(0);
Float d = __o_d.Default(1);
Float tx = __o_tx.Default(0);
Float ty = __o_ty.Default(0);
            	HX_STACKFRAME(&_hx_pos_a60a08489e20943f_18_new)
HXLINE(  20)		this->a = a;
HXLINE(  21)		this->b = b;
HXLINE(  22)		this->c = c;
HXLINE(  23)		this->d = d;
HXLINE(  24)		this->tx = tx;
HXLINE(  25)		this->ty = ty;
            	}

Dynamic Matrix_obj::__CreateEmpty() { return new Matrix_obj; }

void *Matrix_obj::_hx_vtable = 0;

Dynamic Matrix_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix_obj > _hx_result = new Matrix_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Matrix_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x50d5d035;
}

 ::openfl::_legacy::geom::Matrix Matrix_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_a60a08489e20943f_32_clone)
HXDLIN(  32)		return  ::openfl::_legacy::geom::Matrix_obj::__alloc( HX_CTX ,this->a,this->b,this->c,this->d,this->tx,this->ty);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,clone,return )

void Matrix_obj::concat( ::openfl::_legacy::geom::Matrix m){
            	HX_STACKFRAME(&_hx_pos_a60a08489e20943f_37_concat)
HXLINE(  39)		Float a1 = (this->a * m->a);
HXDLIN(  39)		Float a11 = (a1 + (this->b * m->c));
HXLINE(  40)		Float _hx_tmp = (this->a * m->b);
HXDLIN(  40)		this->b = (_hx_tmp + (this->b * m->d));
HXLINE(  41)		this->a = a11;
HXLINE(  43)		Float c1 = (this->c * m->a);
HXDLIN(  43)		Float c11 = (c1 + (this->d * m->c));
HXLINE(  44)		Float _hx_tmp1 = (this->c * m->b);
HXDLIN(  44)		this->d = (_hx_tmp1 + (this->d * m->d));
HXLINE(  46)		this->c = c11;
HXLINE(  48)		Float tx1 = (this->tx * m->a);
HXDLIN(  48)		Float tx11 = ((tx1 + (this->ty * m->c)) + m->tx);
HXLINE(  49)		Float _hx_tmp2 = (this->tx * m->b);
HXDLIN(  49)		this->ty = ((_hx_tmp2 + (this->ty * m->d)) + m->ty);
HXLINE(  50)		this->tx = tx11;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,concat,(void))

void Matrix_obj::copyColumnFrom(int column, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_a60a08489e20943f_57_copyColumnFrom)
HXDLIN(  57)		if ((column > (int)2)) {
HXLINE(  59)			HX_STACK_DO_THROW(((HX_("Column ",6a,d4,aa,c0) + column) + HX_(" out of bounds (2)",eb,c3,f0,de)));
            		}
            		else {
HXLINE(  61)			if ((column == (int)0)) {
HXLINE(  63)				this->a = vector3D->x;
HXLINE(  64)				this->c = vector3D->y;
            			}
            			else {
HXLINE(  66)				if ((column == (int)1)) {
HXLINE(  68)					this->b = vector3D->x;
HXLINE(  69)					this->d = vector3D->y;
            				}
            				else {
HXLINE(  73)					this->tx = vector3D->x;
HXLINE(  74)					this->ty = vector3D->y;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,copyColumnFrom,(void))

void Matrix_obj::copyColumnTo(int column, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_a60a08489e20943f_83_copyColumnTo)
HXDLIN(  83)		if ((column > (int)2)) {
HXLINE(  85)			HX_STACK_DO_THROW(((HX_("Column ",6a,d4,aa,c0) + column) + HX_(" out of bounds (2)",eb,c3,f0,de)));
            		}
            		else {
HXLINE(  87)			if ((column == (int)0)) {
HXLINE(  89)				vector3D->x = this->a;
HXLINE(  90)				vector3D->y = this->c;
HXLINE(  91)				vector3D->z = (int)0;
            			}
            			else {
HXLINE(  93)				if ((column == (int)1)) {
HXLINE(  95)					vector3D->x = this->b;
HXLINE(  96)					vector3D->y = this->d;
HXLINE(  97)					vector3D->z = (int)0;
            				}
            				else {
HXLINE( 101)					vector3D->x = this->tx;
HXLINE( 102)					vector3D->y = this->ty;
HXLINE( 103)					vector3D->z = (int)1;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,copyColumnTo,(void))

void Matrix_obj::copyFrom( ::openfl::_legacy::geom::Matrix other){
            	HX_STACKFRAME(&_hx_pos_a60a08489e20943f_110_copyFrom)
HXLINE( 112)		this->a = other->a;
HXLINE( 113)		this->b = other->b;
HXLINE( 114)		this->c = other->c;
HXLINE( 115)		this->d = other->d;
HXLINE( 116)		this->tx = other->tx;
HXLINE( 117)		this->ty = other->ty;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,copyFrom,(void))

void Matrix_obj::copyRowFrom(int row, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_a60a08489e20943f_124_copyRowFrom)
HXDLIN( 124)		if ((row > (int)2)) {
HXLINE( 126)			HX_STACK_DO_THROW(((HX_("Row ",e6,20,88,36) + row) + HX_(" out of bounds (2)",eb,c3,f0,de)));
            		}
            		else {
HXLINE( 128)			if ((row == (int)0)) {
HXLINE( 130)				this->a = vector3D->x;
HXLINE( 131)				this->c = vector3D->y;
            			}
            			else {
HXLINE( 133)				if ((row == (int)1)) {
HXLINE( 135)					this->b = vector3D->x;
HXLINE( 136)					this->d = vector3D->y;
            				}
            				else {
HXLINE( 140)					this->tx = vector3D->x;
HXLINE( 141)					this->ty = vector3D->y;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,copyRowFrom,(void))

void Matrix_obj::copyRowTo(int row, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_a60a08489e20943f_150_copyRowTo)
HXDLIN( 150)		if ((row > (int)2)) {
HXLINE( 152)			HX_STACK_DO_THROW(((HX_("Row ",e6,20,88,36) + row) + HX_(" out of bounds (2)",eb,c3,f0,de)));
            		}
            		else {
HXLINE( 154)			if ((row == (int)0)) {
HXLINE( 156)				vector3D->x = this->a;
HXLINE( 157)				vector3D->y = this->b;
HXLINE( 158)				vector3D->z = this->tx;
            			}
            			else {
HXLINE( 160)				if ((row == (int)1)) {
HXLINE( 162)					vector3D->x = this->c;
HXLINE( 163)					vector3D->y = this->d;
HXLINE( 164)					vector3D->z = this->ty;
            				}
            				else {
HXLINE( 168)					vector3D->setTo((int)0,(int)0,(int)1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,copyRowTo,(void))

void Matrix_obj::createBox(Float scaleX,Float scaleY,hx::Null< Float >  __o_rotation,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty){
Float rotation = __o_rotation.Default(0);
Float tx = __o_tx.Default(0);
Float ty = __o_ty.Default(0);
            	HX_STACKFRAME(&_hx_pos_a60a08489e20943f_175_createBox)
HXLINE( 182)		if ((rotation != (int)0)) {
HXLINE( 184)			Float cos = ::Math_obj::cos(rotation);
HXLINE( 185)			Float sin = ::Math_obj::sin(rotation);
HXLINE( 187)			this->a = (cos * scaleX);
HXLINE( 188)			this->b = (sin * scaleY);
HXLINE( 189)			this->c = (-(sin) * scaleX);
HXLINE( 190)			this->d = (cos * scaleY);
            		}
            		else {
HXLINE( 194)			this->a = scaleX;
HXLINE( 195)			this->b = (int)0;
HXLINE( 196)			this->c = (int)0;
HXLINE( 197)			this->d = scaleY;
            		}
HXLINE( 201)		this->tx = tx;
HXLINE( 202)		this->ty = ty;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Matrix_obj,createBox,(void))

void Matrix_obj::createGradientBox(Float width,Float height,hx::Null< Float >  __o_rotation,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty){
Float rotation = __o_rotation.Default(0);
Float tx = __o_tx.Default(0);
Float ty = __o_ty.Default(0);
            	HX_STACKFRAME(&_hx_pos_a60a08489e20943f_207_createGradientBox)
HXLINE( 209)		this->a = ((Float)width / (Float)((Float)1638.4));
HXLINE( 210)		this->d = ((Float)height / (Float)((Float)1638.4));
HXLINE( 212)		if ((rotation != ((Float)0.0))) {
HXLINE( 214)			Float cos = ::Math_obj::cos(rotation);
HXLINE( 215)			Float sin = ::Math_obj::sin(rotation);
HXLINE( 216)			this->b = (sin * this->d);
HXLINE( 217)			this->c = (-(sin) * this->a);
HXLINE( 218)			 ::openfl::_legacy::geom::Matrix _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 218)			_hx_tmp->a = (_hx_tmp->a * cos);
HXLINE( 219)			 ::openfl::_legacy::geom::Matrix _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 219)			_hx_tmp1->d = (_hx_tmp1->d * cos);
            		}
            		else {
HXLINE( 223)			this->b = (this->c = (int)0);
            		}
HXLINE( 227)		this->tx = (tx + ((Float)width / (Float)(int)2));
HXLINE( 228)		this->ty = (ty + ((Float)height / (Float)(int)2));
            	}


HX_DEFINE_DYNAMIC_FUNC5(Matrix_obj,createGradientBox,(void))

 ::openfl::_legacy::geom::Point Matrix_obj::deltaTransformPoint( ::openfl::_legacy::geom::Point point){
            	HX_GC_STACKFRAME(&_hx_pos_a60a08489e20943f_235_deltaTransformPoint)
HXDLIN( 235)		Float _hx_tmp = (point->x * this->a);
HXDLIN( 235)		Float _hx_tmp1 = (_hx_tmp + (point->y * this->c));
HXDLIN( 235)		Float _hx_tmp2 = (point->x * this->b);
HXDLIN( 235)		return  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp1,(_hx_tmp2 + (point->y * this->d)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,deltaTransformPoint,return )

bool Matrix_obj::equals( ::Dynamic matrix){
            	HX_STACKFRAME(&_hx_pos_a60a08489e20943f_242_equals)
HXDLIN( 242)		bool _hx_tmp;
HXDLIN( 242)		bool _hx_tmp1;
HXDLIN( 242)		bool _hx_tmp2;
HXDLIN( 242)		bool _hx_tmp3;
HXDLIN( 242)		bool _hx_tmp4;
HXDLIN( 242)		if (hx::IsNotNull( matrix )) {
HXDLIN( 242)			_hx_tmp4 = (this->tx == ( (Float)(matrix->__Field(HX_("tx",84,65,00,00),hx::paccDynamic)) ));
            		}
            		else {
HXDLIN( 242)			_hx_tmp4 = false;
            		}
HXDLIN( 242)		if (_hx_tmp4) {
HXDLIN( 242)			_hx_tmp3 = (this->ty == ( (Float)(matrix->__Field(HX_("ty",85,65,00,00),hx::paccDynamic)) ));
            		}
            		else {
HXDLIN( 242)			_hx_tmp3 = false;
            		}
HXDLIN( 242)		if (_hx_tmp3) {
HXDLIN( 242)			_hx_tmp2 = (this->a == ( (Float)(matrix->__Field(HX_("a",61,00,00,00),hx::paccDynamic)) ));
            		}
            		else {
HXDLIN( 242)			_hx_tmp2 = false;
            		}
HXDLIN( 242)		if (_hx_tmp2) {
HXDLIN( 242)			_hx_tmp1 = (this->b == ( (Float)(matrix->__Field(HX_("b",62,00,00,00),hx::paccDynamic)) ));
            		}
            		else {
HXDLIN( 242)			_hx_tmp1 = false;
            		}
HXDLIN( 242)		if (_hx_tmp1) {
HXDLIN( 242)			_hx_tmp = (this->c == ( (Float)(matrix->__Field(HX_("c",63,00,00,00),hx::paccDynamic)) ));
            		}
            		else {
HXDLIN( 242)			_hx_tmp = false;
            		}
HXDLIN( 242)		if (_hx_tmp) {
HXDLIN( 242)			return (this->d == ( (Float)(matrix->__Field(HX_("d",64,00,00,00),hx::paccDynamic)) ));
            		}
            		else {
HXDLIN( 242)			return false;
            		}
HXDLIN( 242)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,equals,return )

void Matrix_obj::identity(){
            	HX_STACKFRAME(&_hx_pos_a60a08489e20943f_247_identity)
HXLINE( 249)		this->a = (int)1;
HXLINE( 250)		this->b = (int)0;
HXLINE( 251)		this->c = (int)0;
HXLINE( 252)		this->d = (int)1;
HXLINE( 253)		this->tx = (int)0;
HXLINE( 254)		this->ty = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,identity,(void))

 ::openfl::_legacy::geom::Matrix Matrix_obj::invert(){
            	HX_STACKFRAME(&_hx_pos_a60a08489e20943f_259_invert)
HXLINE( 261)		Float norm = (this->a * this->d);
HXDLIN( 261)		Float norm1 = (norm - (this->b * this->c));
HXLINE( 263)		if ((norm1 == (int)0)) {
HXLINE( 265)			this->a = (this->b = (this->c = (this->d = (int)0)));
HXLINE( 266)			this->tx = -(this->tx);
HXLINE( 267)			this->ty = -(this->ty);
            		}
            		else {
HXLINE( 271)			norm1 = ((Float)((Float)1.0) / (Float)norm1);
HXLINE( 272)			Float a1 = (this->d * norm1);
HXLINE( 273)			this->d = (this->a * norm1);
HXLINE( 274)			this->a = a1;
HXLINE( 275)			 ::openfl::_legacy::geom::Matrix _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 275)			_hx_tmp->b = (_hx_tmp->b * -(norm1));
HXLINE( 276)			 ::openfl::_legacy::geom::Matrix _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 276)			_hx_tmp1->c = (_hx_tmp1->c * -(norm1));
HXLINE( 278)			Float tx1 = (-(this->a) * this->tx);
HXDLIN( 278)			Float tx11 = (tx1 - (this->c * this->ty));
HXLINE( 279)			Float _hx_tmp2 = (-(this->b) * this->tx);
HXDLIN( 279)			this->ty = (_hx_tmp2 - (this->d * this->ty));
HXLINE( 280)			this->tx = tx11;
            		}
HXLINE( 284)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,invert,return )

 ::openfl::_legacy::geom::Matrix Matrix_obj::mult( ::openfl::_legacy::geom::Matrix m){
            	HX_GC_STACKFRAME(&_hx_pos_a60a08489e20943f_289_mult)
HXLINE( 291)		 ::openfl::_legacy::geom::Matrix result =  ::openfl::_legacy::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 293)		Float _hx_tmp = (this->a * m->a);
HXDLIN( 293)		result->a = (_hx_tmp + (this->b * m->c));
HXLINE( 294)		Float _hx_tmp1 = (this->a * m->b);
HXDLIN( 294)		result->b = (_hx_tmp1 + (this->b * m->d));
HXLINE( 295)		Float _hx_tmp2 = (this->c * m->a);
HXDLIN( 295)		result->c = (_hx_tmp2 + (this->d * m->c));
HXLINE( 296)		Float _hx_tmp3 = (this->c * m->b);
HXDLIN( 296)		result->d = (_hx_tmp3 + (this->d * m->d));
HXLINE( 298)		Float _hx_tmp4 = (this->tx * m->a);
HXDLIN( 298)		result->tx = ((_hx_tmp4 + (this->ty * m->c)) + m->tx);
HXLINE( 299)		Float _hx_tmp5 = (this->tx * m->b);
HXDLIN( 299)		result->ty = ((_hx_tmp5 + (this->ty * m->d)) + m->ty);
HXLINE( 301)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,mult,return )

void Matrix_obj::rotate(Float angle){
            	HX_STACKFRAME(&_hx_pos_a60a08489e20943f_306_rotate)
HXLINE( 308)		Float cos = ::Math_obj::cos(angle);
HXLINE( 309)		Float sin = ::Math_obj::sin(angle);
HXLINE( 311)		Float a1 = (this->a * cos);
HXDLIN( 311)		Float a11 = (a1 - (this->b * sin));
HXLINE( 312)		Float _hx_tmp = (this->a * sin);
HXDLIN( 312)		this->b = (_hx_tmp + (this->b * cos));
HXLINE( 313)		this->a = a11;
HXLINE( 315)		Float c1 = (this->c * cos);
HXDLIN( 315)		Float c11 = (c1 - (this->d * sin));
HXLINE( 316)		Float _hx_tmp1 = (this->c * sin);
HXDLIN( 316)		this->d = (_hx_tmp1 + (this->d * cos));
HXLINE( 317)		this->c = c11;
HXLINE( 319)		Float tx1 = (this->tx * cos);
HXDLIN( 319)		Float tx11 = (tx1 - (this->ty * sin));
HXLINE( 320)		Float _hx_tmp2 = (this->tx * sin);
HXDLIN( 320)		this->ty = (_hx_tmp2 + (this->ty * cos));
HXLINE( 321)		this->tx = tx11;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,rotate,(void))

void Matrix_obj::scale(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_a60a08489e20943f_326_scale)
HXLINE( 328)		 ::openfl::_legacy::geom::Matrix _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 328)		_hx_tmp->a = (_hx_tmp->a * x);
HXLINE( 329)		 ::openfl::_legacy::geom::Matrix _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 329)		_hx_tmp1->b = (_hx_tmp1->b * y);
HXLINE( 331)		 ::openfl::_legacy::geom::Matrix _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 331)		_hx_tmp2->c = (_hx_tmp2->c * x);
HXLINE( 332)		 ::openfl::_legacy::geom::Matrix _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 332)		_hx_tmp3->d = (_hx_tmp3->d * y);
HXLINE( 334)		 ::openfl::_legacy::geom::Matrix _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 334)		_hx_tmp4->tx = (_hx_tmp4->tx * x);
HXLINE( 335)		 ::openfl::_legacy::geom::Matrix _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 335)		_hx_tmp5->ty = (_hx_tmp5->ty * y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,scale,(void))

void Matrix_obj::setRotation(Float angle,hx::Null< Float >  __o_scale){
Float scale = __o_scale.Default(1);
            	HX_STACKFRAME(&_hx_pos_a60a08489e20943f_340_setRotation)
HXLINE( 342)		this->a = (::Math_obj::cos(angle) * scale);
HXLINE( 343)		this->c = (::Math_obj::sin(angle) * scale);
HXLINE( 344)		this->b = -(this->c);
HXLINE( 345)		this->d = this->a;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,setRotation,(void))

void Matrix_obj::setTo(Float a,Float b,Float c,Float d,Float tx,Float ty){
            	HX_STACKFRAME(&_hx_pos_a60a08489e20943f_350_setTo)
HXLINE( 352)		this->a = a;
HXLINE( 353)		this->b = b;
HXLINE( 354)		this->c = c;
HXLINE( 355)		this->d = d;
HXLINE( 356)		this->tx = tx;
HXLINE( 357)		this->ty = ty;
            	}


HX_DEFINE_DYNAMIC_FUNC6(Matrix_obj,setTo,(void))

::String Matrix_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_a60a08489e20943f_364_toString)
HXDLIN( 364)		return ((((((((((((HX_("(a=",e4,ae,1e,00) + this->a) + HX_(", b=",0f,01,2e,1d)) + this->b) + HX_(", c=",ee,01,2e,1d)) + this->c) + HX_(", d=",cd,02,2e,1d)) + this->d) + HX_(", tx=",45,c8,20,6b)) + this->tx) + HX_(", ty=",24,c9,20,6b)) + this->ty) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,toString,return )

 ::openfl::_legacy::geom::Point Matrix_obj::transformPoint( ::openfl::_legacy::geom::Point point){
            	HX_GC_STACKFRAME(&_hx_pos_a60a08489e20943f_371_transformPoint)
HXDLIN( 371)		Float _hx_tmp = (point->x * this->a);
HXDLIN( 371)		Float _hx_tmp1 = ((_hx_tmp + (point->y * this->c)) + this->tx);
HXDLIN( 371)		Float _hx_tmp2 = (point->x * this->b);
HXDLIN( 371)		return  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp1,((_hx_tmp2 + (point->y * this->d)) + this->ty));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,transformPoint,return )

void Matrix_obj::translate(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_a60a08489e20943f_376_translate)
HXLINE( 378)		 ::openfl::_legacy::geom::Matrix _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 378)		_hx_tmp->tx = (_hx_tmp->tx + x);
HXLINE( 379)		 ::openfl::_legacy::geom::Matrix _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 379)		_hx_tmp1->ty = (_hx_tmp1->ty + y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,translate,(void))


hx::ObjectPtr< Matrix_obj > Matrix_obj::__new(hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty) {
	hx::ObjectPtr< Matrix_obj > __this = new Matrix_obj();
	__this->__construct(__o_a,__o_b,__o_c,__o_d,__o_tx,__o_ty);
	return __this;
}

hx::ObjectPtr< Matrix_obj > Matrix_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty) {
	Matrix_obj *__this = (Matrix_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Matrix_obj), false, "openfl._legacy.geom.Matrix"));
	*(void **)__this = Matrix_obj::_hx_vtable;
	__this->__construct(__o_a,__o_b,__o_c,__o_d,__o_tx,__o_ty);
	return __this;
}

Matrix_obj::Matrix_obj()
{
}

hx::Val Matrix_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { return hx::Val( a ); }
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b ); }
		if (HX_FIELD_EQ(inName,"c") ) { return hx::Val( c ); }
		if (HX_FIELD_EQ(inName,"d") ) { return hx::Val( d ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"tx") ) { return hx::Val( tx ); }
		if (HX_FIELD_EQ(inName,"ty") ) { return hx::Val( ty ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mult") ) { return hx::Val( mult_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"concat") ) { return hx::Val( concat_dyn() ); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn() ); }
		if (HX_FIELD_EQ(inName,"invert") ) { return hx::Val( invert_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotate") ) { return hx::Val( rotate_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"identity") ) { return hx::Val( identity_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copyRowTo") ) { return hx::Val( copyRowTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"createBox") ) { return hx::Val( createBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"translate") ) { return hx::Val( translate_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyRowFrom") ) { return hx::Val( copyRowFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRotation") ) { return hx::Val( setRotation_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"copyColumnTo") ) { return hx::Val( copyColumnTo_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"copyColumnFrom") ) { return hx::Val( copyColumnFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"transformPoint") ) { return hx::Val( transformPoint_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"createGradientBox") ) { return hx::Val( createGradientBox_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"deltaTransformPoint") ) { return hx::Val( deltaTransformPoint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Matrix_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { a=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"c") ) { c=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"d") ) { d=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"tx") ) { tx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ty") ) { ty=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Matrix_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("a","\x61","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("c","\x63","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("d","\x64","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("tx","\x84","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("ty","\x85","\x65","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Matrix_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Matrix_obj,a),HX_HCSTRING("a","\x61","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix_obj,c),HX_HCSTRING("c","\x63","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix_obj,d),HX_HCSTRING("d","\x64","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix_obj,tx),HX_HCSTRING("tx","\x84","\x65","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix_obj,ty),HX_HCSTRING("ty","\x85","\x65","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Matrix_obj_sStaticStorageInfo = 0;
#endif

static ::String Matrix_obj_sMemberFields[] = {
	HX_HCSTRING("a","\x61","\x00","\x00","\x00"),
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("c","\x63","\x00","\x00","\x00"),
	HX_HCSTRING("d","\x64","\x00","\x00","\x00"),
	HX_HCSTRING("tx","\x84","\x65","\x00","\x00"),
	HX_HCSTRING("ty","\x85","\x65","\x00","\x00"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("concat","\x14","\x09","\xd0","\xc7"),
	HX_HCSTRING("copyColumnFrom","\x75","\x97","\xb5","\x3a"),
	HX_HCSTRING("copyColumnTo","\xc6","\x2e","\xf6","\xf6"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("copyRowFrom","\x6f","\x45","\x8b","\xef"),
	HX_HCSTRING("copyRowTo","\x40","\x8a","\x62","\x73"),
	HX_HCSTRING("createBox","\x6f","\x94","\xd8","\x49"),
	HX_HCSTRING("createGradientBox","\x5f","\xec","\xc0","\x25"),
	HX_HCSTRING("deltaTransformPoint","\x5c","\x4d","\xf7","\x15"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("identity","\x3e","\x45","\x2f","\xb9"),
	HX_HCSTRING("invert","\x16","\xe7","\xd8","\x9f"),
	HX_HCSTRING("mult","\xf0","\x67","\x65","\x48"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("setRotation","\x00","\x07","\xe7","\x38"),
	HX_HCSTRING("setTo","\xbd","\x91","\x2f","\x7a"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("transformPoint","\x44","\xcf","\x11","\x3d"),
	HX_HCSTRING("translate","\x4e","\xd7","\x7f","\x49"),
	::String(null()) };

static void Matrix_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix_obj::__mClass,"__mClass");
};

#endif

hx::Class Matrix_obj::__mClass;

void Matrix_obj::__register()
{
	hx::Object *dummy = new Matrix_obj;
	Matrix_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._legacy.geom.Matrix","\x6f","\x2c","\x4a","\x69");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Matrix_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Matrix_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Matrix_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _legacy
} // end namespace geom
