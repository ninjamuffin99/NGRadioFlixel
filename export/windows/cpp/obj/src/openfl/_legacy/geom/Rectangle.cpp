// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b8d32887da820e25_20_new,"openfl._legacy.geom.Rectangle","new",0xde610433,"openfl._legacy.geom.Rectangle.new","openfl/_legacy/geom/Rectangle.hx",20,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_32_clone,"openfl._legacy.geom.Rectangle","clone",0xab0321f0,"openfl._legacy.geom.Rectangle.clone","openfl/_legacy/geom/Rectangle.hx",32,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_39_contains,"openfl._legacy.geom.Rectangle","contains",0xd002696c,"openfl._legacy.geom.Rectangle.contains","openfl/_legacy/geom/Rectangle.hx",39,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_46_containsPoint,"openfl._legacy.geom.Rectangle","containsPoint",0xe9e91344,"openfl._legacy.geom.Rectangle.containsPoint","openfl/_legacy/geom/Rectangle.hx",46,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_53_containsRect,"openfl._legacy.geom.Rectangle","containsRect",0x71b208b0,"openfl._legacy.geom.Rectangle.containsRect","openfl/_legacy/geom/Rectangle.hx",53,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_66_copyFrom,"openfl._legacy.geom.Rectangle","copyFrom",0x6be81b0c,"openfl._legacy.geom.Rectangle.copyFrom","openfl/_legacy/geom/Rectangle.hx",66,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_78_equals,"openfl._legacy.geom.Rectangle","equals",0xa95fa04c,"openfl._legacy.geom.Rectangle.equals","openfl/_legacy/geom/Rectangle.hx",78,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_83_extendBounds,"openfl._legacy.geom.Rectangle","extendBounds",0xec1be5bc,"openfl._legacy.geom.Rectangle.extendBounds","openfl/_legacy/geom/Rectangle.hx",83,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_116_inflate,"openfl._legacy.geom.Rectangle","inflate",0x61cab5da,"openfl._legacy.geom.Rectangle.inflate","openfl/_legacy/geom/Rectangle.hx",116,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_128_inflatePoint,"openfl._legacy.geom.Rectangle","inflatePoint",0xfdcef816,"openfl._legacy.geom.Rectangle.inflatePoint","openfl/_legacy/geom/Rectangle.hx",128,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_133_intersection,"openfl._legacy.geom.Rectangle","intersection",0x53f6dc16,"openfl._legacy.geom.Rectangle.intersection","openfl/_legacy/geom/Rectangle.hx",133,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_156_intersects,"openfl._legacy.geom.Rectangle","intersects",0xc2ceff41,"openfl._legacy.geom.Rectangle.intersects","openfl/_legacy/geom/Rectangle.hx",156,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_175_isEmpty,"openfl._legacy.geom.Rectangle","isEmpty",0x620ef796,"openfl._legacy.geom.Rectangle.isEmpty","openfl/_legacy/geom/Rectangle.hx",175,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_180_offset,"openfl._legacy.geom.Rectangle","offset",0x49ac49a0,"openfl._legacy.geom.Rectangle.offset","openfl/_legacy/geom/Rectangle.hx",180,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_188_offsetPoint,"openfl._legacy.geom.Rectangle","offsetPoint",0x8701f690,"openfl._legacy.geom.Rectangle.offsetPoint","openfl/_legacy/geom/Rectangle.hx",188,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_196_setEmpty,"openfl._legacy.geom.Rectangle","setEmpty",0x2195b2d8,"openfl._legacy.geom.Rectangle.setEmpty","openfl/_legacy/geom/Rectangle.hx",196,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_206_setTo,"openfl._legacy.geom.Rectangle","setTo",0xdccfa050,"openfl._legacy.geom.Rectangle.setTo","openfl/_legacy/geom/Rectangle.hx",206,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_218_toString,"openfl._legacy.geom.Rectangle","toString",0xdbf5dff9,"openfl._legacy.geom.Rectangle.toString","openfl/_legacy/geom/Rectangle.hx",218,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_223_transform,"openfl._legacy.geom.Rectangle","transform",0xb839817f,"openfl._legacy.geom.Rectangle.transform","openfl/_legacy/geom/Rectangle.hx",223,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_256_union,"openfl._legacy.geom.Rectangle","union",0x098773a2,"openfl._legacy.geom.Rectangle.union","openfl/_legacy/geom/Rectangle.hx",256,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_274_get_bottom,"openfl._legacy.geom.Rectangle","get_bottom",0x34e39341,"openfl._legacy.geom.Rectangle.get_bottom","openfl/_legacy/geom/Rectangle.hx",274,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_275_set_bottom,"openfl._legacy.geom.Rectangle","set_bottom",0x386131b5,"openfl._legacy.geom.Rectangle.set_bottom","openfl/_legacy/geom/Rectangle.hx",275,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_276_get_bottomRight,"openfl._legacy.geom.Rectangle","get_bottomRight",0x240b7cdb,"openfl._legacy.geom.Rectangle.get_bottomRight","openfl/_legacy/geom/Rectangle.hx",276,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_277_set_bottomRight,"openfl._legacy.geom.Rectangle","set_bottomRight",0x1fd6f9e7,"openfl._legacy.geom.Rectangle.set_bottomRight","openfl/_legacy/geom/Rectangle.hx",277,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_278_get_left,"openfl._legacy.geom.Rectangle","get_left",0x6af1d2dd,"openfl._legacy.geom.Rectangle.get_left","openfl/_legacy/geom/Rectangle.hx",278,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_279_set_left,"openfl._legacy.geom.Rectangle","set_left",0x194f2c51,"openfl._legacy.geom.Rectangle.set_left","openfl/_legacy/geom/Rectangle.hx",279,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_280_get_right,"openfl._legacy.geom.Rectangle","get_right",0x9fb3bc46,"openfl._legacy.geom.Rectangle.get_right","openfl/_legacy/geom/Rectangle.hx",280,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_281_set_right,"openfl._legacy.geom.Rectangle","set_right",0x8304a852,"openfl._legacy.geom.Rectangle.set_right","openfl/_legacy/geom/Rectangle.hx",281,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_282_get_size,"openfl._legacy.geom.Rectangle","get_size",0x6f956b97,"openfl._legacy.geom.Rectangle.get_size","openfl/_legacy/geom/Rectangle.hx",282,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_283_set_size,"openfl._legacy.geom.Rectangle","set_size",0x1df2c50b,"openfl._legacy.geom.Rectangle.set_size","openfl/_legacy/geom/Rectangle.hx",283,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_284_get_top,"openfl._legacy.geom.Rectangle","get_top",0x7c7c487f,"openfl._legacy.geom.Rectangle.get_top","openfl/_legacy/geom/Rectangle.hx",284,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_285_set_top,"openfl._legacy.geom.Rectangle","set_top",0x6f7dd98b,"openfl._legacy.geom.Rectangle.set_top","openfl/_legacy/geom/Rectangle.hx",285,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_286_get_topLeft,"openfl._legacy.geom.Rectangle","get_topLeft",0x96ad2826,"openfl._legacy.geom.Rectangle.get_topLeft","openfl/_legacy/geom/Rectangle.hx",286,0xcf1e94dc)
HX_LOCAL_STACK_FRAME(_hx_pos_b8d32887da820e25_287_set_topLeft,"openfl._legacy.geom.Rectangle","set_topLeft",0xa11a2f32,"openfl._legacy.geom.Rectangle.set_topLeft","openfl/_legacy/geom/Rectangle.hx",287,0xcf1e94dc)
namespace openfl{
namespace _legacy{
namespace geom{

void Rectangle_obj::__construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
Float width = __o_width.Default(0);
Float height = __o_height.Default(0);
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_20_new)
HXLINE(  22)		this->x = x;
HXLINE(  23)		this->y = y;
HXLINE(  24)		this->width = width;
HXLINE(  25)		this->height = height;
            	}

Dynamic Rectangle_obj::__CreateEmpty() { return new Rectangle_obj; }

void *Rectangle_obj::_hx_vtable = 0;

Dynamic Rectangle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Rectangle_obj > _hx_result = new Rectangle_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Rectangle_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2d7ceabb;
}

 ::openfl::_legacy::geom::Rectangle Rectangle_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_b8d32887da820e25_32_clone)
HXDLIN(  32)		return  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,this->x,this->y,this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,clone,return )

bool Rectangle_obj::contains(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_39_contains)
HXDLIN(  39)		bool _hx_tmp;
HXDLIN(  39)		bool _hx_tmp1;
HXDLIN(  39)		if ((x >= this->x)) {
HXDLIN(  39)			_hx_tmp1 = (y >= this->y);
            		}
            		else {
HXDLIN(  39)			_hx_tmp1 = false;
            		}
HXDLIN(  39)		if (_hx_tmp1) {
HXDLIN(  39)			_hx_tmp = (x < this->get_right());
            		}
            		else {
HXDLIN(  39)			_hx_tmp = false;
            		}
HXDLIN(  39)		if (_hx_tmp) {
HXDLIN(  39)			return (y < this->get_bottom());
            		}
            		else {
HXDLIN(  39)			return false;
            		}
HXDLIN(  39)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,contains,return )

bool Rectangle_obj::containsPoint( ::openfl::_legacy::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_46_containsPoint)
HXDLIN(  46)		return this->contains(point->x,point->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,containsPoint,return )

bool Rectangle_obj::containsRect( ::openfl::_legacy::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_53_containsRect)
HXDLIN(  53)		bool _hx_tmp;
HXDLIN(  53)		if (!((rect->width <= (int)0))) {
HXDLIN(  53)			_hx_tmp = (rect->height <= (int)0);
            		}
            		else {
HXDLIN(  53)			_hx_tmp = true;
            		}
HXDLIN(  53)		if (_hx_tmp) {
HXLINE(  55)			bool _hx_tmp1;
HXDLIN(  55)			bool _hx_tmp2;
HXDLIN(  55)			if ((rect->x > this->x)) {
HXLINE(  55)				_hx_tmp2 = (rect->y > this->y);
            			}
            			else {
HXLINE(  55)				_hx_tmp2 = false;
            			}
HXDLIN(  55)			if (_hx_tmp2) {
HXLINE(  55)				Float _hx_tmp3 = rect->get_right();
HXDLIN(  55)				_hx_tmp1 = (_hx_tmp3 < this->get_right());
            			}
            			else {
HXLINE(  55)				_hx_tmp1 = false;
            			}
HXDLIN(  55)			if (_hx_tmp1) {
HXLINE(  55)				Float _hx_tmp4 = rect->get_bottom();
HXDLIN(  55)				return (_hx_tmp4 < this->get_bottom());
            			}
            			else {
HXLINE(  55)				return false;
            			}
            		}
            		else {
HXLINE(  59)			bool _hx_tmp5;
HXDLIN(  59)			bool _hx_tmp6;
HXDLIN(  59)			if ((rect->x >= this->x)) {
HXLINE(  59)				_hx_tmp6 = (rect->y >= this->y);
            			}
            			else {
HXLINE(  59)				_hx_tmp6 = false;
            			}
HXDLIN(  59)			if (_hx_tmp6) {
HXLINE(  59)				Float _hx_tmp7 = rect->get_right();
HXDLIN(  59)				_hx_tmp5 = (_hx_tmp7 <= this->get_right());
            			}
            			else {
HXLINE(  59)				_hx_tmp5 = false;
            			}
HXDLIN(  59)			if (_hx_tmp5) {
HXLINE(  59)				Float _hx_tmp8 = rect->get_bottom();
HXDLIN(  59)				return (_hx_tmp8 <= this->get_bottom());
            			}
            			else {
HXLINE(  59)				return false;
            			}
            		}
HXLINE(  53)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,containsRect,return )

void Rectangle_obj::copyFrom( ::openfl::_legacy::geom::Rectangle sourceRect){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_66_copyFrom)
HXLINE(  68)		this->x = sourceRect->x;
HXLINE(  69)		this->y = sourceRect->y;
HXLINE(  70)		this->width = sourceRect->width;
HXLINE(  71)		this->height = sourceRect->height;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,copyFrom,(void))

bool Rectangle_obj::equals( ::openfl::_legacy::geom::Rectangle toCompare){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_78_equals)
HXDLIN(  78)		bool _hx_tmp;
HXDLIN(  78)		bool _hx_tmp1;
HXDLIN(  78)		if ((this->x == toCompare->x)) {
HXDLIN(  78)			_hx_tmp1 = (this->y == toCompare->y);
            		}
            		else {
HXDLIN(  78)			_hx_tmp1 = false;
            		}
HXDLIN(  78)		if (_hx_tmp1) {
HXDLIN(  78)			_hx_tmp = (this->width == toCompare->width);
            		}
            		else {
HXDLIN(  78)			_hx_tmp = false;
            		}
HXDLIN(  78)		if (_hx_tmp) {
HXDLIN(  78)			return (this->height == toCompare->height);
            		}
            		else {
HXDLIN(  78)			return false;
            		}
HXDLIN(  78)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,equals,return )

void Rectangle_obj::extendBounds( ::openfl::_legacy::geom::Rectangle r){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_83_extendBounds)
HXLINE(  85)		Float dx = (this->x - r->x);
HXLINE(  86)		if ((dx > (int)0)) {
HXLINE(  88)			 ::openfl::_legacy::geom::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  88)			_hx_tmp->x = (_hx_tmp->x - dx);
HXLINE(  89)			 ::openfl::_legacy::geom::Rectangle _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  89)			_hx_tmp1->width = (_hx_tmp1->width + dx);
            		}
HXLINE(  93)		Float dy = (this->y - r->y);
HXLINE(  94)		if ((dy > (int)0)) {
HXLINE(  96)			 ::openfl::_legacy::geom::Rectangle _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  96)			_hx_tmp2->y = (_hx_tmp2->y - dy);
HXLINE(  97)			 ::openfl::_legacy::geom::Rectangle _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  97)			_hx_tmp3->height = (_hx_tmp3->height + dy);
            		}
HXLINE( 101)		Float _hx_tmp4 = r->get_right();
HXDLIN( 101)		if ((_hx_tmp4 > this->get_right())) {
HXLINE( 103)			this->set_right(r->get_right());
            		}
HXLINE( 107)		Float _hx_tmp5 = r->get_bottom();
HXDLIN( 107)		if ((_hx_tmp5 > this->get_bottom())) {
HXLINE( 109)			this->set_bottom(r->get_bottom());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,extendBounds,(void))

void Rectangle_obj::inflate(Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_116_inflate)
HXLINE( 118)		 ::openfl::_legacy::geom::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 118)		_hx_tmp->x = (_hx_tmp->x - dx);
HXLINE( 119)		 ::openfl::_legacy::geom::Rectangle _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 119)		_hx_tmp1->y = (_hx_tmp1->y - dy);
HXLINE( 120)		 ::openfl::_legacy::geom::Rectangle _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 120)		_hx_tmp2->width = (_hx_tmp2->width + (dx * (int)2));
HXLINE( 121)		 ::openfl::_legacy::geom::Rectangle _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 121)		_hx_tmp3->height = (_hx_tmp3->height + (dy * (int)2));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,inflate,(void))

void Rectangle_obj::inflatePoint( ::openfl::_legacy::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_128_inflatePoint)
HXDLIN( 128)		this->inflate(point->x,point->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,inflatePoint,(void))

 ::openfl::_legacy::geom::Rectangle Rectangle_obj::intersection( ::openfl::_legacy::geom::Rectangle toIntersect){
            	HX_GC_STACKFRAME(&_hx_pos_b8d32887da820e25_133_intersection)
HXLINE( 135)		Float x0;
HXDLIN( 135)		if ((this->x < toIntersect->x)) {
HXLINE( 135)			x0 = toIntersect->x;
            		}
            		else {
HXLINE( 135)			x0 = this->x;
            		}
HXLINE( 136)		Float x1;
HXDLIN( 136)		Float x11 = this->get_right();
HXDLIN( 136)		if ((x11 > toIntersect->get_right())) {
HXLINE( 136)			x1 = toIntersect->get_right();
            		}
            		else {
HXLINE( 136)			x1 = this->get_right();
            		}
HXLINE( 137)		if ((x1 <= x0)) {
HXLINE( 139)			return  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 143)		Float y0;
HXDLIN( 143)		if ((this->y < toIntersect->y)) {
HXLINE( 143)			y0 = toIntersect->y;
            		}
            		else {
HXLINE( 143)			y0 = this->y;
            		}
HXLINE( 144)		Float y1;
HXDLIN( 144)		Float y11 = this->get_bottom();
HXDLIN( 144)		if ((y11 > toIntersect->get_bottom())) {
HXLINE( 144)			y1 = toIntersect->get_bottom();
            		}
            		else {
HXLINE( 144)			y1 = this->get_bottom();
            		}
HXLINE( 145)		if ((y1 <= y0)) {
HXLINE( 147)			return  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 151)		return  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,x0,y0,(x1 - x0),(y1 - y0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,intersection,return )

bool Rectangle_obj::intersects( ::openfl::_legacy::geom::Rectangle toIntersect){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_156_intersects)
HXLINE( 158)		Float x0;
HXDLIN( 158)		if ((this->x < toIntersect->x)) {
HXLINE( 158)			x0 = toIntersect->x;
            		}
            		else {
HXLINE( 158)			x0 = this->x;
            		}
HXLINE( 159)		Float x1;
HXDLIN( 159)		Float x11 = this->get_right();
HXDLIN( 159)		if ((x11 > toIntersect->get_right())) {
HXLINE( 159)			x1 = toIntersect->get_right();
            		}
            		else {
HXLINE( 159)			x1 = this->get_right();
            		}
HXLINE( 160)		if ((x1 <= x0)) {
HXLINE( 162)			return false;
            		}
HXLINE( 166)		Float y0;
HXDLIN( 166)		if ((this->y < toIntersect->y)) {
HXLINE( 166)			y0 = toIntersect->y;
            		}
            		else {
HXLINE( 166)			y0 = this->y;
            		}
HXLINE( 167)		Float y1;
HXDLIN( 167)		Float y11 = this->get_bottom();
HXDLIN( 167)		if ((y11 > toIntersect->get_bottom())) {
HXLINE( 167)			y1 = toIntersect->get_bottom();
            		}
            		else {
HXLINE( 167)			y1 = this->get_bottom();
            		}
HXLINE( 168)		return (y1 > y0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,intersects,return )

bool Rectangle_obj::isEmpty(){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_175_isEmpty)
HXDLIN( 175)		if (!((this->width <= (int)0))) {
HXDLIN( 175)			return (this->height <= (int)0);
            		}
            		else {
HXDLIN( 175)			return true;
            		}
HXDLIN( 175)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,isEmpty,return )

void Rectangle_obj::offset(Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_180_offset)
HXLINE( 182)		 ::openfl::_legacy::geom::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 182)		_hx_tmp->x = (_hx_tmp->x + dx);
HXLINE( 183)		 ::openfl::_legacy::geom::Rectangle _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 183)		_hx_tmp1->y = (_hx_tmp1->y + dy);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,offset,(void))

void Rectangle_obj::offsetPoint( ::openfl::_legacy::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_188_offsetPoint)
HXLINE( 190)		 ::openfl::_legacy::geom::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 190)		_hx_tmp->x = (_hx_tmp->x + point->x);
HXLINE( 191)		 ::openfl::_legacy::geom::Rectangle _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 191)		_hx_tmp1->y = (_hx_tmp1->y + point->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,offsetPoint,(void))

void Rectangle_obj::setEmpty(){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_196_setEmpty)
HXLINE( 198)		this->x = (int)0;
HXLINE( 199)		this->y = (int)0;
HXLINE( 200)		this->width = (int)0;
HXLINE( 201)		this->height = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,setEmpty,(void))

void Rectangle_obj::setTo(Float xa,Float ya,Float widtha,Float heighta){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_206_setTo)
HXLINE( 208)		this->x = xa;
HXLINE( 209)		this->y = ya;
HXLINE( 210)		this->width = widtha;
HXLINE( 211)		this->height = heighta;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Rectangle_obj,setTo,(void))

::String Rectangle_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_218_toString)
HXDLIN( 218)		return ((((((((HX_("(x=",ed,c2,1e,00) + this->x) + HX_(", y=",18,15,2e,1d)) + this->y) + HX_(", width=",eb,04,57,53)) + this->width) + HX_(", height=",82,32,07,68)) + this->height) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,toString,return )

 ::openfl::_legacy::geom::Rectangle Rectangle_obj::transform( ::openfl::_legacy::geom::Matrix m){
            	HX_GC_STACKFRAME(&_hx_pos_b8d32887da820e25_223_transform)
HXLINE( 225)		Float tx0 = (m->a * this->x);
HXDLIN( 225)		Float tx01 = (tx0 + (m->c * this->y));
HXLINE( 226)		Float tx1 = tx01;
HXLINE( 227)		Float ty0 = (m->b * this->x);
HXDLIN( 227)		Float ty01 = (ty0 + (m->d * this->y));
HXLINE( 228)		Float ty1 = tx01;
HXLINE( 230)		Float m1 = m->a;
HXDLIN( 230)		Float tx = (m1 * (this->x + this->width));
HXDLIN( 230)		Float tx2 = (tx + (m->c * this->y));
HXLINE( 231)		Float m2 = m->b;
HXDLIN( 231)		Float ty = (m2 * (this->x + this->width));
HXDLIN( 231)		Float ty2 = (ty + (m->d * this->y));
HXLINE( 232)		if ((tx2 < tx01)) {
HXLINE( 232)			tx01 = tx2;
            		}
HXLINE( 233)		if ((ty2 < ty01)) {
HXLINE( 233)			ty01 = ty2;
            		}
HXLINE( 234)		if ((tx2 > tx1)) {
HXLINE( 234)			tx1 = tx2;
            		}
HXLINE( 235)		if ((ty2 > ty1)) {
HXLINE( 235)			ty1 = ty2;
            		}
HXLINE( 237)		Float m3 = m->a;
HXDLIN( 237)		Float tx3 = (m3 * (this->x + this->width));
HXDLIN( 237)		Float m4 = m->c;
HXDLIN( 237)		tx2 = (tx3 + (m4 * (this->y + this->height)));
HXLINE( 238)		Float m5 = m->b;
HXDLIN( 238)		Float ty3 = (m5 * (this->x + this->width));
HXDLIN( 238)		Float m6 = m->d;
HXDLIN( 238)		ty2 = (ty3 + (m6 * (this->y + this->height)));
HXLINE( 239)		if ((tx2 < tx01)) {
HXLINE( 239)			tx01 = tx2;
            		}
HXLINE( 240)		if ((ty2 < ty01)) {
HXLINE( 240)			ty01 = ty2;
            		}
HXLINE( 241)		if ((tx2 > tx1)) {
HXLINE( 241)			tx1 = tx2;
            		}
HXLINE( 242)		if ((ty2 > ty1)) {
HXLINE( 242)			ty1 = ty2;
            		}
HXLINE( 244)		Float tx4 = (m->a * this->x);
HXDLIN( 244)		Float m7 = m->c;
HXDLIN( 244)		tx2 = (tx4 + (m7 * (this->y + this->height)));
HXLINE( 245)		Float ty4 = (m->b * this->x);
HXDLIN( 245)		Float m8 = m->d;
HXDLIN( 245)		ty2 = (ty4 + (m8 * (this->y + this->height)));
HXLINE( 246)		if ((tx2 < tx01)) {
HXLINE( 246)			tx01 = tx2;
            		}
HXLINE( 247)		if ((ty2 < ty01)) {
HXLINE( 247)			ty01 = ty2;
            		}
HXLINE( 248)		if ((tx2 > tx1)) {
HXLINE( 248)			tx1 = tx2;
            		}
HXLINE( 249)		if ((ty2 > ty1)) {
HXLINE( 249)			ty1 = ty2;
            		}
HXLINE( 251)		Float _hx_tmp = (tx01 + m->tx);
HXDLIN( 251)		Float _hx_tmp1 = (ty01 + m->ty);
HXDLIN( 251)		return  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,(tx1 - tx01),(ty1 - ty01));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,transform,return )

 ::openfl::_legacy::geom::Rectangle Rectangle_obj::_hx_union( ::openfl::_legacy::geom::Rectangle toUnion){
            	HX_GC_STACKFRAME(&_hx_pos_b8d32887da820e25_256_union)
HXLINE( 258)		Float x0;
HXDLIN( 258)		if ((this->x > toUnion->x)) {
HXLINE( 258)			x0 = toUnion->x;
            		}
            		else {
HXLINE( 258)			x0 = this->x;
            		}
HXLINE( 259)		Float x1;
HXDLIN( 259)		Float x11 = this->get_right();
HXDLIN( 259)		if ((x11 < toUnion->get_right())) {
HXLINE( 259)			x1 = toUnion->get_right();
            		}
            		else {
HXLINE( 259)			x1 = this->get_right();
            		}
HXLINE( 260)		Float y0;
HXDLIN( 260)		if ((this->y > toUnion->y)) {
HXLINE( 260)			y0 = toUnion->y;
            		}
            		else {
HXLINE( 260)			y0 = this->y;
            		}
HXLINE( 261)		Float y1;
HXDLIN( 261)		Float y11 = this->get_bottom();
HXDLIN( 261)		if ((y11 < toUnion->get_bottom())) {
HXLINE( 261)			y1 = toUnion->get_bottom();
            		}
            		else {
HXLINE( 261)			y1 = this->get_bottom();
            		}
HXLINE( 262)		return  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,x0,y0,(x1 - x0),(y1 - y0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,_hx_union,return )

Float Rectangle_obj::get_bottom(){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_274_get_bottom)
HXDLIN( 274)		return (this->y + this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_bottom,return )

Float Rectangle_obj::set_bottom(Float value){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_275_set_bottom)
HXDLIN( 275)		this->height = (value - this->y);
HXDLIN( 275)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_bottom,return )

 ::openfl::_legacy::geom::Point Rectangle_obj::get_bottomRight(){
            	HX_GC_STACKFRAME(&_hx_pos_b8d32887da820e25_276_get_bottomRight)
HXDLIN( 276)		Float _hx_tmp = (this->x + this->width);
HXDLIN( 276)		return  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp,(this->y + this->height));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_bottomRight,return )

 ::openfl::_legacy::geom::Point Rectangle_obj::set_bottomRight( ::openfl::_legacy::geom::Point value){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_277_set_bottomRight)
HXDLIN( 277)		this->width = (value->x - this->x);
HXDLIN( 277)		this->height = (value->y - this->y);
HXDLIN( 277)		return value->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_bottomRight,return )

Float Rectangle_obj::get_left(){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_278_get_left)
HXDLIN( 278)		return this->x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_left,return )

Float Rectangle_obj::set_left(Float value){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_279_set_left)
HXDLIN( 279)		 ::openfl::_legacy::geom::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 279)		_hx_tmp->width = (_hx_tmp->width - (value - this->x));
HXDLIN( 279)		this->x = value;
HXDLIN( 279)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_left,return )

Float Rectangle_obj::get_right(){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_280_get_right)
HXDLIN( 280)		return (this->x + this->width);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_right,return )

Float Rectangle_obj::set_right(Float value){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_281_set_right)
HXDLIN( 281)		this->width = (value - this->x);
HXDLIN( 281)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_right,return )

 ::openfl::_legacy::geom::Point Rectangle_obj::get_size(){
            	HX_GC_STACKFRAME(&_hx_pos_b8d32887da820e25_282_get_size)
HXDLIN( 282)		return  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_size,return )

 ::openfl::_legacy::geom::Point Rectangle_obj::set_size( ::openfl::_legacy::geom::Point value){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_283_set_size)
HXDLIN( 283)		this->width = value->x;
HXDLIN( 283)		this->height = value->y;
HXDLIN( 283)		return value->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_size,return )

Float Rectangle_obj::get_top(){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_284_get_top)
HXDLIN( 284)		return this->y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_top,return )

Float Rectangle_obj::set_top(Float value){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_285_set_top)
HXDLIN( 285)		 ::openfl::_legacy::geom::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 285)		_hx_tmp->height = (_hx_tmp->height - (value - this->y));
HXDLIN( 285)		this->y = value;
HXDLIN( 285)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_top,return )

 ::openfl::_legacy::geom::Point Rectangle_obj::get_topLeft(){
            	HX_GC_STACKFRAME(&_hx_pos_b8d32887da820e25_286_get_topLeft)
HXDLIN( 286)		return  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,this->x,this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_topLeft,return )

 ::openfl::_legacy::geom::Point Rectangle_obj::set_topLeft( ::openfl::_legacy::geom::Point value){
            	HX_STACKFRAME(&_hx_pos_b8d32887da820e25_287_set_topLeft)
HXDLIN( 287)		this->x = value->x;
HXDLIN( 287)		this->y = value->y;
HXDLIN( 287)		return value->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_topLeft,return )


hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height) {
	hx::ObjectPtr< Rectangle_obj > __this = new Rectangle_obj();
	__this->__construct(__o_x,__o_y,__o_width,__o_height);
	return __this;
}

hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height) {
	Rectangle_obj *__this = (Rectangle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Rectangle_obj), false, "openfl._legacy.geom.Rectangle"));
	*(void **)__this = Rectangle_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_width,__o_height);
	return __this;
}

Rectangle_obj::Rectangle_obj()
{
}

hx::Val Rectangle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_top() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_left() ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_size() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_right() ); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"union") ) { return hx::Val( _hx_union_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bottom() ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn() ); }
		if (HX_FIELD_EQ(inName,"offset") ) { return hx::Val( offset_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"topLeft") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_topLeft() ); }
		if (HX_FIELD_EQ(inName,"inflate") ) { return hx::Val( inflate_dyn() ); }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return hx::Val( isEmpty_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_top") ) { return hx::Val( get_top_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_top") ) { return hx::Val( set_top_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"setEmpty") ) { return hx::Val( setEmpty_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_left") ) { return hx::Val( get_left_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_left") ) { return hx::Val( set_left_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return hx::Val( set_size_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { return hx::Val( transform_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_right") ) { return hx::Val( get_right_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_right") ) { return hx::Val( set_right_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"intersects") ) { return hx::Val( intersects_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottom") ) { return hx::Val( get_bottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bottom") ) { return hx::Val( set_bottom_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bottomRight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bottomRight() ); }
		if (HX_FIELD_EQ(inName,"offsetPoint") ) { return hx::Val( offsetPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_topLeft") ) { return hx::Val( get_topLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_topLeft") ) { return hx::Val( set_topLeft_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"containsRect") ) { return hx::Val( containsRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"extendBounds") ) { return hx::Val( extendBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"inflatePoint") ) { return hx::Val( inflatePoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"intersection") ) { return hx::Val( intersection_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"containsPoint") ) { return hx::Val( containsPoint_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_bottomRight") ) { return hx::Val( get_bottomRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bottomRight") ) { return hx::Val( set_bottomRight_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Rectangle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_top(inValue.Cast< Float >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_left(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_size(inValue.Cast<  ::openfl::_legacy::geom::Point >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_right(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bottom(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"topLeft") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_topLeft(inValue.Cast<  ::openfl::_legacy::geom::Point >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bottomRight") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bottomRight(inValue.Cast<  ::openfl::_legacy::geom::Point >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Rectangle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bottom","\xeb","\xe6","\x78","\x65"));
	outFields->push(HX_HCSTRING("bottomRight","\xf1","\xa0","\xf4","\x4e"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("left","\x07","\x08","\xb0","\x47"));
	outFields->push(HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("top","\x95","\x66","\x58","\x00"));
	outFields->push(HX_HCSTRING("topLeft","\x3c","\x09","\xc1","\xe8"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Rectangle_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Rectangle_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Rectangle_obj_sStaticStorageInfo = 0;
#endif

static ::String Rectangle_obj_sMemberFields[] = {
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("containsPoint","\xb1","\xb9","\xeb","\x92"),
	HX_HCSTRING("containsRect","\xe3","\xce","\x1c","\xa6"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("extendBounds","\xef","\xab","\x86","\x20"),
	HX_HCSTRING("inflate","\x87","\x9c","\x1b","\x0c"),
	HX_HCSTRING("inflatePoint","\x49","\xbe","\x39","\x32"),
	HX_HCSTRING("intersection","\x49","\xa2","\x61","\x88"),
	HX_HCSTRING("intersects","\xb4","\xc2","\xeb","\xe3"),
	HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"),
	HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"),
	HX_HCSTRING("offsetPoint","\xbd","\x37","\x10","\x5f"),
	HX_HCSTRING("setEmpty","\x8b","\xa3","\x0e","\x7e"),
	HX_HCSTRING("setTo","\xbd","\x91","\x2f","\x7a"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"),
	HX_HCSTRING("union","\x0f","\x65","\xe7","\xa6"),
	HX_HCSTRING("get_bottom","\xb4","\x56","\x00","\x56"),
	HX_HCSTRING("set_bottom","\x28","\xf5","\x7d","\x59"),
	HX_HCSTRING("get_bottomRight","\x88","\x58","\xd6","\x0f"),
	HX_HCSTRING("set_bottomRight","\x94","\xd5","\xa1","\x0b"),
	HX_HCSTRING("get_left","\x90","\xc3","\x6a","\xc7"),
	HX_HCSTRING("set_left","\x04","\x1d","\xc8","\x75"),
	HX_HCSTRING("get_right","\x33","\x68","\x0d","\x2d"),
	HX_HCSTRING("set_right","\x3f","\x54","\x5e","\x10"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	HX_HCSTRING("set_size","\xbe","\xb5","\x6b","\x7a"),
	HX_HCSTRING("get_top","\x2c","\x2f","\xcd","\x26"),
	HX_HCSTRING("set_top","\x38","\xc0","\xce","\x19"),
	HX_HCSTRING("get_topLeft","\x53","\x69","\xbb","\x6e"),
	HX_HCSTRING("set_topLeft","\x5f","\x70","\x28","\x79"),
	::String(null()) };

static void Rectangle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Rectangle_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Rectangle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Rectangle_obj::__mClass,"__mClass");
};

#endif

hx::Class Rectangle_obj::__mClass;

void Rectangle_obj::__register()
{
	hx::Object *dummy = new Rectangle_obj;
	Rectangle_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._legacy.geom.Rectangle","\xc1","\x6e","\x80","\xcb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Rectangle_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Rectangle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Rectangle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Rectangle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rectangle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rectangle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _legacy
} // end namespace geom
