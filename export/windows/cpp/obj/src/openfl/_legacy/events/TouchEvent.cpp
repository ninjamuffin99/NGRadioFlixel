// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_MouseEvent
#include <openfl/_legacy/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_TouchEvent
#include <openfl/_legacy/events/TouchEvent.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_968bec0d92372e1f_27_new,"openfl._legacy.events.TouchEvent","new",0xbe6529be,"openfl._legacy.events.TouchEvent.new","openfl/_legacy/events/TouchEvent.hx",27,0x427be0d3)
HX_LOCAL_STACK_FRAME(_hx_pos_968bec0d92372e1f_52___createSimilar,"openfl._legacy.events.TouchEvent","__createSimilar",0xbdda25cd,"openfl._legacy.events.TouchEvent.__createSimilar","openfl/_legacy/events/TouchEvent.hx",52,0x427be0d3)
HX_LOCAL_STACK_FRAME(_hx_pos_968bec0d92372e1f_40___create,"openfl._legacy.events.TouchEvent","__create",0x2136c3fe,"openfl._legacy.events.TouchEvent.__create","openfl/_legacy/events/TouchEvent.hx",40,0x427be0d3)
HX_LOCAL_STACK_FRAME(_hx_pos_968bec0d92372e1f_11_boot,"openfl._legacy.events.TouchEvent","boot",0xd2385d14,"openfl._legacy.events.TouchEvent.boot","openfl/_legacy/events/TouchEvent.hx",11,0x427be0d3)
HX_LOCAL_STACK_FRAME(_hx_pos_968bec0d92372e1f_12_boot,"openfl._legacy.events.TouchEvent","boot",0xd2385d14,"openfl._legacy.events.TouchEvent.boot","openfl/_legacy/events/TouchEvent.hx",12,0x427be0d3)
HX_LOCAL_STACK_FRAME(_hx_pos_968bec0d92372e1f_13_boot,"openfl._legacy.events.TouchEvent","boot",0xd2385d14,"openfl._legacy.events.TouchEvent.boot","openfl/_legacy/events/TouchEvent.hx",13,0x427be0d3)
HX_LOCAL_STACK_FRAME(_hx_pos_968bec0d92372e1f_14_boot,"openfl._legacy.events.TouchEvent","boot",0xd2385d14,"openfl._legacy.events.TouchEvent.boot","openfl/_legacy/events/TouchEvent.hx",14,0x427be0d3)
HX_LOCAL_STACK_FRAME(_hx_pos_968bec0d92372e1f_15_boot,"openfl._legacy.events.TouchEvent","boot",0xd2385d14,"openfl._legacy.events.TouchEvent.boot","openfl/_legacy/events/TouchEvent.hx",15,0x427be0d3)
HX_LOCAL_STACK_FRAME(_hx_pos_968bec0d92372e1f_16_boot,"openfl._legacy.events.TouchEvent","boot",0xd2385d14,"openfl._legacy.events.TouchEvent.boot","openfl/_legacy/events/TouchEvent.hx",16,0x427be0d3)
HX_LOCAL_STACK_FRAME(_hx_pos_968bec0d92372e1f_17_boot,"openfl._legacy.events.TouchEvent","boot",0xd2385d14,"openfl._legacy.events.TouchEvent.boot","openfl/_legacy/events/TouchEvent.hx",17,0x427be0d3)
HX_LOCAL_STACK_FRAME(_hx_pos_968bec0d92372e1f_18_boot,"openfl._legacy.events.TouchEvent","boot",0xd2385d14,"openfl._legacy.events.TouchEvent.boot","openfl/_legacy/events/TouchEvent.hx",18,0x427be0d3)
namespace openfl{
namespace _legacy{
namespace events{

void TouchEvent_obj::__construct(::String type,hx::Null< bool >  __o_bubbles,hx::Null< bool >  __o_cancelable,hx::Null< Float >  __o_localX,hx::Null< Float >  __o_localY,hx::Null< Float >  __o_sizeX,hx::Null< Float >  __o_sizeY, ::openfl::_legacy::display::InteractiveObject relatedObject,hx::Null< bool >  __o_ctrlKey,hx::Null< bool >  __o_altKey,hx::Null< bool >  __o_shiftKey,hx::Null< bool >  __o_buttonDown,hx::Null< int >  __o_delta,hx::Null< bool >  __o_commandKey,hx::Null< int >  __o_clickCount){
bool bubbles = __o_bubbles.Default(true);
bool cancelable = __o_cancelable.Default(false);
Float localX = __o_localX.Default(0);
Float localY = __o_localY.Default(0);
Float sizeX = __o_sizeX.Default(1);
Float sizeY = __o_sizeY.Default(1);
bool ctrlKey = __o_ctrlKey.Default(false);
bool altKey = __o_altKey.Default(false);
bool shiftKey = __o_shiftKey.Default(false);
bool buttonDown = __o_buttonDown.Default(false);
int delta = __o_delta.Default(0);
bool commandKey = __o_commandKey.Default(false);
int clickCount = __o_clickCount.Default(0);
            	HX_STACKFRAME(&_hx_pos_968bec0d92372e1f_27_new)
HXLINE(  29)		super::__construct(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount);
HXLINE(  31)		this->pressure = (int)1;
HXLINE(  32)		this->touchPointID = (int)0;
HXLINE(  33)		this->isPrimaryTouchPoint = true;
HXLINE(  34)		this->sizeX = sizeX;
HXLINE(  35)		this->sizeY = sizeY;
            	}

Dynamic TouchEvent_obj::__CreateEmpty() { return new TouchEvent_obj; }

void *TouchEvent_obj::_hx_vtable = 0;

Dynamic TouchEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TouchEvent_obj > _hx_result = new TouchEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14]);
	return _hx_result;
}

bool TouchEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0dd3a6b1) {
		if (inClassId<=(int)0x0696fdac) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0696fdac;
		} else {
			return inClassId==(int)0x0dd3a6b1;
		}
	} else {
		return inClassId==(int)0x2ad30d86;
	}
}

 ::openfl::_legacy::events::MouseEvent TouchEvent_obj::_hx___createSimilar(::String type, ::openfl::_legacy::display::InteractiveObject related, ::openfl::_legacy::display::InteractiveObject target){
            	HX_GC_STACKFRAME(&_hx_pos_968bec0d92372e1f_52___createSimilar)
HXLINE(  54)		bool touchEvent = this->get_bubbles();
HXDLIN(  54)		bool touchEvent1 = this->get_cancelable();
HXDLIN(  54)		 ::openfl::_legacy::display::InteractiveObject touchEvent2;
HXDLIN(  54)		if (hx::IsNull( related )) {
HXLINE(  54)			touchEvent2 = this->relatedObject;
            		}
            		else {
HXLINE(  54)			touchEvent2 = related;
            		}
HXDLIN(  54)		 ::openfl::_legacy::events::TouchEvent touchEvent3 =  ::openfl::_legacy::events::TouchEvent_obj::__alloc( HX_CTX ,type,touchEvent,touchEvent1,this->localX,this->localY,this->sizeX,this->sizeY,touchEvent2,this->ctrlKey,this->altKey,this->shiftKey,this->buttonDown,this->delta,this->commandKey,this->clickCount);
HXLINE(  56)		touchEvent3->touchPointID = this->touchPointID;
HXLINE(  57)		touchEvent3->isPrimaryTouchPoint = this->isPrimaryTouchPoint;
HXLINE(  59)		if (hx::IsNotNull( target )) {
HXLINE(  61)			touchEvent3->set_target(target);
            		}
HXLINE(  65)		return touchEvent3;
            	}


::String TouchEvent_obj::TOUCH_BEGIN;

::String TouchEvent_obj::TOUCH_END;

::String TouchEvent_obj::TOUCH_MOVE;

::String TouchEvent_obj::TOUCH_OUT;

::String TouchEvent_obj::TOUCH_OVER;

::String TouchEvent_obj::TOUCH_ROLL_OUT;

::String TouchEvent_obj::TOUCH_ROLL_OVER;

::String TouchEvent_obj::TOUCH_TAP;

 ::openfl::_legacy::events::TouchEvent TouchEvent_obj::_hx___create(::String type, ::Dynamic event, ::openfl::_legacy::geom::Point local, ::openfl::_legacy::display::InteractiveObject target,Float sizeX,Float sizeY){
            	HX_GC_STACKFRAME(&_hx_pos_968bec0d92372e1f_40___create)
HXLINE(  42)		int flags = ( (int)(event->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXLINE(  43)		Float local1 = local->x;
HXDLIN(  43)		Float local2 = local->y;
HXDLIN(  43)		bool touchEvent = (((int)flags & (int)::openfl::_legacy::events::MouseEvent_obj::efCtrlDown) != (int)0);
HXDLIN(  43)		bool touchEvent1 = (((int)flags & (int)::openfl::_legacy::events::MouseEvent_obj::efAltDown) != (int)0);
HXDLIN(  43)		bool touchEvent2 = (((int)flags & (int)::openfl::_legacy::events::MouseEvent_obj::efShiftDown) != (int)0);
HXDLIN(  43)		 ::openfl::_legacy::events::TouchEvent touchEvent3 =  ::openfl::_legacy::events::TouchEvent_obj::__alloc( HX_CTX ,type,true,false,local1,local2,sizeX,sizeY,null(),touchEvent,touchEvent1,touchEvent2,(((int)flags & (int)::openfl::_legacy::events::MouseEvent_obj::efLeftDown) != (int)0),(int)0,null(),(int)0);
HXLINE(  44)		touchEvent3->stageX = ( (Float)(event->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXLINE(  45)		touchEvent3->stageY = ( (Float)(event->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXLINE(  46)		touchEvent3->set_target(target);
HXLINE(  47)		return touchEvent3;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(TouchEvent_obj,_hx___create,return )


hx::ObjectPtr< TouchEvent_obj > TouchEvent_obj::__new(::String type,hx::Null< bool >  __o_bubbles,hx::Null< bool >  __o_cancelable,hx::Null< Float >  __o_localX,hx::Null< Float >  __o_localY,hx::Null< Float >  __o_sizeX,hx::Null< Float >  __o_sizeY, ::openfl::_legacy::display::InteractiveObject relatedObject,hx::Null< bool >  __o_ctrlKey,hx::Null< bool >  __o_altKey,hx::Null< bool >  __o_shiftKey,hx::Null< bool >  __o_buttonDown,hx::Null< int >  __o_delta,hx::Null< bool >  __o_commandKey,hx::Null< int >  __o_clickCount) {
	hx::ObjectPtr< TouchEvent_obj > __this = new TouchEvent_obj();
	__this->__construct(type,__o_bubbles,__o_cancelable,__o_localX,__o_localY,__o_sizeX,__o_sizeY,relatedObject,__o_ctrlKey,__o_altKey,__o_shiftKey,__o_buttonDown,__o_delta,__o_commandKey,__o_clickCount);
	return __this;
}

hx::ObjectPtr< TouchEvent_obj > TouchEvent_obj::__alloc(hx::Ctx *_hx_ctx,::String type,hx::Null< bool >  __o_bubbles,hx::Null< bool >  __o_cancelable,hx::Null< Float >  __o_localX,hx::Null< Float >  __o_localY,hx::Null< Float >  __o_sizeX,hx::Null< Float >  __o_sizeY, ::openfl::_legacy::display::InteractiveObject relatedObject,hx::Null< bool >  __o_ctrlKey,hx::Null< bool >  __o_altKey,hx::Null< bool >  __o_shiftKey,hx::Null< bool >  __o_buttonDown,hx::Null< int >  __o_delta,hx::Null< bool >  __o_commandKey,hx::Null< int >  __o_clickCount) {
	TouchEvent_obj *__this = (TouchEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TouchEvent_obj), true, "openfl._legacy.events.TouchEvent"));
	*(void **)__this = TouchEvent_obj::_hx_vtable;
	__this->__construct(type,__o_bubbles,__o_cancelable,__o_localX,__o_localY,__o_sizeX,__o_sizeY,relatedObject,__o_ctrlKey,__o_altKey,__o_shiftKey,__o_buttonDown,__o_delta,__o_commandKey,__o_clickCount);
	return __this;
}

TouchEvent_obj::TouchEvent_obj()
{
}

hx::Val TouchEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"sizeX") ) { return hx::Val( sizeX ); }
		if (HX_FIELD_EQ(inName,"sizeY") ) { return hx::Val( sizeY ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pressure") ) { return hx::Val( pressure ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"touchPointID") ) { return hx::Val( touchPointID ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__createSimilar") ) { return hx::Val( _hx___createSimilar_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"isPrimaryTouchPoint") ) { return hx::Val( isPrimaryTouchPoint ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TouchEvent_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__create") ) { outValue = _hx___create_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"TOUCH_END") ) { outValue = ( TOUCH_END ); return true; }
		if (HX_FIELD_EQ(inName,"TOUCH_OUT") ) { outValue = ( TOUCH_OUT ); return true; }
		if (HX_FIELD_EQ(inName,"TOUCH_TAP") ) { outValue = ( TOUCH_TAP ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"TOUCH_MOVE") ) { outValue = ( TOUCH_MOVE ); return true; }
		if (HX_FIELD_EQ(inName,"TOUCH_OVER") ) { outValue = ( TOUCH_OVER ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"TOUCH_BEGIN") ) { outValue = ( TOUCH_BEGIN ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"TOUCH_ROLL_OUT") ) { outValue = ( TOUCH_ROLL_OUT ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"TOUCH_ROLL_OVER") ) { outValue = ( TOUCH_ROLL_OVER ); return true; }
	}
	return false;
}

hx::Val TouchEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"sizeX") ) { sizeX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sizeY") ) { sizeY=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pressure") ) { pressure=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"touchPointID") ) { touchPointID=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"isPrimaryTouchPoint") ) { isPrimaryTouchPoint=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TouchEvent_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"TOUCH_END") ) { TOUCH_END=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"TOUCH_OUT") ) { TOUCH_OUT=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"TOUCH_TAP") ) { TOUCH_TAP=ioValue.Cast< ::String >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"TOUCH_MOVE") ) { TOUCH_MOVE=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"TOUCH_OVER") ) { TOUCH_OVER=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"TOUCH_BEGIN") ) { TOUCH_BEGIN=ioValue.Cast< ::String >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"TOUCH_ROLL_OUT") ) { TOUCH_ROLL_OUT=ioValue.Cast< ::String >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"TOUCH_ROLL_OVER") ) { TOUCH_ROLL_OVER=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void TouchEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("isPrimaryTouchPoint","\x29","\x3f","\x07","\x49"));
	outFields->push(HX_HCSTRING("pressure","\xc5","\xab","\x1d","\x70"));
	outFields->push(HX_HCSTRING("sizeX","\x77","\x08","\xd9","\x7c"));
	outFields->push(HX_HCSTRING("sizeY","\x78","\x08","\xd9","\x7c"));
	outFields->push(HX_HCSTRING("touchPointID","\x2c","\xbe","\x83","\x7b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TouchEvent_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(TouchEvent_obj,isPrimaryTouchPoint),HX_HCSTRING("isPrimaryTouchPoint","\x29","\x3f","\x07","\x49")},
	{hx::fsFloat,(int)offsetof(TouchEvent_obj,pressure),HX_HCSTRING("pressure","\xc5","\xab","\x1d","\x70")},
	{hx::fsFloat,(int)offsetof(TouchEvent_obj,sizeX),HX_HCSTRING("sizeX","\x77","\x08","\xd9","\x7c")},
	{hx::fsFloat,(int)offsetof(TouchEvent_obj,sizeY),HX_HCSTRING("sizeY","\x78","\x08","\xd9","\x7c")},
	{hx::fsInt,(int)offsetof(TouchEvent_obj,touchPointID),HX_HCSTRING("touchPointID","\x2c","\xbe","\x83","\x7b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TouchEvent_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &TouchEvent_obj::TOUCH_BEGIN,HX_HCSTRING("TOUCH_BEGIN","\x29","\xba","\x86","\x7e")},
	{hx::fsString,(void *) &TouchEvent_obj::TOUCH_END,HX_HCSTRING("TOUCH_END","\xdb","\xef","\x2a","\x2a")},
	{hx::fsString,(void *) &TouchEvent_obj::TOUCH_MOVE,HX_HCSTRING("TOUCH_MOVE","\xf1","\x76","\xb1","\xc0")},
	{hx::fsString,(void *) &TouchEvent_obj::TOUCH_OUT,HX_HCSTRING("TOUCH_OUT","\x8e","\x8c","\x32","\x2a")},
	{hx::fsString,(void *) &TouchEvent_obj::TOUCH_OVER,HX_HCSTRING("TOUCH_OVER","\x34","\x25","\x09","\xc2")},
	{hx::fsString,(void *) &TouchEvent_obj::TOUCH_ROLL_OUT,HX_HCSTRING("TOUCH_ROLL_OUT","\x4c","\x73","\x76","\xde")},
	{hx::fsString,(void *) &TouchEvent_obj::TOUCH_ROLL_OVER,HX_HCSTRING("TOUCH_ROLL_OVER","\xb6","\x24","\x2f","\xc9")},
	{hx::fsString,(void *) &TouchEvent_obj::TOUCH_TAP,HX_HCSTRING("TOUCH_TAP","\x63","\x46","\x36","\x2a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TouchEvent_obj_sMemberFields[] = {
	HX_HCSTRING("isPrimaryTouchPoint","\x29","\x3f","\x07","\x49"),
	HX_HCSTRING("pressure","\xc5","\xab","\x1d","\x70"),
	HX_HCSTRING("sizeX","\x77","\x08","\xd9","\x7c"),
	HX_HCSTRING("sizeY","\x78","\x08","\xd9","\x7c"),
	HX_HCSTRING("touchPointID","\x2c","\xbe","\x83","\x7b"),
	HX_HCSTRING("__createSimilar","\x6f","\x37","\xf9","\x21"),
	::String(null()) };

static void TouchEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TouchEvent_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TouchEvent_obj::TOUCH_BEGIN,"TOUCH_BEGIN");
	HX_MARK_MEMBER_NAME(TouchEvent_obj::TOUCH_END,"TOUCH_END");
	HX_MARK_MEMBER_NAME(TouchEvent_obj::TOUCH_MOVE,"TOUCH_MOVE");
	HX_MARK_MEMBER_NAME(TouchEvent_obj::TOUCH_OUT,"TOUCH_OUT");
	HX_MARK_MEMBER_NAME(TouchEvent_obj::TOUCH_OVER,"TOUCH_OVER");
	HX_MARK_MEMBER_NAME(TouchEvent_obj::TOUCH_ROLL_OUT,"TOUCH_ROLL_OUT");
	HX_MARK_MEMBER_NAME(TouchEvent_obj::TOUCH_ROLL_OVER,"TOUCH_ROLL_OVER");
	HX_MARK_MEMBER_NAME(TouchEvent_obj::TOUCH_TAP,"TOUCH_TAP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TouchEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TouchEvent_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TouchEvent_obj::TOUCH_BEGIN,"TOUCH_BEGIN");
	HX_VISIT_MEMBER_NAME(TouchEvent_obj::TOUCH_END,"TOUCH_END");
	HX_VISIT_MEMBER_NAME(TouchEvent_obj::TOUCH_MOVE,"TOUCH_MOVE");
	HX_VISIT_MEMBER_NAME(TouchEvent_obj::TOUCH_OUT,"TOUCH_OUT");
	HX_VISIT_MEMBER_NAME(TouchEvent_obj::TOUCH_OVER,"TOUCH_OVER");
	HX_VISIT_MEMBER_NAME(TouchEvent_obj::TOUCH_ROLL_OUT,"TOUCH_ROLL_OUT");
	HX_VISIT_MEMBER_NAME(TouchEvent_obj::TOUCH_ROLL_OVER,"TOUCH_ROLL_OVER");
	HX_VISIT_MEMBER_NAME(TouchEvent_obj::TOUCH_TAP,"TOUCH_TAP");
};

#endif

hx::Class TouchEvent_obj::__mClass;

static ::String TouchEvent_obj_sStaticFields[] = {
	HX_HCSTRING("TOUCH_BEGIN","\x29","\xba","\x86","\x7e"),
	HX_HCSTRING("TOUCH_END","\xdb","\xef","\x2a","\x2a"),
	HX_HCSTRING("TOUCH_MOVE","\xf1","\x76","\xb1","\xc0"),
	HX_HCSTRING("TOUCH_OUT","\x8e","\x8c","\x32","\x2a"),
	HX_HCSTRING("TOUCH_OVER","\x34","\x25","\x09","\xc2"),
	HX_HCSTRING("TOUCH_ROLL_OUT","\x4c","\x73","\x76","\xde"),
	HX_HCSTRING("TOUCH_ROLL_OVER","\xb6","\x24","\x2f","\xc9"),
	HX_HCSTRING("TOUCH_TAP","\x63","\x46","\x36","\x2a"),
	HX_HCSTRING("__create","\x1c","\xd2","\x3e","\x24"),
	::String(null())
};

void TouchEvent_obj::__register()
{
	hx::Object *dummy = new TouchEvent_obj;
	TouchEvent_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._legacy.events.TouchEvent","\xcc","\x32","\xea","\xe3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TouchEvent_obj::__GetStatic;
	__mClass->mSetStaticField = &TouchEvent_obj::__SetStatic;
	__mClass->mMarkFunc = TouchEvent_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TouchEvent_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TouchEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TouchEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TouchEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TouchEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TouchEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TouchEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_968bec0d92372e1f_11_boot)
HXDLIN(  11)		TOUCH_BEGIN = HX_("touchBegin",ea,cd,e6,a9);
            	}
{
            	HX_STACKFRAME(&_hx_pos_968bec0d92372e1f_12_boot)
HXDLIN(  12)		TOUCH_END = HX_("touchEnd",5c,c5,09,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_968bec0d92372e1f_13_boot)
HXDLIN(  13)		TOUCH_MOVE = HX_("touchMove",70,72,cd,0d);
            	}
{
            	HX_STACKFRAME(&_hx_pos_968bec0d92372e1f_14_boot)
HXDLIN(  14)		TOUCH_OUT = HX_("touchOut",0f,62,11,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_968bec0d92372e1f_15_boot)
HXDLIN(  15)		TOUCH_OVER = HX_("touchOver",b3,20,25,0f);
            	}
{
            	HX_STACKFRAME(&_hx_pos_968bec0d92372e1f_16_boot)
HXDLIN(  16)		TOUCH_ROLL_OUT = HX_("touchRollOut",12,0f,74,87);
            	}
{
            	HX_STACKFRAME(&_hx_pos_968bec0d92372e1f_17_boot)
HXDLIN(  17)		TOUCH_ROLL_OVER = HX_("touchRollOver",50,d6,19,fe);
            	}
{
            	HX_STACKFRAME(&_hx_pos_968bec0d92372e1f_18_boot)
HXDLIN(  18)		TOUCH_TAP = HX_("touchTap",e4,1b,15,00);
            	}
}

} // end namespace openfl
} // end namespace _legacy
} // end namespace events
