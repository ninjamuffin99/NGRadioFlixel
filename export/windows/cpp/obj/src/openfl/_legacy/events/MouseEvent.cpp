// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_MouseEvent
#include <openfl/_legacy/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_47_new,"openfl._legacy.events.MouseEvent","new",0x38af2e98,"openfl._legacy.events.MouseEvent.new","openfl/_legacy/events/MouseEvent.hx",47,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_67_clone,"openfl._legacy.events.MouseEvent","clone",0xd4fc6f95,"openfl._legacy.events.MouseEvent.clone","openfl/_legacy/events/MouseEvent.hx",67,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_74_toString,"openfl._legacy.events.MouseEvent","toString",0xc61ae774,"openfl._legacy.events.MouseEvent.toString","openfl/_legacy/events/MouseEvent.hx",74,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_79_updateAfterEvent,"openfl._legacy.events.MouseEvent","updateAfterEvent",0xc8141a8f,"openfl._legacy.events.MouseEvent.updateAfterEvent","openfl/_legacy/events/MouseEvent.hx",79,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_98___createSimilar,"openfl._legacy.events.MouseEvent","__createSimilar",0xe70509a7,"openfl._legacy.events.MouseEvent.__createSimilar","openfl/_legacy/events/MouseEvent.hx",98,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_86___create,"openfl._legacy.events.MouseEvent","__create",0xb1eae8e4,"openfl._legacy.events.MouseEvent.__create","openfl/_legacy/events/MouseEvent.hx",86,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_11_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",11,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_12_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",12,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_13_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",13,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_14_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",14,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_15_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",15,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_16_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",16,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_17_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",17,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_18_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",18,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_19_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",19,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_20_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",20,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_21_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",21,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_22_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",22,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_23_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",23,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_24_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",24,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_25_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",25,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_26_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",26,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_41_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",41,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_42_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",42,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_43_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",43,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_44_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",44,0xe60bb539)
HX_LOCAL_STACK_FRAME(_hx_pos_4ec0ab2c8c9b08a4_45_boot,"openfl._legacy.events.MouseEvent","boot",0x58b296fa,"openfl._legacy.events.MouseEvent.boot","openfl/_legacy/events/MouseEvent.hx",45,0xe60bb539)
namespace openfl{
namespace _legacy{
namespace events{

void MouseEvent_obj::__construct(::String type,hx::Null< bool >  __o_bubbles,hx::Null< bool >  __o_cancelable,hx::Null< Float >  __o_localX,hx::Null< Float >  __o_localY, ::openfl::_legacy::display::InteractiveObject relatedObject,hx::Null< bool >  __o_ctrlKey,hx::Null< bool >  __o_altKey,hx::Null< bool >  __o_shiftKey,hx::Null< bool >  __o_buttonDown,hx::Null< int >  __o_delta,hx::Null< bool >  __o_commandKey,hx::Null< int >  __o_clickCount){
bool bubbles = __o_bubbles.Default(true);
bool cancelable = __o_cancelable.Default(false);
Float localX = __o_localX.Default(0);
Float localY = __o_localY.Default(0);
bool ctrlKey = __o_ctrlKey.Default(false);
bool altKey = __o_altKey.Default(false);
bool shiftKey = __o_shiftKey.Default(false);
bool buttonDown = __o_buttonDown.Default(false);
int delta = __o_delta.Default(0);
bool commandKey = __o_commandKey.Default(false);
int clickCount = __o_clickCount.Default(0);
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_47_new)
HXLINE(  49)		super::__construct(type,bubbles,cancelable);
HXLINE(  51)		this->localX = localX;
HXLINE(  52)		this->localY = localY;
HXLINE(  53)		this->relatedObject = relatedObject;
HXLINE(  54)		this->ctrlKey = ctrlKey;
HXLINE(  55)		this->altKey = altKey;
HXLINE(  56)		this->shiftKey = shiftKey;
HXLINE(  57)		this->buttonDown = buttonDown;
HXLINE(  58)		this->delta = delta;
HXLINE(  59)		this->commandKey = commandKey;
HXLINE(  60)		this->clickCount = clickCount;
            	}

Dynamic MouseEvent_obj::__CreateEmpty() { return new MouseEvent_obj; }

void *MouseEvent_obj::_hx_vtable = 0;

Dynamic MouseEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MouseEvent_obj > _hx_result = new MouseEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12]);
	return _hx_result;
}

bool MouseEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0dd3a6b1) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0dd3a6b1;
	} else {
		return inClassId==(int)0x2ad30d86;
	}
}

 ::openfl::_legacy::events::Event MouseEvent_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_67_clone)
HXDLIN(  67)		::String _hx_tmp = this->get_type();
HXDLIN(  67)		bool _hx_tmp1 = this->get_bubbles();
HXDLIN(  67)		bool _hx_tmp2 = this->get_cancelable();
HXDLIN(  67)		return  ::openfl::_legacy::events::MouseEvent_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,this->localX,this->localY,this->relatedObject,this->ctrlKey,this->altKey,this->shiftKey,this->buttonDown,this->delta,this->commandKey,this->clickCount);
            	}


::String MouseEvent_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_74_toString)
HXDLIN(  74)		::String _hx_tmp = ((HX_("[MouseEvent type=",13,70,9a,37) + this->get_type()) + HX_(" bubbles=",16,5f,ba,28));
HXDLIN(  74)		::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(this->get_bubbles())) + HX_(" cancelable=",89,25,e0,5d));
HXDLIN(  74)		::String _hx_tmp2 = ((_hx_tmp1 + ::Std_obj::string(this->get_cancelable())) + HX_(" localX=",f0,ca,14,54));
HXDLIN(  74)		::String _hx_tmp3 = ((((_hx_tmp2 + this->localX) + HX_(" localY=",cf,cb,14,54)) + this->localY) + HX_(" relatedObject=",13,62,ef,68));
HXDLIN(  74)		::String _hx_tmp4 = ((_hx_tmp3 + ::Std_obj::string(this->relatedObject)) + HX_(" ctrlKey=",29,e8,3e,4a));
HXDLIN(  74)		::String _hx_tmp5 = ((_hx_tmp4 + ::Std_obj::string(this->ctrlKey)) + HX_(" altKey=",67,93,d6,12));
HXDLIN(  74)		::String _hx_tmp6 = ((_hx_tmp5 + ::Std_obj::string(this->altKey)) + HX_(" shiftKey=",40,5f,4f,db));
HXDLIN(  74)		::String _hx_tmp7 = ((_hx_tmp6 + ::Std_obj::string(this->shiftKey)) + HX_(" buttonDown=",29,d2,63,63));
HXDLIN(  74)		::String _hx_tmp8 = ((_hx_tmp7 + ::Std_obj::string(this->buttonDown)) + HX_(" delta=",65,e9,92,9d));
HXDLIN(  74)		return ((_hx_tmp8 + this->delta) + HX_("]",5d,00,00,00));
            	}


void MouseEvent_obj::updateAfterEvent(){
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_79_updateAfterEvent)
            	}


HX_DEFINE_DYNAMIC_FUNC0(MouseEvent_obj,updateAfterEvent,(void))

 ::openfl::_legacy::events::MouseEvent MouseEvent_obj::_hx___createSimilar(::String type, ::openfl::_legacy::display::InteractiveObject related, ::openfl::_legacy::display::InteractiveObject target){
            	HX_GC_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_98___createSimilar)
HXLINE( 100)		bool mouseEvent = this->get_bubbles();
HXDLIN( 100)		bool mouseEvent1 = this->get_cancelable();
HXDLIN( 100)		 ::openfl::_legacy::display::InteractiveObject mouseEvent2;
HXDLIN( 100)		if (hx::IsNull( related )) {
HXLINE( 100)			mouseEvent2 = this->relatedObject;
            		}
            		else {
HXLINE( 100)			mouseEvent2 = related;
            		}
HXDLIN( 100)		 ::openfl::_legacy::events::MouseEvent mouseEvent3 =  ::openfl::_legacy::events::MouseEvent_obj::__alloc( HX_CTX ,type,mouseEvent,mouseEvent1,this->localX,this->localY,mouseEvent2,this->ctrlKey,this->altKey,this->shiftKey,this->buttonDown,this->delta,this->commandKey,this->clickCount);
HXLINE( 102)		mouseEvent3->stageX = this->stageX;
HXLINE( 103)		mouseEvent3->stageY = this->stageY;
HXLINE( 105)		if (hx::IsNotNull( target )) {
HXLINE( 107)			mouseEvent3->set_target(target);
            		}
HXLINE( 111)		return mouseEvent3;
            	}


HX_DEFINE_DYNAMIC_FUNC3(MouseEvent_obj,_hx___createSimilar,return )

::String MouseEvent_obj::DOUBLE_CLICK;

::String MouseEvent_obj::CLICK;

::String MouseEvent_obj::MIDDLE_CLICK;

::String MouseEvent_obj::MIDDLE_MOUSE_DOWN;

::String MouseEvent_obj::MIDDLE_MOUSE_UP;

::String MouseEvent_obj::MOUSE_DOWN;

::String MouseEvent_obj::MOUSE_MOVE;

::String MouseEvent_obj::MOUSE_OUT;

::String MouseEvent_obj::MOUSE_OVER;

::String MouseEvent_obj::MOUSE_UP;

::String MouseEvent_obj::MOUSE_WHEEL;

::String MouseEvent_obj::RIGHT_CLICK;

::String MouseEvent_obj::RIGHT_MOUSE_DOWN;

::String MouseEvent_obj::RIGHT_MOUSE_UP;

::String MouseEvent_obj::ROLL_OUT;

::String MouseEvent_obj::ROLL_OVER;

int MouseEvent_obj::efLeftDown;

int MouseEvent_obj::efShiftDown;

int MouseEvent_obj::efCtrlDown;

int MouseEvent_obj::efAltDown;

int MouseEvent_obj::efCommandDown;

 ::openfl::_legacy::events::MouseEvent MouseEvent_obj::_hx___create(::String type, ::Dynamic event, ::openfl::_legacy::geom::Point local, ::openfl::_legacy::display::InteractiveObject target){
            	HX_GC_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_86___create)
HXLINE(  88)		int flags = ( (int)(event->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXLINE(  89)		Float local1 = local->x;
HXDLIN(  89)		Float local2 = local->y;
HXDLIN(  89)		bool mouseEvent = (((int)flags & (int)::openfl::_legacy::events::MouseEvent_obj::efCtrlDown) != (int)0);
HXDLIN(  89)		bool mouseEvent1 = (((int)flags & (int)::openfl::_legacy::events::MouseEvent_obj::efAltDown) != (int)0);
HXDLIN(  89)		bool mouseEvent2 = (((int)flags & (int)::openfl::_legacy::events::MouseEvent_obj::efShiftDown) != (int)0);
HXDLIN(  89)		 ::openfl::_legacy::events::MouseEvent mouseEvent3 =  ::openfl::_legacy::events::MouseEvent_obj::__alloc( HX_CTX ,type,true,true,local1,local2,null(),mouseEvent,mouseEvent1,mouseEvent2,(((int)flags & (int)::openfl::_legacy::events::MouseEvent_obj::efLeftDown) != (int)0),(int)0,null(),(int)0);
HXLINE(  90)		mouseEvent3->stageX = ( (Float)(event->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXLINE(  91)		mouseEvent3->stageY = ( (Float)(event->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXLINE(  92)		mouseEvent3->set_target(target);
HXLINE(  93)		return mouseEvent3;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(MouseEvent_obj,_hx___create,return )


hx::ObjectPtr< MouseEvent_obj > MouseEvent_obj::__new(::String type,hx::Null< bool >  __o_bubbles,hx::Null< bool >  __o_cancelable,hx::Null< Float >  __o_localX,hx::Null< Float >  __o_localY, ::openfl::_legacy::display::InteractiveObject relatedObject,hx::Null< bool >  __o_ctrlKey,hx::Null< bool >  __o_altKey,hx::Null< bool >  __o_shiftKey,hx::Null< bool >  __o_buttonDown,hx::Null< int >  __o_delta,hx::Null< bool >  __o_commandKey,hx::Null< int >  __o_clickCount) {
	hx::ObjectPtr< MouseEvent_obj > __this = new MouseEvent_obj();
	__this->__construct(type,__o_bubbles,__o_cancelable,__o_localX,__o_localY,relatedObject,__o_ctrlKey,__o_altKey,__o_shiftKey,__o_buttonDown,__o_delta,__o_commandKey,__o_clickCount);
	return __this;
}

hx::ObjectPtr< MouseEvent_obj > MouseEvent_obj::__alloc(hx::Ctx *_hx_ctx,::String type,hx::Null< bool >  __o_bubbles,hx::Null< bool >  __o_cancelable,hx::Null< Float >  __o_localX,hx::Null< Float >  __o_localY, ::openfl::_legacy::display::InteractiveObject relatedObject,hx::Null< bool >  __o_ctrlKey,hx::Null< bool >  __o_altKey,hx::Null< bool >  __o_shiftKey,hx::Null< bool >  __o_buttonDown,hx::Null< int >  __o_delta,hx::Null< bool >  __o_commandKey,hx::Null< int >  __o_clickCount) {
	MouseEvent_obj *__this = (MouseEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MouseEvent_obj), true, "openfl._legacy.events.MouseEvent"));
	*(void **)__this = MouseEvent_obj::_hx_vtable;
	__this->__construct(type,__o_bubbles,__o_cancelable,__o_localX,__o_localY,relatedObject,__o_ctrlKey,__o_altKey,__o_shiftKey,__o_buttonDown,__o_delta,__o_commandKey,__o_clickCount);
	return __this;
}

MouseEvent_obj::MouseEvent_obj()
{
}

void MouseEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MouseEvent);
	HX_MARK_MEMBER_NAME(altKey,"altKey");
	HX_MARK_MEMBER_NAME(buttonDown,"buttonDown");
	HX_MARK_MEMBER_NAME(clickCount,"clickCount");
	HX_MARK_MEMBER_NAME(commandKey,"commandKey");
	HX_MARK_MEMBER_NAME(ctrlKey,"ctrlKey");
	HX_MARK_MEMBER_NAME(delta,"delta");
	HX_MARK_MEMBER_NAME(localX,"localX");
	HX_MARK_MEMBER_NAME(localY,"localY");
	HX_MARK_MEMBER_NAME(relatedObject,"relatedObject");
	HX_MARK_MEMBER_NAME(shiftKey,"shiftKey");
	HX_MARK_MEMBER_NAME(stageX,"stageX");
	HX_MARK_MEMBER_NAME(stageY,"stageY");
	 ::openfl::_legacy::events::Event_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MouseEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(altKey,"altKey");
	HX_VISIT_MEMBER_NAME(buttonDown,"buttonDown");
	HX_VISIT_MEMBER_NAME(clickCount,"clickCount");
	HX_VISIT_MEMBER_NAME(commandKey,"commandKey");
	HX_VISIT_MEMBER_NAME(ctrlKey,"ctrlKey");
	HX_VISIT_MEMBER_NAME(delta,"delta");
	HX_VISIT_MEMBER_NAME(localX,"localX");
	HX_VISIT_MEMBER_NAME(localY,"localY");
	HX_VISIT_MEMBER_NAME(relatedObject,"relatedObject");
	HX_VISIT_MEMBER_NAME(shiftKey,"shiftKey");
	HX_VISIT_MEMBER_NAME(stageX,"stageX");
	HX_VISIT_MEMBER_NAME(stageY,"stageY");
	 ::openfl::_legacy::events::Event_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MouseEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delta") ) { return hx::Val( delta ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"altKey") ) { return hx::Val( altKey ); }
		if (HX_FIELD_EQ(inName,"localX") ) { return hx::Val( localX ); }
		if (HX_FIELD_EQ(inName,"localY") ) { return hx::Val( localY ); }
		if (HX_FIELD_EQ(inName,"stageX") ) { return hx::Val( stageX ); }
		if (HX_FIELD_EQ(inName,"stageY") ) { return hx::Val( stageY ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ctrlKey") ) { return hx::Val( ctrlKey ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shiftKey") ) { return hx::Val( shiftKey ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"buttonDown") ) { return hx::Val( buttonDown ); }
		if (HX_FIELD_EQ(inName,"clickCount") ) { return hx::Val( clickCount ); }
		if (HX_FIELD_EQ(inName,"commandKey") ) { return hx::Val( commandKey ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"relatedObject") ) { return hx::Val( relatedObject ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__createSimilar") ) { return hx::Val( _hx___createSimilar_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"updateAfterEvent") ) { return hx::Val( updateAfterEvent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MouseEvent_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"CLICK") ) { outValue = ( CLICK ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"MOUSE_UP") ) { outValue = ( MOUSE_UP ); return true; }
		if (HX_FIELD_EQ(inName,"ROLL_OUT") ) { outValue = ( ROLL_OUT ); return true; }
		if (HX_FIELD_EQ(inName,"__create") ) { outValue = _hx___create_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"MOUSE_OUT") ) { outValue = ( MOUSE_OUT ); return true; }
		if (HX_FIELD_EQ(inName,"ROLL_OVER") ) { outValue = ( ROLL_OVER ); return true; }
		if (HX_FIELD_EQ(inName,"efAltDown") ) { outValue = ( efAltDown ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"MOUSE_DOWN") ) { outValue = ( MOUSE_DOWN ); return true; }
		if (HX_FIELD_EQ(inName,"MOUSE_MOVE") ) { outValue = ( MOUSE_MOVE ); return true; }
		if (HX_FIELD_EQ(inName,"MOUSE_OVER") ) { outValue = ( MOUSE_OVER ); return true; }
		if (HX_FIELD_EQ(inName,"efLeftDown") ) { outValue = ( efLeftDown ); return true; }
		if (HX_FIELD_EQ(inName,"efCtrlDown") ) { outValue = ( efCtrlDown ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"MOUSE_WHEEL") ) { outValue = ( MOUSE_WHEEL ); return true; }
		if (HX_FIELD_EQ(inName,"RIGHT_CLICK") ) { outValue = ( RIGHT_CLICK ); return true; }
		if (HX_FIELD_EQ(inName,"efShiftDown") ) { outValue = ( efShiftDown ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"DOUBLE_CLICK") ) { outValue = ( DOUBLE_CLICK ); return true; }
		if (HX_FIELD_EQ(inName,"MIDDLE_CLICK") ) { outValue = ( MIDDLE_CLICK ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"efCommandDown") ) { outValue = ( efCommandDown ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"RIGHT_MOUSE_UP") ) { outValue = ( RIGHT_MOUSE_UP ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"MIDDLE_MOUSE_UP") ) { outValue = ( MIDDLE_MOUSE_UP ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"RIGHT_MOUSE_DOWN") ) { outValue = ( RIGHT_MOUSE_DOWN ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"MIDDLE_MOUSE_DOWN") ) { outValue = ( MIDDLE_MOUSE_DOWN ); return true; }
	}
	return false;
}

hx::Val MouseEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delta") ) { delta=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"altKey") ) { altKey=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"localX") ) { localX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"localY") ) { localY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stageX") ) { stageX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stageY") ) { stageY=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ctrlKey") ) { ctrlKey=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shiftKey") ) { shiftKey=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"buttonDown") ) { buttonDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"clickCount") ) { clickCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"commandKey") ) { commandKey=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"relatedObject") ) { relatedObject=inValue.Cast<  ::openfl::_legacy::display::InteractiveObject >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MouseEvent_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"CLICK") ) { CLICK=ioValue.Cast< ::String >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"MOUSE_UP") ) { MOUSE_UP=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"ROLL_OUT") ) { ROLL_OUT=ioValue.Cast< ::String >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"MOUSE_OUT") ) { MOUSE_OUT=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"ROLL_OVER") ) { ROLL_OVER=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"efAltDown") ) { efAltDown=ioValue.Cast< int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"MOUSE_DOWN") ) { MOUSE_DOWN=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"MOUSE_MOVE") ) { MOUSE_MOVE=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"MOUSE_OVER") ) { MOUSE_OVER=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"efLeftDown") ) { efLeftDown=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"efCtrlDown") ) { efCtrlDown=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"MOUSE_WHEEL") ) { MOUSE_WHEEL=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"RIGHT_CLICK") ) { RIGHT_CLICK=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"efShiftDown") ) { efShiftDown=ioValue.Cast< int >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"DOUBLE_CLICK") ) { DOUBLE_CLICK=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"MIDDLE_CLICK") ) { MIDDLE_CLICK=ioValue.Cast< ::String >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"efCommandDown") ) { efCommandDown=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"RIGHT_MOUSE_UP") ) { RIGHT_MOUSE_UP=ioValue.Cast< ::String >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"MIDDLE_MOUSE_UP") ) { MIDDLE_MOUSE_UP=ioValue.Cast< ::String >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"RIGHT_MOUSE_DOWN") ) { RIGHT_MOUSE_DOWN=ioValue.Cast< ::String >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"MIDDLE_MOUSE_DOWN") ) { MIDDLE_MOUSE_DOWN=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void MouseEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("altKey","\xf6","\xa7","\xca","\x44"));
	outFields->push(HX_HCSTRING("buttonDown","\x74","\x67","\x64","\xac"));
	outFields->push(HX_HCSTRING("clickCount","\x67","\xb3","\xe2","\x8a"));
	outFields->push(HX_HCSTRING("commandKey","\x14","\x71","\x9b","\x43"));
	outFields->push(HX_HCSTRING("ctrlKey","\xb4","\x35","\x7d","\x61"));
	outFields->push(HX_HCSTRING("delta","\xf8","\xe7","\x26","\xd7"));
	outFields->push(HX_HCSTRING("localX","\x8d","\x74","\xbf","\x59"));
	outFields->push(HX_HCSTRING("localY","\x8e","\x74","\xbf","\x59"));
	outFields->push(HX_HCSTRING("relatedObject","\x0a","\xbf","\xcb","\xe8"));
	outFields->push(HX_HCSTRING("shiftKey","\x3d","\x92","\x9f","\x99"));
	outFields->push(HX_HCSTRING("stageX","\xda","\xfb","\xf1","\x05"));
	outFields->push(HX_HCSTRING("stageY","\xdb","\xfb","\xf1","\x05"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MouseEvent_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(MouseEvent_obj,altKey),HX_HCSTRING("altKey","\xf6","\xa7","\xca","\x44")},
	{hx::fsBool,(int)offsetof(MouseEvent_obj,buttonDown),HX_HCSTRING("buttonDown","\x74","\x67","\x64","\xac")},
	{hx::fsInt,(int)offsetof(MouseEvent_obj,clickCount),HX_HCSTRING("clickCount","\x67","\xb3","\xe2","\x8a")},
	{hx::fsBool,(int)offsetof(MouseEvent_obj,commandKey),HX_HCSTRING("commandKey","\x14","\x71","\x9b","\x43")},
	{hx::fsBool,(int)offsetof(MouseEvent_obj,ctrlKey),HX_HCSTRING("ctrlKey","\xb4","\x35","\x7d","\x61")},
	{hx::fsInt,(int)offsetof(MouseEvent_obj,delta),HX_HCSTRING("delta","\xf8","\xe7","\x26","\xd7")},
	{hx::fsFloat,(int)offsetof(MouseEvent_obj,localX),HX_HCSTRING("localX","\x8d","\x74","\xbf","\x59")},
	{hx::fsFloat,(int)offsetof(MouseEvent_obj,localY),HX_HCSTRING("localY","\x8e","\x74","\xbf","\x59")},
	{hx::fsObject /*::openfl::_legacy::display::InteractiveObject*/ ,(int)offsetof(MouseEvent_obj,relatedObject),HX_HCSTRING("relatedObject","\x0a","\xbf","\xcb","\xe8")},
	{hx::fsBool,(int)offsetof(MouseEvent_obj,shiftKey),HX_HCSTRING("shiftKey","\x3d","\x92","\x9f","\x99")},
	{hx::fsFloat,(int)offsetof(MouseEvent_obj,stageX),HX_HCSTRING("stageX","\xda","\xfb","\xf1","\x05")},
	{hx::fsFloat,(int)offsetof(MouseEvent_obj,stageY),HX_HCSTRING("stageY","\xdb","\xfb","\xf1","\x05")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo MouseEvent_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &MouseEvent_obj::DOUBLE_CLICK,HX_HCSTRING("DOUBLE_CLICK","\x3a","\xf5","\xe9","\x68")},
	{hx::fsString,(void *) &MouseEvent_obj::CLICK,HX_HCSTRING("CLICK","\x28","\xb4","\x4c","\xc6")},
	{hx::fsString,(void *) &MouseEvent_obj::MIDDLE_CLICK,HX_HCSTRING("MIDDLE_CLICK","\x7e","\x28","\x5f","\x94")},
	{hx::fsString,(void *) &MouseEvent_obj::MIDDLE_MOUSE_DOWN,HX_HCSTRING("MIDDLE_MOUSE_DOWN","\x06","\xb0","\x34","\x98")},
	{hx::fsString,(void *) &MouseEvent_obj::MIDDLE_MOUSE_UP,HX_HCSTRING("MIDDLE_MOUSE_UP","\xff","\x48","\x8e","\xac")},
	{hx::fsString,(void *) &MouseEvent_obj::MOUSE_DOWN,HX_HCSTRING("MOUSE_DOWN","\x1c","\x9c","\xfa","\xde")},
	{hx::fsString,(void *) &MouseEvent_obj::MOUSE_MOVE,HX_HCSTRING("MOUSE_MOVE","\xcb","\x86","\xed","\xe4")},
	{hx::fsString,(void *) &MouseEvent_obj::MOUSE_OUT,HX_HCSTRING("MOUSE_OUT","\xf4","\xb5","\x1a","\x11")},
	{hx::fsString,(void *) &MouseEvent_obj::MOUSE_OVER,HX_HCSTRING("MOUSE_OVER","\x0e","\x35","\x45","\xe6")},
	{hx::fsString,(void *) &MouseEvent_obj::MOUSE_UP,HX_HCSTRING("MOUSE_UP","\x95","\xe3","\xc7","\xfd")},
	{hx::fsString,(void *) &MouseEvent_obj::MOUSE_WHEEL,HX_HCSTRING("MOUSE_WHEEL","\x81","\xd3","\x3c","\x28")},
	{hx::fsString,(void *) &MouseEvent_obj::RIGHT_CLICK,HX_HCSTRING("RIGHT_CLICK","\x25","\xb4","\xdd","\x1a")},
	{hx::fsString,(void *) &MouseEvent_obj::RIGHT_MOUSE_DOWN,HX_HCSTRING("RIGHT_MOUSE_DOWN","\xff","\x86","\xb7","\x29")},
	{hx::fsString,(void *) &MouseEvent_obj::RIGHT_MOUSE_UP,HX_HCSTRING("RIGHT_MOUSE_UP","\xb8","\x3f","\xdb","\x17")},
	{hx::fsString,(void *) &MouseEvent_obj::ROLL_OUT,HX_HCSTRING("ROLL_OUT","\x6c","\x37","\xe3","\x8b")},
	{hx::fsString,(void *) &MouseEvent_obj::ROLL_OVER,HX_HCSTRING("ROLL_OVER","\x96","\xfc","\xed","\xda")},
	{hx::fsInt,(void *) &MouseEvent_obj::efLeftDown,HX_HCSTRING("efLeftDown","\x8a","\x19","\xac","\x0c")},
	{hx::fsInt,(void *) &MouseEvent_obj::efShiftDown,HX_HCSTRING("efShiftDown","\x63","\x6d","\xa6","\xe4")},
	{hx::fsInt,(void *) &MouseEvent_obj::efCtrlDown,HX_HCSTRING("efCtrlDown","\x2e","\xbc","\xbb","\xaa")},
	{hx::fsInt,(void *) &MouseEvent_obj::efAltDown,HX_HCSTRING("efAltDown","\xca","\x73","\x98","\xb8")},
	{hx::fsInt,(void *) &MouseEvent_obj::efCommandDown,HX_HCSTRING("efCommandDown","\x6c","\x60","\x38","\x7b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String MouseEvent_obj_sMemberFields[] = {
	HX_HCSTRING("altKey","\xf6","\xa7","\xca","\x44"),
	HX_HCSTRING("buttonDown","\x74","\x67","\x64","\xac"),
	HX_HCSTRING("clickCount","\x67","\xb3","\xe2","\x8a"),
	HX_HCSTRING("commandKey","\x14","\x71","\x9b","\x43"),
	HX_HCSTRING("ctrlKey","\xb4","\x35","\x7d","\x61"),
	HX_HCSTRING("delta","\xf8","\xe7","\x26","\xd7"),
	HX_HCSTRING("localX","\x8d","\x74","\xbf","\x59"),
	HX_HCSTRING("localY","\x8e","\x74","\xbf","\x59"),
	HX_HCSTRING("relatedObject","\x0a","\xbf","\xcb","\xe8"),
	HX_HCSTRING("shiftKey","\x3d","\x92","\x9f","\x99"),
	HX_HCSTRING("stageX","\xda","\xfb","\xf1","\x05"),
	HX_HCSTRING("stageY","\xdb","\xfb","\xf1","\x05"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("updateAfterEvent","\xc7","\xfb","\xc7","\x22"),
	HX_HCSTRING("__createSimilar","\x6f","\x37","\xf9","\x21"),
	::String(null()) };

static void MouseEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MouseEvent_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::DOUBLE_CLICK,"DOUBLE_CLICK");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::CLICK,"CLICK");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::MIDDLE_CLICK,"MIDDLE_CLICK");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::MIDDLE_MOUSE_DOWN,"MIDDLE_MOUSE_DOWN");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::MIDDLE_MOUSE_UP,"MIDDLE_MOUSE_UP");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::MOUSE_DOWN,"MOUSE_DOWN");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::MOUSE_MOVE,"MOUSE_MOVE");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::MOUSE_OUT,"MOUSE_OUT");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::MOUSE_OVER,"MOUSE_OVER");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::MOUSE_UP,"MOUSE_UP");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::MOUSE_WHEEL,"MOUSE_WHEEL");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::RIGHT_CLICK,"RIGHT_CLICK");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::RIGHT_MOUSE_DOWN,"RIGHT_MOUSE_DOWN");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::RIGHT_MOUSE_UP,"RIGHT_MOUSE_UP");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::ROLL_OUT,"ROLL_OUT");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::ROLL_OVER,"ROLL_OVER");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::efLeftDown,"efLeftDown");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::efShiftDown,"efShiftDown");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::efCtrlDown,"efCtrlDown");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::efAltDown,"efAltDown");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::efCommandDown,"efCommandDown");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MouseEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::DOUBLE_CLICK,"DOUBLE_CLICK");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::CLICK,"CLICK");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::MIDDLE_CLICK,"MIDDLE_CLICK");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::MIDDLE_MOUSE_DOWN,"MIDDLE_MOUSE_DOWN");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::MIDDLE_MOUSE_UP,"MIDDLE_MOUSE_UP");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::MOUSE_DOWN,"MOUSE_DOWN");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::MOUSE_MOVE,"MOUSE_MOVE");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::MOUSE_OUT,"MOUSE_OUT");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::MOUSE_OVER,"MOUSE_OVER");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::MOUSE_UP,"MOUSE_UP");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::MOUSE_WHEEL,"MOUSE_WHEEL");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::RIGHT_CLICK,"RIGHT_CLICK");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::RIGHT_MOUSE_DOWN,"RIGHT_MOUSE_DOWN");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::RIGHT_MOUSE_UP,"RIGHT_MOUSE_UP");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::ROLL_OUT,"ROLL_OUT");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::ROLL_OVER,"ROLL_OVER");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::efLeftDown,"efLeftDown");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::efShiftDown,"efShiftDown");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::efCtrlDown,"efCtrlDown");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::efAltDown,"efAltDown");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::efCommandDown,"efCommandDown");
};

#endif

hx::Class MouseEvent_obj::__mClass;

static ::String MouseEvent_obj_sStaticFields[] = {
	HX_HCSTRING("DOUBLE_CLICK","\x3a","\xf5","\xe9","\x68"),
	HX_HCSTRING("CLICK","\x28","\xb4","\x4c","\xc6"),
	HX_HCSTRING("MIDDLE_CLICK","\x7e","\x28","\x5f","\x94"),
	HX_HCSTRING("MIDDLE_MOUSE_DOWN","\x06","\xb0","\x34","\x98"),
	HX_HCSTRING("MIDDLE_MOUSE_UP","\xff","\x48","\x8e","\xac"),
	HX_HCSTRING("MOUSE_DOWN","\x1c","\x9c","\xfa","\xde"),
	HX_HCSTRING("MOUSE_MOVE","\xcb","\x86","\xed","\xe4"),
	HX_HCSTRING("MOUSE_OUT","\xf4","\xb5","\x1a","\x11"),
	HX_HCSTRING("MOUSE_OVER","\x0e","\x35","\x45","\xe6"),
	HX_HCSTRING("MOUSE_UP","\x95","\xe3","\xc7","\xfd"),
	HX_HCSTRING("MOUSE_WHEEL","\x81","\xd3","\x3c","\x28"),
	HX_HCSTRING("RIGHT_CLICK","\x25","\xb4","\xdd","\x1a"),
	HX_HCSTRING("RIGHT_MOUSE_DOWN","\xff","\x86","\xb7","\x29"),
	HX_HCSTRING("RIGHT_MOUSE_UP","\xb8","\x3f","\xdb","\x17"),
	HX_HCSTRING("ROLL_OUT","\x6c","\x37","\xe3","\x8b"),
	HX_HCSTRING("ROLL_OVER","\x96","\xfc","\xed","\xda"),
	HX_HCSTRING("efLeftDown","\x8a","\x19","\xac","\x0c"),
	HX_HCSTRING("efShiftDown","\x63","\x6d","\xa6","\xe4"),
	HX_HCSTRING("efCtrlDown","\x2e","\xbc","\xbb","\xaa"),
	HX_HCSTRING("efAltDown","\xca","\x73","\x98","\xb8"),
	HX_HCSTRING("efCommandDown","\x6c","\x60","\x38","\x7b"),
	HX_HCSTRING("__create","\x1c","\xd2","\x3e","\x24"),
	::String(null())
};

void MouseEvent_obj::__register()
{
	hx::Object *dummy = new MouseEvent_obj;
	MouseEvent_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._legacy.events.MouseEvent","\xa6","\x42","\x26","\x08");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MouseEvent_obj::__GetStatic;
	__mClass->mSetStaticField = &MouseEvent_obj::__SetStatic;
	__mClass->mMarkFunc = MouseEvent_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MouseEvent_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MouseEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MouseEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MouseEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MouseEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MouseEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MouseEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_11_boot)
HXDLIN(  11)		DOUBLE_CLICK = HX_("doubleClick",77,03,76,cd);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_12_boot)
HXDLIN(  12)		CLICK = HX_("click",48,7c,5e,48);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_13_boot)
HXDLIN(  13)		MIDDLE_CLICK = HX_("middleClick",b3,e4,e5,43);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_14_boot)
HXDLIN(  14)		MIDDLE_MOUSE_DOWN = HX_("middleMouseDown",12,2b,fe,01);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_15_boot)
HXDLIN(  15)		MIDDLE_MOUSE_UP = HX_("middleMouseUp",0b,8d,f5,3a);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_16_boot)
HXDLIN(  16)		MOUSE_DOWN = HX_("mouseDown",27,b1,c2,ee);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_17_boot)
HXDLIN(  17)		MOUSE_MOVE = HX_("mouseMove",d6,9b,b5,f4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_18_boot)
HXDLIN(  18)		MOUSE_OUT = HX_("mouseOut",69,e7,1d,a4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_19_boot)
HXDLIN(  19)		MOUSE_OVER = HX_("mouseOver",19,4a,0d,f6);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_20_boot)
HXDLIN(  20)		MOUSE_UP = HX_("mouseUp",e0,f3,72,c0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_21_boot)
HXDLIN(  21)		MOUSE_WHEEL = HX_("mouseWheel",36,28,87,e7);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_22_boot)
HXDLIN(  22)		RIGHT_CLICK = HX_("rightClick",cc,62,23,4b);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_23_boot)
HXDLIN(  23)		RIGHT_MOUSE_DOWN = HX_("rightMouseDown",ab,29,d7,cd);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_24_boot)
HXDLIN(  24)		RIGHT_MOUSE_UP = HX_("rightMouseUp",64,83,21,ab);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_25_boot)
HXDLIN(  25)		ROLL_OUT = HX_("rollOut",11,f9,11,5d);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_26_boot)
HXDLIN(  26)		ROLL_OVER = HX_("rollOver",71,ab,a8,12);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_41_boot)
HXDLIN(  41)		efLeftDown = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_42_boot)
HXDLIN(  42)		efShiftDown = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_43_boot)
HXDLIN(  43)		efCtrlDown = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_44_boot)
HXDLIN(  44)		efAltDown = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ec0ab2c8c9b08a4_45_boot)
HXDLIN(  45)		efCommandDown = (int)16;
            	}
}

} // end namespace openfl
} // end namespace _legacy
} // end namespace events
