// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_openfl_text__TextFieldType_TextFieldType_Impl_
#include <openfl/text/_TextFieldType/TextFieldType_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_923930f61aa169d2_11_fromString,"openfl.text._TextFieldType.TextFieldType_Impl_","fromString",0x3beed305,"openfl.text._TextFieldType.TextFieldType_Impl_.fromString","openfl/text/TextFieldType.hx",11,0xaebfe8fa)
HX_LOCAL_STACK_FRAME(_hx_pos_923930f61aa169d2_23_toString,"openfl.text._TextFieldType.TextFieldType_Impl_","toString",0x7192f756,"openfl.text._TextFieldType.TextFieldType_Impl_.toString","openfl/text/TextFieldType.hx",23,0xaebfe8fa)
HX_LOCAL_STACK_FRAME(_hx_pos_923930f61aa169d2_6_boot,"openfl.text._TextFieldType.TextFieldType_Impl_","boot",0xd2688ddc,"openfl.text._TextFieldType.TextFieldType_Impl_.boot","openfl/text/TextFieldType.hx",6,0xaebfe8fa)
HX_LOCAL_STACK_FRAME(_hx_pos_923930f61aa169d2_7_boot,"openfl.text._TextFieldType.TextFieldType_Impl_","boot",0xd2688ddc,"openfl.text._TextFieldType.TextFieldType_Impl_.boot","openfl/text/TextFieldType.hx",7,0xaebfe8fa)
namespace openfl{
namespace text{
namespace _TextFieldType{

void TextFieldType_Impl__obj::__construct() { }

Dynamic TextFieldType_Impl__obj::__CreateEmpty() { return new TextFieldType_Impl__obj; }

void *TextFieldType_Impl__obj::_hx_vtable = 0;

Dynamic TextFieldType_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextFieldType_Impl__obj > _hx_result = new TextFieldType_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextFieldType_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x688de902;
}

 ::Dynamic TextFieldType_Impl__obj::DYNAMIC;

 ::Dynamic TextFieldType_Impl__obj::INPUT;

 ::Dynamic TextFieldType_Impl__obj::fromString(::String value){
            	HX_STACKFRAME(&_hx_pos_923930f61aa169d2_11_fromString)
HXDLIN(  11)		::String _hx_switch_0 = value;
            		if (  (_hx_switch_0==HX_("dynamic",7f,9f,15,36)) ){
HXLINE(  13)			return (int)0;
HXDLIN(  13)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("input",0a,c4,1d,be)) ){
HXLINE(  14)			return (int)1;
HXDLIN(  14)			goto _hx_goto_0;
            		}
            		/* default */{
HXLINE(  15)			return null();
            		}
            		_hx_goto_0:;
HXLINE(  11)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextFieldType_Impl__obj,fromString,return )

::String TextFieldType_Impl__obj::toString(int value){
            	HX_STACKFRAME(&_hx_pos_923930f61aa169d2_23_toString)
HXDLIN(  23)		switch((int)(value)){
            			case (int)0: {
HXLINE(  25)				return HX_("dynamic",7f,9f,15,36);
            			}
            			break;
            			case (int)1: {
HXLINE(  26)				return HX_("input",0a,c4,1d,be);
            			}
            			break;
            			default:{
HXLINE(  27)				return null();
            			}
            		}
HXLINE(  23)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextFieldType_Impl__obj,toString,return )


TextFieldType_Impl__obj::TextFieldType_Impl__obj()
{
}

bool TextFieldType_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TextFieldType_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo TextFieldType_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &TextFieldType_Impl__obj::DYNAMIC,HX_HCSTRING("DYNAMIC","\x5f","\x73","\xe9","\xb5")},
	{hx::fsObject /*Dynamic*/ ,(void *) &TextFieldType_Impl__obj::INPUT,HX_HCSTRING("INPUT","\xea","\xfb","\x0b","\x3c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void TextFieldType_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextFieldType_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextFieldType_Impl__obj::DYNAMIC,"DYNAMIC");
	HX_MARK_MEMBER_NAME(TextFieldType_Impl__obj::INPUT,"INPUT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextFieldType_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextFieldType_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextFieldType_Impl__obj::DYNAMIC,"DYNAMIC");
	HX_VISIT_MEMBER_NAME(TextFieldType_Impl__obj::INPUT,"INPUT");
};

#endif

hx::Class TextFieldType_Impl__obj::__mClass;

static ::String TextFieldType_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("DYNAMIC","\x5f","\x73","\xe9","\xb5"),
	HX_HCSTRING("INPUT","\xea","\xfb","\x0b","\x3c"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null())
};

void TextFieldType_Impl__obj::__register()
{
	hx::Object *dummy = new TextFieldType_Impl__obj;
	TextFieldType_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.text._TextFieldType.TextFieldType_Impl_","\x04","\xb7","\x37","\x2c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextFieldType_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TextFieldType_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextFieldType_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< TextFieldType_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextFieldType_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextFieldType_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextFieldType_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextFieldType_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_923930f61aa169d2_6_boot)
HXDLIN(   6)		DYNAMIC = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_923930f61aa169d2_7_boot)
HXDLIN(   7)		INPUT = (int)1;
            	}
}

} // end namespace openfl
} // end namespace text
} // end namespace _TextFieldType
