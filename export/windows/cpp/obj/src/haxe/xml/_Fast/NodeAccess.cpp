// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeAccess
#include <haxe/xml/_Fast/NodeAccess.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bd52b8858336f67d_29_new,"haxe.xml._Fast.NodeAccess","new",0xde09fb0a,"haxe.xml._Fast.NodeAccess.new","C:\\HaxeToolkit\\haxe\\std/haxe/xml/Fast.hx",29,0x60a2153a)
namespace haxe{
namespace xml{
namespace _Fast{

void NodeAccess_obj::__construct( ::Xml x){
            	HX_STACKFRAME(&_hx_pos_bd52b8858336f67d_29_new)
HXDLIN(  29)		this->_hx___x = x;
            	}

Dynamic NodeAccess_obj::__CreateEmpty() { return new NodeAccess_obj; }

void *NodeAccess_obj::_hx_vtable = 0;

Dynamic NodeAccess_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NodeAccess_obj > _hx_result = new NodeAccess_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool NodeAccess_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x609b91f0;
}


hx::ObjectPtr< NodeAccess_obj > NodeAccess_obj::__new( ::Xml x) {
	hx::ObjectPtr< NodeAccess_obj > __this = new NodeAccess_obj();
	__this->__construct(x);
	return __this;
}

hx::ObjectPtr< NodeAccess_obj > NodeAccess_obj::__alloc(hx::Ctx *_hx_ctx, ::Xml x) {
	NodeAccess_obj *__this = (NodeAccess_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NodeAccess_obj), true, "haxe.xml._Fast.NodeAccess"));
	*(void **)__this = NodeAccess_obj::_hx_vtable;
	__this->__construct(x);
	return __this;
}

NodeAccess_obj::NodeAccess_obj()
{
}

void NodeAccess_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NodeAccess);
	HX_MARK_DYNAMIC;
	HX_MARK_MEMBER_NAME(_hx___x,"__x");
	HX_MARK_END_CLASS();
}

void NodeAccess_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_DYNAMIC;
	HX_VISIT_MEMBER_NAME(_hx___x,"__x");
}

hx::Val NodeAccess_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"__x") ) { return hx::Val( _hx___x ); }
	}
	HX_CHECK_DYNAMIC_GET_FIELD(inName);
	return super::__Field(inName,inCallProp);
}

hx::Val NodeAccess_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"__x") ) { _hx___x=inValue.Cast<  ::Xml >(); return inValue; }
	}
	try { return super::__SetField(inName,inValue,inCallProp); }
	catch(Dynamic e) { HX_DYNAMIC_SET_FIELD(inName,inValue); }
	return inValue;
}

void NodeAccess_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__x","\x58","\x69","\x48","\x00"));
	HX_APPEND_DYNAMIC_FIELDS(outFields);
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NodeAccess_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Xml*/ ,(int)offsetof(NodeAccess_obj,_hx___x),HX_HCSTRING("__x","\x58","\x69","\x48","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NodeAccess_obj_sStaticStorageInfo = 0;
#endif

static ::String NodeAccess_obj_sMemberFields[] = {
	HX_HCSTRING("__x","\x58","\x69","\x48","\x00"),
	::String(null()) };

static void NodeAccess_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NodeAccess_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NodeAccess_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NodeAccess_obj::__mClass,"__mClass");
};

#endif

hx::Class NodeAccess_obj::__mClass;

void NodeAccess_obj::__register()
{
	hx::Object *dummy = new NodeAccess_obj;
	NodeAccess_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.xml._Fast.NodeAccess","\x18","\x6e","\x61","\x15");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NodeAccess_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NodeAccess_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NodeAccess_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NodeAccess_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NodeAccess_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NodeAccess_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace xml
} // end namespace _Fast
