// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_CallStack
#include <haxe/CallStack.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f7127803d415e941_77_callStack,"haxe.CallStack","callStack",0xfa9165be,"haxe.CallStack.callStack","haxe/CallStack.hx",77,0xb8d73e1d)
HX_LOCAL_STACK_FRAME(_hx_pos_f7127803d415e941_140_exceptionStack,"haxe.CallStack","exceptionStack",0xde34d005,"haxe.CallStack.exceptionStack","haxe/CallStack.hx",140,0xb8d73e1d)
HX_LOCAL_STACK_FRAME(_hx_pos_f7127803d415e941_206_toString,"haxe.CallStack","toString",0xd59be738,"haxe.CallStack.toString","haxe/CallStack.hx",206,0xb8d73e1d)
static const ::String _hx_array_data_6d544b62_4[] = {
	HX_("\nCalled from ",bd,26,6b,81),
};
HX_LOCAL_STACK_FRAME(_hx_pos_f7127803d415e941_220_itemToString,"haxe.CallStack","itemToString",0xc121696b,"haxe.CallStack.itemToString","haxe/CallStack.hx",220,0xb8d73e1d)
static const ::String _hx_array_data_6d544b62_6[] = {
	HX_("a C function",f4,1b,53,cb),
};
static const ::String _hx_array_data_6d544b62_7[] = {
	HX_("module ",f4,e1,fa,f7),
};
static const ::String _hx_array_data_6d544b62_8[] = {
	HX_(" (",08,1c,00,00),
};
static const ::String _hx_array_data_6d544b62_9[] = {
	HX_(" line ",8c,69,6d,40),
};
static const ::String _hx_array_data_6d544b62_10[] = {
	HX_(")",29,00,00,00),
};
static const ::String _hx_array_data_6d544b62_11[] = {
	HX_(".",2e,00,00,00),
};
static const ::String _hx_array_data_6d544b62_12[] = {
	HX_("local function #",b0,cd,97,ff),
};
HX_LOCAL_STACK_FRAME(_hx_pos_f7127803d415e941_246_makeStack,"haxe.CallStack","makeStack",0x41ea826e,"haxe.CallStack.makeStack","haxe/CallStack.hx",246,0xb8d73e1d)
namespace haxe{

void CallStack_obj::__construct() { }

Dynamic CallStack_obj::__CreateEmpty() { return new CallStack_obj; }

void *CallStack_obj::_hx_vtable = 0;

Dynamic CallStack_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CallStack_obj > _hx_result = new CallStack_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CallStack_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6207a884;
}

::Array< ::Dynamic> CallStack_obj::callStack(){
            	HX_STACKFRAME(&_hx_pos_f7127803d415e941_77_callStack)
HXLINE(  89)		::Array< ::String > s = ::__hxcpp_get_call_stack(true);
HXLINE(  90)		return ::haxe::CallStack_obj::makeStack(s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CallStack_obj,callStack,return )

::Array< ::Dynamic> CallStack_obj::exceptionStack(){
            	HX_STACKFRAME(&_hx_pos_f7127803d415e941_140_exceptionStack)
HXLINE( 162)		::Array< ::String > s = ::__hxcpp_get_exception_stack();
HXLINE( 163)		return ::haxe::CallStack_obj::makeStack(s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CallStack_obj,exceptionStack,return )

::String CallStack_obj::toString(::Array< ::Dynamic> stack){
            	HX_GC_STACKFRAME(&_hx_pos_f7127803d415e941_206_toString)
HXLINE( 207)		 ::StringBuf b =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 209)		stack = stack->copy();
HXLINE( 210)		stack->reverse();
HXLINE( 212)		{
HXLINE( 212)			int _g = (int)0;
HXDLIN( 212)			while((_g < stack->length)){
HXLINE( 212)				 ::haxe::StackItem s = stack->__get(_g).StaticCast<  ::haxe::StackItem >();
HXDLIN( 212)				_g = (_g + (int)1);
HXLINE( 213)				{
HXLINE( 213)					if (hx::IsNotNull( b->charBuf )) {
HXLINE( 213)						b->flush();
            					}
HXDLIN( 213)					if (hx::IsNull( b->b )) {
HXLINE( 213)						b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6d544b62_4,1);
            					}
            					else {
HXLINE( 213)						b->b->push(HX_("\nCalled from ",bd,26,6b,81));
            					}
            				}
HXLINE( 214)				::haxe::CallStack_obj::itemToString(b,s);
            			}
            		}
HXLINE( 216)		return b->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_obj,toString,return )

void CallStack_obj::itemToString( ::StringBuf b, ::haxe::StackItem s){
            	HX_STACKFRAME(&_hx_pos_f7127803d415e941_220_itemToString)
HXDLIN( 220)		switch((int)(_hx_getEnumValueIndex(s))){
            			case (int)0: {
HXLINE( 222)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 222)					b->flush();
            				}
HXDLIN( 222)				if (hx::IsNull( b->b )) {
HXLINE( 222)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6d544b62_6,1);
            				}
            				else {
HXLINE( 222)					b->b->push(HX_("a C function",f4,1b,53,cb));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 223)				::String m = s->_hx_getString(0);
HXDLIN( 223)				{
HXLINE( 224)					{
HXLINE( 224)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 224)							b->flush();
            						}
HXDLIN( 224)						if (hx::IsNull( b->b )) {
HXLINE( 224)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6d544b62_7,1);
            						}
            						else {
HXLINE( 224)							b->b->push(HX_("module ",f4,e1,fa,f7));
            						}
            					}
HXLINE( 225)					{
HXLINE( 225)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 225)							b->flush();
            						}
HXDLIN( 225)						if (hx::IsNull( b->b )) {
HXLINE( 225)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(m));
            						}
            						else {
HXLINE( 225)							::Array< ::String > b1 = b->b;
HXDLIN( 225)							b1->push(::Std_obj::string(m));
            						}
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 226)				int line = s->_hx_getInt(2);
HXDLIN( 226)				::String file = s->_hx_getString(1);
HXDLIN( 226)				 ::haxe::StackItem s1 = s->_hx_getObject(0).StaticCast<  ::haxe::StackItem >();
HXDLIN( 226)				{
HXLINE( 227)					if (hx::IsNotNull( s1 )) {
HXLINE( 228)						::haxe::CallStack_obj::itemToString(b,s1);
HXLINE( 229)						{
HXLINE( 229)							if (hx::IsNotNull( b->charBuf )) {
HXLINE( 229)								b->flush();
            							}
HXDLIN( 229)							if (hx::IsNull( b->b )) {
HXLINE( 229)								b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6d544b62_8,1);
            							}
            							else {
HXLINE( 229)								b->b->push(HX_(" (",08,1c,00,00));
            							}
            						}
            					}
HXLINE( 231)					{
HXLINE( 231)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 231)							b->flush();
            						}
HXDLIN( 231)						if (hx::IsNull( b->b )) {
HXLINE( 231)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(file));
            						}
            						else {
HXLINE( 231)							::Array< ::String > b2 = b->b;
HXDLIN( 231)							b2->push(::Std_obj::string(file));
            						}
            					}
HXLINE( 232)					{
HXLINE( 232)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 232)							b->flush();
            						}
HXDLIN( 232)						if (hx::IsNull( b->b )) {
HXLINE( 232)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6d544b62_9,1);
            						}
            						else {
HXLINE( 232)							b->b->push(HX_(" line ",8c,69,6d,40));
            						}
            					}
HXLINE( 233)					{
HXLINE( 233)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 233)							b->flush();
            						}
HXDLIN( 233)						if (hx::IsNull( b->b )) {
HXLINE( 233)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(line));
            						}
            						else {
HXLINE( 233)							::Array< ::String > b3 = b->b;
HXDLIN( 233)							b3->push(::Std_obj::string(line));
            						}
            					}
HXLINE( 234)					if (hx::IsNotNull( s1 )) {
HXLINE( 234)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 234)							b->flush();
            						}
HXDLIN( 234)						if (hx::IsNull( b->b )) {
HXLINE( 234)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6d544b62_10,1);
            						}
            						else {
HXLINE( 234)							b->b->push(HX_(")",29,00,00,00));
            						}
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 235)				::String meth = s->_hx_getString(1);
HXDLIN( 235)				::String cname = s->_hx_getString(0);
HXDLIN( 235)				{
HXLINE( 236)					{
HXLINE( 236)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 236)							b->flush();
            						}
HXDLIN( 236)						if (hx::IsNull( b->b )) {
HXLINE( 236)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(cname));
            						}
            						else {
HXLINE( 236)							::Array< ::String > b4 = b->b;
HXDLIN( 236)							b4->push(::Std_obj::string(cname));
            						}
            					}
HXLINE( 237)					{
HXLINE( 237)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 237)							b->flush();
            						}
HXDLIN( 237)						if (hx::IsNull( b->b )) {
HXLINE( 237)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6d544b62_11,1);
            						}
            						else {
HXLINE( 237)							b->b->push(HX_(".",2e,00,00,00));
            						}
            					}
HXLINE( 238)					{
HXLINE( 238)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 238)							b->flush();
            						}
HXDLIN( 238)						if (hx::IsNull( b->b )) {
HXLINE( 238)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(meth));
            						}
            						else {
HXLINE( 238)							::Array< ::String > b5 = b->b;
HXDLIN( 238)							b5->push(::Std_obj::string(meth));
            						}
            					}
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 239)				 ::Dynamic n = s->_hx_getObject(0);
HXDLIN( 239)				{
HXLINE( 240)					{
HXLINE( 240)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 240)							b->flush();
            						}
HXDLIN( 240)						if (hx::IsNull( b->b )) {
HXLINE( 240)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6d544b62_12,1);
            						}
            						else {
HXLINE( 240)							b->b->push(HX_("local function #",b0,cd,97,ff));
            						}
            					}
HXLINE( 241)					{
HXLINE( 241)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 241)							b->flush();
            						}
HXDLIN( 241)						if (hx::IsNull( b->b )) {
HXLINE( 241)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(n));
            						}
            						else {
HXLINE( 241)							::Array< ::String > b6 = b->b;
HXDLIN( 241)							b6->push(::Std_obj::string(n));
            						}
            					}
            				}
            			}
            			break;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CallStack_obj,itemToString,(void))

::Array< ::Dynamic> CallStack_obj::makeStack(::Array< ::String > s){
            	HX_STACKFRAME(&_hx_pos_f7127803d415e941_246_makeStack)
HXLINE( 293)		::Array< ::String > stack = s;
HXLINE( 294)		::Array< ::Dynamic> m = ::Array_obj< ::Dynamic>::__new();
HXLINE( 295)		{
HXLINE( 295)			int _g = (int)0;
HXDLIN( 295)			while((_g < stack->length)){
HXLINE( 295)				::String func = stack->__get(_g);
HXDLIN( 295)				_g = (_g + (int)1);
HXLINE( 296)				::Array< ::String > words = func.split(HX_("::",c0,32,00,00));
HXLINE( 297)				if ((words->length == (int)0)) {
HXLINE( 298)					m->push(::haxe::StackItem_obj::CFunction_dyn());
            				}
            				else {
HXLINE( 299)					if ((words->length == (int)2)) {
HXLINE( 300)						m->push(::haxe::StackItem_obj::Method(words->__get((int)0),words->__get((int)1)));
            					}
            					else {
HXLINE( 301)						if ((words->length == (int)4)) {
HXLINE( 302)							 ::haxe::StackItem _hx_tmp = ::haxe::StackItem_obj::Method(words->__get((int)0),words->__get((int)1));
HXDLIN( 302)							m->push(::haxe::StackItem_obj::FilePos(_hx_tmp,words->__get((int)2),::Std_obj::parseInt(words->__get((int)3))));
            						}
            					}
            				}
            			}
            		}
HXLINE( 304)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_obj,makeStack,return )


CallStack_obj::CallStack_obj()
{
}

bool CallStack_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"callStack") ) { outValue = callStack_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"makeStack") ) { outValue = makeStack_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"itemToString") ) { outValue = itemToString_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"exceptionStack") ) { outValue = exceptionStack_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CallStack_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *CallStack_obj_sStaticStorageInfo = 0;
#endif

static void CallStack_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CallStack_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CallStack_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CallStack_obj::__mClass,"__mClass");
};

#endif

hx::Class CallStack_obj::__mClass;

static ::String CallStack_obj_sStaticFields[] = {
	HX_HCSTRING("callStack","\xca","\xc1","\x4a","\x10"),
	HX_HCSTRING("exceptionStack","\x79","\x48","\x56","\x0b"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("itemToString","\xdf","\x1c","\x98","\x1c"),
	HX_HCSTRING("makeStack","\x7a","\xde","\xa3","\x57"),
	::String(null())
};

void CallStack_obj::__register()
{
	hx::Object *dummy = new CallStack_obj;
	CallStack_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.CallStack","\x62","\x4b","\x54","\x6d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CallStack_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CallStack_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CallStack_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CallStack_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CallStack_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CallStack_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CallStack_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
